// deno-fmt-ignore-file
import { id, params, TLObject, paramDesc, flags, name } from "./1_tl_object.js";
export class Type_ extends TLObject {
}
// Unknown type (generic)
export class TypeX_ extends Type_ {
    static get [name]() {
        return "TypeX";
    }
}
export class _ResPQ_ extends Type_ {
}
export class _P_Q_inner_data_ extends Type_ {
}
export class _Server_DH_Params_ extends Type_ {
}
export class _Server_DH_inner_data_ extends Type_ {
}
export class _Client_DH_Inner_Data_ extends Type_ {
}
export class _Set_client_DH_params_answer_ extends Type_ {
}
export class _BindAuthKeyInner_ extends Type_ {
}
export class _RpcError_ extends Type_ {
}
export class _RpcDropAnswer_ extends Type_ {
}
export class _FutureSalt_ extends Type_ {
}
export class _FutureSalts_ extends Type_ {
}
export class _Pong_ extends Type_ {
}
export class _DestroySessionRes_ extends Type_ {
}
export class _NewSession_ extends Type_ {
}
export class _Object_ extends Type_ {
}
export class _MsgsAck_ extends Type_ {
}
export class _BadMsgNotification_ extends Type_ {
}
export class _MsgResendReq_ extends Type_ {
}
export class _MsgsStateReq_ extends Type_ {
}
export class _MsgsStateInfo_ extends Type_ {
}
export class _MsgsAllInfo_ extends Type_ {
}
export class _MsgDetailedInfo_ extends Type_ {
}
export class _DestroyAuthKeyRes_ extends Type_ {
}
export class _HttpWait_ extends Type_ {
}
export class _True_ extends Type_ {
}
export class _Error_ extends Type_ {
}
export class _Null_ extends Type_ {
}
export class _InputPeer_ extends Type_ {
}
export class _InputUser_ extends Type_ {
}
export class _InputContact_ extends Type_ {
}
export class _InputFile_ extends Type_ {
}
export class _InputMedia_ extends Type_ {
}
export class _InputChatPhoto_ extends Type_ {
}
export class _InputGeoPoint_ extends Type_ {
}
export class _InputPhoto_ extends Type_ {
}
export class _InputFileLocation_ extends Type_ {
}
export class _Peer_ extends Type_ {
}
export class _storage_FileType_ extends Type_ {
}
export class _User_ extends Type_ {
}
export class _UserProfilePhoto_ extends Type_ {
}
export class _UserStatus_ extends Type_ {
}
export class _Chat_ extends Type_ {
}
export class _ChatFull_ extends Type_ {
}
export class _ChatParticipant_ extends Type_ {
}
export class _ChatParticipants_ extends Type_ {
}
export class _ChatPhoto_ extends Type_ {
}
export class _Message_ extends Type_ {
}
export class _MessageMedia_ extends Type_ {
}
export class _MessageAction_ extends Type_ {
}
export class _Dialog_ extends Type_ {
}
export class _Photo_ extends Type_ {
}
export class _PhotoSize_ extends Type_ {
}
export class _GeoPoint_ extends Type_ {
}
export class _auth_SentCode_ extends Type_ {
}
export class _auth_Authorization_ extends Type_ {
}
export class _auth_ExportedAuthorization_ extends Type_ {
}
export class _InputNotifyPeer_ extends Type_ {
}
export class _InputPeerNotifySettings_ extends Type_ {
}
export class _PeerNotifySettings_ extends Type_ {
}
export class _PeerSettings_ extends Type_ {
}
export class _WallPaper_ extends Type_ {
}
export class _ReportReason_ extends Type_ {
}
export class _UserFull_ extends Type_ {
}
export class _Contact_ extends Type_ {
}
export class _ImportedContact_ extends Type_ {
}
export class _ContactStatus_ extends Type_ {
}
export class _contacts_Contacts_ extends Type_ {
}
export class _contacts_ImportedContacts_ extends Type_ {
}
export class _contacts_Blocked_ extends Type_ {
}
export class _messages_Dialogs_ extends Type_ {
}
export class _messages_Messages_ extends Type_ {
}
export class _messages_Chats_ extends Type_ {
}
export class _messages_ChatFull_ extends Type_ {
}
export class _messages_AffectedHistory_ extends Type_ {
}
export class _MessagesFilter_ extends Type_ {
}
export class _Update_ extends Type_ {
}
export class _updates_State_ extends Type_ {
}
export class _updates_Difference_ extends Type_ {
}
export class _Updates_ extends Type_ {
}
export class _photos_Photos_ extends Type_ {
}
export class _photos_Photo_ extends Type_ {
}
export class _upload_File_ extends Type_ {
}
export class _DcOption_ extends Type_ {
}
export class _Config_ extends Type_ {
}
export class _NearestDc_ extends Type_ {
}
export class _help_AppUpdate_ extends Type_ {
}
export class _help_InviteText_ extends Type_ {
}
export class _EncryptedChat_ extends Type_ {
}
export class _InputEncryptedChat_ extends Type_ {
}
export class _EncryptedFile_ extends Type_ {
}
export class _InputEncryptedFile_ extends Type_ {
}
export class _EncryptedMessage_ extends Type_ {
}
export class _messages_DhConfig_ extends Type_ {
}
export class _messages_SentEncryptedMessage_ extends Type_ {
}
export class _InputDocument_ extends Type_ {
}
export class _Document_ extends Type_ {
}
export class _help_Support_ extends Type_ {
}
export class _NotifyPeer_ extends Type_ {
}
export class _SendMessageAction_ extends Type_ {
}
export class _contacts_Found_ extends Type_ {
}
export class _InputPrivacyKey_ extends Type_ {
}
export class _PrivacyKey_ extends Type_ {
}
export class _InputPrivacyRule_ extends Type_ {
}
export class _PrivacyRule_ extends Type_ {
}
export class _account_PrivacyRules_ extends Type_ {
}
export class _AccountDaysTTL_ extends Type_ {
}
export class _DocumentAttribute_ extends Type_ {
}
export class _messages_Stickers_ extends Type_ {
}
export class _StickerPack_ extends Type_ {
}
export class _messages_AllStickers_ extends Type_ {
}
export class _messages_AffectedMessages_ extends Type_ {
}
export class _WebPage_ extends Type_ {
}
export class _Authorization_ extends Type_ {
}
export class _account_Authorizations_ extends Type_ {
}
export class _account_Password_ extends Type_ {
}
export class _account_PasswordSettings_ extends Type_ {
}
export class _account_PasswordInputSettings_ extends Type_ {
}
export class _auth_PasswordRecovery_ extends Type_ {
}
export class _ReceivedNotifyMessage_ extends Type_ {
}
export class _ExportedChatInvite_ extends Type_ {
}
export class _ChatInvite_ extends Type_ {
}
export class _InputStickerSet_ extends Type_ {
}
export class _StickerSet_ extends Type_ {
}
export class _messages_StickerSet_ extends Type_ {
}
export class _BotCommand_ extends Type_ {
}
export class _BotInfo_ extends Type_ {
}
export class _KeyboardButton_ extends Type_ {
}
export class _KeyboardButtonRow_ extends Type_ {
}
export class _ReplyMarkup_ extends Type_ {
}
export class _MessageEntity_ extends Type_ {
}
export class _InputChannel_ extends Type_ {
}
export class _contacts_ResolvedPeer_ extends Type_ {
}
export class _MessageRange_ extends Type_ {
}
export class _updates_ChannelDifference_ extends Type_ {
}
export class _ChannelMessagesFilter_ extends Type_ {
}
export class _ChannelParticipant_ extends Type_ {
}
export class _ChannelParticipantsFilter_ extends Type_ {
}
export class _channels_ChannelParticipants_ extends Type_ {
}
export class _channels_ChannelParticipant_ extends Type_ {
}
export class _help_TermsOfService_ extends Type_ {
}
export class _messages_SavedGifs_ extends Type_ {
}
export class _InputBotInlineMessage_ extends Type_ {
}
export class _InputBotInlineResult_ extends Type_ {
}
export class _BotInlineMessage_ extends Type_ {
}
export class _BotInlineResult_ extends Type_ {
}
export class _messages_BotResults_ extends Type_ {
}
export class _ExportedMessageLink_ extends Type_ {
}
export class _MessageFwdHeader_ extends Type_ {
}
export class _auth_CodeType_ extends Type_ {
}
export class _auth_SentCodeType_ extends Type_ {
}
export class _messages_BotCallbackAnswer_ extends Type_ {
}
export class _messages_MessageEditData_ extends Type_ {
}
export class _InputBotInlineMessageID_ extends Type_ {
}
export class _InlineBotSwitchPM_ extends Type_ {
}
export class _messages_PeerDialogs_ extends Type_ {
}
export class _TopPeer_ extends Type_ {
}
export class _TopPeerCategory_ extends Type_ {
}
export class _TopPeerCategoryPeers_ extends Type_ {
}
export class _contacts_TopPeers_ extends Type_ {
}
export class _DraftMessage_ extends Type_ {
}
export class _messages_FeaturedStickers_ extends Type_ {
}
export class _messages_RecentStickers_ extends Type_ {
}
export class _messages_ArchivedStickers_ extends Type_ {
}
export class _messages_StickerSetInstallResult_ extends Type_ {
}
export class _StickerSetCovered_ extends Type_ {
}
export class _MaskCoords_ extends Type_ {
}
export class _InputStickeredMedia_ extends Type_ {
}
export class _Game_ extends Type_ {
}
export class _InputGame_ extends Type_ {
}
export class _HighScore_ extends Type_ {
}
export class _messages_HighScores_ extends Type_ {
}
export class _RichText_ extends Type_ {
}
export class _PageBlock_ extends Type_ {
}
export class _PhoneCallDiscardReason_ extends Type_ {
}
export class _DataJSON_ extends Type_ {
}
export class _LabeledPrice_ extends Type_ {
}
export class _Invoice_ extends Type_ {
}
export class _PaymentCharge_ extends Type_ {
}
export class _PostAddress_ extends Type_ {
}
export class _PaymentRequestedInfo_ extends Type_ {
}
export class _PaymentSavedCredentials_ extends Type_ {
}
export class _WebDocument_ extends Type_ {
}
export class _InputWebDocument_ extends Type_ {
}
export class _InputWebFileLocation_ extends Type_ {
}
export class _upload_WebFile_ extends Type_ {
}
export class _payments_PaymentForm_ extends Type_ {
}
export class _payments_ValidatedRequestedInfo_ extends Type_ {
}
export class _payments_PaymentResult_ extends Type_ {
}
export class _payments_PaymentReceipt_ extends Type_ {
}
export class _payments_SavedInfo_ extends Type_ {
}
export class _InputPaymentCredentials_ extends Type_ {
}
export class _account_TmpPassword_ extends Type_ {
}
export class _ShippingOption_ extends Type_ {
}
export class _InputStickerSetItem_ extends Type_ {
}
export class _InputPhoneCall_ extends Type_ {
}
export class _PhoneCall_ extends Type_ {
}
export class _PhoneConnection_ extends Type_ {
}
export class _PhoneCallProtocol_ extends Type_ {
}
export class _phone_PhoneCall_ extends Type_ {
}
export class _upload_CdnFile_ extends Type_ {
}
export class _CdnPublicKey_ extends Type_ {
}
export class _CdnConfig_ extends Type_ {
}
export class _LangPackString_ extends Type_ {
}
export class _LangPackDifference_ extends Type_ {
}
export class _LangPackLanguage_ extends Type_ {
}
export class _ChannelAdminLogEventAction_ extends Type_ {
}
export class _ChannelAdminLogEvent_ extends Type_ {
}
export class _channels_AdminLogResults_ extends Type_ {
}
export class _ChannelAdminLogEventsFilter_ extends Type_ {
}
export class _PopularContact_ extends Type_ {
}
export class _messages_FavedStickers_ extends Type_ {
}
export class _RecentMeUrl_ extends Type_ {
}
export class _help_RecentMeUrls_ extends Type_ {
}
export class _InputSingleMedia_ extends Type_ {
}
export class _WebAuthorization_ extends Type_ {
}
export class _account_WebAuthorizations_ extends Type_ {
}
export class _InputMessage_ extends Type_ {
}
export class _InputDialogPeer_ extends Type_ {
}
export class _DialogPeer_ extends Type_ {
}
export class _messages_FoundStickerSets_ extends Type_ {
}
export class _FileHash_ extends Type_ {
}
export class _InputClientProxy_ extends Type_ {
}
export class _help_TermsOfServiceUpdate_ extends Type_ {
}
export class _InputSecureFile_ extends Type_ {
}
export class _SecureFile_ extends Type_ {
}
export class _SecureData_ extends Type_ {
}
export class _SecurePlainData_ extends Type_ {
}
export class _SecureValueType_ extends Type_ {
}
export class _SecureValue_ extends Type_ {
}
export class _InputSecureValue_ extends Type_ {
}
export class _SecureValueHash_ extends Type_ {
}
export class _SecureValueError_ extends Type_ {
}
export class _SecureCredentialsEncrypted_ extends Type_ {
}
export class _account_AuthorizationForm_ extends Type_ {
}
export class _account_SentEmailCode_ extends Type_ {
}
export class _help_DeepLinkInfo_ extends Type_ {
}
export class _SavedContact_ extends Type_ {
}
export class _account_Takeout_ extends Type_ {
}
export class _PasswordKdfAlgo_ extends Type_ {
}
export class _SecurePasswordKdfAlgo_ extends Type_ {
}
export class _SecureSecretSettings_ extends Type_ {
}
export class _InputCheckPasswordSRP_ extends Type_ {
}
export class _SecureRequiredType_ extends Type_ {
}
export class _help_PassportConfig_ extends Type_ {
}
export class _InputAppEvent_ extends Type_ {
}
export class _JSONObjectValue_ extends Type_ {
}
export class _JSONValue_ extends Type_ {
}
export class _PageTableCell_ extends Type_ {
}
export class _PageTableRow_ extends Type_ {
}
export class _PageCaption_ extends Type_ {
}
export class _PageListItem_ extends Type_ {
}
export class _PageListOrderedItem_ extends Type_ {
}
export class _PageRelatedArticle_ extends Type_ {
}
export class _Page_ extends Type_ {
}
export class _help_SupportName_ extends Type_ {
}
export class _help_UserInfo_ extends Type_ {
}
export class _PollAnswer_ extends Type_ {
}
export class _Poll_ extends Type_ {
}
export class _PollAnswerVoters_ extends Type_ {
}
export class _PollResults_ extends Type_ {
}
export class _ChatOnlines_ extends Type_ {
}
export class _StatsURL_ extends Type_ {
}
export class _ChatAdminRights_ extends Type_ {
}
export class _ChatBannedRights_ extends Type_ {
}
export class _InputWallPaper_ extends Type_ {
}
export class _account_WallPapers_ extends Type_ {
}
export class _CodeSettings_ extends Type_ {
}
export class _WallPaperSettings_ extends Type_ {
}
export class _AutoDownloadSettings_ extends Type_ {
}
export class _account_AutoDownloadSettings_ extends Type_ {
}
export class _EmojiKeyword_ extends Type_ {
}
export class _EmojiKeywordsDifference_ extends Type_ {
}
export class _EmojiURL_ extends Type_ {
}
export class _EmojiLanguage_ extends Type_ {
}
export class _Folder_ extends Type_ {
}
export class _InputFolderPeer_ extends Type_ {
}
export class _FolderPeer_ extends Type_ {
}
export class _messages_SearchCounter_ extends Type_ {
}
export class _UrlAuthResult_ extends Type_ {
}
export class _ChannelLocation_ extends Type_ {
}
export class _PeerLocated_ extends Type_ {
}
export class _RestrictionReason_ extends Type_ {
}
export class _InputTheme_ extends Type_ {
}
export class _Theme_ extends Type_ {
}
export class _account_Themes_ extends Type_ {
}
export class _auth_LoginToken_ extends Type_ {
}
export class _account_ContentSettings_ extends Type_ {
}
export class _messages_InactiveChats_ extends Type_ {
}
export class _BaseTheme_ extends Type_ {
}
export class _InputThemeSettings_ extends Type_ {
}
export class _ThemeSettings_ extends Type_ {
}
export class _WebPageAttribute_ extends Type_ {
}
export class _messages_VotesList_ extends Type_ {
}
export class _BankCardOpenUrl_ extends Type_ {
}
export class _payments_BankCardData_ extends Type_ {
}
export class _DialogFilter_ extends Type_ {
}
export class _DialogFilterSuggested_ extends Type_ {
}
export class _StatsDateRangeDays_ extends Type_ {
}
export class _StatsAbsValueAndPrev_ extends Type_ {
}
export class _StatsPercentValue_ extends Type_ {
}
export class _StatsGraph_ extends Type_ {
}
export class _stats_BroadcastStats_ extends Type_ {
}
export class _help_PromoData_ extends Type_ {
}
export class _VideoSize_ extends Type_ {
}
export class _StatsGroupTopPoster_ extends Type_ {
}
export class _StatsGroupTopAdmin_ extends Type_ {
}
export class _StatsGroupTopInviter_ extends Type_ {
}
export class _stats_MegagroupStats_ extends Type_ {
}
export class _GlobalPrivacySettings_ extends Type_ {
}
export class _help_CountryCode_ extends Type_ {
}
export class _help_Country_ extends Type_ {
}
export class _help_CountriesList_ extends Type_ {
}
export class _MessageViews_ extends Type_ {
}
export class _messages_MessageViews_ extends Type_ {
}
export class _messages_DiscussionMessage_ extends Type_ {
}
export class _MessageReplyHeader_ extends Type_ {
}
export class _MessageReplies_ extends Type_ {
}
export class _PeerBlocked_ extends Type_ {
}
export class _stats_MessageStats_ extends Type_ {
}
export class _GroupCall_ extends Type_ {
}
export class _InputGroupCall_ extends Type_ {
}
export class _GroupCallParticipant_ extends Type_ {
}
export class _phone_GroupCall_ extends Type_ {
}
export class _phone_GroupParticipants_ extends Type_ {
}
export class _InlineQueryPeerType_ extends Type_ {
}
export class _messages_HistoryImport_ extends Type_ {
}
export class _messages_HistoryImportParsed_ extends Type_ {
}
export class _messages_AffectedFoundMessages_ extends Type_ {
}
export class _ChatInviteImporter_ extends Type_ {
}
export class _messages_ExportedChatInvites_ extends Type_ {
}
export class _messages_ExportedChatInvite_ extends Type_ {
}
export class _messages_ChatInviteImporters_ extends Type_ {
}
export class _ChatAdminWithInvites_ extends Type_ {
}
export class _messages_ChatAdminsWithInvites_ extends Type_ {
}
export class _messages_CheckedHistoryImportPeer_ extends Type_ {
}
export class _phone_JoinAsPeers_ extends Type_ {
}
export class _phone_ExportedGroupCallInvite_ extends Type_ {
}
export class _GroupCallParticipantVideoSourceGroup_ extends Type_ {
}
export class _GroupCallParticipantVideo_ extends Type_ {
}
export class _stickers_SuggestedShortName_ extends Type_ {
}
export class _BotCommandScope_ extends Type_ {
}
export class _account_ResetPasswordResult_ extends Type_ {
}
export class _SponsoredMessage_ extends Type_ {
}
export class _messages_SponsoredMessages_ extends Type_ {
}
export class _SearchResultsCalendarPeriod_ extends Type_ {
}
export class _messages_SearchResultsCalendar_ extends Type_ {
}
export class _SearchResultsPosition_ extends Type_ {
}
export class _messages_SearchResultsPositions_ extends Type_ {
}
export class _channels_SendAsPeers_ extends Type_ {
}
export class _users_UserFull_ extends Type_ {
}
export class _messages_PeerSettings_ extends Type_ {
}
export class _auth_LoggedOut_ extends Type_ {
}
export class _ReactionCount_ extends Type_ {
}
export class _MessageReactions_ extends Type_ {
}
export class _messages_MessageReactionsList_ extends Type_ {
}
export class _AvailableReaction_ extends Type_ {
}
export class _messages_AvailableReactions_ extends Type_ {
}
export class _MessagePeerReaction_ extends Type_ {
}
export class _GroupCallStreamChannel_ extends Type_ {
}
export class _phone_GroupCallStreamChannels_ extends Type_ {
}
export class _phone_GroupCallStreamRtmpUrl_ extends Type_ {
}
export class _AttachMenuBotIconColor_ extends Type_ {
}
export class _AttachMenuBotIcon_ extends Type_ {
}
export class _AttachMenuBot_ extends Type_ {
}
export class _AttachMenuBots_ extends Type_ {
}
export class _AttachMenuBotsBot_ extends Type_ {
}
export class _WebViewResult_ extends Type_ {
}
export class _SimpleWebViewResult_ extends Type_ {
}
export class _WebViewMessageSent_ extends Type_ {
}
export class _BotMenuButton_ extends Type_ {
}
export class _account_SavedRingtones_ extends Type_ {
}
export class _NotificationSound_ extends Type_ {
}
export class _account_SavedRingtone_ extends Type_ {
}
export class _AttachMenuPeerType_ extends Type_ {
}
export class _InputInvoice_ extends Type_ {
}
export class _payments_ExportedInvoice_ extends Type_ {
}
export class _messages_TranscribedAudio_ extends Type_ {
}
export class _help_PremiumPromo_ extends Type_ {
}
export class _InputStorePaymentPurpose_ extends Type_ {
}
export class _PremiumGiftOption_ extends Type_ {
}
export class _PaymentFormMethod_ extends Type_ {
}
export class _EmojiStatus_ extends Type_ {
}
export class _account_EmojiStatuses_ extends Type_ {
}
export class _Reaction_ extends Type_ {
}
export class _ChatReactions_ extends Type_ {
}
export class _messages_Reactions_ extends Type_ {
}
export class _EmailVerifyPurpose_ extends Type_ {
}
export class _EmailVerification_ extends Type_ {
}
export class _account_EmailVerified_ extends Type_ {
}
export class _PremiumSubscriptionOption_ extends Type_ {
}
export class _SendAsPeer_ extends Type_ {
}
export class _MessageExtendedMedia_ extends Type_ {
}
export class _StickerKeyword_ extends Type_ {
}
export class _Username_ extends Type_ {
}
export class _ForumTopic_ extends Type_ {
}
export class _messages_ForumTopics_ extends Type_ {
}
export class _DefaultHistoryTTL_ extends Type_ {
}
export class _ExportedContactToken_ extends Type_ {
}
export class _RequestPeerType_ extends Type_ {
}
export class _EmojiList_ extends Type_ {
}
export class _EmojiGroup_ extends Type_ {
}
export class _messages_EmojiGroups_ extends Type_ {
}
export class _TextWithEntities_ extends Type_ {
}
export class _messages_TranslatedText_ extends Type_ {
}
export class _AutoSaveSettings_ extends Type_ {
}
export class _AutoSaveException_ extends Type_ {
}
export class _account_AutoSaveSettings_ extends Type_ {
}
export class _help_AppConfig_ extends Type_ {
}
export class _InputBotApp_ extends Type_ {
}
export class _BotApp_ extends Type_ {
}
export class _messages_BotApp_ extends Type_ {
}
export class _AppWebViewResult_ extends Type_ {
}
export class _InlineBotWebView_ extends Type_ {
}
export class _ReadParticipantDate_ extends Type_ {
}
export class _InputChatlist_ extends Type_ {
}
export class _ExportedChatlistInvite_ extends Type_ {
}
export class _chatlists_ExportedChatlistInvite_ extends Type_ {
}
export class _chatlists_ExportedInvites_ extends Type_ {
}
export class _chatlists_ChatlistInvite_ extends Type_ {
}
export class _chatlists_ChatlistUpdates_ extends Type_ {
}
export class _bots_BotInfo_ extends Type_ {
}
export class _MessagePeerVote_ extends Type_ {
}
export class _SponsoredWebPage_ extends Type_ {
}
export class _StoryViews_ extends Type_ {
}
export class _StoryItem_ extends Type_ {
}
export class _stories_AllStories_ extends Type_ {
}
export class _stories_Stories_ extends Type_ {
}
export class _StoryView_ extends Type_ {
}
export class _stories_StoryViewsList_ extends Type_ {
}
export class _stories_StoryViews_ extends Type_ {
}
export class _InputReplyTo_ extends Type_ {
}
export class _ExportedStoryLink_ extends Type_ {
}
export class _StoriesStealthMode_ extends Type_ {
}
export class _MediaAreaCoordinates_ extends Type_ {
}
export class _MediaArea_ extends Type_ {
}
export class _PeerStories_ extends Type_ {
}
export class _stories_PeerStories_ extends Type_ {
}
export class _messages_WebPage_ extends Type_ {
}
export class _PremiumGiftCodeOption_ extends Type_ {
}
export class _payments_CheckedGiftCode_ extends Type_ {
}
export class _payments_GiveawayInfo_ extends Type_ {
}
export class _PrepaidGiveaway_ extends Type_ {
}
export class _Boost_ extends Type_ {
}
export class _premium_BoostsList_ extends Type_ {
}
export class _MyBoost_ extends Type_ {
}
export class _premium_MyBoosts_ extends Type_ {
}
export class _premium_BoostsStatus_ extends Type_ {
}
export class _StoryFwdHeader_ extends Type_ {
}
export class _PostInteractionCounters_ extends Type_ {
}
export class _stats_StoryStats_ extends Type_ {
}
export class _PublicForward_ extends Type_ {
}
export class _stats_PublicForwards_ extends Type_ {
}
export class _PeerColor_ extends Type_ {
}
export class _help_PeerColorSet_ extends Type_ {
}
export class _help_PeerColorOption_ extends Type_ {
}
export class _help_PeerColors_ extends Type_ {
}
export class _StoryReaction_ extends Type_ {
}
export class _stories_StoryReactionsList_ extends Type_ {
}
export class _SavedDialog_ extends Type_ {
}
export class _messages_SavedDialogs_ extends Type_ {
}
export class _SavedReactionTag_ extends Type_ {
}
export class _messages_SavedReactionTags_ extends Type_ {
}
export class _OutboxReadDate_ extends Type_ {
}
export class _smsjobs_EligibilityToJoin_ extends Type_ {
}
export class _smsjobs_Status_ extends Type_ {
}
export class _SmsJob_ extends Type_ {
}
export class _BusinessWeeklyOpen_ extends Type_ {
}
export class _BusinessWorkHours_ extends Type_ {
}
export class _BusinessLocation_ extends Type_ {
}
export class _InputBusinessRecipients_ extends Type_ {
}
export class _BusinessRecipients_ extends Type_ {
}
export class _BusinessAwayMessageSchedule_ extends Type_ {
}
export class _InputBusinessGreetingMessage_ extends Type_ {
}
export class _BusinessGreetingMessage_ extends Type_ {
}
export class _InputBusinessAwayMessage_ extends Type_ {
}
export class _BusinessAwayMessage_ extends Type_ {
}
export class _Timezone_ extends Type_ {
}
export class _help_TimezonesList_ extends Type_ {
}
export class _QuickReply_ extends Type_ {
}
export class _InputQuickReplyShortcut_ extends Type_ {
}
export class _messages_QuickReplies_ extends Type_ {
}
export class _ConnectedBot_ extends Type_ {
}
export class _account_ConnectedBots_ extends Type_ {
}
export class _messages_DialogFilters_ extends Type_ {
}
export class ResPQ_ extends _ResPQ_ {
    get [id]() {
        return 0x05162463;
    }
    static get [name]() {
        return "resPQ";
    }
    static get [paramDesc]() {
        return [
            ["nonce", "bigint", "int128"],
            ["server_nonce", "bigint", "int128"],
            ["pq", Uint8Array, "bytes"],
            ["server_public_key_fingerprints", ["bigint"], "Vector<long>"],
        ];
    }
    get [params]() {
        return [
            [this.nonce, "bigint", "int128"],
            [this.server_nonce, "bigint", "int128"],
            [this.pq, Uint8Array, "bytes"],
            [this.server_public_key_fingerprints, ["bigint"], "Vector<long>"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "nonce", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "server_nonce", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "pq", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "server_public_key_fingerprints", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.nonce = params.nonce;
        this.server_nonce = params.server_nonce;
        this.pq = params.pq;
        this.server_public_key_fingerprints = params.server_public_key_fingerprints;
    }
}
export class P_q_inner_data_dc_ extends _P_Q_inner_data_ {
    get [id]() {
        return 0xA9F55F95;
    }
    static get [name]() {
        return "p_q_inner_data_dc";
    }
    static get [paramDesc]() {
        return [
            ["pq", Uint8Array, "bytes"],
            ["p", Uint8Array, "bytes"],
            ["q", Uint8Array, "bytes"],
            ["nonce", "bigint", "int128"],
            ["server_nonce", "bigint", "int128"],
            ["new_nonce", "bigint", "int256"],
            ["dc", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.pq, Uint8Array, "bytes"],
            [this.p, Uint8Array, "bytes"],
            [this.q, Uint8Array, "bytes"],
            [this.nonce, "bigint", "int128"],
            [this.server_nonce, "bigint", "int128"],
            [this.new_nonce, "bigint", "int256"],
            [this.dc, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "pq", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "p", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "q", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "nonce", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "server_nonce", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "new_nonce", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "dc", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.pq = params.pq;
        this.p = params.p;
        this.q = params.q;
        this.nonce = params.nonce;
        this.server_nonce = params.server_nonce;
        this.new_nonce = params.new_nonce;
        this.dc = params.dc;
    }
}
export class P_q_inner_data_temp_dc_ extends _P_Q_inner_data_ {
    get [id]() {
        return 0x56FDDF88;
    }
    static get [name]() {
        return "p_q_inner_data_temp_dc";
    }
    static get [paramDesc]() {
        return [
            ["pq", Uint8Array, "bytes"],
            ["p", Uint8Array, "bytes"],
            ["q", Uint8Array, "bytes"],
            ["nonce", "bigint", "int128"],
            ["server_nonce", "bigint", "int128"],
            ["new_nonce", "bigint", "int256"],
            ["dc", "number", "int"],
            ["expires_in", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.pq, Uint8Array, "bytes"],
            [this.p, Uint8Array, "bytes"],
            [this.q, Uint8Array, "bytes"],
            [this.nonce, "bigint", "int128"],
            [this.server_nonce, "bigint", "int128"],
            [this.new_nonce, "bigint", "int256"],
            [this.dc, "number", "int"],
            [this.expires_in, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "pq", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "p", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "q", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "nonce", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "server_nonce", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "new_nonce", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "dc", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "expires_in", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.pq = params.pq;
        this.p = params.p;
        this.q = params.q;
        this.nonce = params.nonce;
        this.server_nonce = params.server_nonce;
        this.new_nonce = params.new_nonce;
        this.dc = params.dc;
        this.expires_in = params.expires_in;
    }
}
export class Server_DH_params_ok_ extends _Server_DH_Params_ {
    get [id]() {
        return 0xD0E8075C;
    }
    static get [name]() {
        return "server_DH_params_ok";
    }
    static get [paramDesc]() {
        return [
            ["nonce", "bigint", "int128"],
            ["server_nonce", "bigint", "int128"],
            ["encrypted_answer", Uint8Array, "bytes"],
        ];
    }
    get [params]() {
        return [
            [this.nonce, "bigint", "int128"],
            [this.server_nonce, "bigint", "int128"],
            [this.encrypted_answer, Uint8Array, "bytes"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "nonce", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "server_nonce", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "encrypted_answer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.nonce = params.nonce;
        this.server_nonce = params.server_nonce;
        this.encrypted_answer = params.encrypted_answer;
    }
}
export class Server_DH_inner_data_ extends _Server_DH_inner_data_ {
    get [id]() {
        return 0xB5890DBA;
    }
    static get [name]() {
        return "server_DH_inner_data";
    }
    static get [paramDesc]() {
        return [
            ["nonce", "bigint", "int128"],
            ["server_nonce", "bigint", "int128"],
            ["g", "number", "int"],
            ["dh_prime", Uint8Array, "bytes"],
            ["g_a", Uint8Array, "bytes"],
            ["server_time", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.nonce, "bigint", "int128"],
            [this.server_nonce, "bigint", "int128"],
            [this.g, "number", "int"],
            [this.dh_prime, Uint8Array, "bytes"],
            [this.g_a, Uint8Array, "bytes"],
            [this.server_time, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "nonce", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "server_nonce", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "g", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "dh_prime", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "g_a", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "server_time", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.nonce = params.nonce;
        this.server_nonce = params.server_nonce;
        this.g = params.g;
        this.dh_prime = params.dh_prime;
        this.g_a = params.g_a;
        this.server_time = params.server_time;
    }
}
export class Client_DH_inner_data_ extends _Client_DH_Inner_Data_ {
    get [id]() {
        return 0x6643B654;
    }
    static get [name]() {
        return "client_DH_inner_data";
    }
    static get [paramDesc]() {
        return [
            ["nonce", "bigint", "int128"],
            ["server_nonce", "bigint", "int128"],
            ["retry_id", "bigint", "long"],
            ["g_b", Uint8Array, "bytes"],
        ];
    }
    get [params]() {
        return [
            [this.nonce, "bigint", "int128"],
            [this.server_nonce, "bigint", "int128"],
            [this.retry_id, "bigint", "long"],
            [this.g_b, Uint8Array, "bytes"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "nonce", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "server_nonce", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "retry_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "g_b", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.nonce = params.nonce;
        this.server_nonce = params.server_nonce;
        this.retry_id = params.retry_id;
        this.g_b = params.g_b;
    }
}
export class Dh_gen_ok_ extends _Set_client_DH_params_answer_ {
    get [id]() {
        return 0x3BCBF734;
    }
    static get [name]() {
        return "dh_gen_ok";
    }
    static get [paramDesc]() {
        return [
            ["nonce", "bigint", "int128"],
            ["server_nonce", "bigint", "int128"],
            ["new_nonce_hash1", "bigint", "int128"],
        ];
    }
    get [params]() {
        return [
            [this.nonce, "bigint", "int128"],
            [this.server_nonce, "bigint", "int128"],
            [this.new_nonce_hash1, "bigint", "int128"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "nonce", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "server_nonce", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "new_nonce_hash1", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.nonce = params.nonce;
        this.server_nonce = params.server_nonce;
        this.new_nonce_hash1 = params.new_nonce_hash1;
    }
}
export class Dh_gen_retry_ extends _Set_client_DH_params_answer_ {
    get [id]() {
        return 0x46DC1FB9;
    }
    static get [name]() {
        return "dh_gen_retry";
    }
    static get [paramDesc]() {
        return [
            ["nonce", "bigint", "int128"],
            ["server_nonce", "bigint", "int128"],
            ["new_nonce_hash2", "bigint", "int128"],
        ];
    }
    get [params]() {
        return [
            [this.nonce, "bigint", "int128"],
            [this.server_nonce, "bigint", "int128"],
            [this.new_nonce_hash2, "bigint", "int128"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "nonce", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "server_nonce", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "new_nonce_hash2", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.nonce = params.nonce;
        this.server_nonce = params.server_nonce;
        this.new_nonce_hash2 = params.new_nonce_hash2;
    }
}
export class Dh_gen_fail_ extends _Set_client_DH_params_answer_ {
    get [id]() {
        return 0xA69DAE02;
    }
    static get [name]() {
        return "dh_gen_fail";
    }
    static get [paramDesc]() {
        return [
            ["nonce", "bigint", "int128"],
            ["server_nonce", "bigint", "int128"],
            ["new_nonce_hash3", "bigint", "int128"],
        ];
    }
    get [params]() {
        return [
            [this.nonce, "bigint", "int128"],
            [this.server_nonce, "bigint", "int128"],
            [this.new_nonce_hash3, "bigint", "int128"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "nonce", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "server_nonce", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "new_nonce_hash3", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.nonce = params.nonce;
        this.server_nonce = params.server_nonce;
        this.new_nonce_hash3 = params.new_nonce_hash3;
    }
}
export class Bind_auth_key_inner_ extends _BindAuthKeyInner_ {
    get [id]() {
        return 0x75A3F765;
    }
    static get [name]() {
        return "bind_auth_key_inner";
    }
    static get [paramDesc]() {
        return [
            ["nonce", "bigint", "long"],
            ["temp_auth_key_id", "bigint", "long"],
            ["perm_auth_key_id", "bigint", "long"],
            ["temp_session_id", "bigint", "long"],
            ["expires_at", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.nonce, "bigint", "long"],
            [this.temp_auth_key_id, "bigint", "long"],
            [this.perm_auth_key_id, "bigint", "long"],
            [this.temp_session_id, "bigint", "long"],
            [this.expires_at, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "nonce", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "temp_auth_key_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "perm_auth_key_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "temp_session_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "expires_at", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.nonce = params.nonce;
        this.temp_auth_key_id = params.temp_auth_key_id;
        this.perm_auth_key_id = params.perm_auth_key_id;
        this.temp_session_id = params.temp_session_id;
        this.expires_at = params.expires_at;
    }
}
export class Rpc_error_ extends _RpcError_ {
    get [id]() {
        return 0x2144CA19;
    }
    static get [name]() {
        return "rpc_error";
    }
    static get [paramDesc]() {
        return [
            ["error_code", "number", "int"],
            ["error_message", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.error_code, "number", "int"],
            [this.error_message, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "error_code", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "error_message", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.error_code = params.error_code;
        this.error_message = params.error_message;
    }
}
export class Rpc_answer_unknown_ extends _RpcDropAnswer_ {
    get [id]() {
        return 0x5E2AD36E;
    }
    static get [name]() {
        return "rpc_answer_unknown";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
export class Rpc_answer_dropped_running_ extends _RpcDropAnswer_ {
    get [id]() {
        return 0xCD78E586;
    }
    static get [name]() {
        return "rpc_answer_dropped_running";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
export class Rpc_answer_dropped_ extends _RpcDropAnswer_ {
    get [id]() {
        return 0xA43AD8B7;
    }
    static get [name]() {
        return "rpc_answer_dropped";
    }
    static get [paramDesc]() {
        return [
            ["msg_id", "bigint", "long"],
            ["seq_no", "number", "int"],
            ["bytes", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.msg_id, "bigint", "long"],
            [this.seq_no, "number", "int"],
            [this.bytes, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "msg_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "seq_no", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "bytes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.msg_id = params.msg_id;
        this.seq_no = params.seq_no;
        this.bytes = params.bytes;
    }
}
export class Future_salt_ extends _FutureSalt_ {
    get [id]() {
        return 0x0949D9DC;
    }
    static get [name]() {
        return "future_salt";
    }
    static get [paramDesc]() {
        return [
            ["valid_since", "number", "int"],
            ["valid_until", "number", "int"],
            ["salt", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.valid_since, "number", "int"],
            [this.valid_until, "number", "int"],
            [this.salt, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "valid_since", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "valid_until", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "salt", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.valid_since = params.valid_since;
        this.valid_until = params.valid_until;
        this.salt = params.salt;
    }
}
export class Future_salts_ extends _FutureSalts_ {
    get [id]() {
        return 0xAE500895;
    }
    static get [name]() {
        return "future_salts";
    }
    static get [paramDesc]() {
        return [
            ["req_msg_id", "bigint", "long"],
            ["now", "number", "int"],
            ["salts", [_FutureSalt_], "vector<FutureSalt>"],
        ];
    }
    get [params]() {
        return [
            [this.req_msg_id, "bigint", "long"],
            [this.now, "number", "int"],
            [this.salts, [_FutureSalt_], "vector<FutureSalt>"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "req_msg_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "now", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "salts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.req_msg_id = params.req_msg_id;
        this.now = params.now;
        this.salts = params.salts;
    }
}
export class Pong_ extends _Pong_ {
    get [id]() {
        return 0x347773C5;
    }
    static get [name]() {
        return "pong";
    }
    static get [paramDesc]() {
        return [
            ["msg_id", "bigint", "long"],
            ["ping_id", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.msg_id, "bigint", "long"],
            [this.ping_id, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "msg_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "ping_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.msg_id = params.msg_id;
        this.ping_id = params.ping_id;
    }
}
export class Destroy_session_ok_ extends _DestroySessionRes_ {
    get [id]() {
        return 0xE22045FC;
    }
    static get [name]() {
        return "destroy_session_ok";
    }
    static get [paramDesc]() {
        return [
            ["session_id", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.session_id, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "session_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.session_id = params.session_id;
    }
}
export class Destroy_session_none_ extends _DestroySessionRes_ {
    get [id]() {
        return 0x62D350C9;
    }
    static get [name]() {
        return "destroy_session_none";
    }
    static get [paramDesc]() {
        return [
            ["session_id", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.session_id, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "session_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.session_id = params.session_id;
    }
}
export class New_session_created_ extends _NewSession_ {
    get [id]() {
        return 0x9EC20908;
    }
    static get [name]() {
        return "new_session_created";
    }
    static get [paramDesc]() {
        return [
            ["first_msg_id", "bigint", "long"],
            ["unique_id", "bigint", "long"],
            ["server_salt", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.first_msg_id, "bigint", "long"],
            [this.unique_id, "bigint", "long"],
            [this.server_salt, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "first_msg_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "unique_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "server_salt", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.first_msg_id = params.first_msg_id;
        this.unique_id = params.unique_id;
        this.server_salt = params.server_salt;
    }
}
export class Gzip_packed_ extends _Object_ {
    get [id]() {
        return 0x3072CFA1;
    }
    static get [name]() {
        return "gzip_packed";
    }
    static get [paramDesc]() {
        return [
            ["packed_data", Uint8Array, "bytes"],
        ];
    }
    get [params]() {
        return [
            [this.packed_data, Uint8Array, "bytes"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "packed_data", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.packed_data = params.packed_data;
    }
}
export class Msgs_ack_ extends _MsgsAck_ {
    get [id]() {
        return 0x62D6B459;
    }
    static get [name]() {
        return "msgs_ack";
    }
    static get [paramDesc]() {
        return [
            ["msg_ids", ["bigint"], "Vector<long>"],
        ];
    }
    get [params]() {
        return [
            [this.msg_ids, ["bigint"], "Vector<long>"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "msg_ids", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.msg_ids = params.msg_ids;
    }
}
export class Bad_msg_notification_ extends _BadMsgNotification_ {
    get [id]() {
        return 0xA7EFF811;
    }
    static get [name]() {
        return "bad_msg_notification";
    }
    static get [paramDesc]() {
        return [
            ["bad_msg_id", "bigint", "long"],
            ["bad_msg_seqno", "number", "int"],
            ["error_code", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.bad_msg_id, "bigint", "long"],
            [this.bad_msg_seqno, "number", "int"],
            [this.error_code, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "bad_msg_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "bad_msg_seqno", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "error_code", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.bad_msg_id = params.bad_msg_id;
        this.bad_msg_seqno = params.bad_msg_seqno;
        this.error_code = params.error_code;
    }
}
export class Bad_server_salt_ extends _BadMsgNotification_ {
    get [id]() {
        return 0xEDAB447B;
    }
    static get [name]() {
        return "bad_server_salt";
    }
    static get [paramDesc]() {
        return [
            ["bad_msg_id", "bigint", "long"],
            ["bad_msg_seqno", "number", "int"],
            ["error_code", "number", "int"],
            ["new_server_salt", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.bad_msg_id, "bigint", "long"],
            [this.bad_msg_seqno, "number", "int"],
            [this.error_code, "number", "int"],
            [this.new_server_salt, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "bad_msg_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "bad_msg_seqno", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "error_code", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "new_server_salt", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.bad_msg_id = params.bad_msg_id;
        this.bad_msg_seqno = params.bad_msg_seqno;
        this.error_code = params.error_code;
        this.new_server_salt = params.new_server_salt;
    }
}
export class Msg_resend_req_ extends _MsgResendReq_ {
    get [id]() {
        return 0x7D861A08;
    }
    static get [name]() {
        return "msg_resend_req";
    }
    static get [paramDesc]() {
        return [
            ["msg_ids", ["bigint"], "Vector<long>"],
        ];
    }
    get [params]() {
        return [
            [this.msg_ids, ["bigint"], "Vector<long>"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "msg_ids", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.msg_ids = params.msg_ids;
    }
}
export class Msgs_state_req_ extends _MsgsStateReq_ {
    get [id]() {
        return 0xDA69FB52;
    }
    static get [name]() {
        return "msgs_state_req";
    }
    static get [paramDesc]() {
        return [
            ["msg_ids", ["bigint"], "Vector<long>"],
        ];
    }
    get [params]() {
        return [
            [this.msg_ids, ["bigint"], "Vector<long>"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "msg_ids", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.msg_ids = params.msg_ids;
    }
}
export class Msgs_state_info_ extends _MsgsStateInfo_ {
    get [id]() {
        return 0x04DEB57D;
    }
    static get [name]() {
        return "msgs_state_info";
    }
    static get [paramDesc]() {
        return [
            ["req_msg_id", "bigint", "long"],
            ["info", Uint8Array, "bytes"],
        ];
    }
    get [params]() {
        return [
            [this.req_msg_id, "bigint", "long"],
            [this.info, Uint8Array, "bytes"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "req_msg_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "info", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.req_msg_id = params.req_msg_id;
        this.info = params.info;
    }
}
export class Msgs_all_info_ extends _MsgsAllInfo_ {
    get [id]() {
        return 0x8CC0D131;
    }
    static get [name]() {
        return "msgs_all_info";
    }
    static get [paramDesc]() {
        return [
            ["msg_ids", ["bigint"], "Vector<long>"],
            ["info", Uint8Array, "bytes"],
        ];
    }
    get [params]() {
        return [
            [this.msg_ids, ["bigint"], "Vector<long>"],
            [this.info, Uint8Array, "bytes"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "msg_ids", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "info", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.msg_ids = params.msg_ids;
        this.info = params.info;
    }
}
export class Msg_detailed_info_ extends _MsgDetailedInfo_ {
    get [id]() {
        return 0x276D3EC6;
    }
    static get [name]() {
        return "msg_detailed_info";
    }
    static get [paramDesc]() {
        return [
            ["msg_id", "bigint", "long"],
            ["answer_msg_id", "bigint", "long"],
            ["bytes", "number", "int"],
            ["status", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.msg_id, "bigint", "long"],
            [this.answer_msg_id, "bigint", "long"],
            [this.bytes, "number", "int"],
            [this.status, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "msg_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "answer_msg_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "bytes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "status", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.msg_id = params.msg_id;
        this.answer_msg_id = params.answer_msg_id;
        this.bytes = params.bytes;
        this.status = params.status;
    }
}
export class Msg_new_detailed_info_ extends _MsgDetailedInfo_ {
    get [id]() {
        return 0x809DB6DF;
    }
    static get [name]() {
        return "msg_new_detailed_info";
    }
    static get [paramDesc]() {
        return [
            ["answer_msg_id", "bigint", "long"],
            ["bytes", "number", "int"],
            ["status", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.answer_msg_id, "bigint", "long"],
            [this.bytes, "number", "int"],
            [this.status, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "answer_msg_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "bytes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "status", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.answer_msg_id = params.answer_msg_id;
        this.bytes = params.bytes;
        this.status = params.status;
    }
}
export class Destroy_auth_key_ok_ extends _DestroyAuthKeyRes_ {
    get [id]() {
        return 0xF660E1D4;
    }
    static get [name]() {
        return "destroy_auth_key_ok";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
export class Destroy_auth_key_none_ extends _DestroyAuthKeyRes_ {
    get [id]() {
        return 0x0A9F2259;
    }
    static get [name]() {
        return "destroy_auth_key_none";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
export class Destroy_auth_key_fail_ extends _DestroyAuthKeyRes_ {
    get [id]() {
        return 0xEA109B13;
    }
    static get [name]() {
        return "destroy_auth_key_fail";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
export class Http_wait_ extends _HttpWait_ {
    get [id]() {
        return 0x9299359F;
    }
    static get [name]() {
        return "http_wait";
    }
    static get [paramDesc]() {
        return [
            ["max_delay", "number", "int"],
            ["wait_after", "number", "int"],
            ["max_wait", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.max_delay, "number", "int"],
            [this.wait_after, "number", "int"],
            [this.max_wait, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "max_delay", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "wait_after", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "max_wait", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.max_delay = params.max_delay;
        this.wait_after = params.wait_after;
        this.max_wait = params.max_wait;
    }
}
/** See [predefined identifiers](https://core.telegram.org/mtproto/TL-formal#predefined-identifiers). */
export class True_ extends _True_ {
    get [id]() {
        return 0x3FEDD339;
    }
    static get [name]() {
        return "true";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Error. */
export class Error_ extends _Error_ {
    get [id]() {
        return 0xC4B9F9BB;
    }
    static get [name]() {
        return "error";
    }
    static get [paramDesc]() {
        return [
            ["code", "number", "int"],
            ["text", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.code, "number", "int"],
            [this.text, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Error code */
        Object.defineProperty(this, "code", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Message */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.code = params.code;
        this.text = params.text;
    }
}
/** Corresponds to an arbitrary empty object. */
export class Null_ extends _Null_ {
    get [id]() {
        return 0x56730BCC;
    }
    static get [name]() {
        return "null";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** An empty constructor, no user or chat is defined. */
export class InputPeerEmpty_ extends _InputPeer_ {
    get [id]() {
        return 0x7F3B18EA;
    }
    static get [name]() {
        return "inputPeerEmpty";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Defines the current user. */
export class InputPeerSelf_ extends _InputPeer_ {
    get [id]() {
        return 0x7DA07EC9;
    }
    static get [name]() {
        return "inputPeerSelf";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Defines a chat for further interaction. */
export class InputPeerChat_ extends _InputPeer_ {
    get [id]() {
        return 0x35A95CB9;
    }
    static get [name]() {
        return "inputPeerChat";
    }
    static get [paramDesc]() {
        return [
            ["chat_id", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.chat_id, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** Chat identifier */
        Object.defineProperty(this, "chat_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.chat_id = params.chat_id;
    }
}
/** Defines a user for further interaction. */
export class InputPeerUser_ extends _InputPeer_ {
    get [id]() {
        return 0xDDE8A54C;
    }
    static get [name]() {
        return "inputPeerUser";
    }
    static get [paramDesc]() {
        return [
            ["user_id", "bigint", "long"],
            ["access_hash", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.user_id, "bigint", "long"],
            [this.access_hash, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** User identifier */
        Object.defineProperty(this, "user_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** **access\_hash** value from the [user](https://core.telegram.org/constructor/user) constructor */
        Object.defineProperty(this, "access_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.user_id = params.user_id;
        this.access_hash = params.access_hash;
    }
}
/** Defines a channel for further interaction. */
export class InputPeerChannel_ extends _InputPeer_ {
    get [id]() {
        return 0x27BCBBFC;
    }
    static get [name]() {
        return "inputPeerChannel";
    }
    static get [paramDesc]() {
        return [
            ["channel_id", "bigint", "long"],
            ["access_hash", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.channel_id, "bigint", "long"],
            [this.access_hash, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** Channel identifier */
        Object.defineProperty(this, "channel_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** **access\_hash** value from the [channel](https://core.telegram.org/constructor/channel) constructor */
        Object.defineProperty(this, "access_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.channel_id = params.channel_id;
        this.access_hash = params.access_hash;
    }
}
/** Defines a [min](https://core.telegram.org/api/min) user that was seen in a certain message of a certain chat. */
export class InputPeerUserFromMessage_ extends _InputPeer_ {
    get [id]() {
        return 0xA87B0A1C;
    }
    static get [name]() {
        return "inputPeerUserFromMessage";
    }
    static get [paramDesc]() {
        return [
            ["peer", _InputPeer_, "InputPeer"],
            ["msg_id", "number", "int"],
            ["user_id", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.peer, _InputPeer_, "InputPeer"],
            [this.msg_id, "number", "int"],
            [this.user_id, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** The chat where the user was seen */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The message ID */
        Object.defineProperty(this, "msg_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The identifier of the user that was seen */
        Object.defineProperty(this, "user_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.peer = params.peer;
        this.msg_id = params.msg_id;
        this.user_id = params.user_id;
    }
}
/** Defines a [min](https://core.telegram.org/api/min) channel that was seen in a certain message of a certain chat. */
export class InputPeerChannelFromMessage_ extends _InputPeer_ {
    get [id]() {
        return 0xBD2A0840;
    }
    static get [name]() {
        return "inputPeerChannelFromMessage";
    }
    static get [paramDesc]() {
        return [
            ["peer", _InputPeer_, "InputPeer"],
            ["msg_id", "number", "int"],
            ["channel_id", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.peer, _InputPeer_, "InputPeer"],
            [this.msg_id, "number", "int"],
            [this.channel_id, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** The chat where the channel's message was seen */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The message ID */
        Object.defineProperty(this, "msg_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The identifier of the channel that was seen */
        Object.defineProperty(this, "channel_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.peer = params.peer;
        this.msg_id = params.msg_id;
        this.channel_id = params.channel_id;
    }
}
/** Empty constructor, does not define a user. */
export class InputUserEmpty_ extends _InputUser_ {
    get [id]() {
        return 0xB98886CF;
    }
    static get [name]() {
        return "inputUserEmpty";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Defines the current user. */
export class InputUserSelf_ extends _InputUser_ {
    get [id]() {
        return 0xF7C1B13F;
    }
    static get [name]() {
        return "inputUserSelf";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Defines a user for further interaction. */
export class InputUser_ extends _InputUser_ {
    get [id]() {
        return 0xF21158C6;
    }
    static get [name]() {
        return "inputUser";
    }
    static get [paramDesc]() {
        return [
            ["user_id", "bigint", "long"],
            ["access_hash", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.user_id, "bigint", "long"],
            [this.access_hash, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** User identifier */
        Object.defineProperty(this, "user_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** **access\_hash** value from the [user](https://core.telegram.org/constructor/user) constructor */
        Object.defineProperty(this, "access_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.user_id = params.user_id;
        this.access_hash = params.access_hash;
    }
}
/** Defines a [min](https://core.telegram.org/api/min) user that was seen in a certain message of a certain chat. */
export class InputUserFromMessage_ extends _InputUser_ {
    get [id]() {
        return 0x1DA448E2;
    }
    static get [name]() {
        return "inputUserFromMessage";
    }
    static get [paramDesc]() {
        return [
            ["peer", _InputPeer_, "InputPeer"],
            ["msg_id", "number", "int"],
            ["user_id", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.peer, _InputPeer_, "InputPeer"],
            [this.msg_id, "number", "int"],
            [this.user_id, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** The chat where the user was seen */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The message ID */
        Object.defineProperty(this, "msg_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The identifier of the user that was seen */
        Object.defineProperty(this, "user_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.peer = params.peer;
        this.msg_id = params.msg_id;
        this.user_id = params.user_id;
    }
}
/** Phone contact. */
export class InputPhoneContact_ extends _InputContact_ {
    get [id]() {
        return 0xF392B7F4;
    }
    static get [name]() {
        return "inputPhoneContact";
    }
    static get [paramDesc]() {
        return [
            ["client_id", "bigint", "long"],
            ["phone", "string", "string"],
            ["first_name", "string", "string"],
            ["last_name", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.client_id, "bigint", "long"],
            [this.phone, "string", "string"],
            [this.first_name, "string", "string"],
            [this.last_name, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** An arbitrary 64-bit integer: it should be set, for example, to an incremental number when using [contacts.importContacts](https://core.telegram.org/method/contacts.importContacts), in order to retry importing only the contacts that weren't imported successfully, according to the client\_ids returned in [contacts.importedContacts](https://core.telegram.org/constructor/contacts.importedContacts).`retry_contacts`. */
        Object.defineProperty(this, "client_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Phone number */
        Object.defineProperty(this, "phone", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Contact's first name */
        Object.defineProperty(this, "first_name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Contact's last name */
        Object.defineProperty(this, "last_name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.client_id = params.client_id;
        this.phone = params.phone;
        this.first_name = params.first_name;
        this.last_name = params.last_name;
    }
}
/** Defines a file saved in parts using the method [upload.saveFilePart](https://core.telegram.org/method/upload.saveFilePart). */
export class InputFile_ extends _InputFile_ {
    get [id]() {
        return 0xF52FF27F;
    }
    static get [name]() {
        return "inputFile";
    }
    static get [paramDesc]() {
        return [
            ["id", "bigint", "long"],
            ["parts", "number", "int"],
            ["name", "string", "string"],
            ["md5_checksum", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.id, "bigint", "long"],
            [this.parts, "number", "int"],
            [this.name, "string", "string"],
            [this.md5_checksum, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Random file identifier created by the client */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of parts saved */
        Object.defineProperty(this, "parts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Full name of the file */
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** In case the file's [md5-hash](https://en.wikipedia.org/wiki/MD5#MD5_hashes) was passed, contents of the file will be checked prior to use */
        Object.defineProperty(this, "md5_checksum", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
        this.parts = params.parts;
        this.name = params.name;
        this.md5_checksum = params.md5_checksum;
    }
}
/** Assigns a big file (over 10 MB in size), saved in part using the method [upload.saveBigFilePart](https://core.telegram.org/method/upload.saveBigFilePart). */
export class InputFileBig_ extends _InputFile_ {
    get [id]() {
        return 0xFA4F0BB5;
    }
    static get [name]() {
        return "inputFileBig";
    }
    static get [paramDesc]() {
        return [
            ["id", "bigint", "long"],
            ["parts", "number", "int"],
            ["name", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.id, "bigint", "long"],
            [this.parts, "number", "int"],
            [this.name, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Random file id, created by the client */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of parts saved */
        Object.defineProperty(this, "parts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Full file name */
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
        this.parts = params.parts;
        this.name = params.name;
    }
}
/** Empty media content of a message. */
export class InputMediaEmpty_ extends _InputMedia_ {
    get [id]() {
        return 0x9664F57F;
    }
    static get [name]() {
        return "inputMediaEmpty";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Photo */
export class InputMediaUploadedPhoto_ extends _InputMedia_ {
    get [id]() {
        return 0x1E287D04;
    }
    static get [name]() {
        return "inputMediaUploadedPhoto";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["spoiler", "true", "flags.2?true"],
            ["file", _InputFile_, "InputFile"],
            ["stickers", [_InputDocument_], "flags.0?Vector<InputDocument>"],
            ["ttl_seconds", "number", "flags.1?int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.spoiler ?? null, "true", "flags.2?true"],
            [this.file, _InputFile_, "InputFile"],
            [this.stickers ?? null, [_InputDocument_], "flags.0?Vector<InputDocument>"],
            [this.ttl_seconds ?? null, "number", "flags.1?int"],
        ];
    }
    constructor(params) {
        super();
        /** Whether this media should be hidden behind a spoiler warning */
        Object.defineProperty(this, "spoiler", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The [uploaded file](https://core.telegram.org/api/files) */
        Object.defineProperty(this, "file", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Attached mask stickers */
        Object.defineProperty(this, "stickers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Time to live in seconds of self-destructing photo */
        Object.defineProperty(this, "ttl_seconds", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.spoiler = params.spoiler;
        this.file = params.file;
        this.stickers = params.stickers;
        this.ttl_seconds = params.ttl_seconds;
    }
}
/** Forwarded photo */
export class InputMediaPhoto_ extends _InputMedia_ {
    get [id]() {
        return 0xB3BA0635;
    }
    static get [name]() {
        return "inputMediaPhoto";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["spoiler", "true", "flags.1?true"],
            ["id", _InputPhoto_, "InputPhoto"],
            ["ttl_seconds", "number", "flags.0?int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.spoiler ?? null, "true", "flags.1?true"],
            [this.id, _InputPhoto_, "InputPhoto"],
            [this.ttl_seconds ?? null, "number", "flags.0?int"],
        ];
    }
    constructor(params) {
        super();
        /** Whether this media should be hidden behind a spoiler warning */
        Object.defineProperty(this, "spoiler", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Photo to be forwarded */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Time to live in seconds of self-destructing photo */
        Object.defineProperty(this, "ttl_seconds", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.spoiler = params.spoiler;
        this.id = params.id;
        this.ttl_seconds = params.ttl_seconds;
    }
}
/** Map. */
export class InputMediaGeoPoint_ extends _InputMedia_ {
    get [id]() {
        return 0xF9C44144;
    }
    static get [name]() {
        return "inputMediaGeoPoint";
    }
    static get [paramDesc]() {
        return [
            ["geo_point", _InputGeoPoint_, "InputGeoPoint"],
        ];
    }
    get [params]() {
        return [
            [this.geo_point, _InputGeoPoint_, "InputGeoPoint"],
        ];
    }
    constructor(params) {
        super();
        /** GeoPoint */
        Object.defineProperty(this, "geo_point", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.geo_point = params.geo_point;
    }
}
/** Phone book contact */
export class InputMediaContact_ extends _InputMedia_ {
    get [id]() {
        return 0xF8AB7DFB;
    }
    static get [name]() {
        return "inputMediaContact";
    }
    static get [paramDesc]() {
        return [
            ["phone_number", "string", "string"],
            ["first_name", "string", "string"],
            ["last_name", "string", "string"],
            ["vcard", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.phone_number, "string", "string"],
            [this.first_name, "string", "string"],
            [this.last_name, "string", "string"],
            [this.vcard, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Phone number */
        Object.defineProperty(this, "phone_number", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Contact's first name */
        Object.defineProperty(this, "first_name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Contact's last name */
        Object.defineProperty(this, "last_name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Contact vcard */
        Object.defineProperty(this, "vcard", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.phone_number = params.phone_number;
        this.first_name = params.first_name;
        this.last_name = params.last_name;
        this.vcard = params.vcard;
    }
}
/** New document */
export class InputMediaUploadedDocument_ extends _InputMedia_ {
    get [id]() {
        return 0x5B38C6C1;
    }
    static get [name]() {
        return "inputMediaUploadedDocument";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["nosound_video", "true", "flags.3?true"],
            ["force_file", "true", "flags.4?true"],
            ["spoiler", "true", "flags.5?true"],
            ["file", _InputFile_, "InputFile"],
            ["thumb", _InputFile_, "flags.2?InputFile"],
            ["mime_type", "string", "string"],
            ["attributes", [_DocumentAttribute_], "Vector<DocumentAttribute>"],
            ["stickers", [_InputDocument_], "flags.0?Vector<InputDocument>"],
            ["ttl_seconds", "number", "flags.1?int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.nosound_video ?? null, "true", "flags.3?true"],
            [this.force_file ?? null, "true", "flags.4?true"],
            [this.spoiler ?? null, "true", "flags.5?true"],
            [this.file, _InputFile_, "InputFile"],
            [this.thumb ?? null, _InputFile_, "flags.2?InputFile"],
            [this.mime_type, "string", "string"],
            [this.attributes, [_DocumentAttribute_], "Vector<DocumentAttribute>"],
            [this.stickers ?? null, [_InputDocument_], "flags.0?Vector<InputDocument>"],
            [this.ttl_seconds ?? null, "number", "flags.1?int"],
        ];
    }
    constructor(params) {
        super();
        /** Whether the specified document is a video file with no audio tracks (a GIF animation (even as MPEG4), for example) */
        Object.defineProperty(this, "nosound_video", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Force the media file to be uploaded as document */
        Object.defineProperty(this, "force_file", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this media should be hidden behind a spoiler warning */
        Object.defineProperty(this, "spoiler", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The [uploaded file](https://core.telegram.org/api/files) */
        Object.defineProperty(this, "file", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Thumbnail of the document, uploaded as for the file */
        Object.defineProperty(this, "thumb", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** MIME type of document */
        Object.defineProperty(this, "mime_type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Attributes that specify the type of the document (video, audio, voice, sticker, etc.) */
        Object.defineProperty(this, "attributes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Attached stickers */
        Object.defineProperty(this, "stickers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Time to live in seconds of self-destructing document */
        Object.defineProperty(this, "ttl_seconds", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.nosound_video = params.nosound_video;
        this.force_file = params.force_file;
        this.spoiler = params.spoiler;
        this.file = params.file;
        this.thumb = params.thumb;
        this.mime_type = params.mime_type;
        this.attributes = params.attributes;
        this.stickers = params.stickers;
        this.ttl_seconds = params.ttl_seconds;
    }
}
/** Forwarded document */
export class InputMediaDocument_ extends _InputMedia_ {
    get [id]() {
        return 0x33473058;
    }
    static get [name]() {
        return "inputMediaDocument";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["spoiler", "true", "flags.2?true"],
            ["id", _InputDocument_, "InputDocument"],
            ["ttl_seconds", "number", "flags.0?int"],
            ["query", "string", "flags.1?string"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.spoiler ?? null, "true", "flags.2?true"],
            [this.id, _InputDocument_, "InputDocument"],
            [this.ttl_seconds ?? null, "number", "flags.0?int"],
            [this.query ?? null, "string", "flags.1?string"],
        ];
    }
    constructor(params) {
        super();
        /** Whether this media should be hidden behind a spoiler warning */
        Object.defineProperty(this, "spoiler", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The document to be forwarded. */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Time to live of self-destructing document */
        Object.defineProperty(this, "ttl_seconds", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Text query or emoji that was used by the user to find this sticker or GIF: used to improve search result relevance. */
        Object.defineProperty(this, "query", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.spoiler = params.spoiler;
        this.id = params.id;
        this.ttl_seconds = params.ttl_seconds;
        this.query = params.query;
    }
}
/** Can be used to send a venue geolocation. */
export class InputMediaVenue_ extends _InputMedia_ {
    get [id]() {
        return 0xC13D1C11;
    }
    static get [name]() {
        return "inputMediaVenue";
    }
    static get [paramDesc]() {
        return [
            ["geo_point", _InputGeoPoint_, "InputGeoPoint"],
            ["title", "string", "string"],
            ["address", "string", "string"],
            ["provider", "string", "string"],
            ["venue_id", "string", "string"],
            ["venue_type", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.geo_point, _InputGeoPoint_, "InputGeoPoint"],
            [this.title, "string", "string"],
            [this.address, "string", "string"],
            [this.provider, "string", "string"],
            [this.venue_id, "string", "string"],
            [this.venue_type, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Geolocation */
        Object.defineProperty(this, "geo_point", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Venue name */
        Object.defineProperty(this, "title", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Physical address of the venue */
        Object.defineProperty(this, "address", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Venue provider: currently only "foursquare" and "gplaces" (Google Places) need to be supported */
        Object.defineProperty(this, "provider", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Venue ID in the provider's database */
        Object.defineProperty(this, "venue_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Venue type in the provider's database */
        Object.defineProperty(this, "venue_type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.geo_point = params.geo_point;
        this.title = params.title;
        this.address = params.address;
        this.provider = params.provider;
        this.venue_id = params.venue_id;
        this.venue_type = params.venue_type;
    }
}
/** New photo that will be uploaded by the server using the specified URL */
export class InputMediaPhotoExternal_ extends _InputMedia_ {
    get [id]() {
        return 0xE5BBFE1A;
    }
    static get [name]() {
        return "inputMediaPhotoExternal";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["spoiler", "true", "flags.1?true"],
            ["url", "string", "string"],
            ["ttl_seconds", "number", "flags.0?int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.spoiler ?? null, "true", "flags.1?true"],
            [this.url, "string", "string"],
            [this.ttl_seconds ?? null, "number", "flags.0?int"],
        ];
    }
    constructor(params) {
        super();
        /** Whether this media should be hidden behind a spoiler warning */
        Object.defineProperty(this, "spoiler", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** URL of the photo */
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Self-destruct time to live of photo */
        Object.defineProperty(this, "ttl_seconds", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.spoiler = params.spoiler;
        this.url = params.url;
        this.ttl_seconds = params.ttl_seconds;
    }
}
/** Document that will be downloaded by the telegram servers */
export class InputMediaDocumentExternal_ extends _InputMedia_ {
    get [id]() {
        return 0xFB52DC99;
    }
    static get [name]() {
        return "inputMediaDocumentExternal";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["spoiler", "true", "flags.1?true"],
            ["url", "string", "string"],
            ["ttl_seconds", "number", "flags.0?int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.spoiler ?? null, "true", "flags.1?true"],
            [this.url, "string", "string"],
            [this.ttl_seconds ?? null, "number", "flags.0?int"],
        ];
    }
    constructor(params) {
        super();
        /** Whether this media should be hidden behind a spoiler warning */
        Object.defineProperty(this, "spoiler", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** URL of the document */
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Self-destruct time to live of document */
        Object.defineProperty(this, "ttl_seconds", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.spoiler = params.spoiler;
        this.url = params.url;
        this.ttl_seconds = params.ttl_seconds;
    }
}
/** A game */
export class InputMediaGame_ extends _InputMedia_ {
    get [id]() {
        return 0xD33F43F3;
    }
    static get [name]() {
        return "inputMediaGame";
    }
    static get [paramDesc]() {
        return [
            ["id", _InputGame_, "InputGame"],
        ];
    }
    get [params]() {
        return [
            [this.id, _InputGame_, "InputGame"],
        ];
    }
    constructor(params) {
        super();
        /** The game to forward */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
    }
}
/** Generated invoice of a [bot payment](https://core.telegram.org/bots/payments) */
export class InputMediaInvoice_ extends _InputMedia_ {
    get [id]() {
        return 0x8EB5A6D5;
    }
    static get [name]() {
        return "inputMediaInvoice";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["title", "string", "string"],
            ["description", "string", "string"],
            ["photo", _InputWebDocument_, "flags.0?InputWebDocument"],
            ["invoice", _Invoice_, "Invoice"],
            ["payload", Uint8Array, "bytes"],
            ["provider", "string", "string"],
            ["provider_data", _DataJSON_, "DataJSON"],
            ["start_param", "string", "flags.1?string"],
            ["extended_media", _InputMedia_, "flags.2?InputMedia"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.title, "string", "string"],
            [this.description, "string", "string"],
            [this.photo ?? null, _InputWebDocument_, "flags.0?InputWebDocument"],
            [this.invoice, _Invoice_, "Invoice"],
            [this.payload, Uint8Array, "bytes"],
            [this.provider, "string", "string"],
            [this.provider_data, _DataJSON_, "DataJSON"],
            [this.start_param ?? null, "string", "flags.1?string"],
            [this.extended_media ?? null, _InputMedia_, "flags.2?InputMedia"],
        ];
    }
    constructor(params) {
        super();
        /** Product name, 1-32 characters */
        Object.defineProperty(this, "title", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Product description, 1-255 characters */
        Object.defineProperty(this, "description", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for. */
        Object.defineProperty(this, "photo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The actual invoice */
        Object.defineProperty(this, "invoice", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes. */
        Object.defineProperty(this, "payload", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Payments provider token, obtained via [Botfather](https://t.me/botfather) */
        Object.defineProperty(this, "provider", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** JSON-encoded data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider. */
        Object.defineProperty(this, "provider_data", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Unique [bot deep links start parameter](https://core.telegram.org/api/links#bot-links). If present, forwarded copies of the sent message will have a URL button with a [deep link](https://core.telegram.org/api/links#bot-links) to the bot (instead of a Pay button), with the value used as the start parameter. If absent, forwarded copies of the sent message will have a Pay button, allowing multiple users to pay directly from the forwarded message, using the same invoice. */
        Object.defineProperty(this, "start_param", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Extended media */
        Object.defineProperty(this, "extended_media", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.title = params.title;
        this.description = params.description;
        this.photo = params.photo;
        this.invoice = params.invoice;
        this.payload = params.payload;
        this.provider = params.provider;
        this.provider_data = params.provider_data;
        this.start_param = params.start_param;
        this.extended_media = params.extended_media;
    }
}
/** [Live geolocation](https://core.telegram.org/api/live-location) */
export class InputMediaGeoLive_ extends _InputMedia_ {
    get [id]() {
        return 0x971FA843;
    }
    static get [name]() {
        return "inputMediaGeoLive";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["stopped", "true", "flags.0?true"],
            ["geo_point", _InputGeoPoint_, "InputGeoPoint"],
            ["heading", "number", "flags.2?int"],
            ["period", "number", "flags.1?int"],
            ["proximity_notification_radius", "number", "flags.3?int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.stopped ?? null, "true", "flags.0?true"],
            [this.geo_point, _InputGeoPoint_, "InputGeoPoint"],
            [this.heading ?? null, "number", "flags.2?int"],
            [this.period ?? null, "number", "flags.1?int"],
            [this.proximity_notification_radius ?? null, "number", "flags.3?int"],
        ];
    }
    constructor(params) {
        super();
        /** Whether sending of the geolocation was stopped */
        Object.defineProperty(this, "stopped", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Current geolocation */
        Object.defineProperty(this, "geo_point", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** For [live locations](https://core.telegram.org/api/live-location), a direction in which the location moves, in degrees; 1-360. */
        Object.defineProperty(this, "heading", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Validity period of the current location */
        Object.defineProperty(this, "period", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** For [live locations](https://core.telegram.org/api/live-location), a maximum distance to another chat member for proximity alerts, in meters (0-100000) */
        Object.defineProperty(this, "proximity_notification_radius", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.stopped = params.stopped;
        this.geo_point = params.geo_point;
        this.heading = params.heading;
        this.period = params.period;
        this.proximity_notification_radius = params.proximity_notification_radius;
    }
}
/** A poll */
export class InputMediaPoll_ extends _InputMedia_ {
    get [id]() {
        return 0x0F94E5F1;
    }
    static get [name]() {
        return "inputMediaPoll";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["poll", _Poll_, "Poll"],
            ["correct_answers", [Uint8Array], "flags.0?Vector<bytes>"],
            ["solution", "string", "flags.1?string"],
            ["solution_entities", [_MessageEntity_], "flags.1?Vector<MessageEntity>"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.poll, _Poll_, "Poll"],
            [this.correct_answers ?? null, [Uint8Array], "flags.0?Vector<bytes>"],
            [this.solution ?? null, "string", "flags.1?string"],
            [this.solution_entities ?? null, [_MessageEntity_], "flags.1?Vector<MessageEntity>"],
        ];
    }
    constructor(params) {
        super();
        /** The poll to send */
        Object.defineProperty(this, "poll", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Correct answer IDs (for quiz polls) */
        Object.defineProperty(this, "correct_answers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Explanation of quiz solution */
        Object.defineProperty(this, "solution", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Message entities for styled text](https://core.telegram.org/api/entities) */
        Object.defineProperty(this, "solution_entities", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.poll = params.poll;
        this.correct_answers = params.correct_answers;
        this.solution = params.solution;
        this.solution_entities = params.solution_entities;
    }
}
/** Send a [dice-based animated sticker](https://core.telegram.org/api/dice) */
export class InputMediaDice_ extends _InputMedia_ {
    get [id]() {
        return 0xE66FBF7B;
    }
    static get [name]() {
        return "inputMediaDice";
    }
    static get [paramDesc]() {
        return [
            ["emoticon", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.emoticon, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** The emoji, for now ![🏀](//telegram.org/img/emoji/40/F09F8F80.png), ![🎲](//telegram.org/img/emoji/40/F09F8EB2.png) and ![🎯](//telegram.org/img/emoji/40/F09F8EAF.png) are supported */
        Object.defineProperty(this, "emoticon", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.emoticon = params.emoticon;
    }
}
/** Forwarded story */
export class InputMediaStory_ extends _InputMedia_ {
    get [id]() {
        return 0x89FDD778;
    }
    static get [name]() {
        return "inputMediaStory";
    }
    static get [paramDesc]() {
        return [
            ["peer", _InputPeer_, "InputPeer"],
            ["id", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.peer, _InputPeer_, "InputPeer"],
            [this.id, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Peer where the story was posted */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Story ID */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.peer = params.peer;
        this.id = params.id;
    }
}
/** Specifies options that will be used to generate the link preview for the caption, or even a standalone link preview without an attached message. */
export class InputMediaWebPage_ extends _InputMedia_ {
    get [id]() {
        return 0xC21B8849;
    }
    static get [name]() {
        return "inputMediaWebPage";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["force_large_media", "true", "flags.0?true"],
            ["force_small_media", "true", "flags.1?true"],
            ["optional", "true", "flags.2?true"],
            ["url", "string", "string"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.force_large_media ?? null, "true", "flags.0?true"],
            [this.force_small_media ?? null, "true", "flags.1?true"],
            [this.optional ?? null, "true", "flags.2?true"],
            [this.url, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** If set, specifies that a large media preview should be used. */
        Object.defineProperty(this, "force_large_media", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, specifies that a small media preview should be used. */
        Object.defineProperty(this, "force_small_media", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If **not** set, a `WEBPAGE_NOT_FOUND` RPC error will be emitted if a webpage preview cannot be generated for the specified `url`; otherwise, no error will be emitted (unless the provided message is also empty, in which case a `MESSAGE_EMPTY` will be emitted, instead). */
        Object.defineProperty(this, "optional", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The URL to use for the link preview. */
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.force_large_media = params.force_large_media;
        this.force_small_media = params.force_small_media;
        this.optional = params.optional;
        this.url = params.url;
    }
}
/** Empty constructor, remove group photo. */
export class InputChatPhotoEmpty_ extends _InputChatPhoto_ {
    get [id]() {
        return 0x1CA48F57;
    }
    static get [name]() {
        return "inputChatPhotoEmpty";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** New photo to be set as group profile photo. */
export class InputChatUploadedPhoto_ extends _InputChatPhoto_ {
    get [id]() {
        return 0xBDCDAEC0;
    }
    static get [name]() {
        return "inputChatUploadedPhoto";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["file", _InputFile_, "flags.0?InputFile"],
            ["video", _InputFile_, "flags.1?InputFile"],
            ["video_start_ts", "number", "flags.2?double"],
            ["video_emoji_markup", _VideoSize_, "flags.3?VideoSize"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.file ?? null, _InputFile_, "flags.0?InputFile"],
            [this.video ?? null, _InputFile_, "flags.1?InputFile"],
            [this.video_start_ts ?? null, "number", "flags.2?double"],
            [this.video_emoji_markup ?? null, _VideoSize_, "flags.3?VideoSize"],
        ];
    }
    constructor(params) {
        super();
        /** File saved in parts using the method [upload.saveFilePart](https://core.telegram.org/method/upload.saveFilePart) */
        Object.defineProperty(this, "file", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Square video for animated profile picture */
        Object.defineProperty(this, "video", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Floating point UNIX timestamp in seconds, indicating the frame of the video/sticker that should be used as static preview; can only be used if `video` or `video_emoji_markup` is set. */
        Object.defineProperty(this, "video_start_ts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Animated sticker profile picture, must contain either a [videoSizeEmojiMarkup](https://core.telegram.org/constructor/videoSizeEmojiMarkup) or a [videoSizeStickerMarkup](https://core.telegram.org/constructor/videoSizeStickerMarkup) constructor. */
        Object.defineProperty(this, "video_emoji_markup", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.file = params?.file;
        this.video = params?.video;
        this.video_start_ts = params?.video_start_ts;
        this.video_emoji_markup = params?.video_emoji_markup;
    }
}
/** Existing photo to be set as a chat profile photo. */
export class InputChatPhoto_ extends _InputChatPhoto_ {
    get [id]() {
        return 0x8953AD37;
    }
    static get [name]() {
        return "inputChatPhoto";
    }
    static get [paramDesc]() {
        return [
            ["id", _InputPhoto_, "InputPhoto"],
        ];
    }
    get [params]() {
        return [
            [this.id, _InputPhoto_, "InputPhoto"],
        ];
    }
    constructor(params) {
        super();
        /** Existing photo */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
    }
}
/** Empty GeoPoint constructor. */
export class InputGeoPointEmpty_ extends _InputGeoPoint_ {
    get [id]() {
        return 0xE4C123D6;
    }
    static get [name]() {
        return "inputGeoPointEmpty";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Defines a GeoPoint by its coordinates. */
export class InputGeoPoint_ extends _InputGeoPoint_ {
    get [id]() {
        return 0x48222FAF;
    }
    static get [name]() {
        return "inputGeoPoint";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["lat", "number", "double"],
            ["long", "number", "double"],
            ["accuracy_radius", "number", "flags.0?int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.lat, "number", "double"],
            [this.long, "number", "double"],
            [this.accuracy_radius ?? null, "number", "flags.0?int"],
        ];
    }
    constructor(params) {
        super();
        /** Latitude */
        Object.defineProperty(this, "lat", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Longitude */
        Object.defineProperty(this, "long", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The estimated horizontal accuracy of the location, in meters; as defined by the sender. */
        Object.defineProperty(this, "accuracy_radius", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.lat = params.lat;
        this.long = params.long;
        this.accuracy_radius = params.accuracy_radius;
    }
}
/** Empty constructor. */
export class InputPhotoEmpty_ extends _InputPhoto_ {
    get [id]() {
        return 0x1CD7BF0D;
    }
    static get [name]() {
        return "inputPhotoEmpty";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Defines a photo for further interaction. */
export class InputPhoto_ extends _InputPhoto_ {
    get [id]() {
        return 0x3BB3B94A;
    }
    static get [name]() {
        return "inputPhoto";
    }
    static get [paramDesc]() {
        return [
            ["id", "bigint", "long"],
            ["access_hash", "bigint", "long"],
            ["file_reference", Uint8Array, "bytes"],
        ];
    }
    get [params]() {
        return [
            [this.id, "bigint", "long"],
            [this.access_hash, "bigint", "long"],
            [this.file_reference, Uint8Array, "bytes"],
        ];
    }
    constructor(params) {
        super();
        /** Photo identifier */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** **access\_hash** value from the [photo](https://core.telegram.org/constructor/photo) constructor */
        Object.defineProperty(this, "access_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [File reference](https://core.telegram.org/api/file_reference) */
        Object.defineProperty(this, "file_reference", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
        this.access_hash = params.access_hash;
        this.file_reference = params.file_reference;
    }
}
/** DEPRECATED location of a photo */
export class InputFileLocation_ extends _InputFileLocation_ {
    get [id]() {
        return 0xDFDAABE1;
    }
    static get [name]() {
        return "inputFileLocation";
    }
    static get [paramDesc]() {
        return [
            ["volume_id", "bigint", "long"],
            ["local_id", "number", "int"],
            ["secret", "bigint", "long"],
            ["file_reference", Uint8Array, "bytes"],
        ];
    }
    get [params]() {
        return [
            [this.volume_id, "bigint", "long"],
            [this.local_id, "number", "int"],
            [this.secret, "bigint", "long"],
            [this.file_reference, Uint8Array, "bytes"],
        ];
    }
    constructor(params) {
        super();
        /** Server volume */
        Object.defineProperty(this, "volume_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** File identifier */
        Object.defineProperty(this, "local_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Check sum to access the file */
        Object.defineProperty(this, "secret", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [File reference](https://core.telegram.org/api/file_reference) */
        Object.defineProperty(this, "file_reference", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.volume_id = params.volume_id;
        this.local_id = params.local_id;
        this.secret = params.secret;
        this.file_reference = params.file_reference;
    }
}
/** Location of encrypted secret chat file. */
export class InputEncryptedFileLocation_ extends _InputFileLocation_ {
    get [id]() {
        return 0xF5235D55;
    }
    static get [name]() {
        return "inputEncryptedFileLocation";
    }
    static get [paramDesc]() {
        return [
            ["id", "bigint", "long"],
            ["access_hash", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.id, "bigint", "long"],
            [this.access_hash, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** File ID, **id** parameter value from [encryptedFile](https://core.telegram.org/constructor/encryptedFile) */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Checksum, **access\_hash** parameter value from [encryptedFile](https://core.telegram.org/constructor/encryptedFile) */
        Object.defineProperty(this, "access_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
        this.access_hash = params.access_hash;
    }
}
/** Document location (video, voice, audio, basically every type except photo) */
export class InputDocumentFileLocation_ extends _InputFileLocation_ {
    get [id]() {
        return 0xBAD07584;
    }
    static get [name]() {
        return "inputDocumentFileLocation";
    }
    static get [paramDesc]() {
        return [
            ["id", "bigint", "long"],
            ["access_hash", "bigint", "long"],
            ["file_reference", Uint8Array, "bytes"],
            ["thumb_size", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.id, "bigint", "long"],
            [this.access_hash, "bigint", "long"],
            [this.file_reference, Uint8Array, "bytes"],
            [this.thumb_size, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Document ID */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** **access\_hash** parameter from the [document](https://core.telegram.org/constructor/document) constructor */
        Object.defineProperty(this, "access_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [File reference](https://core.telegram.org/api/file_reference) */
        Object.defineProperty(this, "file_reference", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Thumbnail size to download the thumbnail */
        Object.defineProperty(this, "thumb_size", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
        this.access_hash = params.access_hash;
        this.file_reference = params.file_reference;
        this.thumb_size = params.thumb_size;
    }
}
/** Location of encrypted telegram [passport](https://core.telegram.org/passport) file. */
export class InputSecureFileLocation_ extends _InputFileLocation_ {
    get [id]() {
        return 0xCBC7EE28;
    }
    static get [name]() {
        return "inputSecureFileLocation";
    }
    static get [paramDesc]() {
        return [
            ["id", "bigint", "long"],
            ["access_hash", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.id, "bigint", "long"],
            [this.access_hash, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** File ID, **id** parameter value from [secureFile](https://core.telegram.org/constructor/secureFile) */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Checksum, **access\_hash** parameter value from [secureFile](https://core.telegram.org/constructor/secureFile) */
        Object.defineProperty(this, "access_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
        this.access_hash = params.access_hash;
    }
}
/** Used to download a JSON file that will contain all personal data related to features that do not have a specialized [takeout method](https://core.telegram.org/api/takeout) yet, see [here »](https://core.telegram.org/api/takeout) for more info on the takeout API. */
export class InputTakeoutFileLocation_ extends _InputFileLocation_ {
    get [id]() {
        return 0x29BE5899;
    }
    static get [name]() {
        return "inputTakeoutFileLocation";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Use this object to download a photo with [upload.getFile](https://core.telegram.org/method/upload.getFile) method */
export class InputPhotoFileLocation_ extends _InputFileLocation_ {
    get [id]() {
        return 0x40181FFE;
    }
    static get [name]() {
        return "inputPhotoFileLocation";
    }
    static get [paramDesc]() {
        return [
            ["id", "bigint", "long"],
            ["access_hash", "bigint", "long"],
            ["file_reference", Uint8Array, "bytes"],
            ["thumb_size", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.id, "bigint", "long"],
            [this.access_hash, "bigint", "long"],
            [this.file_reference, Uint8Array, "bytes"],
            [this.thumb_size, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Photo ID, obtained from the [photo](https://core.telegram.org/constructor/photo) object */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Photo's access hash, obtained from the [photo](https://core.telegram.org/constructor/photo) object */
        Object.defineProperty(this, "access_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [File reference](https://core.telegram.org/api/file_reference) */
        Object.defineProperty(this, "file_reference", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The [PhotoSize](https://core.telegram.org/type/PhotoSize) to download: must be set to the `type` field of the desired PhotoSize object of the [photo](https://core.telegram.org/constructor/photo) */
        Object.defineProperty(this, "thumb_size", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
        this.access_hash = params.access_hash;
        this.file_reference = params.file_reference;
        this.thumb_size = params.thumb_size;
    }
}
/** DEPRECATED legacy photo file location */
export class InputPhotoLegacyFileLocation_ extends _InputFileLocation_ {
    get [id]() {
        return 0xD83466F3;
    }
    static get [name]() {
        return "inputPhotoLegacyFileLocation";
    }
    static get [paramDesc]() {
        return [
            ["id", "bigint", "long"],
            ["access_hash", "bigint", "long"],
            ["file_reference", Uint8Array, "bytes"],
            ["volume_id", "bigint", "long"],
            ["local_id", "number", "int"],
            ["secret", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.id, "bigint", "long"],
            [this.access_hash, "bigint", "long"],
            [this.file_reference, Uint8Array, "bytes"],
            [this.volume_id, "bigint", "long"],
            [this.local_id, "number", "int"],
            [this.secret, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** Photo ID */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Access hash */
        Object.defineProperty(this, "access_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** File reference */
        Object.defineProperty(this, "file_reference", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Volume ID */
        Object.defineProperty(this, "volume_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Local ID */
        Object.defineProperty(this, "local_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Secret */
        Object.defineProperty(this, "secret", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
        this.access_hash = params.access_hash;
        this.file_reference = params.file_reference;
        this.volume_id = params.volume_id;
        this.local_id = params.local_id;
        this.secret = params.secret;
    }
}
/** Location of profile photo of channel/group/supergroup/user */
export class InputPeerPhotoFileLocation_ extends _InputFileLocation_ {
    get [id]() {
        return 0x37257E99;
    }
    static get [name]() {
        return "inputPeerPhotoFileLocation";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["big", "true", "flags.0?true"],
            ["peer", _InputPeer_, "InputPeer"],
            ["photo_id", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.big ?? null, "true", "flags.0?true"],
            [this.peer, _InputPeer_, "InputPeer"],
            [this.photo_id, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** Whether to download the high-quality version of the picture */
        Object.defineProperty(this, "big", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The peer whose profile picture should be downloaded */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Photo ID */
        Object.defineProperty(this, "photo_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.big = params.big;
        this.peer = params.peer;
        this.photo_id = params.photo_id;
    }
}
/** Location of stickerset thumbnail (see [files](https://core.telegram.org/api/files)) */
export class InputStickerSetThumb_ extends _InputFileLocation_ {
    get [id]() {
        return 0x9D84F3DB;
    }
    static get [name]() {
        return "inputStickerSetThumb";
    }
    static get [paramDesc]() {
        return [
            ["stickerset", _InputStickerSet_, "InputStickerSet"],
            ["thumb_version", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.stickerset, _InputStickerSet_, "InputStickerSet"],
            [this.thumb_version, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Sticker set */
        Object.defineProperty(this, "stickerset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Thumbnail version */
        Object.defineProperty(this, "thumb_version", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.stickerset = params.stickerset;
        this.thumb_version = params.thumb_version;
    }
}
/** Chunk of a livestream */
export class InputGroupCallStream_ extends _InputFileLocation_ {
    get [id]() {
        return 0x0598A92A;
    }
    static get [name]() {
        return "inputGroupCallStream";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["call", _InputGroupCall_, "InputGroupCall"],
            ["time_ms", "bigint", "long"],
            ["scale", "number", "int"],
            ["video_channel", "number", "flags.0?int"],
            ["video_quality", "number", "flags.0?int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.call, _InputGroupCall_, "InputGroupCall"],
            [this.time_ms, "bigint", "long"],
            [this.scale, "number", "int"],
            [this.video_channel ?? null, "number", "flags.0?int"],
            [this.video_quality ?? null, "number", "flags.0?int"],
        ];
    }
    constructor(params) {
        super();
        /** Livestream info */
        Object.defineProperty(this, "call", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Timestamp in milliseconds */
        Object.defineProperty(this, "time_ms", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Specifies the duration of the video segment to fetch in milliseconds, by bitshifting `1000` to the right `scale` times: `duration_ms := 1000 >> scale` */
        Object.defineProperty(this, "scale", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Selected video channel */
        Object.defineProperty(this, "video_channel", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Selected video quality (0 = lowest, 1 = medium, 2 = best) */
        Object.defineProperty(this, "video_quality", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.call = params.call;
        this.time_ms = params.time_ms;
        this.scale = params.scale;
        this.video_channel = params.video_channel;
        this.video_quality = params.video_quality;
    }
}
/** Chat partner */
export class PeerUser_ extends _Peer_ {
    get [id]() {
        return 0x59511722;
    }
    static get [name]() {
        return "peerUser";
    }
    static get [paramDesc]() {
        return [
            ["user_id", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.user_id, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** User identifier */
        Object.defineProperty(this, "user_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.user_id = params.user_id;
    }
}
/** Group. */
export class PeerChat_ extends _Peer_ {
    get [id]() {
        return 0x36C6019A;
    }
    static get [name]() {
        return "peerChat";
    }
    static get [paramDesc]() {
        return [
            ["chat_id", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.chat_id, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** Group identifier */
        Object.defineProperty(this, "chat_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.chat_id = params.chat_id;
    }
}
/** Channel/supergroup */
export class PeerChannel_ extends _Peer_ {
    get [id]() {
        return 0xA2A5371E;
    }
    static get [name]() {
        return "peerChannel";
    }
    static get [paramDesc]() {
        return [
            ["channel_id", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.channel_id, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** Channel ID */
        Object.defineProperty(this, "channel_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.channel_id = params.channel_id;
    }
}
/** Unknown type. */
export class storage_FileUnknown_ extends _storage_FileType_ {
    get [id]() {
        return 0xAA963B05;
    }
    static get [name]() {
        return "storage.fileUnknown";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Part of a bigger file. */
export class storage_FilePartial_ extends _storage_FileType_ {
    get [id]() {
        return 0x40BC6F52;
    }
    static get [name]() {
        return "storage.filePartial";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** JPEG image. MIME type: `image/jpeg`. */
export class storage_FileJpeg_ extends _storage_FileType_ {
    get [id]() {
        return 0x007EFE0E;
    }
    static get [name]() {
        return "storage.fileJpeg";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** GIF image. MIME type: `image/gif`. */
export class storage_FileGif_ extends _storage_FileType_ {
    get [id]() {
        return 0xCAE1AADF;
    }
    static get [name]() {
        return "storage.fileGif";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** PNG image. MIME type: `image/png`. */
export class storage_FilePng_ extends _storage_FileType_ {
    get [id]() {
        return 0x0A4F63C0;
    }
    static get [name]() {
        return "storage.filePng";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** PDF document image. MIME type: `application/pdf`. */
export class storage_FilePdf_ extends _storage_FileType_ {
    get [id]() {
        return 0xAE1E508D;
    }
    static get [name]() {
        return "storage.filePdf";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Mp3 audio. MIME type: `audio/mpeg`. */
export class storage_FileMp3_ extends _storage_FileType_ {
    get [id]() {
        return 0x528A0677;
    }
    static get [name]() {
        return "storage.fileMp3";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Quicktime video. MIME type: `video/quicktime`. */
export class storage_FileMov_ extends _storage_FileType_ {
    get [id]() {
        return 0x4B09EBBC;
    }
    static get [name]() {
        return "storage.fileMov";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** MPEG-4 video. MIME type: `video/mp4`. */
export class storage_FileMp4_ extends _storage_FileType_ {
    get [id]() {
        return 0xB3CEA0E4;
    }
    static get [name]() {
        return "storage.fileMp4";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** WEBP image. MIME type: `image/webp`. */
export class storage_FileWebp_ extends _storage_FileType_ {
    get [id]() {
        return 0x1081464C;
    }
    static get [name]() {
        return "storage.fileWebp";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Empty constructor, non-existent user. */
export class UserEmpty_ extends _User_ {
    get [id]() {
        return 0xD3BC4B7A;
    }
    static get [name]() {
        return "userEmpty";
    }
    static get [paramDesc]() {
        return [
            ["id", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.id, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** User identifier or `0` */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
    }
}
/** Indicates info about a certain user */
export class User_ extends _User_ {
    get [id]() {
        return 0x215C4438;
    }
    static get [name]() {
        return "user";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["self", "true", "flags.10?true"],
            ["contact", "true", "flags.11?true"],
            ["mutual_contact", "true", "flags.12?true"],
            ["deleted", "true", "flags.13?true"],
            ["bot", "true", "flags.14?true"],
            ["bot_chat_history", "true", "flags.15?true"],
            ["bot_nochats", "true", "flags.16?true"],
            ["verified", "true", "flags.17?true"],
            ["restricted", "true", "flags.18?true"],
            ["min", "true", "flags.20?true"],
            ["bot_inline_geo", "true", "flags.21?true"],
            ["support", "true", "flags.23?true"],
            ["scam", "true", "flags.24?true"],
            ["apply_min_photo", "true", "flags.25?true"],
            ["fake", "true", "flags.26?true"],
            ["bot_attach_menu", "true", "flags.27?true"],
            ["premium", "true", "flags.28?true"],
            ["attach_menu_enabled", "true", "flags.29?true"],
            ["flags2", flags, "#"],
            ["bot_can_edit", "true", "flags2.1?true"],
            ["close_friend", "true", "flags2.2?true"],
            ["stories_hidden", "true", "flags2.3?true"],
            ["stories_unavailable", "true", "flags2.4?true"],
            ["contact_require_premium", "true", "flags2.10?true"],
            ["id", "bigint", "long"],
            ["access_hash", "bigint", "flags.0?long"],
            ["first_name", "string", "flags.1?string"],
            ["last_name", "string", "flags.2?string"],
            ["username", "string", "flags.3?string"],
            ["phone", "string", "flags.4?string"],
            ["photo", _UserProfilePhoto_, "flags.5?UserProfilePhoto"],
            ["status", _UserStatus_, "flags.6?UserStatus"],
            ["bot_info_version", "number", "flags.14?int"],
            ["restriction_reason", [_RestrictionReason_], "flags.18?Vector<RestrictionReason>"],
            ["bot_inline_placeholder", "string", "flags.19?string"],
            ["lang_code", "string", "flags.22?string"],
            ["emoji_status", _EmojiStatus_, "flags.30?EmojiStatus"],
            ["usernames", [_Username_], "flags2.0?Vector<Username>"],
            ["stories_max_id", "number", "flags2.5?int"],
            ["color", _PeerColor_, "flags2.8?PeerColor"],
            ["profile_color", _PeerColor_, "flags2.9?PeerColor"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.self ?? null, "true", "flags.10?true"],
            [this.contact ?? null, "true", "flags.11?true"],
            [this.mutual_contact ?? null, "true", "flags.12?true"],
            [this.deleted ?? null, "true", "flags.13?true"],
            [this.bot ?? null, "true", "flags.14?true"],
            [this.bot_chat_history ?? null, "true", "flags.15?true"],
            [this.bot_nochats ?? null, "true", "flags.16?true"],
            [this.verified ?? null, "true", "flags.17?true"],
            [this.restricted ?? null, "true", "flags.18?true"],
            [this.min ?? null, "true", "flags.20?true"],
            [this.bot_inline_geo ?? null, "true", "flags.21?true"],
            [this.support ?? null, "true", "flags.23?true"],
            [this.scam ?? null, "true", "flags.24?true"],
            [this.apply_min_photo ?? null, "true", "flags.25?true"],
            [this.fake ?? null, "true", "flags.26?true"],
            [this.bot_attach_menu ?? null, "true", "flags.27?true"],
            [this.premium ?? null, "true", "flags.28?true"],
            [this.attach_menu_enabled ?? null, "true", "flags.29?true"],
            ["flags2", flags, "#"],
            [this.bot_can_edit ?? null, "true", "flags2.1?true"],
            [this.close_friend ?? null, "true", "flags2.2?true"],
            [this.stories_hidden ?? null, "true", "flags2.3?true"],
            [this.stories_unavailable ?? null, "true", "flags2.4?true"],
            [this.contact_require_premium ?? null, "true", "flags2.10?true"],
            [this.id, "bigint", "long"],
            [this.access_hash ?? null, "bigint", "flags.0?long"],
            [this.first_name ?? null, "string", "flags.1?string"],
            [this.last_name ?? null, "string", "flags.2?string"],
            [this.username ?? null, "string", "flags.3?string"],
            [this.phone ?? null, "string", "flags.4?string"],
            [this.photo ?? null, _UserProfilePhoto_, "flags.5?UserProfilePhoto"],
            [this.status ?? null, _UserStatus_, "flags.6?UserStatus"],
            [this.bot_info_version ?? null, "number", "flags.14?int"],
            [this.restriction_reason ?? null, [_RestrictionReason_], "flags.18?Vector<RestrictionReason>"],
            [this.bot_inline_placeholder ?? null, "string", "flags.19?string"],
            [this.lang_code ?? null, "string", "flags.22?string"],
            [this.emoji_status ?? null, _EmojiStatus_, "flags.30?EmojiStatus"],
            [this.usernames ?? null, [_Username_], "flags2.0?Vector<Username>"],
            [this.stories_max_id ?? null, "number", "flags2.5?int"],
            [this.color ?? null, _PeerColor_, "flags2.8?PeerColor"],
            [this.profile_color ?? null, _PeerColor_, "flags2.9?PeerColor"],
        ];
    }
    constructor(params) {
        super();
        /** Whether this user indicates the currently logged in user */
        Object.defineProperty(this, "self", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this user is a contact */
        Object.defineProperty(this, "contact", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this user is a mutual contact */
        Object.defineProperty(this, "mutual_contact", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether the account of this user was deleted */
        Object.defineProperty(this, "deleted", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Is this user a bot? */
        Object.defineProperty(this, "bot", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Can the bot see all messages in groups? */
        Object.defineProperty(this, "bot_chat_history", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Can the bot be added to groups? */
        Object.defineProperty(this, "bot_nochats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this user is verified */
        Object.defineProperty(this, "verified", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Access to this user must be restricted for the reason specified in `restriction_reason` */
        Object.defineProperty(this, "restricted", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** See [min](https://core.telegram.org/api/min) */
        Object.defineProperty(this, "min", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether the bot can request our geolocation in inline mode */
        Object.defineProperty(this, "bot_inline_geo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this is an official support user */
        Object.defineProperty(this, "support", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** This may be a scam user */
        Object.defineProperty(this, "scam", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, the profile picture for this user should be refetched */
        Object.defineProperty(this, "apply_min_photo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, this user was reported by many users as a fake or scam user: be careful when interacting with them. */
        Object.defineProperty(this, "fake", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this bot offers an [attachment menu web app](https://core.telegram.org/api/bots/attach) */
        Object.defineProperty(this, "bot_attach_menu", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this user is a Telegram Premium user */
        Object.defineProperty(this, "premium", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether we installed the [attachment menu web app](https://core.telegram.org/api/bots/attach) offered by this bot */
        Object.defineProperty(this, "attach_menu_enabled", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether we can edit the profile picture, name, about text and description of this bot because we own it. */
        Object.defineProperty(this, "bot_can_edit", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether we marked this user as a [close friend, see here » for more info](https://core.telegram.org/api/privacy) */
        Object.defineProperty(this, "close_friend", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether we have [hidden »](https://core.telegram.org/api/stories#hiding-stories-of-other-users) all active stories of this user. */
        Object.defineProperty(this, "stories_hidden", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** No stories from this user are visible. */
        Object.defineProperty(this, "stories_unavailable", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "contact_require_premium", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the user */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Access hash of the user */
        Object.defineProperty(this, "access_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** First name */
        Object.defineProperty(this, "first_name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Last name */
        Object.defineProperty(this, "last_name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Username */
        Object.defineProperty(this, "username", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Phone number */
        Object.defineProperty(this, "phone", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Profile picture of user */
        Object.defineProperty(this, "photo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Online status of user */
        Object.defineProperty(this, "status", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Version of the [bot\_info field in userFull](https://core.telegram.org/constructor/userFull), incremented every time it changes */
        Object.defineProperty(this, "bot_info_version", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Contains the reason why access to this user must be restricted. */
        Object.defineProperty(this, "restriction_reason", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Inline placeholder for this inline bot */
        Object.defineProperty(this, "bot_inline_placeholder", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Language code of the user */
        Object.defineProperty(this, "lang_code", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Emoji status](https://core.telegram.org/api/emoji-status) */
        Object.defineProperty(this, "emoji_status", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Additional usernames */
        Object.defineProperty(this, "usernames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the maximum read [story](https://core.telegram.org/api/stories). */
        Object.defineProperty(this, "stories_max_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The user's [accent color](https://core.telegram.org/api/colors). */
        Object.defineProperty(this, "color", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The user's [profile color](https://core.telegram.org/api/colors). */
        Object.defineProperty(this, "profile_color", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.self = params.self;
        this.contact = params.contact;
        this.mutual_contact = params.mutual_contact;
        this.deleted = params.deleted;
        this.bot = params.bot;
        this.bot_chat_history = params.bot_chat_history;
        this.bot_nochats = params.bot_nochats;
        this.verified = params.verified;
        this.restricted = params.restricted;
        this.min = params.min;
        this.bot_inline_geo = params.bot_inline_geo;
        this.support = params.support;
        this.scam = params.scam;
        this.apply_min_photo = params.apply_min_photo;
        this.fake = params.fake;
        this.bot_attach_menu = params.bot_attach_menu;
        this.premium = params.premium;
        this.attach_menu_enabled = params.attach_menu_enabled;
        this.bot_can_edit = params.bot_can_edit;
        this.close_friend = params.close_friend;
        this.stories_hidden = params.stories_hidden;
        this.stories_unavailable = params.stories_unavailable;
        this.contact_require_premium = params.contact_require_premium;
        this.id = params.id;
        this.access_hash = params.access_hash;
        this.first_name = params.first_name;
        this.last_name = params.last_name;
        this.username = params.username;
        this.phone = params.phone;
        this.photo = params.photo;
        this.status = params.status;
        this.bot_info_version = params.bot_info_version;
        this.restriction_reason = params.restriction_reason;
        this.bot_inline_placeholder = params.bot_inline_placeholder;
        this.lang_code = params.lang_code;
        this.emoji_status = params.emoji_status;
        this.usernames = params.usernames;
        this.stories_max_id = params.stories_max_id;
        this.color = params.color;
        this.profile_color = params.profile_color;
    }
}
/** Profile photo has not been set, or was hidden. */
export class UserProfilePhotoEmpty_ extends _UserProfilePhoto_ {
    get [id]() {
        return 0x4F11BAE1;
    }
    static get [name]() {
        return "userProfilePhotoEmpty";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** User profile photo. */
export class UserProfilePhoto_ extends _UserProfilePhoto_ {
    get [id]() {
        return 0x82D1F706;
    }
    static get [name]() {
        return "userProfilePhoto";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["has_video", "true", "flags.0?true"],
            ["personal", "true", "flags.2?true"],
            ["photo_id", "bigint", "long"],
            ["stripped_thumb", Uint8Array, "flags.1?bytes"],
            ["dc_id", "number", "int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.has_video ?? null, "true", "flags.0?true"],
            [this.personal ?? null, "true", "flags.2?true"],
            [this.photo_id, "bigint", "long"],
            [this.stripped_thumb ?? null, Uint8Array, "flags.1?bytes"],
            [this.dc_id, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Whether an [animated profile picture](https://core.telegram.org/api/files#animated-profile-pictures) is available for this user */
        Object.defineProperty(this, "has_video", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this profile photo is only visible to us (i.e. it was set using [photos.uploadContactProfilePhoto](https://core.telegram.org/method/photos.uploadContactProfilePhoto)). */
        Object.defineProperty(this, "personal", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Identifier of the respective photo */
        Object.defineProperty(this, "photo_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Stripped thumbnail](https://core.telegram.org/api/files#stripped-thumbnails) */
        Object.defineProperty(this, "stripped_thumb", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** DC ID where the photo is stored */
        Object.defineProperty(this, "dc_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.has_video = params.has_video;
        this.personal = params.personal;
        this.photo_id = params.photo_id;
        this.stripped_thumb = params.stripped_thumb;
        this.dc_id = params.dc_id;
    }
}
/** User status has not been set yet. */
export class UserStatusEmpty_ extends _UserStatus_ {
    get [id]() {
        return 0x09D05049;
    }
    static get [name]() {
        return "userStatusEmpty";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Online status of the user. */
export class UserStatusOnline_ extends _UserStatus_ {
    get [id]() {
        return 0xEDB93949;
    }
    static get [name]() {
        return "userStatusOnline";
    }
    static get [paramDesc]() {
        return [
            ["expires", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.expires, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Time to expiration of the current online status */
        Object.defineProperty(this, "expires", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.expires = params.expires;
    }
}
/** The user's offline status. */
export class UserStatusOffline_ extends _UserStatus_ {
    get [id]() {
        return 0x008C703F;
    }
    static get [name]() {
        return "userStatusOffline";
    }
    static get [paramDesc]() {
        return [
            ["was_online", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.was_online, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Time the user was last seen online */
        Object.defineProperty(this, "was_online", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.was_online = params.was_online;
    }
}
/** Online status: last seen recently */
export class UserStatusRecently_ extends _UserStatus_ {
    get [id]() {
        return 0x7B197DC8;
    }
    static get [name]() {
        return "userStatusRecently";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["by_me", "true", "flags.0?true"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.by_me ?? null, "true", "flags.0?true"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "by_me", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.by_me = params?.by_me;
    }
}
/** Online status: last seen last week */
export class UserStatusLastWeek_ extends _UserStatus_ {
    get [id]() {
        return 0x541A1D1A;
    }
    static get [name]() {
        return "userStatusLastWeek";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["by_me", "true", "flags.0?true"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.by_me ?? null, "true", "flags.0?true"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "by_me", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.by_me = params?.by_me;
    }
}
/** Online status: last seen last month */
export class UserStatusLastMonth_ extends _UserStatus_ {
    get [id]() {
        return 0x65899777;
    }
    static get [name]() {
        return "userStatusLastMonth";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["by_me", "true", "flags.0?true"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.by_me ?? null, "true", "flags.0?true"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "by_me", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.by_me = params?.by_me;
    }
}
/** Empty constructor, group doesn't exist */
export class ChatEmpty_ extends _Chat_ {
    get [id]() {
        return 0x29562865;
    }
    static get [name]() {
        return "chatEmpty";
    }
    static get [paramDesc]() {
        return [
            ["id", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.id, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** Group identifier */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
    }
}
/** Info about a group */
export class Chat_ extends _Chat_ {
    get [id]() {
        return 0x41CBF256;
    }
    static get [name]() {
        return "chat";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["creator", "true", "flags.0?true"],
            ["left", "true", "flags.2?true"],
            ["deactivated", "true", "flags.5?true"],
            ["call_active", "true", "flags.23?true"],
            ["call_not_empty", "true", "flags.24?true"],
            ["noforwards", "true", "flags.25?true"],
            ["id", "bigint", "long"],
            ["title", "string", "string"],
            ["photo", _ChatPhoto_, "ChatPhoto"],
            ["participants_count", "number", "int"],
            ["date", "number", "int"],
            ["version", "number", "int"],
            ["migrated_to", _InputChannel_, "flags.6?InputChannel"],
            ["admin_rights", _ChatAdminRights_, "flags.14?ChatAdminRights"],
            ["default_banned_rights", _ChatBannedRights_, "flags.18?ChatBannedRights"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.creator ?? null, "true", "flags.0?true"],
            [this.left ?? null, "true", "flags.2?true"],
            [this.deactivated ?? null, "true", "flags.5?true"],
            [this.call_active ?? null, "true", "flags.23?true"],
            [this.call_not_empty ?? null, "true", "flags.24?true"],
            [this.noforwards ?? null, "true", "flags.25?true"],
            [this.id, "bigint", "long"],
            [this.title, "string", "string"],
            [this.photo, _ChatPhoto_, "ChatPhoto"],
            [this.participants_count, "number", "int"],
            [this.date, "number", "int"],
            [this.version, "number", "int"],
            [this.migrated_to ?? null, _InputChannel_, "flags.6?InputChannel"],
            [this.admin_rights ?? null, _ChatAdminRights_, "flags.14?ChatAdminRights"],
            [this.default_banned_rights ?? null, _ChatBannedRights_, "flags.18?ChatBannedRights"],
        ];
    }
    constructor(params) {
        super();
        /** Whether the current user is the creator of the group */
        Object.defineProperty(this, "creator", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether the current user has left the group */
        Object.defineProperty(this, "left", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether the group was [migrated](https://core.telegram.org/api/channel) */
        Object.defineProperty(this, "deactivated", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether a group call is currently active */
        Object.defineProperty(this, "call_active", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether there's anyone in the group call */
        Object.defineProperty(this, "call_not_empty", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this group is [protected](https://telegram.org/blog/protected-content-delete-by-date-and-more), thus does not allow forwarding messages from it */
        Object.defineProperty(this, "noforwards", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the group */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Title */
        Object.defineProperty(this, "title", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Chat photo */
        Object.defineProperty(this, "photo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Participant count */
        Object.defineProperty(this, "participants_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Date of creation of the group */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Used in basic groups to reorder updates and make sure that all of them were received. */
        Object.defineProperty(this, "version", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Means this chat was [upgraded](https://core.telegram.org/api/channel) to a supergroup */
        Object.defineProperty(this, "migrated_to", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Admin rights](https://core.telegram.org/api/rights) of the user in the group */
        Object.defineProperty(this, "admin_rights", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Default banned rights](https://core.telegram.org/api/rights) of all users in the group */
        Object.defineProperty(this, "default_banned_rights", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.creator = params.creator;
        this.left = params.left;
        this.deactivated = params.deactivated;
        this.call_active = params.call_active;
        this.call_not_empty = params.call_not_empty;
        this.noforwards = params.noforwards;
        this.id = params.id;
        this.title = params.title;
        this.photo = params.photo;
        this.participants_count = params.participants_count;
        this.date = params.date;
        this.version = params.version;
        this.migrated_to = params.migrated_to;
        this.admin_rights = params.admin_rights;
        this.default_banned_rights = params.default_banned_rights;
    }
}
/** A group to which the user has no access. E.g., because the user was kicked from the group. */
export class ChatForbidden_ extends _Chat_ {
    get [id]() {
        return 0x6592A1A7;
    }
    static get [name]() {
        return "chatForbidden";
    }
    static get [paramDesc]() {
        return [
            ["id", "bigint", "long"],
            ["title", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.id, "bigint", "long"],
            [this.title, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** User identifier */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Group name */
        Object.defineProperty(this, "title", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
        this.title = params.title;
    }
}
/** Channel/supergroup info */
export class Channel_ extends _Chat_ {
    get [id]() {
        return 0x0AADFC8F;
    }
    static get [name]() {
        return "channel";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["creator", "true", "flags.0?true"],
            ["left", "true", "flags.2?true"],
            ["broadcast", "true", "flags.5?true"],
            ["verified", "true", "flags.7?true"],
            ["megagroup", "true", "flags.8?true"],
            ["restricted", "true", "flags.9?true"],
            ["signatures", "true", "flags.11?true"],
            ["min", "true", "flags.12?true"],
            ["scam", "true", "flags.19?true"],
            ["has_link", "true", "flags.20?true"],
            ["has_geo", "true", "flags.21?true"],
            ["slowmode_enabled", "true", "flags.22?true"],
            ["call_active", "true", "flags.23?true"],
            ["call_not_empty", "true", "flags.24?true"],
            ["fake", "true", "flags.25?true"],
            ["gigagroup", "true", "flags.26?true"],
            ["noforwards", "true", "flags.27?true"],
            ["join_to_send", "true", "flags.28?true"],
            ["join_request", "true", "flags.29?true"],
            ["forum", "true", "flags.30?true"],
            ["flags2", flags, "#"],
            ["stories_hidden", "true", "flags2.1?true"],
            ["stories_hidden_min", "true", "flags2.2?true"],
            ["stories_unavailable", "true", "flags2.3?true"],
            ["id", "bigint", "long"],
            ["access_hash", "bigint", "flags.13?long"],
            ["title", "string", "string"],
            ["username", "string", "flags.6?string"],
            ["photo", _ChatPhoto_, "ChatPhoto"],
            ["date", "number", "int"],
            ["restriction_reason", [_RestrictionReason_], "flags.9?Vector<RestrictionReason>"],
            ["admin_rights", _ChatAdminRights_, "flags.14?ChatAdminRights"],
            ["banned_rights", _ChatBannedRights_, "flags.15?ChatBannedRights"],
            ["default_banned_rights", _ChatBannedRights_, "flags.18?ChatBannedRights"],
            ["participants_count", "number", "flags.17?int"],
            ["usernames", [_Username_], "flags2.0?Vector<Username>"],
            ["stories_max_id", "number", "flags2.4?int"],
            ["color", _PeerColor_, "flags2.7?PeerColor"],
            ["profile_color", _PeerColor_, "flags2.8?PeerColor"],
            ["emoji_status", _EmojiStatus_, "flags2.9?EmojiStatus"],
            ["level", "number", "flags2.10?int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.creator ?? null, "true", "flags.0?true"],
            [this.left ?? null, "true", "flags.2?true"],
            [this.broadcast ?? null, "true", "flags.5?true"],
            [this.verified ?? null, "true", "flags.7?true"],
            [this.megagroup ?? null, "true", "flags.8?true"],
            [this.restricted ?? null, "true", "flags.9?true"],
            [this.signatures ?? null, "true", "flags.11?true"],
            [this.min ?? null, "true", "flags.12?true"],
            [this.scam ?? null, "true", "flags.19?true"],
            [this.has_link ?? null, "true", "flags.20?true"],
            [this.has_geo ?? null, "true", "flags.21?true"],
            [this.slowmode_enabled ?? null, "true", "flags.22?true"],
            [this.call_active ?? null, "true", "flags.23?true"],
            [this.call_not_empty ?? null, "true", "flags.24?true"],
            [this.fake ?? null, "true", "flags.25?true"],
            [this.gigagroup ?? null, "true", "flags.26?true"],
            [this.noforwards ?? null, "true", "flags.27?true"],
            [this.join_to_send ?? null, "true", "flags.28?true"],
            [this.join_request ?? null, "true", "flags.29?true"],
            [this.forum ?? null, "true", "flags.30?true"],
            ["flags2", flags, "#"],
            [this.stories_hidden ?? null, "true", "flags2.1?true"],
            [this.stories_hidden_min ?? null, "true", "flags2.2?true"],
            [this.stories_unavailable ?? null, "true", "flags2.3?true"],
            [this.id, "bigint", "long"],
            [this.access_hash ?? null, "bigint", "flags.13?long"],
            [this.title, "string", "string"],
            [this.username ?? null, "string", "flags.6?string"],
            [this.photo, _ChatPhoto_, "ChatPhoto"],
            [this.date, "number", "int"],
            [this.restriction_reason ?? null, [_RestrictionReason_], "flags.9?Vector<RestrictionReason>"],
            [this.admin_rights ?? null, _ChatAdminRights_, "flags.14?ChatAdminRights"],
            [this.banned_rights ?? null, _ChatBannedRights_, "flags.15?ChatBannedRights"],
            [this.default_banned_rights ?? null, _ChatBannedRights_, "flags.18?ChatBannedRights"],
            [this.participants_count ?? null, "number", "flags.17?int"],
            [this.usernames ?? null, [_Username_], "flags2.0?Vector<Username>"],
            [this.stories_max_id ?? null, "number", "flags2.4?int"],
            [this.color ?? null, _PeerColor_, "flags2.7?PeerColor"],
            [this.profile_color ?? null, _PeerColor_, "flags2.8?PeerColor"],
            [this.emoji_status ?? null, _EmojiStatus_, "flags2.9?EmojiStatus"],
            [this.level ?? null, "number", "flags2.10?int"],
        ];
    }
    constructor(params) {
        super();
        /** Whether the current user is the creator of this channel */
        Object.defineProperty(this, "creator", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether the current user has left or is not a member of this channel */
        Object.defineProperty(this, "left", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Is this a channel? */
        Object.defineProperty(this, "broadcast", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Is this channel verified by telegram? */
        Object.defineProperty(this, "verified", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Is this a supergroup? */
        Object.defineProperty(this, "megagroup", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether viewing/writing in this channel for a reason (see `restriction_reason` */
        Object.defineProperty(this, "restricted", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether signatures are enabled (channels) */
        Object.defineProperty(this, "signatures", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** See [min](https://core.telegram.org/api/min) */
        Object.defineProperty(this, "min", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** This channel/supergroup is probably a scam */
        Object.defineProperty(this, "scam", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this channel has a private join link */
        Object.defineProperty(this, "has_link", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this chanel has a geoposition */
        Object.defineProperty(this, "has_geo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether slow mode is enabled for groups to prevent flood in chat */
        Object.defineProperty(this, "slowmode_enabled", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether a group call or livestream is currently active */
        Object.defineProperty(this, "call_active", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether there's anyone in the group call or livestream */
        Object.defineProperty(this, "call_not_empty", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, this [supergroup/channel](https://core.telegram.org/api/channel) was reported by many users as a fake or scam: be careful when interacting with it. */
        Object.defineProperty(this, "fake", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this [supergroup](https://core.telegram.org/api/channel) is a gigagroup */
        Object.defineProperty(this, "gigagroup", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this channel or group is [protected](https://telegram.org/blog/protected-content-delete-by-date-and-more), thus does not allow forwarding messages from it */
        Object.defineProperty(this, "noforwards", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether a user needs to join the supergroup before they can send messages: can be false only for [discussion groups »](https://core.telegram.org/api/discussion), toggle using [channels.toggleJoinToSend](https://core.telegram.org/method/channels.toggleJoinToSend) */
        Object.defineProperty(this, "join_to_send", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether a user's join request will have to be [approved by administrators](https://core.telegram.org/api/invites#join-requests), toggle using [channels.toggleJoinToSend](https://core.telegram.org/method/channels.toggleJoinRequest) */
        Object.defineProperty(this, "join_request", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this supergroup is a [forum](https://core.telegram.org/api/forum) */
        Object.defineProperty(this, "forum", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether we have [hidden all stories posted by this channel »](https://core.telegram.org/api/stories#hiding-stories-of-other-users). */
        Object.defineProperty(this, "stories_hidden", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, indicates that the `stories_hidden` flag was not populated, and its value must cannot be relied on; use the previously cached value, or re-fetch the constructor using [channels.getChannels](https://core.telegram.org/method/channels.getChannels) to obtain the latest value of the `stories_hidden` flag. */
        Object.defineProperty(this, "stories_hidden_min", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** No stories from the channel are visible. */
        Object.defineProperty(this, "stories_unavailable", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the channel */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Access hash */
        Object.defineProperty(this, "access_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Title */
        Object.defineProperty(this, "title", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Username */
        Object.defineProperty(this, "username", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Profile photo */
        Object.defineProperty(this, "photo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Date when the user joined the supergroup/channel, or if the user isn't a member, its creation date */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Contains the reason why access to this channel must be restricted. */
        Object.defineProperty(this, "restriction_reason", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Admin rights of the user in this channel (see [rights](https://core.telegram.org/api/rights)) */
        Object.defineProperty(this, "admin_rights", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Banned rights of the user in this channel (see [rights](https://core.telegram.org/api/rights)) */
        Object.defineProperty(this, "banned_rights", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Default chat rights (see [rights](https://core.telegram.org/api/rights)) */
        Object.defineProperty(this, "default_banned_rights", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Participant count */
        Object.defineProperty(this, "participants_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Additional usernames */
        Object.defineProperty(this, "usernames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the maximum read [story](https://core.telegram.org/api/stories). */
        Object.defineProperty(this, "stories_max_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The channel's [accent color](https://core.telegram.org/api/colors). */
        Object.defineProperty(this, "color", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The channel's [profile color](https://core.telegram.org/api/colors). */
        Object.defineProperty(this, "profile_color", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Emoji status](https://core.telegram.org/api/emoji-status) */
        Object.defineProperty(this, "emoji_status", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Boost level](https://core.telegram.org/api/boost) */
        Object.defineProperty(this, "level", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.creator = params.creator;
        this.left = params.left;
        this.broadcast = params.broadcast;
        this.verified = params.verified;
        this.megagroup = params.megagroup;
        this.restricted = params.restricted;
        this.signatures = params.signatures;
        this.min = params.min;
        this.scam = params.scam;
        this.has_link = params.has_link;
        this.has_geo = params.has_geo;
        this.slowmode_enabled = params.slowmode_enabled;
        this.call_active = params.call_active;
        this.call_not_empty = params.call_not_empty;
        this.fake = params.fake;
        this.gigagroup = params.gigagroup;
        this.noforwards = params.noforwards;
        this.join_to_send = params.join_to_send;
        this.join_request = params.join_request;
        this.forum = params.forum;
        this.stories_hidden = params.stories_hidden;
        this.stories_hidden_min = params.stories_hidden_min;
        this.stories_unavailable = params.stories_unavailable;
        this.id = params.id;
        this.access_hash = params.access_hash;
        this.title = params.title;
        this.username = params.username;
        this.photo = params.photo;
        this.date = params.date;
        this.restriction_reason = params.restriction_reason;
        this.admin_rights = params.admin_rights;
        this.banned_rights = params.banned_rights;
        this.default_banned_rights = params.default_banned_rights;
        this.participants_count = params.participants_count;
        this.usernames = params.usernames;
        this.stories_max_id = params.stories_max_id;
        this.color = params.color;
        this.profile_color = params.profile_color;
        this.emoji_status = params.emoji_status;
        this.level = params.level;
    }
}
/** Indicates a channel/supergroup we can't access because we were banned, or for some other reason. */
export class ChannelForbidden_ extends _Chat_ {
    get [id]() {
        return 0x17D493D5;
    }
    static get [name]() {
        return "channelForbidden";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["broadcast", "true", "flags.5?true"],
            ["megagroup", "true", "flags.8?true"],
            ["id", "bigint", "long"],
            ["access_hash", "bigint", "long"],
            ["title", "string", "string"],
            ["until_date", "number", "flags.16?int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.broadcast ?? null, "true", "flags.5?true"],
            [this.megagroup ?? null, "true", "flags.8?true"],
            [this.id, "bigint", "long"],
            [this.access_hash, "bigint", "long"],
            [this.title, "string", "string"],
            [this.until_date ?? null, "number", "flags.16?int"],
        ];
    }
    constructor(params) {
        super();
        /** Is this a channel */
        Object.defineProperty(this, "broadcast", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Is this a supergroup */
        Object.defineProperty(this, "megagroup", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Channel ID */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Access hash */
        Object.defineProperty(this, "access_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Title */
        Object.defineProperty(this, "title", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The ban is valid until the specified date */
        Object.defineProperty(this, "until_date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.broadcast = params.broadcast;
        this.megagroup = params.megagroup;
        this.id = params.id;
        this.access_hash = params.access_hash;
        this.title = params.title;
        this.until_date = params.until_date;
    }
}
/** Full info about a [basic group](https://core.telegram.org/api/channel#basic-groups). */
export class ChatFull_ extends _ChatFull_ {
    get [id]() {
        return 0xC9D31138;
    }
    static get [name]() {
        return "chatFull";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["can_set_username", "true", "flags.7?true"],
            ["has_scheduled", "true", "flags.8?true"],
            ["translations_disabled", "true", "flags.19?true"],
            ["id", "bigint", "long"],
            ["about", "string", "string"],
            ["participants", _ChatParticipants_, "ChatParticipants"],
            ["chat_photo", _Photo_, "flags.2?Photo"],
            ["notify_settings", _PeerNotifySettings_, "PeerNotifySettings"],
            ["exported_invite", _ExportedChatInvite_, "flags.13?ExportedChatInvite"],
            ["bot_info", [_BotInfo_], "flags.3?Vector<BotInfo>"],
            ["pinned_msg_id", "number", "flags.6?int"],
            ["folder_id", "number", "flags.11?int"],
            ["call", _InputGroupCall_, "flags.12?InputGroupCall"],
            ["ttl_period", "number", "flags.14?int"],
            ["groupcall_default_join_as", _Peer_, "flags.15?Peer"],
            ["theme_emoticon", "string", "flags.16?string"],
            ["requests_pending", "number", "flags.17?int"],
            ["recent_requesters", ["bigint"], "flags.17?Vector<long>"],
            ["available_reactions", _ChatReactions_, "flags.18?ChatReactions"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.can_set_username ?? null, "true", "flags.7?true"],
            [this.has_scheduled ?? null, "true", "flags.8?true"],
            [this.translations_disabled ?? null, "true", "flags.19?true"],
            [this.id, "bigint", "long"],
            [this.about, "string", "string"],
            [this.participants, _ChatParticipants_, "ChatParticipants"],
            [this.chat_photo ?? null, _Photo_, "flags.2?Photo"],
            [this.notify_settings, _PeerNotifySettings_, "PeerNotifySettings"],
            [this.exported_invite ?? null, _ExportedChatInvite_, "flags.13?ExportedChatInvite"],
            [this.bot_info ?? null, [_BotInfo_], "flags.3?Vector<BotInfo>"],
            [this.pinned_msg_id ?? null, "number", "flags.6?int"],
            [this.folder_id ?? null, "number", "flags.11?int"],
            [this.call ?? null, _InputGroupCall_, "flags.12?InputGroupCall"],
            [this.ttl_period ?? null, "number", "flags.14?int"],
            [this.groupcall_default_join_as ?? null, _Peer_, "flags.15?Peer"],
            [this.theme_emoticon ?? null, "string", "flags.16?string"],
            [this.requests_pending ?? null, "number", "flags.17?int"],
            [this.recent_requesters ?? null, ["bigint"], "flags.17?Vector<long>"],
            [this.available_reactions ?? null, _ChatReactions_, "flags.18?ChatReactions"],
        ];
    }
    constructor(params) {
        super();
        /** Can we change the username of this chat */
        Object.defineProperty(this, "can_set_username", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether [scheduled messages](https://core.telegram.org/api/scheduled-messages) are available */
        Object.defineProperty(this, "has_scheduled", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether the [real-time chat translation popup](https://core.telegram.org/api/translation) should be hidden. */
        Object.defineProperty(this, "translations_disabled", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the chat */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** About string for this chat */
        Object.defineProperty(this, "about", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Participant list */
        Object.defineProperty(this, "participants", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Chat photo */
        Object.defineProperty(this, "chat_photo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Notification settings */
        Object.defineProperty(this, "notify_settings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Chat invite */
        Object.defineProperty(this, "exported_invite", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Info about bots that are in this chat */
        Object.defineProperty(this, "bot_info", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Message ID of the last [pinned message](https://core.telegram.org/api/pin) */
        Object.defineProperty(this, "pinned_msg_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Peer folder ID, for more info click here](https://core.telegram.org/api/folders#peer-folders) */
        Object.defineProperty(this, "folder_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Group call information */
        Object.defineProperty(this, "call", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Time-To-Live of messages sent by the current user to this chat */
        Object.defineProperty(this, "ttl_period", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** When using [phone.getGroupCallJoinAs](https://core.telegram.org/method/phone.getGroupCallJoinAs) to get a list of peers that can be used to join a group call, this field indicates the peer that should be selected by default. */
        Object.defineProperty(this, "groupcall_default_join_as", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Emoji representing a specific chat theme */
        Object.defineProperty(this, "theme_emoticon", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Pending [join requests »](https://core.telegram.org/api/invites#join-requests) */
        Object.defineProperty(this, "requests_pending", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** IDs of users who requested to join recently */
        Object.defineProperty(this, "recent_requesters", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Allowed [message reactions »](https://core.telegram.org/api/reactions) */
        Object.defineProperty(this, "available_reactions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.can_set_username = params.can_set_username;
        this.has_scheduled = params.has_scheduled;
        this.translations_disabled = params.translations_disabled;
        this.id = params.id;
        this.about = params.about;
        this.participants = params.participants;
        this.chat_photo = params.chat_photo;
        this.notify_settings = params.notify_settings;
        this.exported_invite = params.exported_invite;
        this.bot_info = params.bot_info;
        this.pinned_msg_id = params.pinned_msg_id;
        this.folder_id = params.folder_id;
        this.call = params.call;
        this.ttl_period = params.ttl_period;
        this.groupcall_default_join_as = params.groupcall_default_join_as;
        this.theme_emoticon = params.theme_emoticon;
        this.requests_pending = params.requests_pending;
        this.recent_requesters = params.recent_requesters;
        this.available_reactions = params.available_reactions;
    }
}
/** Full info about a [channel](https://core.telegram.org/api/channel#channels), [supergroup](https://core.telegram.org/api/channel#supergroups) or [gigagroup](https://core.telegram.org/api/channel#gigagroups). */
export class ChannelFull_ extends _ChatFull_ {
    get [id]() {
        return 0x44C054A7;
    }
    static get [name]() {
        return "channelFull";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["can_view_participants", "true", "flags.3?true"],
            ["can_set_username", "true", "flags.6?true"],
            ["can_set_stickers", "true", "flags.7?true"],
            ["hidden_prehistory", "true", "flags.10?true"],
            ["can_set_location", "true", "flags.16?true"],
            ["has_scheduled", "true", "flags.19?true"],
            ["can_view_stats", "true", "flags.20?true"],
            ["blocked", "true", "flags.22?true"],
            ["flags2", flags, "#"],
            ["can_delete_channel", "true", "flags2.0?true"],
            ["antispam", "true", "flags2.1?true"],
            ["participants_hidden", "true", "flags2.2?true"],
            ["translations_disabled", "true", "flags2.3?true"],
            ["stories_pinned_available", "true", "flags2.5?true"],
            ["view_forum_as_messages", "true", "flags2.6?true"],
            ["id", "bigint", "long"],
            ["about", "string", "string"],
            ["participants_count", "number", "flags.0?int"],
            ["admins_count", "number", "flags.1?int"],
            ["kicked_count", "number", "flags.2?int"],
            ["banned_count", "number", "flags.2?int"],
            ["online_count", "number", "flags.13?int"],
            ["read_inbox_max_id", "number", "int"],
            ["read_outbox_max_id", "number", "int"],
            ["unread_count", "number", "int"],
            ["chat_photo", _Photo_, "Photo"],
            ["notify_settings", _PeerNotifySettings_, "PeerNotifySettings"],
            ["exported_invite", _ExportedChatInvite_, "flags.23?ExportedChatInvite"],
            ["bot_info", [_BotInfo_], "Vector<BotInfo>"],
            ["migrated_from_chat_id", "bigint", "flags.4?long"],
            ["migrated_from_max_id", "number", "flags.4?int"],
            ["pinned_msg_id", "number", "flags.5?int"],
            ["stickerset", _StickerSet_, "flags.8?StickerSet"],
            ["available_min_id", "number", "flags.9?int"],
            ["folder_id", "number", "flags.11?int"],
            ["linked_chat_id", "bigint", "flags.14?long"],
            ["location", _ChannelLocation_, "flags.15?ChannelLocation"],
            ["slowmode_seconds", "number", "flags.17?int"],
            ["slowmode_next_send_date", "number", "flags.18?int"],
            ["stats_dc", "number", "flags.12?int"],
            ["pts", "number", "int"],
            ["call", _InputGroupCall_, "flags.21?InputGroupCall"],
            ["ttl_period", "number", "flags.24?int"],
            ["pending_suggestions", ["string"], "flags.25?Vector<string>"],
            ["groupcall_default_join_as", _Peer_, "flags.26?Peer"],
            ["theme_emoticon", "string", "flags.27?string"],
            ["requests_pending", "number", "flags.28?int"],
            ["recent_requesters", ["bigint"], "flags.28?Vector<long>"],
            ["default_send_as", _Peer_, "flags.29?Peer"],
            ["available_reactions", _ChatReactions_, "flags.30?ChatReactions"],
            ["stories", _PeerStories_, "flags2.4?PeerStories"],
            ["wallpaper", _WallPaper_, "flags2.7?WallPaper"],
            ["boosts_applied", "number", "flags2.8?int"],
            ["boosts_unrestrict", "number", "flags2.9?int"],
            ["emojiset", _StickerSet_, "flags2.10?StickerSet"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.can_view_participants ?? null, "true", "flags.3?true"],
            [this.can_set_username ?? null, "true", "flags.6?true"],
            [this.can_set_stickers ?? null, "true", "flags.7?true"],
            [this.hidden_prehistory ?? null, "true", "flags.10?true"],
            [this.can_set_location ?? null, "true", "flags.16?true"],
            [this.has_scheduled ?? null, "true", "flags.19?true"],
            [this.can_view_stats ?? null, "true", "flags.20?true"],
            [this.blocked ?? null, "true", "flags.22?true"],
            ["flags2", flags, "#"],
            [this.can_delete_channel ?? null, "true", "flags2.0?true"],
            [this.antispam ?? null, "true", "flags2.1?true"],
            [this.participants_hidden ?? null, "true", "flags2.2?true"],
            [this.translations_disabled ?? null, "true", "flags2.3?true"],
            [this.stories_pinned_available ?? null, "true", "flags2.5?true"],
            [this.view_forum_as_messages ?? null, "true", "flags2.6?true"],
            [this.id, "bigint", "long"],
            [this.about, "string", "string"],
            [this.participants_count ?? null, "number", "flags.0?int"],
            [this.admins_count ?? null, "number", "flags.1?int"],
            [this.kicked_count ?? null, "number", "flags.2?int"],
            [this.banned_count ?? null, "number", "flags.2?int"],
            [this.online_count ?? null, "number", "flags.13?int"],
            [this.read_inbox_max_id, "number", "int"],
            [this.read_outbox_max_id, "number", "int"],
            [this.unread_count, "number", "int"],
            [this.chat_photo, _Photo_, "Photo"],
            [this.notify_settings, _PeerNotifySettings_, "PeerNotifySettings"],
            [this.exported_invite ?? null, _ExportedChatInvite_, "flags.23?ExportedChatInvite"],
            [this.bot_info, [_BotInfo_], "Vector<BotInfo>"],
            [this.migrated_from_chat_id ?? null, "bigint", "flags.4?long"],
            [this.migrated_from_max_id ?? null, "number", "flags.4?int"],
            [this.pinned_msg_id ?? null, "number", "flags.5?int"],
            [this.stickerset ?? null, _StickerSet_, "flags.8?StickerSet"],
            [this.available_min_id ?? null, "number", "flags.9?int"],
            [this.folder_id ?? null, "number", "flags.11?int"],
            [this.linked_chat_id ?? null, "bigint", "flags.14?long"],
            [this.location ?? null, _ChannelLocation_, "flags.15?ChannelLocation"],
            [this.slowmode_seconds ?? null, "number", "flags.17?int"],
            [this.slowmode_next_send_date ?? null, "number", "flags.18?int"],
            [this.stats_dc ?? null, "number", "flags.12?int"],
            [this.pts, "number", "int"],
            [this.call ?? null, _InputGroupCall_, "flags.21?InputGroupCall"],
            [this.ttl_period ?? null, "number", "flags.24?int"],
            [this.pending_suggestions ?? null, ["string"], "flags.25?Vector<string>"],
            [this.groupcall_default_join_as ?? null, _Peer_, "flags.26?Peer"],
            [this.theme_emoticon ?? null, "string", "flags.27?string"],
            [this.requests_pending ?? null, "number", "flags.28?int"],
            [this.recent_requesters ?? null, ["bigint"], "flags.28?Vector<long>"],
            [this.default_send_as ?? null, _Peer_, "flags.29?Peer"],
            [this.available_reactions ?? null, _ChatReactions_, "flags.30?ChatReactions"],
            [this.stories ?? null, _PeerStories_, "flags2.4?PeerStories"],
            [this.wallpaper ?? null, _WallPaper_, "flags2.7?WallPaper"],
            [this.boosts_applied ?? null, "number", "flags2.8?int"],
            [this.boosts_unrestrict ?? null, "number", "flags2.9?int"],
            [this.emojiset ?? null, _StickerSet_, "flags2.10?StickerSet"],
        ];
    }
    constructor(params) {
        super();
        /** Can we view the participant list? */
        Object.defineProperty(this, "can_view_participants", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Can we set the channel's username? */
        Object.defineProperty(this, "can_set_username", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Can we [associate](https://core.telegram.org/method/channels.setStickers) a stickerpack to the supergroup? */
        Object.defineProperty(this, "can_set_stickers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Is the history before we joined hidden to us? */
        Object.defineProperty(this, "hidden_prehistory", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Can we set the geolocation of this group (for geogroups) */
        Object.defineProperty(this, "can_set_location", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether scheduled messages are available */
        Object.defineProperty(this, "has_scheduled", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Can the user view [channel/supergroup statistics](https://core.telegram.org/api/stats) */
        Object.defineProperty(this, "can_view_stats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether any anonymous admin of this supergroup was blocked: if set, you won't receive messages from anonymous group admins in [discussion replies via @replies](https://core.telegram.org/api/discussion) */
        Object.defineProperty(this, "blocked", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Can we delete this channel? */
        Object.defineProperty(this, "can_delete_channel", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether [native antispam](https://core.telegram.org/api/antispam) functionality is enabled in this supergroup. */
        Object.defineProperty(this, "antispam", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether the participant list is hidden. */
        Object.defineProperty(this, "participants_hidden", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether the [real-time chat translation popup](https://core.telegram.org/api/translation) should be hidden. */
        Object.defineProperty(this, "translations_disabled", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this user has some [pinned stories](https://core.telegram.org/api/stories#pinned-or-archived-stories). */
        Object.defineProperty(this, "stories_pinned_available", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Users may also choose to display messages from all topics of a [forum](https://core.telegram.org/api/forum) as if they were sent to a normal group, using a "View as messages" setting in the local client.
        This setting only affects the current account, and is synced to other logged in sessions using the [channels.toggleViewForumAsMessages](https://core.telegram.org/method/channels.toggleViewForumAsMessages) method; invoking this method will update the value of this flag. */
        Object.defineProperty(this, "view_forum_as_messages", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the channel */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Info about the channel */
        Object.defineProperty(this, "about", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of participants of the channel */
        Object.defineProperty(this, "participants_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of channel admins */
        Object.defineProperty(this, "admins_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of users [kicked](https://core.telegram.org/api/rights) from the channel */
        Object.defineProperty(this, "kicked_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of users [banned](https://core.telegram.org/api/rights) from the channel */
        Object.defineProperty(this, "banned_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of users currently online */
        Object.defineProperty(this, "online_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Position up to which all incoming messages are read. */
        Object.defineProperty(this, "read_inbox_max_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Position up to which all outgoing messages are read. */
        Object.defineProperty(this, "read_outbox_max_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Count of unread messages */
        Object.defineProperty(this, "unread_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Channel picture */
        Object.defineProperty(this, "chat_photo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Notification settings */
        Object.defineProperty(this, "notify_settings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Invite link */
        Object.defineProperty(this, "exported_invite", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Info about bots in the channel/supergroup */
        Object.defineProperty(this, "bot_info", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The chat ID from which this group was [migrated](https://core.telegram.org/api/channel) */
        Object.defineProperty(this, "migrated_from_chat_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The message ID in the original chat at which this group was [migrated](https://core.telegram.org/api/channel) */
        Object.defineProperty(this, "migrated_from_max_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Message ID of the last [pinned message](https://core.telegram.org/api/pin) */
        Object.defineProperty(this, "pinned_msg_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Associated stickerset */
        Object.defineProperty(this, "stickerset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Identifier of a maximum unavailable message in a channel due to hidden history. */
        Object.defineProperty(this, "available_min_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Peer folder ID, for more info click here](https://core.telegram.org/api/folders#peer-folders) */
        Object.defineProperty(this, "folder_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the linked [discussion chat](https://core.telegram.org/api/discussion) for channels */
        Object.defineProperty(this, "linked_chat_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Location of the geogroup */
        Object.defineProperty(this, "location", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If specified, users in supergroups will only be able to send one message every `slowmode_seconds` seconds */
        Object.defineProperty(this, "slowmode_seconds", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Indicates when the user will be allowed to send another message in the supergroup (unixtime) */
        Object.defineProperty(this, "slowmode_next_send_date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, specifies the DC to use for fetching channel statistics */
        Object.defineProperty(this, "stats_dc", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Latest [PTS](https://core.telegram.org/api/updates) for this channel */
        Object.defineProperty(this, "pts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Livestream or group call information */
        Object.defineProperty(this, "call", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Time-To-Live of messages in this channel or supergroup */
        Object.defineProperty(this, "ttl_period", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** A list of [suggested actions](https://core.telegram.org/api/config#suggestions) for the supergroup admin, [see here for more info »](https://core.telegram.org/api/config#suggestions). */
        Object.defineProperty(this, "pending_suggestions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** When using [phone.getGroupCallJoinAs](https://core.telegram.org/method/phone.getGroupCallJoinAs) to get a list of peers that can be used to join a group call, this field indicates the peer that should be selected by default. */
        Object.defineProperty(this, "groupcall_default_join_as", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Emoji representing a specific chat theme */
        Object.defineProperty(this, "theme_emoticon", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Pending [join requests »](https://core.telegram.org/api/invites#join-requests) */
        Object.defineProperty(this, "requests_pending", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** IDs of users who requested to join recently */
        Object.defineProperty(this, "recent_requesters", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Default peer used for sending messages to this channel */
        Object.defineProperty(this, "default_send_as", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Allowed [message reactions »](https://core.telegram.org/api/reactions) */
        Object.defineProperty(this, "available_reactions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Channel [stories](https://core.telegram.org/api/stories) */
        Object.defineProperty(this, "stories", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Wallpaper](https://core.telegram.org/api/wallpapers) */
        Object.defineProperty(this, "wallpaper", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "boosts_applied", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "boosts_unrestrict", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "emojiset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.can_view_participants = params.can_view_participants;
        this.can_set_username = params.can_set_username;
        this.can_set_stickers = params.can_set_stickers;
        this.hidden_prehistory = params.hidden_prehistory;
        this.can_set_location = params.can_set_location;
        this.has_scheduled = params.has_scheduled;
        this.can_view_stats = params.can_view_stats;
        this.blocked = params.blocked;
        this.can_delete_channel = params.can_delete_channel;
        this.antispam = params.antispam;
        this.participants_hidden = params.participants_hidden;
        this.translations_disabled = params.translations_disabled;
        this.stories_pinned_available = params.stories_pinned_available;
        this.view_forum_as_messages = params.view_forum_as_messages;
        this.id = params.id;
        this.about = params.about;
        this.participants_count = params.participants_count;
        this.admins_count = params.admins_count;
        this.kicked_count = params.kicked_count;
        this.banned_count = params.banned_count;
        this.online_count = params.online_count;
        this.read_inbox_max_id = params.read_inbox_max_id;
        this.read_outbox_max_id = params.read_outbox_max_id;
        this.unread_count = params.unread_count;
        this.chat_photo = params.chat_photo;
        this.notify_settings = params.notify_settings;
        this.exported_invite = params.exported_invite;
        this.bot_info = params.bot_info;
        this.migrated_from_chat_id = params.migrated_from_chat_id;
        this.migrated_from_max_id = params.migrated_from_max_id;
        this.pinned_msg_id = params.pinned_msg_id;
        this.stickerset = params.stickerset;
        this.available_min_id = params.available_min_id;
        this.folder_id = params.folder_id;
        this.linked_chat_id = params.linked_chat_id;
        this.location = params.location;
        this.slowmode_seconds = params.slowmode_seconds;
        this.slowmode_next_send_date = params.slowmode_next_send_date;
        this.stats_dc = params.stats_dc;
        this.pts = params.pts;
        this.call = params.call;
        this.ttl_period = params.ttl_period;
        this.pending_suggestions = params.pending_suggestions;
        this.groupcall_default_join_as = params.groupcall_default_join_as;
        this.theme_emoticon = params.theme_emoticon;
        this.requests_pending = params.requests_pending;
        this.recent_requesters = params.recent_requesters;
        this.default_send_as = params.default_send_as;
        this.available_reactions = params.available_reactions;
        this.stories = params.stories;
        this.wallpaper = params.wallpaper;
        this.boosts_applied = params.boosts_applied;
        this.boosts_unrestrict = params.boosts_unrestrict;
        this.emojiset = params.emojiset;
    }
}
/** Group member. */
export class ChatParticipant_ extends _ChatParticipant_ {
    get [id]() {
        return 0xC02D4007;
    }
    static get [name]() {
        return "chatParticipant";
    }
    static get [paramDesc]() {
        return [
            ["user_id", "bigint", "long"],
            ["inviter_id", "bigint", "long"],
            ["date", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.user_id, "bigint", "long"],
            [this.inviter_id, "bigint", "long"],
            [this.date, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Member user ID */
        Object.defineProperty(this, "user_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the user that added the member to the group */
        Object.defineProperty(this, "inviter_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Date added to the group */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.user_id = params.user_id;
        this.inviter_id = params.inviter_id;
        this.date = params.date;
    }
}
/** Represents the creator of the group */
export class ChatParticipantCreator_ extends _ChatParticipant_ {
    get [id]() {
        return 0xE46BCEE4;
    }
    static get [name]() {
        return "chatParticipantCreator";
    }
    static get [paramDesc]() {
        return [
            ["user_id", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.user_id, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** ID of the user that created the group */
        Object.defineProperty(this, "user_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.user_id = params.user_id;
    }
}
/** Chat admin */
export class ChatParticipantAdmin_ extends _ChatParticipant_ {
    get [id]() {
        return 0xA0933F5B;
    }
    static get [name]() {
        return "chatParticipantAdmin";
    }
    static get [paramDesc]() {
        return [
            ["user_id", "bigint", "long"],
            ["inviter_id", "bigint", "long"],
            ["date", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.user_id, "bigint", "long"],
            [this.inviter_id, "bigint", "long"],
            [this.date, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** ID of a group member that is admin */
        Object.defineProperty(this, "user_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the user that added the member to the group */
        Object.defineProperty(this, "inviter_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Date when the user was added */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.user_id = params.user_id;
        this.inviter_id = params.inviter_id;
        this.date = params.date;
    }
}
/** Info on members is unavailable */
export class ChatParticipantsForbidden_ extends _ChatParticipants_ {
    get [id]() {
        return 0x8763D3E1;
    }
    static get [name]() {
        return "chatParticipantsForbidden";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["chat_id", "bigint", "long"],
            ["self_participant", _ChatParticipant_, "flags.0?ChatParticipant"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.chat_id, "bigint", "long"],
            [this.self_participant ?? null, _ChatParticipant_, "flags.0?ChatParticipant"],
        ];
    }
    constructor(params) {
        super();
        /** Group ID */
        Object.defineProperty(this, "chat_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Info about the group membership of the current user */
        Object.defineProperty(this, "self_participant", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.chat_id = params.chat_id;
        this.self_participant = params.self_participant;
    }
}
/** Group members. */
export class ChatParticipants_ extends _ChatParticipants_ {
    get [id]() {
        return 0x3CBC93F8;
    }
    static get [name]() {
        return "chatParticipants";
    }
    static get [paramDesc]() {
        return [
            ["chat_id", "bigint", "long"],
            ["participants", [_ChatParticipant_], "Vector<ChatParticipant>"],
            ["version", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.chat_id, "bigint", "long"],
            [this.participants, [_ChatParticipant_], "Vector<ChatParticipant>"],
            [this.version, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Group identifier */
        Object.defineProperty(this, "chat_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** List of group members */
        Object.defineProperty(this, "participants", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Group version number */
        Object.defineProperty(this, "version", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.chat_id = params.chat_id;
        this.participants = params.participants;
        this.version = params.version;
    }
}
/** Group photo is not set. */
export class ChatPhotoEmpty_ extends _ChatPhoto_ {
    get [id]() {
        return 0x37C1011C;
    }
    static get [name]() {
        return "chatPhotoEmpty";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Group profile photo. */
export class ChatPhoto_ extends _ChatPhoto_ {
    get [id]() {
        return 0x1C6E1C11;
    }
    static get [name]() {
        return "chatPhoto";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["has_video", "true", "flags.0?true"],
            ["photo_id", "bigint", "long"],
            ["stripped_thumb", Uint8Array, "flags.1?bytes"],
            ["dc_id", "number", "int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.has_video ?? null, "true", "flags.0?true"],
            [this.photo_id, "bigint", "long"],
            [this.stripped_thumb ?? null, Uint8Array, "flags.1?bytes"],
            [this.dc_id, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Whether the user has an animated profile picture */
        Object.defineProperty(this, "has_video", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Photo ID */
        Object.defineProperty(this, "photo_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Stripped thumbnail](https://core.telegram.org/api/files#stripped-thumbnails) */
        Object.defineProperty(this, "stripped_thumb", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** DC where this photo is stored */
        Object.defineProperty(this, "dc_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.has_video = params.has_video;
        this.photo_id = params.photo_id;
        this.stripped_thumb = params.stripped_thumb;
        this.dc_id = params.dc_id;
    }
}
/** Empty constructor, non-existent message. */
export class MessageEmpty_ extends _Message_ {
    get [id]() {
        return 0x90A6CA84;
    }
    static get [name]() {
        return "messageEmpty";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["id", "number", "int"],
            ["peer_id", _Peer_, "flags.0?Peer"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.id, "number", "int"],
            [this.peer_id ?? null, _Peer_, "flags.0?Peer"],
        ];
    }
    constructor(params) {
        super();
        /** Message identifier */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Peer ID, the chat where this message was sent */
        Object.defineProperty(this, "peer_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
        this.peer_id = params.peer_id;
    }
}
/** A message */
export class Message_ extends _Message_ {
    get [id]() {
        return 0xA66C7EFC;
    }
    static get [name]() {
        return "message";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["out", "true", "flags.1?true"],
            ["mentioned", "true", "flags.4?true"],
            ["media_unread", "true", "flags.5?true"],
            ["silent", "true", "flags.13?true"],
            ["post", "true", "flags.14?true"],
            ["from_scheduled", "true", "flags.18?true"],
            ["legacy", "true", "flags.19?true"],
            ["edit_hide", "true", "flags.21?true"],
            ["pinned", "true", "flags.24?true"],
            ["noforwards", "true", "flags.26?true"],
            ["invert_media", "true", "flags.27?true"],
            ["id", "number", "int"],
            ["from_id", _Peer_, "flags.8?Peer"],
            ["from_boosts_applied", "number", "flags.29?int"],
            ["peer_id", _Peer_, "Peer"],
            ["saved_peer_id", _Peer_, "flags.28?Peer"],
            ["fwd_from", _MessageFwdHeader_, "flags.2?MessageFwdHeader"],
            ["via_bot_id", "bigint", "flags.11?long"],
            ["reply_to", _MessageReplyHeader_, "flags.3?MessageReplyHeader"],
            ["date", "number", "int"],
            ["message", "string", "string"],
            ["media", _MessageMedia_, "flags.9?MessageMedia"],
            ["reply_markup", _ReplyMarkup_, "flags.6?ReplyMarkup"],
            ["entities", [_MessageEntity_], "flags.7?Vector<MessageEntity>"],
            ["views", "number", "flags.10?int"],
            ["forwards", "number", "flags.10?int"],
            ["replies", _MessageReplies_, "flags.23?MessageReplies"],
            ["edit_date", "number", "flags.15?int"],
            ["post_author", "string", "flags.16?string"],
            ["grouped_id", "bigint", "flags.17?long"],
            ["reactions", _MessageReactions_, "flags.20?MessageReactions"],
            ["restriction_reason", [_RestrictionReason_], "flags.22?Vector<RestrictionReason>"],
            ["ttl_period", "number", "flags.25?int"],
            ["quick_reply_shortcut_id", "number", "flags.30?int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.out ?? null, "true", "flags.1?true"],
            [this.mentioned ?? null, "true", "flags.4?true"],
            [this.media_unread ?? null, "true", "flags.5?true"],
            [this.silent ?? null, "true", "flags.13?true"],
            [this.post ?? null, "true", "flags.14?true"],
            [this.from_scheduled ?? null, "true", "flags.18?true"],
            [this.legacy ?? null, "true", "flags.19?true"],
            [this.edit_hide ?? null, "true", "flags.21?true"],
            [this.pinned ?? null, "true", "flags.24?true"],
            [this.noforwards ?? null, "true", "flags.26?true"],
            [this.invert_media ?? null, "true", "flags.27?true"],
            [this.id, "number", "int"],
            [this.from_id ?? null, _Peer_, "flags.8?Peer"],
            [this.from_boosts_applied ?? null, "number", "flags.29?int"],
            [this.peer_id, _Peer_, "Peer"],
            [this.saved_peer_id ?? null, _Peer_, "flags.28?Peer"],
            [this.fwd_from ?? null, _MessageFwdHeader_, "flags.2?MessageFwdHeader"],
            [this.via_bot_id ?? null, "bigint", "flags.11?long"],
            [this.reply_to ?? null, _MessageReplyHeader_, "flags.3?MessageReplyHeader"],
            [this.date, "number", "int"],
            [this.message, "string", "string"],
            [this.media ?? null, _MessageMedia_, "flags.9?MessageMedia"],
            [this.reply_markup ?? null, _ReplyMarkup_, "flags.6?ReplyMarkup"],
            [this.entities ?? null, [_MessageEntity_], "flags.7?Vector<MessageEntity>"],
            [this.views ?? null, "number", "flags.10?int"],
            [this.forwards ?? null, "number", "flags.10?int"],
            [this.replies ?? null, _MessageReplies_, "flags.23?MessageReplies"],
            [this.edit_date ?? null, "number", "flags.15?int"],
            [this.post_author ?? null, "string", "flags.16?string"],
            [this.grouped_id ?? null, "bigint", "flags.17?long"],
            [this.reactions ?? null, _MessageReactions_, "flags.20?MessageReactions"],
            [this.restriction_reason ?? null, [_RestrictionReason_], "flags.22?Vector<RestrictionReason>"],
            [this.ttl_period ?? null, "number", "flags.25?int"],
            [this.quick_reply_shortcut_id ?? null, "number", "flags.30?int"],
        ];
    }
    constructor(params) {
        super();
        /** Is this an outgoing message */
        Object.defineProperty(this, "out", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether we were [mentioned](https://core.telegram.org/api/mentions) in this message */
        Object.defineProperty(this, "mentioned", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether there are unread media attachments in this message */
        Object.defineProperty(this, "media_unread", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this is a silent message (no notification triggered) */
        Object.defineProperty(this, "silent", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this is a channel post */
        Object.defineProperty(this, "post", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this is a [scheduled message](https://core.telegram.org/api/scheduled-messages) */
        Object.defineProperty(this, "from_scheduled", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** This is a legacy message: it has to be refetched with the new layer */
        Object.defineProperty(this, "legacy", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether the message should be shown as not modified to the user, even if an edit date is present */
        Object.defineProperty(this, "edit_hide", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this message is [pinned](https://core.telegram.org/api/pin) */
        Object.defineProperty(this, "pinned", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this message is [protected](https://telegram.org/blog/protected-content-delete-by-date-and-more) and thus cannot be forwarded; clients should also prevent users from saving attached media (i.e. videos should only be streamed, photos should be kept in RAM, et cetera). */
        Object.defineProperty(this, "noforwards", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, any eventual webpage preview will be shown on top of the message instead of at the bottom. */
        Object.defineProperty(this, "invert_media", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the message */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the sender of the message */
        Object.defineProperty(this, "from_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "from_boosts_applied", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Peer ID, the chat where this message was sent */
        Object.defineProperty(this, "peer_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Messages fetched from a [saved messages dialog »](https://core.telegram.org/api/saved-messages) will have `peer`\=[inputPeerSelf](https://core.telegram.org/constructor/inputPeerSelf) and the `saved_peer_id` flag set to the ID of the saved dialog. */
        Object.defineProperty(this, "saved_peer_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Info about forwarded messages */
        Object.defineProperty(this, "fwd_from", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the inline bot that generated the message */
        Object.defineProperty(this, "via_bot_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Reply information */
        Object.defineProperty(this, "reply_to", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Date of the message */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The message */
        Object.defineProperty(this, "message", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Media attachment */
        Object.defineProperty(this, "media", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Reply markup (bot/inline keyboards) */
        Object.defineProperty(this, "reply_markup", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Message [entities](https://core.telegram.org/api/entities) for styled text */
        Object.defineProperty(this, "entities", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** View count for channel posts */
        Object.defineProperty(this, "views", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Forward counter */
        Object.defineProperty(this, "forwards", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Info about [post comments (for channels) or message replies (for groups)](https://core.telegram.org/api/threads) */
        Object.defineProperty(this, "replies", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Last edit date of this message */
        Object.defineProperty(this, "edit_date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Name of the author of this message for channel posts (with signatures enabled) */
        Object.defineProperty(this, "post_author", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Multiple media messages sent using [messages.sendMultiMedia](https://core.telegram.org/method/messages.sendMultiMedia) with the same grouped ID indicate an [album or media group](https://core.telegram.org/api/files#albums-grouped-media) */
        Object.defineProperty(this, "grouped_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Reactions to this message */
        Object.defineProperty(this, "reactions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Contains the reason why access to this message must be restricted. */
        Object.defineProperty(this, "restriction_reason", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Time To Live of the message, once message.date+message.ttl\_period === time(), the message will be deleted on the server, and must be deleted locally as well. */
        Object.defineProperty(this, "ttl_period", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "quick_reply_shortcut_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.out = params.out;
        this.mentioned = params.mentioned;
        this.media_unread = params.media_unread;
        this.silent = params.silent;
        this.post = params.post;
        this.from_scheduled = params.from_scheduled;
        this.legacy = params.legacy;
        this.edit_hide = params.edit_hide;
        this.pinned = params.pinned;
        this.noforwards = params.noforwards;
        this.invert_media = params.invert_media;
        this.id = params.id;
        this.from_id = params.from_id;
        this.from_boosts_applied = params.from_boosts_applied;
        this.peer_id = params.peer_id;
        this.saved_peer_id = params.saved_peer_id;
        this.fwd_from = params.fwd_from;
        this.via_bot_id = params.via_bot_id;
        this.reply_to = params.reply_to;
        this.date = params.date;
        this.message = params.message;
        this.media = params.media;
        this.reply_markup = params.reply_markup;
        this.entities = params.entities;
        this.views = params.views;
        this.forwards = params.forwards;
        this.replies = params.replies;
        this.edit_date = params.edit_date;
        this.post_author = params.post_author;
        this.grouped_id = params.grouped_id;
        this.reactions = params.reactions;
        this.restriction_reason = params.restriction_reason;
        this.ttl_period = params.ttl_period;
        this.quick_reply_shortcut_id = params.quick_reply_shortcut_id;
    }
}
/** Indicates a service message */
export class MessageService_ extends _Message_ {
    get [id]() {
        return 0x2B085862;
    }
    static get [name]() {
        return "messageService";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["out", "true", "flags.1?true"],
            ["mentioned", "true", "flags.4?true"],
            ["media_unread", "true", "flags.5?true"],
            ["silent", "true", "flags.13?true"],
            ["post", "true", "flags.14?true"],
            ["legacy", "true", "flags.19?true"],
            ["id", "number", "int"],
            ["from_id", _Peer_, "flags.8?Peer"],
            ["peer_id", _Peer_, "Peer"],
            ["reply_to", _MessageReplyHeader_, "flags.3?MessageReplyHeader"],
            ["date", "number", "int"],
            ["action", _MessageAction_, "MessageAction"],
            ["ttl_period", "number", "flags.25?int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.out ?? null, "true", "flags.1?true"],
            [this.mentioned ?? null, "true", "flags.4?true"],
            [this.media_unread ?? null, "true", "flags.5?true"],
            [this.silent ?? null, "true", "flags.13?true"],
            [this.post ?? null, "true", "flags.14?true"],
            [this.legacy ?? null, "true", "flags.19?true"],
            [this.id, "number", "int"],
            [this.from_id ?? null, _Peer_, "flags.8?Peer"],
            [this.peer_id, _Peer_, "Peer"],
            [this.reply_to ?? null, _MessageReplyHeader_, "flags.3?MessageReplyHeader"],
            [this.date, "number", "int"],
            [this.action, _MessageAction_, "MessageAction"],
            [this.ttl_period ?? null, "number", "flags.25?int"],
        ];
    }
    constructor(params) {
        super();
        /** Whether the message is outgoing */
        Object.defineProperty(this, "out", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether we were mentioned in the message */
        Object.defineProperty(this, "mentioned", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether the message contains unread media */
        Object.defineProperty(this, "media_unread", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether the message is silent */
        Object.defineProperty(this, "silent", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether it's a channel post */
        Object.defineProperty(this, "post", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** This is a legacy message: it has to be refetched with the new layer */
        Object.defineProperty(this, "legacy", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Message ID */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the sender of this message */
        Object.defineProperty(this, "from_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Sender of service message */
        Object.defineProperty(this, "peer_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Reply (thread) information */
        Object.defineProperty(this, "reply_to", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Message date */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Event connected with the service message */
        Object.defineProperty(this, "action", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Time To Live of the message, once message.date+message.ttl\_period === time(), the message will be deleted on the server, and must be deleted locally as well. */
        Object.defineProperty(this, "ttl_period", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.out = params.out;
        this.mentioned = params.mentioned;
        this.media_unread = params.media_unread;
        this.silent = params.silent;
        this.post = params.post;
        this.legacy = params.legacy;
        this.id = params.id;
        this.from_id = params.from_id;
        this.peer_id = params.peer_id;
        this.reply_to = params.reply_to;
        this.date = params.date;
        this.action = params.action;
        this.ttl_period = params.ttl_period;
    }
}
/** Empty constructor. */
export class MessageMediaEmpty_ extends _MessageMedia_ {
    get [id]() {
        return 0x3DED6320;
    }
    static get [name]() {
        return "messageMediaEmpty";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Attached photo. */
export class MessageMediaPhoto_ extends _MessageMedia_ {
    get [id]() {
        return 0x695150D7;
    }
    static get [name]() {
        return "messageMediaPhoto";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["spoiler", "true", "flags.3?true"],
            ["photo", _Photo_, "flags.0?Photo"],
            ["ttl_seconds", "number", "flags.2?int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.spoiler ?? null, "true", "flags.3?true"],
            [this.photo ?? null, _Photo_, "flags.0?Photo"],
            [this.ttl_seconds ?? null, "number", "flags.2?int"],
        ];
    }
    constructor(params) {
        super();
        /** Whether this media should be hidden behind a spoiler warning */
        Object.defineProperty(this, "spoiler", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Photo */
        Object.defineProperty(this, "photo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Time to live in seconds of self-destructing photo */
        Object.defineProperty(this, "ttl_seconds", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.spoiler = params?.spoiler;
        this.photo = params?.photo;
        this.ttl_seconds = params?.ttl_seconds;
    }
}
/** Attached map. */
export class MessageMediaGeo_ extends _MessageMedia_ {
    get [id]() {
        return 0x56E0D474;
    }
    static get [name]() {
        return "messageMediaGeo";
    }
    static get [paramDesc]() {
        return [
            ["geo", _GeoPoint_, "GeoPoint"],
        ];
    }
    get [params]() {
        return [
            [this.geo, _GeoPoint_, "GeoPoint"],
        ];
    }
    constructor(params) {
        super();
        /** GeoPoint */
        Object.defineProperty(this, "geo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.geo = params.geo;
    }
}
/** Attached contact. */
export class MessageMediaContact_ extends _MessageMedia_ {
    get [id]() {
        return 0x70322949;
    }
    static get [name]() {
        return "messageMediaContact";
    }
    static get [paramDesc]() {
        return [
            ["phone_number", "string", "string"],
            ["first_name", "string", "string"],
            ["last_name", "string", "string"],
            ["vcard", "string", "string"],
            ["user_id", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.phone_number, "string", "string"],
            [this.first_name, "string", "string"],
            [this.last_name, "string", "string"],
            [this.vcard, "string", "string"],
            [this.user_id, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** Phone number */
        Object.defineProperty(this, "phone_number", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Contact's first name */
        Object.defineProperty(this, "first_name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Contact's last name */
        Object.defineProperty(this, "last_name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** VCARD of contact */
        Object.defineProperty(this, "vcard", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** User identifier or `0`, if the user with the given phone number is not registered */
        Object.defineProperty(this, "user_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.phone_number = params.phone_number;
        this.first_name = params.first_name;
        this.last_name = params.last_name;
        this.vcard = params.vcard;
        this.user_id = params.user_id;
    }
}
/** Current version of the client does not support this media type. */
export class MessageMediaUnsupported_ extends _MessageMedia_ {
    get [id]() {
        return 0x9F84F49E;
    }
    static get [name]() {
        return "messageMediaUnsupported";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Document (video, audio, voice, sticker, any media type except photo) */
export class MessageMediaDocument_ extends _MessageMedia_ {
    get [id]() {
        return 0x4CF4D72D;
    }
    static get [name]() {
        return "messageMediaDocument";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["nopremium", "true", "flags.3?true"],
            ["spoiler", "true", "flags.4?true"],
            ["video", "true", "flags.6?true"],
            ["round", "true", "flags.7?true"],
            ["voice", "true", "flags.8?true"],
            ["document", _Document_, "flags.0?Document"],
            ["alt_document", _Document_, "flags.5?Document"],
            ["ttl_seconds", "number", "flags.2?int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.nopremium ?? null, "true", "flags.3?true"],
            [this.spoiler ?? null, "true", "flags.4?true"],
            [this.video ?? null, "true", "flags.6?true"],
            [this.round ?? null, "true", "flags.7?true"],
            [this.voice ?? null, "true", "flags.8?true"],
            [this.document ?? null, _Document_, "flags.0?Document"],
            [this.alt_document ?? null, _Document_, "flags.5?Document"],
            [this.ttl_seconds ?? null, "number", "flags.2?int"],
        ];
    }
    constructor(params) {
        super();
        /** Whether this is a normal sticker, if not set this is a premium sticker and a premium sticker animation must be played. */
        Object.defineProperty(this, "nopremium", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this media should be hidden behind a spoiler warning */
        Object.defineProperty(this, "spoiler", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this is a video. */
        Object.defineProperty(this, "video", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this is a round video. */
        Object.defineProperty(this, "round", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this is a voice message. */
        Object.defineProperty(this, "voice", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Attached document */
        Object.defineProperty(this, "document", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Currently only used for story videos, may contain an alternative version of the story video, explicitly encoded using H.264 (in MPEG4 transport) at a lower resolution than `document`. */
        Object.defineProperty(this, "alt_document", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Time to live of self-destructing document */
        Object.defineProperty(this, "ttl_seconds", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.nopremium = params?.nopremium;
        this.spoiler = params?.spoiler;
        this.video = params?.video;
        this.round = params?.round;
        this.voice = params?.voice;
        this.document = params?.document;
        this.alt_document = params?.alt_document;
        this.ttl_seconds = params?.ttl_seconds;
    }
}
/** Preview of webpage */
export class MessageMediaWebPage_ extends _MessageMedia_ {
    get [id]() {
        return 0xDDF10C3B;
    }
    static get [name]() {
        return "messageMediaWebPage";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["force_large_media", "true", "flags.0?true"],
            ["force_small_media", "true", "flags.1?true"],
            ["manual", "true", "flags.3?true"],
            ["safe", "true", "flags.4?true"],
            ["webpage", _WebPage_, "WebPage"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.force_large_media ?? null, "true", "flags.0?true"],
            [this.force_small_media ?? null, "true", "flags.1?true"],
            [this.manual ?? null, "true", "flags.3?true"],
            [this.safe ?? null, "true", "flags.4?true"],
            [this.webpage, _WebPage_, "WebPage"],
        ];
    }
    constructor(params) {
        super();
        /** If set, specifies that a large media preview should be used. */
        Object.defineProperty(this, "force_large_media", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, specifies that a small media preview should be used. */
        Object.defineProperty(this, "force_small_media", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, indicates that the URL used for the webpage preview was specified manually using [inputMediaWebPage](https://core.telegram.org/constructor/inputMediaWebPage), and may not be related to any of the URLs specified in the message. */
        Object.defineProperty(this, "manual", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, the webpage can be opened directly without user confirmation; otherwise, user confirmation is required, showing the exact URL that will be opened. */
        Object.defineProperty(this, "safe", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Webpage preview */
        Object.defineProperty(this, "webpage", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.force_large_media = params.force_large_media;
        this.force_small_media = params.force_small_media;
        this.manual = params.manual;
        this.safe = params.safe;
        this.webpage = params.webpage;
    }
}
/** Venue */
export class MessageMediaVenue_ extends _MessageMedia_ {
    get [id]() {
        return 0x2EC0533F;
    }
    static get [name]() {
        return "messageMediaVenue";
    }
    static get [paramDesc]() {
        return [
            ["geo", _GeoPoint_, "GeoPoint"],
            ["title", "string", "string"],
            ["address", "string", "string"],
            ["provider", "string", "string"],
            ["venue_id", "string", "string"],
            ["venue_type", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.geo, _GeoPoint_, "GeoPoint"],
            [this.title, "string", "string"],
            [this.address, "string", "string"],
            [this.provider, "string", "string"],
            [this.venue_id, "string", "string"],
            [this.venue_type, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Geolocation of venue */
        Object.defineProperty(this, "geo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Venue name */
        Object.defineProperty(this, "title", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Address */
        Object.defineProperty(this, "address", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Venue provider: currently only "foursquare" and "gplaces" (Google Places) need to be supported */
        Object.defineProperty(this, "provider", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Venue ID in the provider's database */
        Object.defineProperty(this, "venue_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Venue type in the provider's database */
        Object.defineProperty(this, "venue_type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.geo = params.geo;
        this.title = params.title;
        this.address = params.address;
        this.provider = params.provider;
        this.venue_id = params.venue_id;
        this.venue_type = params.venue_type;
    }
}
/** Telegram game */
export class MessageMediaGame_ extends _MessageMedia_ {
    get [id]() {
        return 0xFDB19008;
    }
    static get [name]() {
        return "messageMediaGame";
    }
    static get [paramDesc]() {
        return [
            ["game", _Game_, "Game"],
        ];
    }
    get [params]() {
        return [
            [this.game, _Game_, "Game"],
        ];
    }
    constructor(params) {
        super();
        /** Game */
        Object.defineProperty(this, "game", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.game = params.game;
    }
}
/** Invoice */
export class MessageMediaInvoice_ extends _MessageMedia_ {
    get [id]() {
        return 0xF6A548D3;
    }
    static get [name]() {
        return "messageMediaInvoice";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["shipping_address_requested", "true", "flags.1?true"],
            ["test", "true", "flags.3?true"],
            ["title", "string", "string"],
            ["description", "string", "string"],
            ["photo", _WebDocument_, "flags.0?WebDocument"],
            ["receipt_msg_id", "number", "flags.2?int"],
            ["currency", "string", "string"],
            ["total_amount", "bigint", "long"],
            ["start_param", "string", "string"],
            ["extended_media", _MessageExtendedMedia_, "flags.4?MessageExtendedMedia"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.shipping_address_requested ?? null, "true", "flags.1?true"],
            [this.test ?? null, "true", "flags.3?true"],
            [this.title, "string", "string"],
            [this.description, "string", "string"],
            [this.photo ?? null, _WebDocument_, "flags.0?WebDocument"],
            [this.receipt_msg_id ?? null, "number", "flags.2?int"],
            [this.currency, "string", "string"],
            [this.total_amount, "bigint", "long"],
            [this.start_param, "string", "string"],
            [this.extended_media ?? null, _MessageExtendedMedia_, "flags.4?MessageExtendedMedia"],
        ];
    }
    constructor(params) {
        super();
        /** Whether the shipping address was requested */
        Object.defineProperty(this, "shipping_address_requested", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this is an example invoice */
        Object.defineProperty(this, "test", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Product name, 1-32 characters */
        Object.defineProperty(this, "title", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Product description, 1-255 characters */
        Object.defineProperty(this, "description", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for. */
        Object.defineProperty(this, "photo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Message ID of receipt: if set, clients should change the text of the first [keyboardButtonBuy](https://core.telegram.org/constructor/keyboardButtonBuy) button always attached to the [message](https://core.telegram.org/constructor/message) to a localized version of the word `Receipt` */
        Object.defineProperty(this, "receipt_msg_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code */
        Object.defineProperty(this, "currency", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Total price in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). */
        Object.defineProperty(this, "total_amount", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Unique bot deep-linking parameter that can be used to generate this invoice */
        Object.defineProperty(this, "start_param", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Extended media */
        Object.defineProperty(this, "extended_media", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.shipping_address_requested = params.shipping_address_requested;
        this.test = params.test;
        this.title = params.title;
        this.description = params.description;
        this.photo = params.photo;
        this.receipt_msg_id = params.receipt_msg_id;
        this.currency = params.currency;
        this.total_amount = params.total_amount;
        this.start_param = params.start_param;
        this.extended_media = params.extended_media;
    }
}
/** Indicates a [live geolocation](https://core.telegram.org/api/live-location) */
export class MessageMediaGeoLive_ extends _MessageMedia_ {
    get [id]() {
        return 0xB940C666;
    }
    static get [name]() {
        return "messageMediaGeoLive";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["geo", _GeoPoint_, "GeoPoint"],
            ["heading", "number", "flags.0?int"],
            ["period", "number", "int"],
            ["proximity_notification_radius", "number", "flags.1?int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.geo, _GeoPoint_, "GeoPoint"],
            [this.heading ?? null, "number", "flags.0?int"],
            [this.period, "number", "int"],
            [this.proximity_notification_radius ?? null, "number", "flags.1?int"],
        ];
    }
    constructor(params) {
        super();
        /** Geolocation */
        Object.defineProperty(this, "geo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** For [live locations](https://core.telegram.org/api/live-location), a direction in which the location moves, in degrees; 1-360 */
        Object.defineProperty(this, "heading", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Validity period of provided geolocation */
        Object.defineProperty(this, "period", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** For [live locations](https://core.telegram.org/api/live-location), a maximum distance to another chat member for proximity alerts, in meters (0-100000). */
        Object.defineProperty(this, "proximity_notification_radius", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.geo = params.geo;
        this.heading = params.heading;
        this.period = params.period;
        this.proximity_notification_radius = params.proximity_notification_radius;
    }
}
/** Poll */
export class MessageMediaPoll_ extends _MessageMedia_ {
    get [id]() {
        return 0x4BD6E798;
    }
    static get [name]() {
        return "messageMediaPoll";
    }
    static get [paramDesc]() {
        return [
            ["poll", _Poll_, "Poll"],
            ["results", _PollResults_, "PollResults"],
        ];
    }
    get [params]() {
        return [
            [this.poll, _Poll_, "Poll"],
            [this.results, _PollResults_, "PollResults"],
        ];
    }
    constructor(params) {
        super();
        /** The poll */
        Object.defineProperty(this, "poll", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The results of the poll */
        Object.defineProperty(this, "results", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.poll = params.poll;
        this.results = params.results;
    }
}
/** [Dice-based animated sticker](https://core.telegram.org/api/dice) */
export class MessageMediaDice_ extends _MessageMedia_ {
    get [id]() {
        return 0x3F7EE58B;
    }
    static get [name]() {
        return "messageMediaDice";
    }
    static get [paramDesc]() {
        return [
            ["value", "number", "int"],
            ["emoticon", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.value, "number", "int"],
            [this.emoticon, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** [Dice value](https://core.telegram.org/api/dice) */
        Object.defineProperty(this, "value", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The emoji, for now ![🏀](//telegram.org/img/emoji/40/F09F8F80.png), ![🎲](//telegram.org/img/emoji/40/F09F8EB2.png) and ![🎯](//telegram.org/img/emoji/40/F09F8EAF.png) are supported */
        Object.defineProperty(this, "emoticon", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.value = params.value;
        this.emoticon = params.emoticon;
    }
}
/** Represents a forwarded [story](https://core.telegram.org/api/stories) or a story mention. */
export class MessageMediaStory_ extends _MessageMedia_ {
    get [id]() {
        return 0x68CB6283;
    }
    static get [name]() {
        return "messageMediaStory";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["via_mention", "true", "flags.1?true"],
            ["peer", _Peer_, "Peer"],
            ["id", "number", "int"],
            ["story", _StoryItem_, "flags.0?StoryItem"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.via_mention ?? null, "true", "flags.1?true"],
            [this.peer, _Peer_, "Peer"],
            [this.id, "number", "int"],
            [this.story ?? null, _StoryItem_, "flags.0?StoryItem"],
        ];
    }
    constructor(params) {
        super();
        /** If set, indicates that this someone has mentioned us in this story (i.e. by tagging us in the description) or vice versa, we have mentioned the other peer (if the message is outgoing). */
        Object.defineProperty(this, "via_mention", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Peer that posted the story. */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Story ID */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The story itself, if absent fetch it using [stories.getStoriesByID](https://core.telegram.org/method/stories.getStoriesByID) and the `peer`/`id` parameters specified above. */
        Object.defineProperty(this, "story", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.via_mention = params.via_mention;
        this.peer = params.peer;
        this.id = params.id;
        this.story = params.story;
    }
}
/** Contains info about a [giveaway, see here »](https://core.telegram.org/api/giveaways) for more info. */
export class MessageMediaGiveaway_ extends _MessageMedia_ {
    get [id]() {
        return 0xDAAD85B0;
    }
    static get [name]() {
        return "messageMediaGiveaway";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["only_new_subscribers", "true", "flags.0?true"],
            ["winners_are_visible", "true", "flags.2?true"],
            ["channels", ["bigint"], "Vector<long>"],
            ["countries_iso2", ["string"], "flags.1?Vector<string>"],
            ["prize_description", "string", "flags.3?string"],
            ["quantity", "number", "int"],
            ["months", "number", "int"],
            ["until_date", "number", "int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.only_new_subscribers ?? null, "true", "flags.0?true"],
            [this.winners_are_visible ?? null, "true", "flags.2?true"],
            [this.channels, ["bigint"], "Vector<long>"],
            [this.countries_iso2 ?? null, ["string"], "flags.1?Vector<string>"],
            [this.prize_description ?? null, "string", "flags.3?string"],
            [this.quantity, "number", "int"],
            [this.months, "number", "int"],
            [this.until_date, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** If set, only new subscribers starting from the giveaway creation date will be able to participate to the giveaway. */
        Object.defineProperty(this, "only_new_subscribers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, giveaway winners are public and will be listed in a [messageMediaGiveawayResults](https://core.telegram.org/constructor/messageMediaGiveawayResults) message that will be automatically sent to the channel once the giveaway ends. */
        Object.defineProperty(this, "winners_are_visible", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The channels that the user must join to participate in the giveaway. */
        Object.defineProperty(this, "channels", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, only users residing in these countries can participate in the giveaway, (specified as a list of two-letter ISO 3166-1 alpha-2 country codes); otherwise there are no country-based limitations. */
        Object.defineProperty(this, "countries_iso2", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Can contain a textual description of additional giveaway prizes. */
        Object.defineProperty(this, "prize_description", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of [Telegram Premium](https://core.telegram.org/api/premium) subscriptions given away. */
        Object.defineProperty(this, "quantity", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Duration in months of each [Telegram Premium](https://core.telegram.org/api/premium) subscription in the giveaway. */
        Object.defineProperty(this, "months", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The end date of the giveaway. */
        Object.defineProperty(this, "until_date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.only_new_subscribers = params.only_new_subscribers;
        this.winners_are_visible = params.winners_are_visible;
        this.channels = params.channels;
        this.countries_iso2 = params.countries_iso2;
        this.prize_description = params.prize_description;
        this.quantity = params.quantity;
        this.months = params.months;
        this.until_date = params.until_date;
    }
}
/** A [giveaway](https://core.telegram.org/api/giveaways) with public winners has finished, this constructor contains info about the winners. */
export class MessageMediaGiveawayResults_ extends _MessageMedia_ {
    get [id]() {
        return 0xC6991068;
    }
    static get [name]() {
        return "messageMediaGiveawayResults";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["only_new_subscribers", "true", "flags.0?true"],
            ["refunded", "true", "flags.2?true"],
            ["channel_id", "bigint", "long"],
            ["additional_peers_count", "number", "flags.3?int"],
            ["launch_msg_id", "number", "int"],
            ["winners_count", "number", "int"],
            ["unclaimed_count", "number", "int"],
            ["winners", ["bigint"], "Vector<long>"],
            ["months", "number", "int"],
            ["prize_description", "string", "flags.1?string"],
            ["until_date", "number", "int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.only_new_subscribers ?? null, "true", "flags.0?true"],
            [this.refunded ?? null, "true", "flags.2?true"],
            [this.channel_id, "bigint", "long"],
            [this.additional_peers_count ?? null, "number", "flags.3?int"],
            [this.launch_msg_id, "number", "int"],
            [this.winners_count, "number", "int"],
            [this.unclaimed_count, "number", "int"],
            [this.winners, ["bigint"], "Vector<long>"],
            [this.months, "number", "int"],
            [this.prize_description ?? null, "string", "flags.1?string"],
            [this.until_date, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** If set, only new subscribers starting from the giveaway creation date participated in the giveaway. */
        Object.defineProperty(this, "only_new_subscribers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, the giveaway was canceled and was fully refunded. */
        Object.defineProperty(this, "refunded", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the channel that was automatically [boosted](https://core.telegram.org/api/boost) by the winners of the giveaway for duration of the Premium subscription. */
        Object.defineProperty(this, "channel_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of other channels that participated in the giveaway. */
        Object.defineProperty(this, "additional_peers_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Identifier of the message with the giveaway in `channel_id`. */
        Object.defineProperty(this, "launch_msg_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Total number of winners in the giveaway. */
        Object.defineProperty(this, "winners_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of not-yet-claimed prizes. */
        Object.defineProperty(this, "unclaimed_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Up to 100 user identifiers of the winners of the giveaway. */
        Object.defineProperty(this, "winners", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Duration in months of each [Telegram Premium](https://core.telegram.org/api/premium) subscription in the giveaway. */
        Object.defineProperty(this, "months", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Can contain a textual description of additional giveaway prizes. */
        Object.defineProperty(this, "prize_description", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Point in time (Unix timestamp) when the winners were selected. May be bigger than winners selection date specified in initial parameters of the giveaway. */
        Object.defineProperty(this, "until_date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.only_new_subscribers = params.only_new_subscribers;
        this.refunded = params.refunded;
        this.channel_id = params.channel_id;
        this.additional_peers_count = params.additional_peers_count;
        this.launch_msg_id = params.launch_msg_id;
        this.winners_count = params.winners_count;
        this.unclaimed_count = params.unclaimed_count;
        this.winners = params.winners;
        this.months = params.months;
        this.prize_description = params.prize_description;
        this.until_date = params.until_date;
    }
}
/** Empty constructor. */
export class MessageActionEmpty_ extends _MessageAction_ {
    get [id]() {
        return 0xB6AEF7B0;
    }
    static get [name]() {
        return "messageActionEmpty";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Group created */
export class MessageActionChatCreate_ extends _MessageAction_ {
    get [id]() {
        return 0xBD47CBAD;
    }
    static get [name]() {
        return "messageActionChatCreate";
    }
    static get [paramDesc]() {
        return [
            ["title", "string", "string"],
            ["users", ["bigint"], "Vector<long>"],
        ];
    }
    get [params]() {
        return [
            [this.title, "string", "string"],
            [this.users, ["bigint"], "Vector<long>"],
        ];
    }
    constructor(params) {
        super();
        /** Group name */
        Object.defineProperty(this, "title", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** List of group members */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.title = params.title;
        this.users = params.users;
    }
}
/** Group name changed. */
export class MessageActionChatEditTitle_ extends _MessageAction_ {
    get [id]() {
        return 0xB5A1CE5A;
    }
    static get [name]() {
        return "messageActionChatEditTitle";
    }
    static get [paramDesc]() {
        return [
            ["title", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.title, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** New group name */
        Object.defineProperty(this, "title", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.title = params.title;
    }
}
/** Group profile changed */
export class MessageActionChatEditPhoto_ extends _MessageAction_ {
    get [id]() {
        return 0x7FCB13A8;
    }
    static get [name]() {
        return "messageActionChatEditPhoto";
    }
    static get [paramDesc]() {
        return [
            ["photo", _Photo_, "Photo"],
        ];
    }
    get [params]() {
        return [
            [this.photo, _Photo_, "Photo"],
        ];
    }
    constructor(params) {
        super();
        /** New group profile photo */
        Object.defineProperty(this, "photo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.photo = params.photo;
    }
}
/** Group profile photo removed. */
export class MessageActionChatDeletePhoto_ extends _MessageAction_ {
    get [id]() {
        return 0x95E3FBEF;
    }
    static get [name]() {
        return "messageActionChatDeletePhoto";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** New member in the group */
export class MessageActionChatAddUser_ extends _MessageAction_ {
    get [id]() {
        return 0x15CEFD00;
    }
    static get [name]() {
        return "messageActionChatAddUser";
    }
    static get [paramDesc]() {
        return [
            ["users", ["bigint"], "Vector<long>"],
        ];
    }
    get [params]() {
        return [
            [this.users, ["bigint"], "Vector<long>"],
        ];
    }
    constructor(params) {
        super();
        /** Users that were invited to the chat */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.users = params.users;
    }
}
/** User left the group. */
export class MessageActionChatDeleteUser_ extends _MessageAction_ {
    get [id]() {
        return 0xA43F30CC;
    }
    static get [name]() {
        return "messageActionChatDeleteUser";
    }
    static get [paramDesc]() {
        return [
            ["user_id", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.user_id, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** Leaving user ID */
        Object.defineProperty(this, "user_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.user_id = params.user_id;
    }
}
/** A user joined the chat via an invite link */
export class MessageActionChatJoinedByLink_ extends _MessageAction_ {
    get [id]() {
        return 0x031224C3;
    }
    static get [name]() {
        return "messageActionChatJoinedByLink";
    }
    static get [paramDesc]() {
        return [
            ["inviter_id", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.inviter_id, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** ID of the user that created the invite link */
        Object.defineProperty(this, "inviter_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.inviter_id = params.inviter_id;
    }
}
/** The channel was created */
export class MessageActionChannelCreate_ extends _MessageAction_ {
    get [id]() {
        return 0x95D2AC92;
    }
    static get [name]() {
        return "messageActionChannelCreate";
    }
    static get [paramDesc]() {
        return [
            ["title", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.title, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Original channel/supergroup title */
        Object.defineProperty(this, "title", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.title = params.title;
    }
}
/** Indicates the chat was [migrated](https://core.telegram.org/api/channel) to the specified supergroup */
export class MessageActionChatMigrateTo_ extends _MessageAction_ {
    get [id]() {
        return 0xE1037F92;
    }
    static get [name]() {
        return "messageActionChatMigrateTo";
    }
    static get [paramDesc]() {
        return [
            ["channel_id", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.channel_id, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** The supergroup it was migrated to */
        Object.defineProperty(this, "channel_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.channel_id = params.channel_id;
    }
}
/** Indicates the channel was [migrated](https://core.telegram.org/api/channel) from the specified chat */
export class MessageActionChannelMigrateFrom_ extends _MessageAction_ {
    get [id]() {
        return 0xEA3948E9;
    }
    static get [name]() {
        return "messageActionChannelMigrateFrom";
    }
    static get [paramDesc]() {
        return [
            ["title", "string", "string"],
            ["chat_id", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.title, "string", "string"],
            [this.chat_id, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** The old chat title */
        Object.defineProperty(this, "title", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The old chat ID */
        Object.defineProperty(this, "chat_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.title = params.title;
        this.chat_id = params.chat_id;
    }
}
/** A message was pinned */
export class MessageActionPinMessage_ extends _MessageAction_ {
    get [id]() {
        return 0x94BD38ED;
    }
    static get [name]() {
        return "messageActionPinMessage";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Chat history was cleared */
export class MessageActionHistoryClear_ extends _MessageAction_ {
    get [id]() {
        return 0x9FBAB604;
    }
    static get [name]() {
        return "messageActionHistoryClear";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Someone scored in a game */
export class MessageActionGameScore_ extends _MessageAction_ {
    get [id]() {
        return 0x92A72876;
    }
    static get [name]() {
        return "messageActionGameScore";
    }
    static get [paramDesc]() {
        return [
            ["game_id", "bigint", "long"],
            ["score", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.game_id, "bigint", "long"],
            [this.score, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Game ID */
        Object.defineProperty(this, "game_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Score */
        Object.defineProperty(this, "score", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.game_id = params.game_id;
        this.score = params.score;
    }
}
/** A user just sent a payment to me (a bot) */
export class MessageActionPaymentSentMe_ extends _MessageAction_ {
    get [id]() {
        return 0x8F31B327;
    }
    static get [name]() {
        return "messageActionPaymentSentMe";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["recurring_init", "true", "flags.2?true"],
            ["recurring_used", "true", "flags.3?true"],
            ["currency", "string", "string"],
            ["total_amount", "bigint", "long"],
            ["payload", Uint8Array, "bytes"],
            ["info", _PaymentRequestedInfo_, "flags.0?PaymentRequestedInfo"],
            ["shipping_option_id", "string", "flags.1?string"],
            ["charge", _PaymentCharge_, "PaymentCharge"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.recurring_init ?? null, "true", "flags.2?true"],
            [this.recurring_used ?? null, "true", "flags.3?true"],
            [this.currency, "string", "string"],
            [this.total_amount, "bigint", "long"],
            [this.payload, Uint8Array, "bytes"],
            [this.info ?? null, _PaymentRequestedInfo_, "flags.0?PaymentRequestedInfo"],
            [this.shipping_option_id ?? null, "string", "flags.1?string"],
            [this.charge, _PaymentCharge_, "PaymentCharge"],
        ];
    }
    constructor(params) {
        super();
        /** Whether this is the first payment of a recurring payment we just subscribed to */
        Object.defineProperty(this, "recurring_init", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this payment is part of a recurring payment */
        Object.defineProperty(this, "recurring_used", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code */
        Object.defineProperty(this, "currency", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Price of the product in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). */
        Object.defineProperty(this, "total_amount", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Bot specified invoice payload */
        Object.defineProperty(this, "payload", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Order info provided by the user */
        Object.defineProperty(this, "info", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Identifier of the shipping option chosen by the user */
        Object.defineProperty(this, "shipping_option_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Provider payment identifier */
        Object.defineProperty(this, "charge", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.recurring_init = params.recurring_init;
        this.recurring_used = params.recurring_used;
        this.currency = params.currency;
        this.total_amount = params.total_amount;
        this.payload = params.payload;
        this.info = params.info;
        this.shipping_option_id = params.shipping_option_id;
        this.charge = params.charge;
    }
}
/** A payment was sent */
export class MessageActionPaymentSent_ extends _MessageAction_ {
    get [id]() {
        return 0x96163F56;
    }
    static get [name]() {
        return "messageActionPaymentSent";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["recurring_init", "true", "flags.2?true"],
            ["recurring_used", "true", "flags.3?true"],
            ["currency", "string", "string"],
            ["total_amount", "bigint", "long"],
            ["invoice_slug", "string", "flags.0?string"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.recurring_init ?? null, "true", "flags.2?true"],
            [this.recurring_used ?? null, "true", "flags.3?true"],
            [this.currency, "string", "string"],
            [this.total_amount, "bigint", "long"],
            [this.invoice_slug ?? null, "string", "flags.0?string"],
        ];
    }
    constructor(params) {
        super();
        /** Whether this is the first payment of a recurring payment we just subscribed to */
        Object.defineProperty(this, "recurring_init", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this payment is part of a recurring payment */
        Object.defineProperty(this, "recurring_used", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code */
        Object.defineProperty(this, "currency", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Price of the product in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). */
        Object.defineProperty(this, "total_amount", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** An invoice slug taken from an [invoice deep link](https://core.telegram.org/api/links#invoice-links) or from the [`premium_invoice_slug` app config parameter »](https://core.telegram.org/api/config#premium-invoice-slug) */
        Object.defineProperty(this, "invoice_slug", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.recurring_init = params.recurring_init;
        this.recurring_used = params.recurring_used;
        this.currency = params.currency;
        this.total_amount = params.total_amount;
        this.invoice_slug = params.invoice_slug;
    }
}
/** A phone call */
export class MessageActionPhoneCall_ extends _MessageAction_ {
    get [id]() {
        return 0x80E11A7F;
    }
    static get [name]() {
        return "messageActionPhoneCall";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["video", "true", "flags.2?true"],
            ["call_id", "bigint", "long"],
            ["reason", _PhoneCallDiscardReason_, "flags.0?PhoneCallDiscardReason"],
            ["duration", "number", "flags.1?int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.video ?? null, "true", "flags.2?true"],
            [this.call_id, "bigint", "long"],
            [this.reason ?? null, _PhoneCallDiscardReason_, "flags.0?PhoneCallDiscardReason"],
            [this.duration ?? null, "number", "flags.1?int"],
        ];
    }
    constructor(params) {
        super();
        /** Is this a video call? */
        Object.defineProperty(this, "video", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Call ID */
        Object.defineProperty(this, "call_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If the call has ended, the reason why it ended */
        Object.defineProperty(this, "reason", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Duration of the call in seconds */
        Object.defineProperty(this, "duration", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.video = params.video;
        this.call_id = params.call_id;
        this.reason = params.reason;
        this.duration = params.duration;
    }
}
/** A screenshot of the chat was taken */
export class MessageActionScreenshotTaken_ extends _MessageAction_ {
    get [id]() {
        return 0x4792929B;
    }
    static get [name]() {
        return "messageActionScreenshotTaken";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Custom action (most likely not supported by the current layer, an upgrade might be needed) */
export class MessageActionCustomAction_ extends _MessageAction_ {
    get [id]() {
        return 0xFAE69F56;
    }
    static get [name]() {
        return "messageActionCustomAction";
    }
    static get [paramDesc]() {
        return [
            ["message", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.message, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Action message */
        Object.defineProperty(this, "message", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.message = params.message;
    }
}
/** We have given the bot permission to send us direct messages. */
export class MessageActionBotAllowed_ extends _MessageAction_ {
    get [id]() {
        return 0xC516D679;
    }
    static get [name]() {
        return "messageActionBotAllowed";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["attach_menu", "true", "flags.1?true"],
            ["from_request", "true", "flags.3?true"],
            ["domain", "string", "flags.0?string"],
            ["app", _BotApp_, "flags.2?BotApp"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.attach_menu ?? null, "true", "flags.1?true"],
            [this.from_request ?? null, "true", "flags.3?true"],
            [this.domain ?? null, "string", "flags.0?string"],
            [this.app ?? null, _BotApp_, "flags.2?BotApp"],
        ];
    }
    constructor(params) {
        super();
        /** We have authorized the bot to send us messages by installing the bot's [attachment menu](https://core.telegram.org/api/bots/attach). */
        Object.defineProperty(this, "attach_menu", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** We have allowed the bot to send us messages using [bots.allowSendMessage »](https://core.telegram.org/method/bots.allowSendMessage). */
        Object.defineProperty(this, "from_request", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** We have authorized the bot to send us messages by logging into a website via [Telegram Login »](https://core.telegram.org/widgets/login); this field contains the domain name of the website on which the user has logged in. */
        Object.defineProperty(this, "domain", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** We have authorized the bot to send us messages by opening the specified [bot mini app](https://core.telegram.org/api/bots/webapps). */
        Object.defineProperty(this, "app", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.attach_menu = params?.attach_menu;
        this.from_request = params?.from_request;
        this.domain = params?.domain;
        this.app = params?.app;
    }
}
/** Secure [telegram passport](https://core.telegram.org/passport) values were received */
export class MessageActionSecureValuesSentMe_ extends _MessageAction_ {
    get [id]() {
        return 0x1B287353;
    }
    static get [name]() {
        return "messageActionSecureValuesSentMe";
    }
    static get [paramDesc]() {
        return [
            ["values", [_SecureValue_], "Vector<SecureValue>"],
            ["credentials", _SecureCredentialsEncrypted_, "SecureCredentialsEncrypted"],
        ];
    }
    get [params]() {
        return [
            [this.values, [_SecureValue_], "Vector<SecureValue>"],
            [this.credentials, _SecureCredentialsEncrypted_, "SecureCredentialsEncrypted"],
        ];
    }
    constructor(params) {
        super();
        /** Vector with information about documents and other Telegram Passport elements that were shared with the bot */
        Object.defineProperty(this, "values", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Encrypted credentials required to decrypt the data */
        Object.defineProperty(this, "credentials", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.values = params.values;
        this.credentials = params.credentials;
    }
}
/** Request for secure [telegram passport](https://core.telegram.org/passport) values was sent */
export class MessageActionSecureValuesSent_ extends _MessageAction_ {
    get [id]() {
        return 0xD95C6154;
    }
    static get [name]() {
        return "messageActionSecureValuesSent";
    }
    static get [paramDesc]() {
        return [
            ["types", [_SecureValueType_], "Vector<SecureValueType>"],
        ];
    }
    get [params]() {
        return [
            [this.types, [_SecureValueType_], "Vector<SecureValueType>"],
        ];
    }
    constructor(params) {
        super();
        /** Secure value types */
        Object.defineProperty(this, "types", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.types = params.types;
    }
}
/** A contact just signed up to telegram */
export class MessageActionContactSignUp_ extends _MessageAction_ {
    get [id]() {
        return 0xF3F25F76;
    }
    static get [name]() {
        return "messageActionContactSignUp";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** A user of the chat is now in proximity of another user */
export class MessageActionGeoProximityReached_ extends _MessageAction_ {
    get [id]() {
        return 0x98E0D697;
    }
    static get [name]() {
        return "messageActionGeoProximityReached";
    }
    static get [paramDesc]() {
        return [
            ["from_id", _Peer_, "Peer"],
            ["to_id", _Peer_, "Peer"],
            ["distance", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.from_id, _Peer_, "Peer"],
            [this.to_id, _Peer_, "Peer"],
            [this.distance, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** The user or chat that is now in proximity of `to_id` */
        Object.defineProperty(this, "from_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The user or chat that subscribed to [live geolocation proximity alerts](https://core.telegram.org/api/live-location#proximity-alert) */
        Object.defineProperty(this, "to_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Distance, in meters (0-100000) */
        Object.defineProperty(this, "distance", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.from_id = params.from_id;
        this.to_id = params.to_id;
        this.distance = params.distance;
    }
}
/** The group call has ended */
export class MessageActionGroupCall_ extends _MessageAction_ {
    get [id]() {
        return 0x7A0D7F42;
    }
    static get [name]() {
        return "messageActionGroupCall";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["call", _InputGroupCall_, "InputGroupCall"],
            ["duration", "number", "flags.0?int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.call, _InputGroupCall_, "InputGroupCall"],
            [this.duration ?? null, "number", "flags.0?int"],
        ];
    }
    constructor(params) {
        super();
        /** Group call */
        Object.defineProperty(this, "call", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Group call duration */
        Object.defineProperty(this, "duration", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.call = params.call;
        this.duration = params.duration;
    }
}
/** A set of users was invited to the group call */
export class MessageActionInviteToGroupCall_ extends _MessageAction_ {
    get [id]() {
        return 0x502F92F7;
    }
    static get [name]() {
        return "messageActionInviteToGroupCall";
    }
    static get [paramDesc]() {
        return [
            ["call", _InputGroupCall_, "InputGroupCall"],
            ["users", ["bigint"], "Vector<long>"],
        ];
    }
    get [params]() {
        return [
            [this.call, _InputGroupCall_, "InputGroupCall"],
            [this.users, ["bigint"], "Vector<long>"],
        ];
    }
    constructor(params) {
        super();
        /** The group call */
        Object.defineProperty(this, "call", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The invited users */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.call = params.call;
        this.users = params.users;
    }
}
/** The Time-To-Live of messages in this chat was changed. */
export class MessageActionSetMessagesTTL_ extends _MessageAction_ {
    get [id]() {
        return 0x3C134D7B;
    }
    static get [name]() {
        return "messageActionSetMessagesTTL";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["period", "number", "int"],
            ["auto_setting_from", "bigint", "flags.0?long"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.period, "number", "int"],
            [this.auto_setting_from ?? null, "bigint", "flags.0?long"],
        ];
    }
    constructor(params) {
        super();
        /** New Time-To-Live of all messages sent in this chat; if 0, autodeletion was disabled. */
        Object.defineProperty(this, "period", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, the chat TTL setting was set not due to a manual change by one of participants, but automatically because one of the participants has the [default TTL settings enabled »](https://core.telegram.org/method/messages.setDefaultHistoryTTL). For example, when a user writes to us for the first time and we have set a default messages TTL of 1 week, this service message (with `auto_setting_from=our_userid`) will be emitted before our first message. */
        Object.defineProperty(this, "auto_setting_from", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.period = params.period;
        this.auto_setting_from = params.auto_setting_from;
    }
}
/** A group call was scheduled */
export class MessageActionGroupCallScheduled_ extends _MessageAction_ {
    get [id]() {
        return 0xB3A07661;
    }
    static get [name]() {
        return "messageActionGroupCallScheduled";
    }
    static get [paramDesc]() {
        return [
            ["call", _InputGroupCall_, "InputGroupCall"],
            ["schedule_date", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.call, _InputGroupCall_, "InputGroupCall"],
            [this.schedule_date, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** The group call */
        Object.defineProperty(this, "call", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** When is this group call scheduled to start */
        Object.defineProperty(this, "schedule_date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.call = params.call;
        this.schedule_date = params.schedule_date;
    }
}
/** The chat theme was changed */
export class MessageActionSetChatTheme_ extends _MessageAction_ {
    get [id]() {
        return 0xAA786345;
    }
    static get [name]() {
        return "messageActionSetChatTheme";
    }
    static get [paramDesc]() {
        return [
            ["emoticon", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.emoticon, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** The emoji that identifies a chat theme */
        Object.defineProperty(this, "emoticon", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.emoticon = params.emoticon;
    }
}
/** A user was accepted into the group by an admin */
export class MessageActionChatJoinedByRequest_ extends _MessageAction_ {
    get [id]() {
        return 0xEBBCA3CB;
    }
    static get [name]() {
        return "messageActionChatJoinedByRequest";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Data from an opened [reply keyboard bot mini app](https://core.telegram.org/api/bots/webapps) was relayed to the bot that owns it (bot side service message). */
export class MessageActionWebViewDataSentMe_ extends _MessageAction_ {
    get [id]() {
        return 0x47DD8079;
    }
    static get [name]() {
        return "messageActionWebViewDataSentMe";
    }
    static get [paramDesc]() {
        return [
            ["text", "string", "string"],
            ["data", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.text, "string", "string"],
            [this.data, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Text of the [keyboardButtonSimpleWebView](https://core.telegram.org/constructor/keyboardButtonSimpleWebView) that was pressed to open the web app. */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Relayed data. */
        Object.defineProperty(this, "data", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.text = params.text;
        this.data = params.data;
    }
}
/** Data from an opened [reply keyboard bot mini app](https://core.telegram.org/api/bots/webapps) was relayed to the bot that owns it (user side service message). */
export class MessageActionWebViewDataSent_ extends _MessageAction_ {
    get [id]() {
        return 0xB4C38CB5;
    }
    static get [name]() {
        return "messageActionWebViewDataSent";
    }
    static get [paramDesc]() {
        return [
            ["text", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.text, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Text of the [keyboardButtonSimpleWebView](https://core.telegram.org/constructor/keyboardButtonSimpleWebView) that was pressed to open the web app. */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.text = params.text;
    }
}
/** Info about a gifted Telegram Premium subscription */
export class MessageActionGiftPremium_ extends _MessageAction_ {
    get [id]() {
        return 0xC83D6AEC;
    }
    static get [name]() {
        return "messageActionGiftPremium";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["currency", "string", "string"],
            ["amount", "bigint", "long"],
            ["months", "number", "int"],
            ["crypto_currency", "string", "flags.0?string"],
            ["crypto_amount", "bigint", "flags.0?long"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.currency, "string", "string"],
            [this.amount, "bigint", "long"],
            [this.months, "number", "int"],
            [this.crypto_currency ?? null, "string", "flags.0?string"],
            [this.crypto_amount ?? null, "bigint", "flags.0?long"],
        ];
    }
    constructor(params) {
        super();
        /** Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code */
        Object.defineProperty(this, "currency", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Price of the gift in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). */
        Object.defineProperty(this, "amount", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Duration of the gifted Telegram Premium subscription */
        Object.defineProperty(this, "months", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If the gift was bought using a cryptocurrency, the cryptocurrency name. */
        Object.defineProperty(this, "crypto_currency", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If the gift was bought using a cryptocurrency, price of the gift in the smallest units of a cryptocurrency. */
        Object.defineProperty(this, "crypto_amount", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.currency = params.currency;
        this.amount = params.amount;
        this.months = params.months;
        this.crypto_currency = params.crypto_currency;
        this.crypto_amount = params.crypto_amount;
    }
}
/** A [forum topic](https://core.telegram.org/api/forum#forum-topics) was created. */
export class MessageActionTopicCreate_ extends _MessageAction_ {
    get [id]() {
        return 0x0D999256;
    }
    static get [name]() {
        return "messageActionTopicCreate";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["title", "string", "string"],
            ["icon_color", "number", "int"],
            ["icon_emoji_id", "bigint", "flags.0?long"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.title, "string", "string"],
            [this.icon_color, "number", "int"],
            [this.icon_emoji_id ?? null, "bigint", "flags.0?long"],
        ];
    }
    constructor(params) {
        super();
        /** Topic name. */
        Object.defineProperty(this, "title", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If no custom emoji icon is specified, specifies the color of the fallback topic icon (RGB), one of `0x6FB9F0`, `0xFFD67E`, `0xCB86DB`, `0x8EEE98`, `0xFF93B2`, or `0xFB6F5F`. */
        Object.defineProperty(this, "icon_color", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the [custom emoji](https://core.telegram.org/api/custom-emoji) used as topic icon. */
        Object.defineProperty(this, "icon_emoji_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.title = params.title;
        this.icon_color = params.icon_color;
        this.icon_emoji_id = params.icon_emoji_id;
    }
}
/** [Forum topic](https://core.telegram.org/api/forum#forum-topics) information was edited. */
export class MessageActionTopicEdit_ extends _MessageAction_ {
    get [id]() {
        return 0xC0944820;
    }
    static get [name]() {
        return "messageActionTopicEdit";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["title", "string", "flags.0?string"],
            ["icon_emoji_id", "bigint", "flags.1?long"],
            ["closed", "boolean", "flags.2?Bool"],
            ["hidden", "boolean", "flags.3?Bool"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.title ?? null, "string", "flags.0?string"],
            [this.icon_emoji_id ?? null, "bigint", "flags.1?long"],
            [this.closed ?? null, "boolean", "flags.2?Bool"],
            [this.hidden ?? null, "boolean", "flags.3?Bool"],
        ];
    }
    constructor(params) {
        super();
        /** New topic title. */
        Object.defineProperty(this, "title", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the new [custom emoji](https://core.telegram.org/api/custom-emoji) used as topic icon, or if it was removed. */
        Object.defineProperty(this, "icon_emoji_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether the topic was opened or closed. */
        Object.defineProperty(this, "closed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether the topic was hidden or unhidden (only valid for the "General" topic, `id=1`). */
        Object.defineProperty(this, "hidden", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.title = params?.title;
        this.icon_emoji_id = params?.icon_emoji_id;
        this.closed = params?.closed;
        this.hidden = params?.hidden;
    }
}
/** A new profile picture was suggested using [photos.uploadContactProfilePhoto](https://core.telegram.org/method/photos.uploadContactProfilePhoto). */
export class MessageActionSuggestProfilePhoto_ extends _MessageAction_ {
    get [id]() {
        return 0x57DE635E;
    }
    static get [name]() {
        return "messageActionSuggestProfilePhoto";
    }
    static get [paramDesc]() {
        return [
            ["photo", _Photo_, "Photo"],
        ];
    }
    get [params]() {
        return [
            [this.photo, _Photo_, "Photo"],
        ];
    }
    constructor(params) {
        super();
        /** The photo that the user suggested we set as profile picture. */
        Object.defineProperty(this, "photo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.photo = params.photo;
    }
}
/** Contains info about one or more peers that the user shared with the bot after clicking on a [keyboardButtonRequestPeer](https://core.telegram.org/constructor/keyboardButtonRequestPeer) button. */
export class MessageActionRequestedPeer_ extends _MessageAction_ {
    get [id]() {
        return 0x31518E9B;
    }
    static get [name]() {
        return "messageActionRequestedPeer";
    }
    static get [paramDesc]() {
        return [
            ["button_id", "number", "int"],
            ["peers", [_Peer_], "Vector<Peer>"],
        ];
    }
    get [params]() {
        return [
            [this.button_id, "number", "int"],
            [this.peers, [_Peer_], "Vector<Peer>"],
        ];
    }
    constructor(params) {
        super();
        /** `button_id` contained in the [keyboardButtonRequestPeer](https://core.telegram.org/constructor/keyboardButtonRequestPeer) */
        Object.defineProperty(this, "button_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The shared peers */
        Object.defineProperty(this, "peers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.button_id = params.button_id;
        this.peers = params.peers;
    }
}
/** The [wallpaper »](https://core.telegram.org/api/wallpapers) of the current chat was changed. */
export class MessageActionSetChatWallPaper_ extends _MessageAction_ {
    get [id]() {
        return 0x5060A3F4;
    }
    static get [name]() {
        return "messageActionSetChatWallPaper";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["same", "true", "flags.0?true"],
            ["for_both", "true", "flags.1?true"],
            ["wallpaper", _WallPaper_, "WallPaper"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.same ?? null, "true", "flags.0?true"],
            [this.for_both ?? null, "true", "flags.1?true"],
            [this.wallpaper, _WallPaper_, "WallPaper"],
        ];
    }
    constructor(params) {
        super();
        /** If set, indicates the user applied a [wallpaper »](https://core.telegram.org/api/wallpapers) previously sent by the other user in a [messageActionSetChatWallPaper](https://core.telegram.org/constructor/messageActionSetChatWallPaper) message. */
        Object.defineProperty(this, "same", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, indicates the wallpaper was forcefully applied for both sides, without explicit confirmation from the other side.
        If the message is incoming, and we did not like the new wallpaper the other user has chosen for us, we can re-set our previous wallpaper just on our side, by invoking [messages.setChatWallPaper](https://core.telegram.org/method/messages.setChatWallPaper), providing only the `revert` flag (and obviously the `peer` parameter). */
        Object.defineProperty(this, "for_both", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New [wallpaper](https://core.telegram.org/api/wallpapers) */
        Object.defineProperty(this, "wallpaper", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.same = params.same;
        this.for_both = params.for_both;
        this.wallpaper = params.wallpaper;
    }
}
/** Contains a [Telegram Premium giftcode link](https://core.telegram.org/api/links#premium-giftcode-links). */
export class MessageActionGiftCode_ extends _MessageAction_ {
    get [id]() {
        return 0x678C2E09;
    }
    static get [name]() {
        return "messageActionGiftCode";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["via_giveaway", "true", "flags.0?true"],
            ["unclaimed", "true", "flags.2?true"],
            ["boost_peer", _Peer_, "flags.1?Peer"],
            ["months", "number", "int"],
            ["slug", "string", "string"],
            ["currency", "string", "flags.2?string"],
            ["amount", "bigint", "flags.2?long"],
            ["crypto_currency", "string", "flags.3?string"],
            ["crypto_amount", "bigint", "flags.3?long"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.via_giveaway ?? null, "true", "flags.0?true"],
            [this.unclaimed ?? null, "true", "flags.2?true"],
            [this.boost_peer ?? null, _Peer_, "flags.1?Peer"],
            [this.months, "number", "int"],
            [this.slug, "string", "string"],
            [this.currency ?? null, "string", "flags.2?string"],
            [this.amount ?? null, "bigint", "flags.2?long"],
            [this.crypto_currency ?? null, "string", "flags.3?string"],
            [this.crypto_amount ?? null, "bigint", "flags.3?long"],
        ];
    }
    constructor(params) {
        super();
        /** If set, this gift code was received from a [giveaway »](https://core.telegram.org/api/giveaways) started by a channel we're subscribed to. */
        Object.defineProperty(this, "via_giveaway", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, the link was not [redeemed](https://core.telegram.org/api/links#premium-giftcode-links) yet. */
        Object.defineProperty(this, "unclaimed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Identifier of the channel that created the gift code [either directly or through a giveaway](https://core.telegram.org/api/giveaways): if we import this giftcode link, we will also automatically [boost](https://core.telegram.org/api/boost) this channel. */
        Object.defineProperty(this, "boost_peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Duration in months of the gifted [Telegram Premium subscription](https://core.telegram.org/api/premium). */
        Object.defineProperty(this, "months", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Slug of the [Telegram Premium giftcode link](https://core.telegram.org/api/links#premium-giftcode-links) */
        Object.defineProperty(this, "slug", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code */
        Object.defineProperty(this, "currency", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Total price in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). */
        Object.defineProperty(this, "amount", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, the gift was made using the specified cryptocurrency. */
        Object.defineProperty(this, "crypto_currency", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If `crypto_currency` is set, contains the paid amount, in the smallest units of the cryptocurrency. */
        Object.defineProperty(this, "crypto_amount", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.via_giveaway = params.via_giveaway;
        this.unclaimed = params.unclaimed;
        this.boost_peer = params.boost_peer;
        this.months = params.months;
        this.slug = params.slug;
        this.currency = params.currency;
        this.amount = params.amount;
        this.crypto_currency = params.crypto_currency;
        this.crypto_amount = params.crypto_amount;
    }
}
/** A [giveaway](https://core.telegram.org/api/giveaways) was started. */
export class MessageActionGiveawayLaunch_ extends _MessageAction_ {
    get [id]() {
        return 0x332BA9ED;
    }
    static get [name]() {
        return "messageActionGiveawayLaunch";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** A [giveaway](https://core.telegram.org/api/giveaways) has ended. */
export class MessageActionGiveawayResults_ extends _MessageAction_ {
    get [id]() {
        return 0x2A9FADC5;
    }
    static get [name]() {
        return "messageActionGiveawayResults";
    }
    static get [paramDesc]() {
        return [
            ["winners_count", "number", "int"],
            ["unclaimed_count", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.winners_count, "number", "int"],
            [this.unclaimed_count, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Number of winners in the giveaway */
        Object.defineProperty(this, "winners_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of undistributed prizes */
        Object.defineProperty(this, "unclaimed_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.winners_count = params.winners_count;
        this.unclaimed_count = params.unclaimed_count;
    }
}
export class MessageActionBoostApply_ extends _MessageAction_ {
    get [id]() {
        return 0xCC02AA6D;
    }
    static get [name]() {
        return "messageActionBoostApply";
    }
    static get [paramDesc]() {
        return [
            ["boosts", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.boosts, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "boosts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.boosts = params.boosts;
    }
}
/** Chat */
export class Dialog_ extends _Dialog_ {
    get [id]() {
        return 0xD58A08C6;
    }
    static get [name]() {
        return "dialog";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["pinned", "true", "flags.2?true"],
            ["unread_mark", "true", "flags.3?true"],
            ["view_forum_as_messages", "true", "flags.6?true"],
            ["peer", _Peer_, "Peer"],
            ["top_message", "number", "int"],
            ["read_inbox_max_id", "number", "int"],
            ["read_outbox_max_id", "number", "int"],
            ["unread_count", "number", "int"],
            ["unread_mentions_count", "number", "int"],
            ["unread_reactions_count", "number", "int"],
            ["notify_settings", _PeerNotifySettings_, "PeerNotifySettings"],
            ["pts", "number", "flags.0?int"],
            ["draft", _DraftMessage_, "flags.1?DraftMessage"],
            ["folder_id", "number", "flags.4?int"],
            ["ttl_period", "number", "flags.5?int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.pinned ?? null, "true", "flags.2?true"],
            [this.unread_mark ?? null, "true", "flags.3?true"],
            [this.view_forum_as_messages ?? null, "true", "flags.6?true"],
            [this.peer, _Peer_, "Peer"],
            [this.top_message, "number", "int"],
            [this.read_inbox_max_id, "number", "int"],
            [this.read_outbox_max_id, "number", "int"],
            [this.unread_count, "number", "int"],
            [this.unread_mentions_count, "number", "int"],
            [this.unread_reactions_count, "number", "int"],
            [this.notify_settings, _PeerNotifySettings_, "PeerNotifySettings"],
            [this.pts ?? null, "number", "flags.0?int"],
            [this.draft ?? null, _DraftMessage_, "flags.1?DraftMessage"],
            [this.folder_id ?? null, "number", "flags.4?int"],
            [this.ttl_period ?? null, "number", "flags.5?int"],
        ];
    }
    constructor(params) {
        super();
        /** Is the dialog pinned */
        Object.defineProperty(this, "pinned", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether the chat was manually marked as unread */
        Object.defineProperty(this, "unread_mark", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Users may also choose to display messages from all topics of a [forum](https://core.telegram.org/api/forum) as if they were sent to a normal group, using a "View as messages" setting in the local client.
        This setting only affects the current account, and is synced to other logged in sessions using the [channels.toggleViewForumAsMessages](https://core.telegram.org/method/channels.toggleViewForumAsMessages) method; invoking this method will update the value of this flag. */
        Object.defineProperty(this, "view_forum_as_messages", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The chat */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The latest message ID */
        Object.defineProperty(this, "top_message", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Position up to which all incoming messages are read. */
        Object.defineProperty(this, "read_inbox_max_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Position up to which all outgoing messages are read. */
        Object.defineProperty(this, "read_outbox_max_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of unread messages */
        Object.defineProperty(this, "unread_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of [unread mentions](https://core.telegram.org/api/mentions) */
        Object.defineProperty(this, "unread_mentions_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of unread reactions to messages you sent */
        Object.defineProperty(this, "unread_reactions_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Notification settings */
        Object.defineProperty(this, "notify_settings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [PTS](https://core.telegram.org/api/updates) */
        Object.defineProperty(this, "pts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Message [draft](https://core.telegram.org/api/drafts) */
        Object.defineProperty(this, "draft", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Peer folder ID, for more info click here](https://core.telegram.org/api/folders#peer-folders) */
        Object.defineProperty(this, "folder_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Time-to-live of all messages sent in this dialog */
        Object.defineProperty(this, "ttl_period", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.pinned = params.pinned;
        this.unread_mark = params.unread_mark;
        this.view_forum_as_messages = params.view_forum_as_messages;
        this.peer = params.peer;
        this.top_message = params.top_message;
        this.read_inbox_max_id = params.read_inbox_max_id;
        this.read_outbox_max_id = params.read_outbox_max_id;
        this.unread_count = params.unread_count;
        this.unread_mentions_count = params.unread_mentions_count;
        this.unread_reactions_count = params.unread_reactions_count;
        this.notify_settings = params.notify_settings;
        this.pts = params.pts;
        this.draft = params.draft;
        this.folder_id = params.folder_id;
        this.ttl_period = params.ttl_period;
    }
}
/** Dialog in folder */
export class DialogFolder_ extends _Dialog_ {
    get [id]() {
        return 0x71BD134C;
    }
    static get [name]() {
        return "dialogFolder";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["pinned", "true", "flags.2?true"],
            ["folder", _Folder_, "Folder"],
            ["peer", _Peer_, "Peer"],
            ["top_message", "number", "int"],
            ["unread_muted_peers_count", "number", "int"],
            ["unread_unmuted_peers_count", "number", "int"],
            ["unread_muted_messages_count", "number", "int"],
            ["unread_unmuted_messages_count", "number", "int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.pinned ?? null, "true", "flags.2?true"],
            [this.folder, _Folder_, "Folder"],
            [this.peer, _Peer_, "Peer"],
            [this.top_message, "number", "int"],
            [this.unread_muted_peers_count, "number", "int"],
            [this.unread_unmuted_peers_count, "number", "int"],
            [this.unread_muted_messages_count, "number", "int"],
            [this.unread_unmuted_messages_count, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Is this folder pinned */
        Object.defineProperty(this, "pinned", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The folder */
        Object.defineProperty(this, "folder", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Peer in folder */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Latest message ID of dialog */
        Object.defineProperty(this, "top_message", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of unread muted peers in folder */
        Object.defineProperty(this, "unread_muted_peers_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of unread unmuted peers in folder */
        Object.defineProperty(this, "unread_unmuted_peers_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of unread messages from muted peers in folder */
        Object.defineProperty(this, "unread_muted_messages_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of unread messages from unmuted peers in folder */
        Object.defineProperty(this, "unread_unmuted_messages_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.pinned = params.pinned;
        this.folder = params.folder;
        this.peer = params.peer;
        this.top_message = params.top_message;
        this.unread_muted_peers_count = params.unread_muted_peers_count;
        this.unread_unmuted_peers_count = params.unread_unmuted_peers_count;
        this.unread_muted_messages_count = params.unread_muted_messages_count;
        this.unread_unmuted_messages_count = params.unread_unmuted_messages_count;
    }
}
/** Empty constructor, non-existent photo */
export class PhotoEmpty_ extends _Photo_ {
    get [id]() {
        return 0x2331B22D;
    }
    static get [name]() {
        return "photoEmpty";
    }
    static get [paramDesc]() {
        return [
            ["id", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.id, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** Photo identifier */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
    }
}
/** Photo */
export class Photo_ extends _Photo_ {
    get [id]() {
        return 0xFB197A65;
    }
    static get [name]() {
        return "photo";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["has_stickers", "true", "flags.0?true"],
            ["id", "bigint", "long"],
            ["access_hash", "bigint", "long"],
            ["file_reference", Uint8Array, "bytes"],
            ["date", "number", "int"],
            ["sizes", [_PhotoSize_], "Vector<PhotoSize>"],
            ["video_sizes", [_VideoSize_], "flags.1?Vector<VideoSize>"],
            ["dc_id", "number", "int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.has_stickers ?? null, "true", "flags.0?true"],
            [this.id, "bigint", "long"],
            [this.access_hash, "bigint", "long"],
            [this.file_reference, Uint8Array, "bytes"],
            [this.date, "number", "int"],
            [this.sizes, [_PhotoSize_], "Vector<PhotoSize>"],
            [this.video_sizes ?? null, [_VideoSize_], "flags.1?Vector<VideoSize>"],
            [this.dc_id, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Whether the photo has mask stickers attached to it */
        Object.defineProperty(this, "has_stickers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Access hash */
        Object.defineProperty(this, "access_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [file reference](https://core.telegram.org/api/file_reference) */
        Object.defineProperty(this, "file_reference", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Date of upload */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Available sizes for download */
        Object.defineProperty(this, "sizes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [For animated profiles](https://core.telegram.org/api/files#animated-profile-pictures), the MPEG4 videos */
        Object.defineProperty(this, "video_sizes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** DC ID to use for download */
        Object.defineProperty(this, "dc_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.has_stickers = params.has_stickers;
        this.id = params.id;
        this.access_hash = params.access_hash;
        this.file_reference = params.file_reference;
        this.date = params.date;
        this.sizes = params.sizes;
        this.video_sizes = params.video_sizes;
        this.dc_id = params.dc_id;
    }
}
/** Empty constructor. Image with this thumbnail is unavailable. */
export class PhotoSizeEmpty_ extends _PhotoSize_ {
    get [id]() {
        return 0x0E17E23C;
    }
    static get [name]() {
        return "photoSizeEmpty";
    }
    static get [paramDesc]() {
        return [
            ["type", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.type, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** [Thumbnail type »](https://core.telegram.org/api/files#image-thumbnail-types) */
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.type = params.type;
    }
}
/** Image description. */
export class PhotoSize_ extends _PhotoSize_ {
    get [id]() {
        return 0x75C78E60;
    }
    static get [name]() {
        return "photoSize";
    }
    static get [paramDesc]() {
        return [
            ["type", "string", "string"],
            ["w", "number", "int"],
            ["h", "number", "int"],
            ["size", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.type, "string", "string"],
            [this.w, "number", "int"],
            [this.h, "number", "int"],
            [this.size, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** [Thumbnail type »](https://core.telegram.org/api/files#image-thumbnail-types) */
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Image width */
        Object.defineProperty(this, "w", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Image height */
        Object.defineProperty(this, "h", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** File size */
        Object.defineProperty(this, "size", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.type = params.type;
        this.w = params.w;
        this.h = params.h;
        this.size = params.size;
    }
}
/** Description of an image and its content. */
export class PhotoCachedSize_ extends _PhotoSize_ {
    get [id]() {
        return 0x021E1AD6;
    }
    static get [name]() {
        return "photoCachedSize";
    }
    static get [paramDesc]() {
        return [
            ["type", "string", "string"],
            ["w", "number", "int"],
            ["h", "number", "int"],
            ["bytes", Uint8Array, "bytes"],
        ];
    }
    get [params]() {
        return [
            [this.type, "string", "string"],
            [this.w, "number", "int"],
            [this.h, "number", "int"],
            [this.bytes, Uint8Array, "bytes"],
        ];
    }
    constructor(params) {
        super();
        /** Thumbnail type */
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Image width */
        Object.defineProperty(this, "w", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Image height */
        Object.defineProperty(this, "h", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Binary data, file content */
        Object.defineProperty(this, "bytes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.type = params.type;
        this.w = params.w;
        this.h = params.h;
        this.bytes = params.bytes;
    }
}
/** A low-resolution compressed JPG payload */
export class PhotoStrippedSize_ extends _PhotoSize_ {
    get [id]() {
        return 0xE0B0BC2E;
    }
    static get [name]() {
        return "photoStrippedSize";
    }
    static get [paramDesc]() {
        return [
            ["type", "string", "string"],
            ["bytes", Uint8Array, "bytes"],
        ];
    }
    get [params]() {
        return [
            [this.type, "string", "string"],
            [this.bytes, Uint8Array, "bytes"],
        ];
    }
    constructor(params) {
        super();
        /** Thumbnail type */
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Thumbnail data, see [here for more info on decompression »](https://core.telegram.org/api/files#stripped-thumbnails) */
        Object.defineProperty(this, "bytes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.type = params.type;
        this.bytes = params.bytes;
    }
}
/** Progressively encoded photosize */
export class PhotoSizeProgressive_ extends _PhotoSize_ {
    get [id]() {
        return 0xFA3EFB95;
    }
    static get [name]() {
        return "photoSizeProgressive";
    }
    static get [paramDesc]() {
        return [
            ["type", "string", "string"],
            ["w", "number", "int"],
            ["h", "number", "int"],
            ["sizes", ["number"], "Vector<int>"],
        ];
    }
    get [params]() {
        return [
            [this.type, "string", "string"],
            [this.w, "number", "int"],
            [this.h, "number", "int"],
            [this.sizes, ["number"], "Vector<int>"],
        ];
    }
    constructor(params) {
        super();
        /** [Photosize type »](https://core.telegram.org/api/files#image-thumbnail-types) */
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Photo width */
        Object.defineProperty(this, "w", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Photo height */
        Object.defineProperty(this, "h", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Sizes of progressive JPEG file prefixes, which can be used to preliminarily show the image. */
        Object.defineProperty(this, "sizes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.type = params.type;
        this.w = params.w;
        this.h = params.h;
        this.sizes = params.sizes;
    }
}
/** Messages with animated stickers can have a compressed svg (< 300 bytes) to show the outline of the sticker before fetching the actual lottie animation. */
export class PhotoPathSize_ extends _PhotoSize_ {
    get [id]() {
        return 0xD8214D41;
    }
    static get [name]() {
        return "photoPathSize";
    }
    static get [paramDesc]() {
        return [
            ["type", "string", "string"],
            ["bytes", Uint8Array, "bytes"],
        ];
    }
    get [params]() {
        return [
            [this.type, "string", "string"],
            [this.bytes, Uint8Array, "bytes"],
        ];
    }
    constructor(params) {
        super();
        /** Always `j` */
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Compressed SVG path payload, [see here for decompression instructions](https://core.telegram.org/api/files#vector-thumbnails) */
        Object.defineProperty(this, "bytes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.type = params.type;
        this.bytes = params.bytes;
    }
}
/** Empty constructor. */
export class GeoPointEmpty_ extends _GeoPoint_ {
    get [id]() {
        return 0x1117DD5F;
    }
    static get [name]() {
        return "geoPointEmpty";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** GeoPoint. */
export class GeoPoint_ extends _GeoPoint_ {
    get [id]() {
        return 0xB2A2F663;
    }
    static get [name]() {
        return "geoPoint";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["long", "number", "double"],
            ["lat", "number", "double"],
            ["access_hash", "bigint", "long"],
            ["accuracy_radius", "number", "flags.0?int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.long, "number", "double"],
            [this.lat, "number", "double"],
            [this.access_hash, "bigint", "long"],
            [this.accuracy_radius ?? null, "number", "flags.0?int"],
        ];
    }
    constructor(params) {
        super();
        /** Longitude */
        Object.defineProperty(this, "long", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Latitude */
        Object.defineProperty(this, "lat", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Access hash */
        Object.defineProperty(this, "access_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The estimated horizontal accuracy of the location, in meters; as defined by the sender. */
        Object.defineProperty(this, "accuracy_radius", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.long = params.long;
        this.lat = params.lat;
        this.access_hash = params.access_hash;
        this.accuracy_radius = params.accuracy_radius;
    }
}
/** Contains info about a sent verification code. */
export class auth_SentCode_ extends _auth_SentCode_ {
    get [id]() {
        return 0x5E002502;
    }
    static get [name]() {
        return "auth.sentCode";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["type", _auth_SentCodeType_, "auth.SentCodeType"],
            ["phone_code_hash", "string", "string"],
            ["next_type", _auth_CodeType_, "flags.1?auth.CodeType"],
            ["timeout", "number", "flags.2?int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.type, _auth_SentCodeType_, "auth.SentCodeType"],
            [this.phone_code_hash, "string", "string"],
            [this.next_type ?? null, _auth_CodeType_, "flags.1?auth.CodeType"],
            [this.timeout ?? null, "number", "flags.2?int"],
        ];
    }
    constructor(params) {
        super();
        /** Phone code type */
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Phone code hash, to be stored and later re-used with [auth.signIn](https://core.telegram.org/method/auth.signIn) */
        Object.defineProperty(this, "phone_code_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Phone code type that will be sent next, if the phone code is not received within `timeout` seconds: to send it use [auth.resendCode](https://core.telegram.org/method/auth.resendCode) */
        Object.defineProperty(this, "next_type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Timeout for reception of the phone code */
        Object.defineProperty(this, "timeout", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.type = params.type;
        this.phone_code_hash = params.phone_code_hash;
        this.next_type = params.next_type;
        this.timeout = params.timeout;
    }
}
/** The user successfully authorized using [future auth tokens](https://core.telegram.org/api/auth#future-auth-tokens) */
export class auth_SentCodeSuccess_ extends _auth_SentCode_ {
    get [id]() {
        return 0x2390FE44;
    }
    static get [name]() {
        return "auth.sentCodeSuccess";
    }
    static get [paramDesc]() {
        return [
            ["authorization", _auth_Authorization_, "auth.Authorization"],
        ];
    }
    get [params]() {
        return [
            [this.authorization, _auth_Authorization_, "auth.Authorization"],
        ];
    }
    constructor(params) {
        super();
        /** Authorization info */
        Object.defineProperty(this, "authorization", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.authorization = params.authorization;
    }
}
/** Contains user authorization info. */
export class auth_Authorization_ extends _auth_Authorization_ {
    get [id]() {
        return 0x2EA2C0D4;
    }
    static get [name]() {
        return "auth.authorization";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["setup_password_required", "true", "flags.1?true"],
            ["otherwise_relogin_days", "number", "flags.1?int"],
            ["tmp_sessions", "number", "flags.0?int"],
            ["future_auth_token", Uint8Array, "flags.2?bytes"],
            ["user", _User_, "User"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.setup_password_required ?? null, "true", "flags.1?true"],
            [this.otherwise_relogin_days ?? null, "number", "flags.1?int"],
            [this.tmp_sessions ?? null, "number", "flags.0?int"],
            [this.future_auth_token ?? null, Uint8Array, "flags.2?bytes"],
            [this.user, _User_, "User"],
        ];
    }
    constructor(params) {
        super();
        /** Suggests the user to set up a 2-step verification password to be able to log in again */
        Object.defineProperty(this, "setup_password_required", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Iff setup\_password\_required is set and the user declines to set a 2-step verification password, they will be able to log into their account via SMS again only after this many days pass. */
        Object.defineProperty(this, "otherwise_relogin_days", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Temporary [passport](https://core.telegram.org/passport) sessions */
        Object.defineProperty(this, "tmp_sessions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** A [future auth token](https://core.telegram.org/api/auth#future-auth-tokens) */
        Object.defineProperty(this, "future_auth_token", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Info on authorized user */
        Object.defineProperty(this, "user", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.setup_password_required = params.setup_password_required;
        this.otherwise_relogin_days = params.otherwise_relogin_days;
        this.tmp_sessions = params.tmp_sessions;
        this.future_auth_token = params.future_auth_token;
        this.user = params.user;
    }
}
/** An account with this phone number doesn't exist on telegram: the user has to [enter basic information and sign up](https://core.telegram.org/api/auth) */
export class auth_AuthorizationSignUpRequired_ extends _auth_Authorization_ {
    get [id]() {
        return 0x44747E9A;
    }
    static get [name]() {
        return "auth.authorizationSignUpRequired";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["terms_of_service", _help_TermsOfService_, "flags.0?help.TermsOfService"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.terms_of_service ?? null, _help_TermsOfService_, "flags.0?help.TermsOfService"],
        ];
    }
    constructor(params) {
        super();
        /** Telegram's terms of service: the user must read and accept the terms of service before signing up to telegram */
        Object.defineProperty(this, "terms_of_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.terms_of_service = params?.terms_of_service;
    }
}
/** Data for copying of authorization between data centers. */
export class auth_ExportedAuthorization_ extends _auth_ExportedAuthorization_ {
    get [id]() {
        return 0xB434E2B8;
    }
    static get [name]() {
        return "auth.exportedAuthorization";
    }
    static get [paramDesc]() {
        return [
            ["id", "bigint", "long"],
            ["bytes", Uint8Array, "bytes"],
        ];
    }
    get [params]() {
        return [
            [this.id, "bigint", "long"],
            [this.bytes, Uint8Array, "bytes"],
        ];
    }
    constructor(params) {
        super();
        /** current user identifier */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** authorizes key */
        Object.defineProperty(this, "bytes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
        this.bytes = params.bytes;
    }
}
/** Notifications generated by a certain user or group. */
export class InputNotifyPeer_ extends _InputNotifyPeer_ {
    get [id]() {
        return 0xB8BC5B0C;
    }
    static get [name]() {
        return "inputNotifyPeer";
    }
    static get [paramDesc]() {
        return [
            ["peer", _InputPeer_, "InputPeer"],
        ];
    }
    get [params]() {
        return [
            [this.peer, _InputPeer_, "InputPeer"],
        ];
    }
    constructor(params) {
        super();
        /** User or group */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.peer = params.peer;
    }
}
/** Notifications generated by all users. */
export class InputNotifyUsers_ extends _InputNotifyPeer_ {
    get [id]() {
        return 0x193B4417;
    }
    static get [name]() {
        return "inputNotifyUsers";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Notifications generated by all groups. */
export class InputNotifyChats_ extends _InputNotifyPeer_ {
    get [id]() {
        return 0x4A95E84E;
    }
    static get [name]() {
        return "inputNotifyChats";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** All [channels](https://core.telegram.org/api/channel) */
export class InputNotifyBroadcasts_ extends _InputNotifyPeer_ {
    get [id]() {
        return 0xB1DB7C7E;
    }
    static get [name]() {
        return "inputNotifyBroadcasts";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Notifications generated by a [topic](https://core.telegram.org/api/forum#forum-topics) in a [forum](https://core.telegram.org/api/forum). */
export class InputNotifyForumTopic_ extends _InputNotifyPeer_ {
    get [id]() {
        return 0x5C467992;
    }
    static get [name]() {
        return "inputNotifyForumTopic";
    }
    static get [paramDesc]() {
        return [
            ["peer", _InputPeer_, "InputPeer"],
            ["top_msg_id", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.peer, _InputPeer_, "InputPeer"],
            [this.top_msg_id, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Forum ID */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Topic ID](https://core.telegram.org/api/forum#forum-topics) */
        Object.defineProperty(this, "top_msg_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.peer = params.peer;
        this.top_msg_id = params.top_msg_id;
    }
}
/** Notification settings. */
export class InputPeerNotifySettings_ extends _InputPeerNotifySettings_ {
    get [id]() {
        return 0xCACB6AE2;
    }
    static get [name]() {
        return "inputPeerNotifySettings";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["show_previews", "boolean", "flags.0?Bool"],
            ["silent", "boolean", "flags.1?Bool"],
            ["mute_until", "number", "flags.2?int"],
            ["sound", _NotificationSound_, "flags.3?NotificationSound"],
            ["stories_muted", "boolean", "flags.6?Bool"],
            ["stories_hide_sender", "boolean", "flags.7?Bool"],
            ["stories_sound", _NotificationSound_, "flags.8?NotificationSound"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.show_previews ?? null, "boolean", "flags.0?Bool"],
            [this.silent ?? null, "boolean", "flags.1?Bool"],
            [this.mute_until ?? null, "number", "flags.2?int"],
            [this.sound ?? null, _NotificationSound_, "flags.3?NotificationSound"],
            [this.stories_muted ?? null, "boolean", "flags.6?Bool"],
            [this.stories_hide_sender ?? null, "boolean", "flags.7?Bool"],
            [this.stories_sound ?? null, _NotificationSound_, "flags.8?NotificationSound"],
        ];
    }
    constructor(params) {
        super();
        /** If the text of the message shall be displayed in notification */
        Object.defineProperty(this, "show_previews", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Peer was muted? */
        Object.defineProperty(this, "silent", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Date until which all notifications shall be switched off */
        Object.defineProperty(this, "mute_until", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Identifier of an audio file to play for notifications. */
        Object.defineProperty(this, "sound", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether story notifications should be disabled. */
        Object.defineProperty(this, "stories_muted", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether the sender name should be displayed in story notifications. */
        Object.defineProperty(this, "stories_hide_sender", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Identifier of an audio file to play for story notifications. */
        Object.defineProperty(this, "stories_sound", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.show_previews = params?.show_previews;
        this.silent = params?.silent;
        this.mute_until = params?.mute_until;
        this.sound = params?.sound;
        this.stories_muted = params?.stories_muted;
        this.stories_hide_sender = params?.stories_hide_sender;
        this.stories_sound = params?.stories_sound;
    }
}
/** Notification settings. */
export class PeerNotifySettings_ extends _PeerNotifySettings_ {
    get [id]() {
        return 0x99622C0C;
    }
    static get [name]() {
        return "peerNotifySettings";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["show_previews", "boolean", "flags.0?Bool"],
            ["silent", "boolean", "flags.1?Bool"],
            ["mute_until", "number", "flags.2?int"],
            ["ios_sound", _NotificationSound_, "flags.3?NotificationSound"],
            ["android_sound", _NotificationSound_, "flags.4?NotificationSound"],
            ["other_sound", _NotificationSound_, "flags.5?NotificationSound"],
            ["stories_muted", "boolean", "flags.6?Bool"],
            ["stories_hide_sender", "boolean", "flags.7?Bool"],
            ["stories_ios_sound", _NotificationSound_, "flags.8?NotificationSound"],
            ["stories_android_sound", _NotificationSound_, "flags.9?NotificationSound"],
            ["stories_other_sound", _NotificationSound_, "flags.10?NotificationSound"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.show_previews ?? null, "boolean", "flags.0?Bool"],
            [this.silent ?? null, "boolean", "flags.1?Bool"],
            [this.mute_until ?? null, "number", "flags.2?int"],
            [this.ios_sound ?? null, _NotificationSound_, "flags.3?NotificationSound"],
            [this.android_sound ?? null, _NotificationSound_, "flags.4?NotificationSound"],
            [this.other_sound ?? null, _NotificationSound_, "flags.5?NotificationSound"],
            [this.stories_muted ?? null, "boolean", "flags.6?Bool"],
            [this.stories_hide_sender ?? null, "boolean", "flags.7?Bool"],
            [this.stories_ios_sound ?? null, _NotificationSound_, "flags.8?NotificationSound"],
            [this.stories_android_sound ?? null, _NotificationSound_, "flags.9?NotificationSound"],
            [this.stories_other_sound ?? null, _NotificationSound_, "flags.10?NotificationSound"],
        ];
    }
    constructor(params) {
        super();
        /** (Ternary value) If set, indicates whether or not to display previews of messages in notifications; otherwise the default behavior should be used. */
        Object.defineProperty(this, "show_previews", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** (Ternary value) If set, indicates whether to mute or unmute the peer; otherwise the default behavior should be used. */
        Object.defineProperty(this, "silent", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Mute all notifications until this date */
        Object.defineProperty(this, "mute_until", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Notification sound for the official iOS application */
        Object.defineProperty(this, "ios_sound", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Notification sound for the official android application */
        Object.defineProperty(this, "android_sound", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Notification sound for other applications */
        Object.defineProperty(this, "other_sound", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether story notifications should be disabled. */
        Object.defineProperty(this, "stories_muted", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether the sender name should be displayed in story notifications. */
        Object.defineProperty(this, "stories_hide_sender", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Sound for story notifications on the official iOS application */
        Object.defineProperty(this, "stories_ios_sound", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Sound for story notifications on the official Android application */
        Object.defineProperty(this, "stories_android_sound", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Sound for story notifications on other applications */
        Object.defineProperty(this, "stories_other_sound", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.show_previews = params?.show_previews;
        this.silent = params?.silent;
        this.mute_until = params?.mute_until;
        this.ios_sound = params?.ios_sound;
        this.android_sound = params?.android_sound;
        this.other_sound = params?.other_sound;
        this.stories_muted = params?.stories_muted;
        this.stories_hide_sender = params?.stories_hide_sender;
        this.stories_ios_sound = params?.stories_ios_sound;
        this.stories_android_sound = params?.stories_android_sound;
        this.stories_other_sound = params?.stories_other_sound;
    }
}
/** List of actions that are possible when interacting with this user, to be shown as suggested actions in the [chat action bar »](https://core.telegram.org/api/action-bar), see [here »](https://core.telegram.org/api/action-bar) for more info. */
export class PeerSettings_ extends _PeerSettings_ {
    get [id]() {
        return 0xA518110D;
    }
    static get [name]() {
        return "peerSettings";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["report_spam", "true", "flags.0?true"],
            ["add_contact", "true", "flags.1?true"],
            ["block_contact", "true", "flags.2?true"],
            ["share_contact", "true", "flags.3?true"],
            ["need_contacts_exception", "true", "flags.4?true"],
            ["report_geo", "true", "flags.5?true"],
            ["autoarchived", "true", "flags.7?true"],
            ["invite_members", "true", "flags.8?true"],
            ["request_chat_broadcast", "true", "flags.10?true"],
            ["geo_distance", "number", "flags.6?int"],
            ["request_chat_title", "string", "flags.9?string"],
            ["request_chat_date", "number", "flags.9?int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.report_spam ?? null, "true", "flags.0?true"],
            [this.add_contact ?? null, "true", "flags.1?true"],
            [this.block_contact ?? null, "true", "flags.2?true"],
            [this.share_contact ?? null, "true", "flags.3?true"],
            [this.need_contacts_exception ?? null, "true", "flags.4?true"],
            [this.report_geo ?? null, "true", "flags.5?true"],
            [this.autoarchived ?? null, "true", "flags.7?true"],
            [this.invite_members ?? null, "true", "flags.8?true"],
            [this.request_chat_broadcast ?? null, "true", "flags.10?true"],
            [this.geo_distance ?? null, "number", "flags.6?int"],
            [this.request_chat_title ?? null, "string", "flags.9?string"],
            [this.request_chat_date ?? null, "number", "flags.9?int"],
        ];
    }
    constructor(params) {
        super();
        /** Whether we can still report the user for spam */
        Object.defineProperty(this, "report_spam", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether we can add the user as contact */
        Object.defineProperty(this, "add_contact", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether we can block the user */
        Object.defineProperty(this, "block_contact", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether we can share the user's contact */
        Object.defineProperty(this, "share_contact", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether a special exception for contacts is needed */
        Object.defineProperty(this, "need_contacts_exception", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether we can report a geogroup as irrelevant for this location */
        Object.defineProperty(this, "report_geo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this peer was automatically archived according to [privacy settings](https://core.telegram.org/constructor/globalPrivacySettings) and can be unarchived */
        Object.defineProperty(this, "autoarchived", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, this is a recently created group chat to which new members can be invited */
        Object.defineProperty(this, "invite_members", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** This flag is set if `request_chat_title` and `request_chat_date` fields are set and the [join request »](https://core.telegram.org/api/invites#join-requests) is related to a channel (otherwise if only the request fields are set, the [join request »](https://core.telegram.org/api/invites#join-requests) is related to a chat). */
        Object.defineProperty(this, "request_chat_broadcast", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Distance in meters between us and this peer */
        Object.defineProperty(this, "geo_distance", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, this is a private chat with an administrator of a chat or channel to which the user sent a join request, and this field contains the chat/channel's title. */
        Object.defineProperty(this, "request_chat_title", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, this is a private chat with an administrator of a chat or channel to which the user sent a join request, and this field contains the timestamp when the [join request »](https://core.telegram.org/api/invites#join-requests) was sent. */
        Object.defineProperty(this, "request_chat_date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.report_spam = params?.report_spam;
        this.add_contact = params?.add_contact;
        this.block_contact = params?.block_contact;
        this.share_contact = params?.share_contact;
        this.need_contacts_exception = params?.need_contacts_exception;
        this.report_geo = params?.report_geo;
        this.autoarchived = params?.autoarchived;
        this.invite_members = params?.invite_members;
        this.request_chat_broadcast = params?.request_chat_broadcast;
        this.geo_distance = params?.geo_distance;
        this.request_chat_title = params?.request_chat_title;
        this.request_chat_date = params?.request_chat_date;
    }
}
/** Represents a [wallpaper](https://core.telegram.org/api/wallpapers) based on an image. */
export class WallPaper_ extends _WallPaper_ {
    get [id]() {
        return 0xA437C3ED;
    }
    static get [name]() {
        return "wallPaper";
    }
    static get [paramDesc]() {
        return [
            ["id", "bigint", "long"],
            ["flags", flags, "#"],
            ["creator", "true", "flags.0?true"],
            ["default", "true", "flags.1?true"],
            ["pattern", "true", "flags.3?true"],
            ["dark", "true", "flags.4?true"],
            ["access_hash", "bigint", "long"],
            ["slug", "string", "string"],
            ["document", _Document_, "Document"],
            ["settings", _WallPaperSettings_, "flags.2?WallPaperSettings"],
        ];
    }
    get [params]() {
        return [
            [this.id, "bigint", "long"],
            ["flags", flags, "#"],
            [this.creator ?? null, "true", "flags.0?true"],
            [this.default ?? null, "true", "flags.1?true"],
            [this.pattern ?? null, "true", "flags.3?true"],
            [this.dark ?? null, "true", "flags.4?true"],
            [this.access_hash, "bigint", "long"],
            [this.slug, "string", "string"],
            [this.document, _Document_, "Document"],
            [this.settings ?? null, _WallPaperSettings_, "flags.2?WallPaperSettings"],
        ];
    }
    constructor(params) {
        super();
        /** Identifier */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether we created this wallpaper */
        Object.defineProperty(this, "creator", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this is the default wallpaper */
        Object.defineProperty(this, "default", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this is a [pattern wallpaper »](https://core.telegram.org/api/wallpapers#pattern-wallpapers) */
        Object.defineProperty(this, "pattern", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this wallpaper should be used in dark mode. */
        Object.defineProperty(this, "dark", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Access hash */
        Object.defineProperty(this, "access_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Unique wallpaper ID, used when generating [wallpaper links](https://core.telegram.org/api/links#wallpaper-links) or [importing wallpaper links](https://core.telegram.org/api/wallpapers). */
        Object.defineProperty(this, "slug", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The actual wallpaper */
        Object.defineProperty(this, "document", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Info on how to generate the wallpaper, according to [these instructions »](https://core.telegram.org/api/wallpapers). */
        Object.defineProperty(this, "settings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
        this.creator = params.creator;
        this.default = params.default;
        this.pattern = params.pattern;
        this.dark = params.dark;
        this.access_hash = params.access_hash;
        this.slug = params.slug;
        this.document = params.document;
        this.settings = params.settings;
    }
}
/** Represents a [wallpaper](https://core.telegram.org/api/wallpapers) only based on colors/gradients. */
export class WallPaperNoFile_ extends _WallPaper_ {
    get [id]() {
        return 0xE0804116;
    }
    static get [name]() {
        return "wallPaperNoFile";
    }
    static get [paramDesc]() {
        return [
            ["id", "bigint", "long"],
            ["flags", flags, "#"],
            ["default", "true", "flags.1?true"],
            ["dark", "true", "flags.4?true"],
            ["settings", _WallPaperSettings_, "flags.2?WallPaperSettings"],
        ];
    }
    get [params]() {
        return [
            [this.id, "bigint", "long"],
            ["flags", flags, "#"],
            [this.default ?? null, "true", "flags.1?true"],
            [this.dark ?? null, "true", "flags.4?true"],
            [this.settings ?? null, _WallPaperSettings_, "flags.2?WallPaperSettings"],
        ];
    }
    constructor(params) {
        super();
        /** Wallpaper ID */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this is the default wallpaper */
        Object.defineProperty(this, "default", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this wallpaper should be used in dark mode. */
        Object.defineProperty(this, "dark", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Info on how to generate the wallpaper. */
        Object.defineProperty(this, "settings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
        this.default = params.default;
        this.dark = params.dark;
        this.settings = params.settings;
    }
}
/** Report for spam */
export class InputReportReasonSpam_ extends _ReportReason_ {
    get [id]() {
        return 0x58DBCAB8;
    }
    static get [name]() {
        return "inputReportReasonSpam";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Report for violence */
export class InputReportReasonViolence_ extends _ReportReason_ {
    get [id]() {
        return 0x1E22C78D;
    }
    static get [name]() {
        return "inputReportReasonViolence";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Report for pornography */
export class InputReportReasonPornography_ extends _ReportReason_ {
    get [id]() {
        return 0x2E59D922;
    }
    static get [name]() {
        return "inputReportReasonPornography";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Report for child abuse */
export class InputReportReasonChildAbuse_ extends _ReportReason_ {
    get [id]() {
        return 0xADF44EE3;
    }
    static get [name]() {
        return "inputReportReasonChildAbuse";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Other */
export class InputReportReasonOther_ extends _ReportReason_ {
    get [id]() {
        return 0xC1E4A2B1;
    }
    static get [name]() {
        return "inputReportReasonOther";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Report for copyrighted content */
export class InputReportReasonCopyright_ extends _ReportReason_ {
    get [id]() {
        return 0x9B89F93A;
    }
    static get [name]() {
        return "inputReportReasonCopyright";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Report an irrelevant geogroup */
export class InputReportReasonGeoIrrelevant_ extends _ReportReason_ {
    get [id]() {
        return 0xDBD4FEED;
    }
    static get [name]() {
        return "inputReportReasonGeoIrrelevant";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Report for impersonation */
export class InputReportReasonFake_ extends _ReportReason_ {
    get [id]() {
        return 0xF5DDD6E7;
    }
    static get [name]() {
        return "inputReportReasonFake";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Report for illegal drugs */
export class InputReportReasonIllegalDrugs_ extends _ReportReason_ {
    get [id]() {
        return 0x0A8EB2BE;
    }
    static get [name]() {
        return "inputReportReasonIllegalDrugs";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Report for divulgation of personal details */
export class InputReportReasonPersonalDetails_ extends _ReportReason_ {
    get [id]() {
        return 0x9EC7863D;
    }
    static get [name]() {
        return "inputReportReasonPersonalDetails";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Extended user info */
export class UserFull_ extends _UserFull_ {
    get [id]() {
        return 0x22FF3E85;
    }
    static get [name]() {
        return "userFull";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["blocked", "true", "flags.0?true"],
            ["phone_calls_available", "true", "flags.4?true"],
            ["phone_calls_private", "true", "flags.5?true"],
            ["can_pin_message", "true", "flags.7?true"],
            ["has_scheduled", "true", "flags.12?true"],
            ["video_calls_available", "true", "flags.13?true"],
            ["voice_messages_forbidden", "true", "flags.20?true"],
            ["translations_disabled", "true", "flags.23?true"],
            ["stories_pinned_available", "true", "flags.26?true"],
            ["blocked_my_stories_from", "true", "flags.27?true"],
            ["wallpaper_overridden", "true", "flags.28?true"],
            ["contact_require_premium", "true", "flags.29?true"],
            ["read_dates_private", "true", "flags.30?true"],
            ["flags2", flags, "#"],
            ["id", "bigint", "long"],
            ["about", "string", "flags.1?string"],
            ["settings", _PeerSettings_, "PeerSettings"],
            ["personal_photo", _Photo_, "flags.21?Photo"],
            ["profile_photo", _Photo_, "flags.2?Photo"],
            ["fallback_photo", _Photo_, "flags.22?Photo"],
            ["notify_settings", _PeerNotifySettings_, "PeerNotifySettings"],
            ["bot_info", _BotInfo_, "flags.3?BotInfo"],
            ["pinned_msg_id", "number", "flags.6?int"],
            ["common_chats_count", "number", "int"],
            ["folder_id", "number", "flags.11?int"],
            ["ttl_period", "number", "flags.14?int"],
            ["theme_emoticon", "string", "flags.15?string"],
            ["private_forward_name", "string", "flags.16?string"],
            ["bot_group_admin_rights", _ChatAdminRights_, "flags.17?ChatAdminRights"],
            ["bot_broadcast_admin_rights", _ChatAdminRights_, "flags.18?ChatAdminRights"],
            ["premium_gifts", [_PremiumGiftOption_], "flags.19?Vector<PremiumGiftOption>"],
            ["wallpaper", _WallPaper_, "flags.24?WallPaper"],
            ["stories", _PeerStories_, "flags.25?PeerStories"],
            ["business_work_hours", _BusinessWorkHours_, "flags2.0?BusinessWorkHours"],
            ["business_location", _BusinessLocation_, "flags2.1?BusinessLocation"],
            ["business_greeting_message", _BusinessGreetingMessage_, "flags2.2?BusinessGreetingMessage"],
            ["business_away_message", _BusinessAwayMessage_, "flags2.3?BusinessAwayMessage"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.blocked ?? null, "true", "flags.0?true"],
            [this.phone_calls_available ?? null, "true", "flags.4?true"],
            [this.phone_calls_private ?? null, "true", "flags.5?true"],
            [this.can_pin_message ?? null, "true", "flags.7?true"],
            [this.has_scheduled ?? null, "true", "flags.12?true"],
            [this.video_calls_available ?? null, "true", "flags.13?true"],
            [this.voice_messages_forbidden ?? null, "true", "flags.20?true"],
            [this.translations_disabled ?? null, "true", "flags.23?true"],
            [this.stories_pinned_available ?? null, "true", "flags.26?true"],
            [this.blocked_my_stories_from ?? null, "true", "flags.27?true"],
            [this.wallpaper_overridden ?? null, "true", "flags.28?true"],
            [this.contact_require_premium ?? null, "true", "flags.29?true"],
            [this.read_dates_private ?? null, "true", "flags.30?true"],
            ["flags2", flags, "#"],
            [this.id, "bigint", "long"],
            [this.about ?? null, "string", "flags.1?string"],
            [this.settings, _PeerSettings_, "PeerSettings"],
            [this.personal_photo ?? null, _Photo_, "flags.21?Photo"],
            [this.profile_photo ?? null, _Photo_, "flags.2?Photo"],
            [this.fallback_photo ?? null, _Photo_, "flags.22?Photo"],
            [this.notify_settings, _PeerNotifySettings_, "PeerNotifySettings"],
            [this.bot_info ?? null, _BotInfo_, "flags.3?BotInfo"],
            [this.pinned_msg_id ?? null, "number", "flags.6?int"],
            [this.common_chats_count, "number", "int"],
            [this.folder_id ?? null, "number", "flags.11?int"],
            [this.ttl_period ?? null, "number", "flags.14?int"],
            [this.theme_emoticon ?? null, "string", "flags.15?string"],
            [this.private_forward_name ?? null, "string", "flags.16?string"],
            [this.bot_group_admin_rights ?? null, _ChatAdminRights_, "flags.17?ChatAdminRights"],
            [this.bot_broadcast_admin_rights ?? null, _ChatAdminRights_, "flags.18?ChatAdminRights"],
            [this.premium_gifts ?? null, [_PremiumGiftOption_], "flags.19?Vector<PremiumGiftOption>"],
            [this.wallpaper ?? null, _WallPaper_, "flags.24?WallPaper"],
            [this.stories ?? null, _PeerStories_, "flags.25?PeerStories"],
            [this.business_work_hours ?? null, _BusinessWorkHours_, "flags2.0?BusinessWorkHours"],
            [this.business_location ?? null, _BusinessLocation_, "flags2.1?BusinessLocation"],
            [this.business_greeting_message ?? null, _BusinessGreetingMessage_, "flags2.2?BusinessGreetingMessage"],
            [this.business_away_message ?? null, _BusinessAwayMessage_, "flags2.3?BusinessAwayMessage"],
        ];
    }
    constructor(params) {
        super();
        /** Whether you have blocked this user */
        Object.defineProperty(this, "blocked", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this user can make VoIP calls */
        Object.defineProperty(this, "phone_calls_available", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this user's privacy settings allow you to call them */
        Object.defineProperty(this, "phone_calls_private", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether you can pin messages in the chat with this user, you can do this only for a chat with yourself */
        Object.defineProperty(this, "can_pin_message", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether [scheduled messages](https://core.telegram.org/api/scheduled-messages) are available */
        Object.defineProperty(this, "has_scheduled", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether the user can receive video calls */
        Object.defineProperty(this, "video_calls_available", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this user doesn't allow sending voice messages in a private chat with them */
        Object.defineProperty(this, "voice_messages_forbidden", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether the [real-time chat translation popup](https://core.telegram.org/api/translation) should be hidden. */
        Object.defineProperty(this, "translations_disabled", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this user has some [pinned stories](https://core.telegram.org/api/stories#pinned-or-archived-stories). */
        Object.defineProperty(this, "stories_pinned_available", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether we've [blocked this user, preventing them from seeing our stories »](https://core.telegram.org/api/block). */
        Object.defineProperty(this, "blocked_my_stories_from", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether the other user has chosen a custom wallpaper for us using [messages.setChatWallPaper](https://core.telegram.org/method/messages.setChatWallPaper) and the `for_both` flag, see [here »](https://core.telegram.org/api/wallpapers#installing-wallpapers-in-a-specific-chat-or-channel) for more info. */
        Object.defineProperty(this, "wallpaper_overridden", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "contact_require_premium", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "read_dates_private", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** User ID */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Bio of the user */
        Object.defineProperty(this, "about", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Peer settings */
        Object.defineProperty(this, "settings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Personal profile photo, to be shown instead of `profile_photo`. */
        Object.defineProperty(this, "personal_photo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Profile photo */
        Object.defineProperty(this, "profile_photo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Fallback profile photo, displayed if no photo is present in `profile_photo` or `personal_photo`, due to privacy settings. */
        Object.defineProperty(this, "fallback_photo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Notification settings */
        Object.defineProperty(this, "notify_settings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** For bots, info about the bot (bot commands, etc) */
        Object.defineProperty(this, "bot_info", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Message ID of the last [pinned message](https://core.telegram.org/api/pin) */
        Object.defineProperty(this, "pinned_msg_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Chats in common with this user */
        Object.defineProperty(this, "common_chats_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Peer folder ID, for more info click here](https://core.telegram.org/api/folders#peer-folders) */
        Object.defineProperty(this, "folder_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Time To Live of all messages in this chat; once a message is this many seconds old, it must be deleted. */
        Object.defineProperty(this, "ttl_period", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Emoji associated with chat theme */
        Object.defineProperty(this, "theme_emoticon", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Anonymized text to be shown instead of the user's name on forwarded messages */
        Object.defineProperty(this, "private_forward_name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** A [suggested set of administrator rights](https://core.telegram.org/api/rights#suggested-bot-rights) for the bot, to be shown when adding the bot as admin to a group, see [here for more info on how to handle them »](https://core.telegram.org/api/rights#suggested-bot-rights). */
        Object.defineProperty(this, "bot_group_admin_rights", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** A [suggested set of administrator rights](https://core.telegram.org/api/rights#suggested-bot-rights) for the bot, to be shown when adding the bot as admin to a channel, see [here for more info on how to handle them »](https://core.telegram.org/api/rights#suggested-bot-rights). */
        Object.defineProperty(this, "bot_broadcast_admin_rights", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Telegram Premium subscriptions gift options */
        Object.defineProperty(this, "premium_gifts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Wallpaper](https://core.telegram.org/api/wallpapers) to use in the private chat with the user. */
        Object.defineProperty(this, "wallpaper", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Active [stories »](https://core.telegram.org/api/stories) */
        Object.defineProperty(this, "stories", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "business_work_hours", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "business_location", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "business_greeting_message", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "business_away_message", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.blocked = params.blocked;
        this.phone_calls_available = params.phone_calls_available;
        this.phone_calls_private = params.phone_calls_private;
        this.can_pin_message = params.can_pin_message;
        this.has_scheduled = params.has_scheduled;
        this.video_calls_available = params.video_calls_available;
        this.voice_messages_forbidden = params.voice_messages_forbidden;
        this.translations_disabled = params.translations_disabled;
        this.stories_pinned_available = params.stories_pinned_available;
        this.blocked_my_stories_from = params.blocked_my_stories_from;
        this.wallpaper_overridden = params.wallpaper_overridden;
        this.contact_require_premium = params.contact_require_premium;
        this.read_dates_private = params.read_dates_private;
        this.id = params.id;
        this.about = params.about;
        this.settings = params.settings;
        this.personal_photo = params.personal_photo;
        this.profile_photo = params.profile_photo;
        this.fallback_photo = params.fallback_photo;
        this.notify_settings = params.notify_settings;
        this.bot_info = params.bot_info;
        this.pinned_msg_id = params.pinned_msg_id;
        this.common_chats_count = params.common_chats_count;
        this.folder_id = params.folder_id;
        this.ttl_period = params.ttl_period;
        this.theme_emoticon = params.theme_emoticon;
        this.private_forward_name = params.private_forward_name;
        this.bot_group_admin_rights = params.bot_group_admin_rights;
        this.bot_broadcast_admin_rights = params.bot_broadcast_admin_rights;
        this.premium_gifts = params.premium_gifts;
        this.wallpaper = params.wallpaper;
        this.stories = params.stories;
        this.business_work_hours = params.business_work_hours;
        this.business_location = params.business_location;
        this.business_greeting_message = params.business_greeting_message;
        this.business_away_message = params.business_away_message;
    }
}
/** A contact of the current user that is registered in the system. */
export class Contact_ extends _Contact_ {
    get [id]() {
        return 0x145ADE0B;
    }
    static get [name]() {
        return "contact";
    }
    static get [paramDesc]() {
        return [
            ["user_id", "bigint", "long"],
            ["mutual", "boolean", "Bool"],
        ];
    }
    get [params]() {
        return [
            [this.user_id, "bigint", "long"],
            [this.mutual, "boolean", "Bool"],
        ];
    }
    constructor(params) {
        super();
        /** User identifier */
        Object.defineProperty(this, "user_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Current user is in the user's contact list */
        Object.defineProperty(this, "mutual", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.user_id = params.user_id;
        this.mutual = params.mutual;
    }
}
/** Successfully imported contact. */
export class ImportedContact_ extends _ImportedContact_ {
    get [id]() {
        return 0xC13E3C50;
    }
    static get [name]() {
        return "importedContact";
    }
    static get [paramDesc]() {
        return [
            ["user_id", "bigint", "long"],
            ["client_id", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.user_id, "bigint", "long"],
            [this.client_id, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** User identifier */
        Object.defineProperty(this, "user_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The contact's client identifier (passed to one of the [InputContact](https://core.telegram.org/type/InputContact) constructors) */
        Object.defineProperty(this, "client_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.user_id = params.user_id;
        this.client_id = params.client_id;
    }
}
/** Contact status: online / offline. */
export class ContactStatus_ extends _ContactStatus_ {
    get [id]() {
        return 0x16D9703B;
    }
    static get [name]() {
        return "contactStatus";
    }
    static get [paramDesc]() {
        return [
            ["user_id", "bigint", "long"],
            ["status", _UserStatus_, "UserStatus"],
        ];
    }
    get [params]() {
        return [
            [this.user_id, "bigint", "long"],
            [this.status, _UserStatus_, "UserStatus"],
        ];
    }
    constructor(params) {
        super();
        /** User identifier */
        Object.defineProperty(this, "user_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Online status */
        Object.defineProperty(this, "status", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.user_id = params.user_id;
        this.status = params.status;
    }
}
/** Contact list on the server is the same as the list on the client. */
export class contacts_ContactsNotModified_ extends _contacts_Contacts_ {
    get [id]() {
        return 0xB74BA9D2;
    }
    static get [name]() {
        return "contacts.contactsNotModified";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** The current user's contact list and info on users. */
export class contacts_Contacts_ extends _contacts_Contacts_ {
    get [id]() {
        return 0xEAE87E42;
    }
    static get [name]() {
        return "contacts.contacts";
    }
    static get [paramDesc]() {
        return [
            ["contacts", [_Contact_], "Vector<Contact>"],
            ["saved_count", "number", "int"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            [this.contacts, [_Contact_], "Vector<Contact>"],
            [this.saved_count, "number", "int"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** Contact list */
        Object.defineProperty(this, "contacts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of contacts that were saved successfully */
        Object.defineProperty(this, "saved_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** User list */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.contacts = params.contacts;
        this.saved_count = params.saved_count;
        this.users = params.users;
    }
}
/** Info on successfully imported contacts. */
export class contacts_ImportedContacts_ extends _contacts_ImportedContacts_ {
    get [id]() {
        return 0x77D01C3B;
    }
    static get [name]() {
        return "contacts.importedContacts";
    }
    static get [paramDesc]() {
        return [
            ["imported", [_ImportedContact_], "Vector<ImportedContact>"],
            ["popular_invites", [_PopularContact_], "Vector<PopularContact>"],
            ["retry_contacts", ["bigint"], "Vector<long>"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            [this.imported, [_ImportedContact_], "Vector<ImportedContact>"],
            [this.popular_invites, [_PopularContact_], "Vector<PopularContact>"],
            [this.retry_contacts, ["bigint"], "Vector<long>"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** List of successfully imported contacts */
        Object.defineProperty(this, "imported", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Popular contacts */
        Object.defineProperty(this, "popular_invites", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** List of contact ids that could not be imported due to system limitation and will need to be imported at a later date. */
        Object.defineProperty(this, "retry_contacts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** List of users */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.imported = params.imported;
        this.popular_invites = params.popular_invites;
        this.retry_contacts = params.retry_contacts;
        this.users = params.users;
    }
}
/** Full list of blocked users. */
export class contacts_Blocked_ extends _contacts_Blocked_ {
    get [id]() {
        return 0x0ADE1591;
    }
    static get [name]() {
        return "contacts.blocked";
    }
    static get [paramDesc]() {
        return [
            ["blocked", [_PeerBlocked_], "Vector<PeerBlocked>"],
            ["chats", [_Chat_], "Vector<Chat>"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            [this.blocked, [_PeerBlocked_], "Vector<PeerBlocked>"],
            [this.chats, [_Chat_], "Vector<Chat>"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** List of blocked users */
        Object.defineProperty(this, "blocked", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Blocked chats */
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** List of users */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.blocked = params.blocked;
        this.chats = params.chats;
        this.users = params.users;
    }
}
/** Incomplete list of blocked users. */
export class contacts_BlockedSlice_ extends _contacts_Blocked_ {
    get [id]() {
        return 0xE1664194;
    }
    static get [name]() {
        return "contacts.blockedSlice";
    }
    static get [paramDesc]() {
        return [
            ["count", "number", "int"],
            ["blocked", [_PeerBlocked_], "Vector<PeerBlocked>"],
            ["chats", [_Chat_], "Vector<Chat>"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            [this.count, "number", "int"],
            [this.blocked, [_PeerBlocked_], "Vector<PeerBlocked>"],
            [this.chats, [_Chat_], "Vector<Chat>"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** Total number of elements in the list */
        Object.defineProperty(this, "count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** List of blocked users */
        Object.defineProperty(this, "blocked", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Blocked chats */
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** List of users */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.count = params.count;
        this.blocked = params.blocked;
        this.chats = params.chats;
        this.users = params.users;
    }
}
/** Full list of chats with messages and auxiliary data. */
export class messages_Dialogs_ extends _messages_Dialogs_ {
    get [id]() {
        return 0x15BA6C40;
    }
    static get [name]() {
        return "messages.dialogs";
    }
    static get [paramDesc]() {
        return [
            ["dialogs", [_Dialog_], "Vector<Dialog>"],
            ["messages", [_Message_], "Vector<Message>"],
            ["chats", [_Chat_], "Vector<Chat>"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            [this.dialogs, [_Dialog_], "Vector<Dialog>"],
            [this.messages, [_Message_], "Vector<Message>"],
            [this.chats, [_Chat_], "Vector<Chat>"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** List of chats */
        Object.defineProperty(this, "dialogs", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** List of last messages from each chat */
        Object.defineProperty(this, "messages", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** List of groups mentioned in the chats */
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** List of users mentioned in messages and groups */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.dialogs = params.dialogs;
        this.messages = params.messages;
        this.chats = params.chats;
        this.users = params.users;
    }
}
/** Incomplete list of dialogs with messages and auxiliary data. */
export class messages_DialogsSlice_ extends _messages_Dialogs_ {
    get [id]() {
        return 0x71E094F3;
    }
    static get [name]() {
        return "messages.dialogsSlice";
    }
    static get [paramDesc]() {
        return [
            ["count", "number", "int"],
            ["dialogs", [_Dialog_], "Vector<Dialog>"],
            ["messages", [_Message_], "Vector<Message>"],
            ["chats", [_Chat_], "Vector<Chat>"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            [this.count, "number", "int"],
            [this.dialogs, [_Dialog_], "Vector<Dialog>"],
            [this.messages, [_Message_], "Vector<Message>"],
            [this.chats, [_Chat_], "Vector<Chat>"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** Total number of dialogs */
        Object.defineProperty(this, "count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** List of dialogs */
        Object.defineProperty(this, "dialogs", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** List of last messages from dialogs */
        Object.defineProperty(this, "messages", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** List of chats mentioned in dialogs */
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** List of users mentioned in messages and chats */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.count = params.count;
        this.dialogs = params.dialogs;
        this.messages = params.messages;
        this.chats = params.chats;
        this.users = params.users;
    }
}
/** Dialogs haven't changed */
export class messages_DialogsNotModified_ extends _messages_Dialogs_ {
    get [id]() {
        return 0xF0E3E596;
    }
    static get [name]() {
        return "messages.dialogsNotModified";
    }
    static get [paramDesc]() {
        return [
            ["count", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.count, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Number of dialogs found server-side by the query */
        Object.defineProperty(this, "count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.count = params.count;
    }
}
/** Full list of messages with auxiliary data. */
export class messages_Messages_ extends _messages_Messages_ {
    get [id]() {
        return 0x8C718E87;
    }
    static get [name]() {
        return "messages.messages";
    }
    static get [paramDesc]() {
        return [
            ["messages", [_Message_], "Vector<Message>"],
            ["chats", [_Chat_], "Vector<Chat>"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            [this.messages, [_Message_], "Vector<Message>"],
            [this.chats, [_Chat_], "Vector<Chat>"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** List of messages */
        Object.defineProperty(this, "messages", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** List of chats mentioned in dialogs */
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** List of users mentioned in messages and chats */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.messages = params.messages;
        this.chats = params.chats;
        this.users = params.users;
    }
}
/** Incomplete list of messages and auxiliary data. */
export class messages_MessagesSlice_ extends _messages_Messages_ {
    get [id]() {
        return 0x3A54685E;
    }
    static get [name]() {
        return "messages.messagesSlice";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["inexact", "true", "flags.1?true"],
            ["count", "number", "int"],
            ["next_rate", "number", "flags.0?int"],
            ["offset_id_offset", "number", "flags.2?int"],
            ["messages", [_Message_], "Vector<Message>"],
            ["chats", [_Chat_], "Vector<Chat>"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.inexact ?? null, "true", "flags.1?true"],
            [this.count, "number", "int"],
            [this.next_rate ?? null, "number", "flags.0?int"],
            [this.offset_id_offset ?? null, "number", "flags.2?int"],
            [this.messages, [_Message_], "Vector<Message>"],
            [this.chats, [_Chat_], "Vector<Chat>"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** If set, indicates that the results may be inexact */
        Object.defineProperty(this, "inexact", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Total number of messages in the list */
        Object.defineProperty(this, "count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Rate to use in the `offset_rate` parameter in the next call to [messages.searchGlobal](https://core.telegram.org/method/messages.searchGlobal) */
        Object.defineProperty(this, "next_rate", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Indicates the absolute position of `messages[0]` within the total result set with count `count`.
        This is useful, for example, if the result was fetched using `offset_id`, and we need to display a `progress/total` counter (like `photo 134 of 200`, for all media in a chat, we could simply use `photo ${offset_id_offset} of ${count}`. */
        Object.defineProperty(this, "offset_id_offset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** List of messages */
        Object.defineProperty(this, "messages", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** List of chats mentioned in messages */
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** List of users mentioned in messages and chats */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.inexact = params.inexact;
        this.count = params.count;
        this.next_rate = params.next_rate;
        this.offset_id_offset = params.offset_id_offset;
        this.messages = params.messages;
        this.chats = params.chats;
        this.users = params.users;
    }
}
/** Channel messages */
export class messages_ChannelMessages_ extends _messages_Messages_ {
    get [id]() {
        return 0xC776BA4E;
    }
    static get [name]() {
        return "messages.channelMessages";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["inexact", "true", "flags.1?true"],
            ["pts", "number", "int"],
            ["count", "number", "int"],
            ["offset_id_offset", "number", "flags.2?int"],
            ["messages", [_Message_], "Vector<Message>"],
            ["topics", [_ForumTopic_], "Vector<ForumTopic>"],
            ["chats", [_Chat_], "Vector<Chat>"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.inexact ?? null, "true", "flags.1?true"],
            [this.pts, "number", "int"],
            [this.count, "number", "int"],
            [this.offset_id_offset ?? null, "number", "flags.2?int"],
            [this.messages, [_Message_], "Vector<Message>"],
            [this.topics, [_ForumTopic_], "Vector<ForumTopic>"],
            [this.chats, [_Chat_], "Vector<Chat>"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** If set, returned results may be inexact */
        Object.defineProperty(this, "inexact", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Event count after generation](https://core.telegram.org/api/updates) */
        Object.defineProperty(this, "pts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Total number of results were found server-side (may not be all included here) */
        Object.defineProperty(this, "count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Indicates the absolute position of `messages[0]` within the total result set with count `count`.
        This is useful, for example, if the result was fetched using `offset_id`, and we need to display a `progress/total` counter (like `photo 134 of 200`, for all media in a chat, we could simply use `photo ${offset_id_offset} of ${count}`. */
        Object.defineProperty(this, "offset_id_offset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Found messages */
        Object.defineProperty(this, "messages", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Forum topic](https://core.telegram.org/api/forum#forum-topics) information */
        Object.defineProperty(this, "topics", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Chats */
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Users */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.inexact = params.inexact;
        this.pts = params.pts;
        this.count = params.count;
        this.offset_id_offset = params.offset_id_offset;
        this.messages = params.messages;
        this.topics = params.topics;
        this.chats = params.chats;
        this.users = params.users;
    }
}
/** No new messages matching the query were found */
export class messages_MessagesNotModified_ extends _messages_Messages_ {
    get [id]() {
        return 0x74535F21;
    }
    static get [name]() {
        return "messages.messagesNotModified";
    }
    static get [paramDesc]() {
        return [
            ["count", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.count, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Number of results found server-side by the given query */
        Object.defineProperty(this, "count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.count = params.count;
    }
}
/** List of chats with auxiliary data. */
export class messages_Chats_ extends _messages_Chats_ {
    get [id]() {
        return 0x64FF9FD5;
    }
    static get [name]() {
        return "messages.chats";
    }
    static get [paramDesc]() {
        return [
            ["chats", [_Chat_], "Vector<Chat>"],
        ];
    }
    get [params]() {
        return [
            [this.chats, [_Chat_], "Vector<Chat>"],
        ];
    }
    constructor(params) {
        super();
        /** List of chats */
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.chats = params.chats;
    }
}
/** Partial list of chats, more would have to be fetched with [pagination](https://core.telegram.org/api/offsets) */
export class messages_ChatsSlice_ extends _messages_Chats_ {
    get [id]() {
        return 0x9CD81144;
    }
    static get [name]() {
        return "messages.chatsSlice";
    }
    static get [paramDesc]() {
        return [
            ["count", "number", "int"],
            ["chats", [_Chat_], "Vector<Chat>"],
        ];
    }
    get [params]() {
        return [
            [this.count, "number", "int"],
            [this.chats, [_Chat_], "Vector<Chat>"],
        ];
    }
    constructor(params) {
        super();
        /** Total number of results that were found server-side (not all are included in `chats`) */
        Object.defineProperty(this, "count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Chats */
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.count = params.count;
        this.chats = params.chats;
    }
}
/** Full info about a [channel](https://core.telegram.org/api/channel#channels), [supergroup](https://core.telegram.org/api/channel#supergroups), [gigagroup](https://core.telegram.org/api/channel#gigagroups) or [basic group](https://core.telegram.org/api/channel#basic-groups). */
export class messages_ChatFull_ extends _messages_ChatFull_ {
    get [id]() {
        return 0xE5D7D19C;
    }
    static get [name]() {
        return "messages.chatFull";
    }
    static get [paramDesc]() {
        return [
            ["full_chat", _ChatFull_, "ChatFull"],
            ["chats", [_Chat_], "Vector<Chat>"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            [this.full_chat, _ChatFull_, "ChatFull"],
            [this.chats, [_Chat_], "Vector<Chat>"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** Full info */
        Object.defineProperty(this, "full_chat", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Mentioned chats */
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Mentioned users */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.full_chat = params.full_chat;
        this.chats = params.chats;
        this.users = params.users;
    }
}
/** Affected part of communication history with the user or in a chat. */
export class messages_AffectedHistory_ extends _messages_AffectedHistory_ {
    get [id]() {
        return 0xB45C69D1;
    }
    static get [name]() {
        return "messages.affectedHistory";
    }
    static get [paramDesc]() {
        return [
            ["pts", "number", "int"],
            ["pts_count", "number", "int"],
            ["offset", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.pts, "number", "int"],
            [this.pts_count, "number", "int"],
            [this.offset, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Number of events occurred in a text box */
        Object.defineProperty(this, "pts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of affected events */
        Object.defineProperty(this, "pts_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If a parameter contains positive value, it is necessary to repeat the method call using the given value; during the proceeding of all the history the value itself shall gradually decrease */
        Object.defineProperty(this, "offset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.pts = params.pts;
        this.pts_count = params.pts_count;
        this.offset = params.offset;
    }
}
/** Filter is absent. */
export class InputMessagesFilterEmpty_ extends _MessagesFilter_ {
    get [id]() {
        return 0x57E2F66C;
    }
    static get [name]() {
        return "inputMessagesFilterEmpty";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Filter for messages containing photos. */
export class InputMessagesFilterPhotos_ extends _MessagesFilter_ {
    get [id]() {
        return 0x9609A51C;
    }
    static get [name]() {
        return "inputMessagesFilterPhotos";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Filter for messages containing videos. */
export class InputMessagesFilterVideo_ extends _MessagesFilter_ {
    get [id]() {
        return 0x9FC00E65;
    }
    static get [name]() {
        return "inputMessagesFilterVideo";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Filter for messages containing photos or videos. */
export class InputMessagesFilterPhotoVideo_ extends _MessagesFilter_ {
    get [id]() {
        return 0x56E9F0E4;
    }
    static get [name]() {
        return "inputMessagesFilterPhotoVideo";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Filter for messages containing documents. */
export class InputMessagesFilterDocument_ extends _MessagesFilter_ {
    get [id]() {
        return 0x9EDDF188;
    }
    static get [name]() {
        return "inputMessagesFilterDocument";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Return only messages containing URLs */
export class InputMessagesFilterUrl_ extends _MessagesFilter_ {
    get [id]() {
        return 0x7EF0DD87;
    }
    static get [name]() {
        return "inputMessagesFilterUrl";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Return only messages containing gifs */
export class InputMessagesFilterGif_ extends _MessagesFilter_ {
    get [id]() {
        return 0xFFC86587;
    }
    static get [name]() {
        return "inputMessagesFilterGif";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Return only messages containing voice notes */
export class InputMessagesFilterVoice_ extends _MessagesFilter_ {
    get [id]() {
        return 0x50F5C392;
    }
    static get [name]() {
        return "inputMessagesFilterVoice";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Return only messages containing audio files */
export class InputMessagesFilterMusic_ extends _MessagesFilter_ {
    get [id]() {
        return 0x3751B49E;
    }
    static get [name]() {
        return "inputMessagesFilterMusic";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Return only chat photo changes */
export class InputMessagesFilterChatPhotos_ extends _MessagesFilter_ {
    get [id]() {
        return 0x3A20ECB8;
    }
    static get [name]() {
        return "inputMessagesFilterChatPhotos";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Return only phone calls */
export class InputMessagesFilterPhoneCalls_ extends _MessagesFilter_ {
    get [id]() {
        return 0x80C99768;
    }
    static get [name]() {
        return "inputMessagesFilterPhoneCalls";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["missed", "true", "flags.0?true"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.missed ?? null, "true", "flags.0?true"],
        ];
    }
    constructor(params) {
        super();
        /** Return only missed phone calls */
        Object.defineProperty(this, "missed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.missed = params?.missed;
    }
}
/** Return only round videos and voice notes */
export class InputMessagesFilterRoundVoice_ extends _MessagesFilter_ {
    get [id]() {
        return 0x7A7C17A4;
    }
    static get [name]() {
        return "inputMessagesFilterRoundVoice";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Return only round videos */
export class InputMessagesFilterRoundVideo_ extends _MessagesFilter_ {
    get [id]() {
        return 0xB549DA53;
    }
    static get [name]() {
        return "inputMessagesFilterRoundVideo";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Return only messages where the current user was [mentioned](https://core.telegram.org/api/mentions). */
export class InputMessagesFilterMyMentions_ extends _MessagesFilter_ {
    get [id]() {
        return 0xC1F8E69A;
    }
    static get [name]() {
        return "inputMessagesFilterMyMentions";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Return only messages containing geolocations */
export class InputMessagesFilterGeo_ extends _MessagesFilter_ {
    get [id]() {
        return 0xE7026D0D;
    }
    static get [name]() {
        return "inputMessagesFilterGeo";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Return only messages containing contacts */
export class InputMessagesFilterContacts_ extends _MessagesFilter_ {
    get [id]() {
        return 0xE062DB83;
    }
    static get [name]() {
        return "inputMessagesFilterContacts";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Fetch only pinned messages */
export class InputMessagesFilterPinned_ extends _MessagesFilter_ {
    get [id]() {
        return 0x1BB00451;
    }
    static get [name]() {
        return "inputMessagesFilterPinned";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** New message in a private chat or in a [basic group](https://core.telegram.org/api/channel#basic-groups). */
export class UpdateNewMessage_ extends _Update_ {
    get [id]() {
        return 0x1F2B0AFD;
    }
    static get [name]() {
        return "updateNewMessage";
    }
    static get [paramDesc]() {
        return [
            ["message", _Message_, "Message"],
            ["pts", "number", "int"],
            ["pts_count", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.message, _Message_, "Message"],
            [this.pts, "number", "int"],
            [this.pts_count, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Message */
        Object.defineProperty(this, "message", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New quantity of actions in a message box */
        Object.defineProperty(this, "pts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of generated events */
        Object.defineProperty(this, "pts_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.message = params.message;
        this.pts = params.pts;
        this.pts_count = params.pts_count;
    }
}
/** Sent message with **random\_id** client identifier was assigned an identifier. */
export class UpdateMessageID_ extends _Update_ {
    get [id]() {
        return 0x4E90BFD6;
    }
    static get [name]() {
        return "updateMessageID";
    }
    static get [paramDesc]() {
        return [
            ["id", "number", "int"],
            ["random_id", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.id, "number", "int"],
            [this.random_id, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** **id** identifier of a respective [Message](https://core.telegram.org/type/Message) */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Previously transferred client **random\_id** identifier */
        Object.defineProperty(this, "random_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
        this.random_id = params.random_id;
    }
}
/** Messages were deleted. */
export class UpdateDeleteMessages_ extends _Update_ {
    get [id]() {
        return 0xA20DB0E5;
    }
    static get [name]() {
        return "updateDeleteMessages";
    }
    static get [paramDesc]() {
        return [
            ["messages", ["number"], "Vector<int>"],
            ["pts", "number", "int"],
            ["pts_count", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.messages, ["number"], "Vector<int>"],
            [this.pts, "number", "int"],
            [this.pts_count, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** List of identifiers of deleted messages */
        Object.defineProperty(this, "messages", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New quality of actions in a message box */
        Object.defineProperty(this, "pts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of generated [events](https://core.telegram.org/api/updates) */
        Object.defineProperty(this, "pts_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.messages = params.messages;
        this.pts = params.pts;
        this.pts_count = params.pts_count;
    }
}
/** The user is preparing a message; typing, recording, uploading, etc. This update is valid for 6 seconds. If no further updates of this kind are received after 6 seconds, it should be considered that the user stopped doing whatever they were doing */
export class UpdateUserTyping_ extends _Update_ {
    get [id]() {
        return 0xC01E857F;
    }
    static get [name]() {
        return "updateUserTyping";
    }
    static get [paramDesc]() {
        return [
            ["user_id", "bigint", "long"],
            ["action", _SendMessageAction_, "SendMessageAction"],
        ];
    }
    get [params]() {
        return [
            [this.user_id, "bigint", "long"],
            [this.action, _SendMessageAction_, "SendMessageAction"],
        ];
    }
    constructor(params) {
        super();
        /** User id */
        Object.defineProperty(this, "user_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Action type */
        Object.defineProperty(this, "action", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.user_id = params.user_id;
        this.action = params.action;
    }
}
/** The user is preparing a message in a group; typing, recording, uploading, etc. This update is valid for 6 seconds. If no further updates of this kind are received after 6 seconds, it should be considered that the user stopped doing whatever they were doing */
export class UpdateChatUserTyping_ extends _Update_ {
    get [id]() {
        return 0x83487AF0;
    }
    static get [name]() {
        return "updateChatUserTyping";
    }
    static get [paramDesc]() {
        return [
            ["chat_id", "bigint", "long"],
            ["from_id", _Peer_, "Peer"],
            ["action", _SendMessageAction_, "SendMessageAction"],
        ];
    }
    get [params]() {
        return [
            [this.chat_id, "bigint", "long"],
            [this.from_id, _Peer_, "Peer"],
            [this.action, _SendMessageAction_, "SendMessageAction"],
        ];
    }
    constructor(params) {
        super();
        /** Group id */
        Object.defineProperty(this, "chat_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Peer that started typing (can be the chat itself, in case of anonymous admins). */
        Object.defineProperty(this, "from_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Type of action */
        Object.defineProperty(this, "action", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.chat_id = params.chat_id;
        this.from_id = params.from_id;
        this.action = params.action;
    }
}
/** Composition of chat participants changed. */
export class UpdateChatParticipants_ extends _Update_ {
    get [id]() {
        return 0x07761198;
    }
    static get [name]() {
        return "updateChatParticipants";
    }
    static get [paramDesc]() {
        return [
            ["participants", _ChatParticipants_, "ChatParticipants"],
        ];
    }
    get [params]() {
        return [
            [this.participants, _ChatParticipants_, "ChatParticipants"],
        ];
    }
    constructor(params) {
        super();
        /** Updated chat participants */
        Object.defineProperty(this, "participants", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.participants = params.participants;
    }
}
/** Contact status update. */
export class UpdateUserStatus_ extends _Update_ {
    get [id]() {
        return 0xE5BDF8DE;
    }
    static get [name]() {
        return "updateUserStatus";
    }
    static get [paramDesc]() {
        return [
            ["user_id", "bigint", "long"],
            ["status", _UserStatus_, "UserStatus"],
        ];
    }
    get [params]() {
        return [
            [this.user_id, "bigint", "long"],
            [this.status, _UserStatus_, "UserStatus"],
        ];
    }
    constructor(params) {
        super();
        /** User identifier */
        Object.defineProperty(this, "user_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New status */
        Object.defineProperty(this, "status", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.user_id = params.user_id;
        this.status = params.status;
    }
}
/** Changes the user's first name, last name and username. */
export class UpdateUserName_ extends _Update_ {
    get [id]() {
        return 0xA7848924;
    }
    static get [name]() {
        return "updateUserName";
    }
    static get [paramDesc]() {
        return [
            ["user_id", "bigint", "long"],
            ["first_name", "string", "string"],
            ["last_name", "string", "string"],
            ["usernames", [_Username_], "Vector<Username>"],
        ];
    }
    get [params]() {
        return [
            [this.user_id, "bigint", "long"],
            [this.first_name, "string", "string"],
            [this.last_name, "string", "string"],
            [this.usernames, [_Username_], "Vector<Username>"],
        ];
    }
    constructor(params) {
        super();
        /** User identifier */
        Object.defineProperty(this, "user_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New first name. Corresponds to the new value of **real\_first\_name** field of the [userFull](https://core.telegram.org/constructor/userFull) constructor. */
        Object.defineProperty(this, "first_name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New last name. Corresponds to the new value of **real\_last\_name** field of the [userFull](https://core.telegram.org/constructor/userFull) constructor. */
        Object.defineProperty(this, "last_name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Usernames. */
        Object.defineProperty(this, "usernames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.user_id = params.user_id;
        this.first_name = params.first_name;
        this.last_name = params.last_name;
        this.usernames = params.usernames;
    }
}
/** A new session logged into the current user's account through an unknown device. */
export class UpdateNewAuthorization_ extends _Update_ {
    get [id]() {
        return 0x8951ABEF;
    }
    static get [name]() {
        return "updateNewAuthorization";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["unconfirmed", "true", "flags.0?true"],
            ["hash", "bigint", "long"],
            ["date", "number", "flags.0?int"],
            ["device", "string", "flags.0?string"],
            ["location", "string", "flags.0?string"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.unconfirmed ?? null, "true", "flags.0?true"],
            [this.hash, "bigint", "long"],
            [this.date ?? null, "number", "flags.0?int"],
            [this.device ?? null, "string", "flags.0?string"],
            [this.location ?? null, "string", "flags.0?string"],
        ];
    }
    constructor(params) {
        super();
        /** Whether the session is [unconfirmed, see here »](https://core.telegram.org/api/auth#confirming-login) for more info. */
        Object.defineProperty(this, "unconfirmed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation) */
        Object.defineProperty(this, "hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Authorization date */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Name of device, for example _Android_ */
        Object.defineProperty(this, "device", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Location, for example _USA, NY (IP=1.2.3.4)_ */
        Object.defineProperty(this, "location", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.unconfirmed = params.unconfirmed;
        this.hash = params.hash;
        this.date = params.date;
        this.device = params.device;
        this.location = params.location;
    }
}
/** New encrypted message. */
export class UpdateNewEncryptedMessage_ extends _Update_ {
    get [id]() {
        return 0x12BCBD9A;
    }
    static get [name]() {
        return "updateNewEncryptedMessage";
    }
    static get [paramDesc]() {
        return [
            ["message", _EncryptedMessage_, "EncryptedMessage"],
            ["qts", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.message, _EncryptedMessage_, "EncryptedMessage"],
            [this.qts, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Message */
        Object.defineProperty(this, "message", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New **qts** value, see [updates »](https://core.telegram.org/api/updates) for more info. */
        Object.defineProperty(this, "qts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.message = params.message;
        this.qts = params.qts;
    }
}
/** Interlocutor is typing a message in an encrypted chat. Update period is 6 second. If upon this time there is no repeated update, it shall be considered that the interlocutor stopped typing. */
export class UpdateEncryptedChatTyping_ extends _Update_ {
    get [id]() {
        return 0x1710F156;
    }
    static get [name]() {
        return "updateEncryptedChatTyping";
    }
    static get [paramDesc]() {
        return [
            ["chat_id", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.chat_id, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Chat ID */
        Object.defineProperty(this, "chat_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.chat_id = params.chat_id;
    }
}
/** Change of state in an encrypted chat. */
export class UpdateEncryption_ extends _Update_ {
    get [id]() {
        return 0xB4A2E88D;
    }
    static get [name]() {
        return "updateEncryption";
    }
    static get [paramDesc]() {
        return [
            ["chat", _EncryptedChat_, "EncryptedChat"],
            ["date", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.chat, _EncryptedChat_, "EncryptedChat"],
            [this.date, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Encrypted chat */
        Object.defineProperty(this, "chat", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Date of change */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.chat = params.chat;
        this.date = params.date;
    }
}
/** Communication history in an encrypted chat was marked as read. */
export class UpdateEncryptedMessagesRead_ extends _Update_ {
    get [id]() {
        return 0x38FE25B7;
    }
    static get [name]() {
        return "updateEncryptedMessagesRead";
    }
    static get [paramDesc]() {
        return [
            ["chat_id", "number", "int"],
            ["max_date", "number", "int"],
            ["date", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.chat_id, "number", "int"],
            [this.max_date, "number", "int"],
            [this.date, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Chat ID */
        Object.defineProperty(this, "chat_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Maximum value of data for read messages */
        Object.defineProperty(this, "max_date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Time when messages were read */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.chat_id = params.chat_id;
        this.max_date = params.max_date;
        this.date = params.date;
    }
}
/** New group member. */
export class UpdateChatParticipantAdd_ extends _Update_ {
    get [id]() {
        return 0x3DDA5451;
    }
    static get [name]() {
        return "updateChatParticipantAdd";
    }
    static get [paramDesc]() {
        return [
            ["chat_id", "bigint", "long"],
            ["user_id", "bigint", "long"],
            ["inviter_id", "bigint", "long"],
            ["date", "number", "int"],
            ["version", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.chat_id, "bigint", "long"],
            [this.user_id, "bigint", "long"],
            [this.inviter_id, "bigint", "long"],
            [this.date, "number", "int"],
            [this.version, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Group ID */
        Object.defineProperty(this, "chat_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the new member */
        Object.defineProperty(this, "user_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the user, who added member to the group */
        Object.defineProperty(this, "inviter_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** When was the participant added */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Chat version number */
        Object.defineProperty(this, "version", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.chat_id = params.chat_id;
        this.user_id = params.user_id;
        this.inviter_id = params.inviter_id;
        this.date = params.date;
        this.version = params.version;
    }
}
/** A member has left the group. */
export class UpdateChatParticipantDelete_ extends _Update_ {
    get [id]() {
        return 0xE32F3D77;
    }
    static get [name]() {
        return "updateChatParticipantDelete";
    }
    static get [paramDesc]() {
        return [
            ["chat_id", "bigint", "long"],
            ["user_id", "bigint", "long"],
            ["version", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.chat_id, "bigint", "long"],
            [this.user_id, "bigint", "long"],
            [this.version, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Group ID */
        Object.defineProperty(this, "chat_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the user */
        Object.defineProperty(this, "user_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Used in basic groups to reorder updates and make sure that all of them was received. */
        Object.defineProperty(this, "version", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.chat_id = params.chat_id;
        this.user_id = params.user_id;
        this.version = params.version;
    }
}
/** Changes in the data center configuration options. */
export class UpdateDcOptions_ extends _Update_ {
    get [id]() {
        return 0x8E5E9873;
    }
    static get [name]() {
        return "updateDcOptions";
    }
    static get [paramDesc]() {
        return [
            ["dc_options", [_DcOption_], "Vector<DcOption>"],
        ];
    }
    get [params]() {
        return [
            [this.dc_options, [_DcOption_], "Vector<DcOption>"],
        ];
    }
    constructor(params) {
        super();
        /** New connection options */
        Object.defineProperty(this, "dc_options", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.dc_options = params.dc_options;
    }
}
/** Changes in notification settings. */
export class UpdateNotifySettings_ extends _Update_ {
    get [id]() {
        return 0xBEC268EF;
    }
    static get [name]() {
        return "updateNotifySettings";
    }
    static get [paramDesc]() {
        return [
            ["peer", _NotifyPeer_, "NotifyPeer"],
            ["notify_settings", _PeerNotifySettings_, "PeerNotifySettings"],
        ];
    }
    get [params]() {
        return [
            [this.peer, _NotifyPeer_, "NotifyPeer"],
            [this.notify_settings, _PeerNotifySettings_, "PeerNotifySettings"],
        ];
    }
    constructor(params) {
        super();
        /** Notification source */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New notification settings */
        Object.defineProperty(this, "notify_settings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.peer = params.peer;
        this.notify_settings = params.notify_settings;
    }
}
/** A service message for the user. */
export class UpdateServiceNotification_ extends _Update_ {
    get [id]() {
        return 0xEBE46819;
    }
    static get [name]() {
        return "updateServiceNotification";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["popup", "true", "flags.0?true"],
            ["invert_media", "true", "flags.2?true"],
            ["inbox_date", "number", "flags.1?int"],
            ["type", "string", "string"],
            ["message", "string", "string"],
            ["media", _MessageMedia_, "MessageMedia"],
            ["entities", [_MessageEntity_], "Vector<MessageEntity>"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.popup ?? null, "true", "flags.0?true"],
            [this.invert_media ?? null, "true", "flags.2?true"],
            [this.inbox_date ?? null, "number", "flags.1?int"],
            [this.type, "string", "string"],
            [this.message, "string", "string"],
            [this.media, _MessageMedia_, "MessageMedia"],
            [this.entities, [_MessageEntity_], "Vector<MessageEntity>"],
        ];
    }
    constructor(params) {
        super();
        /** If set, the message must be displayed in a popup. */
        Object.defineProperty(this, "popup", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, any eventual webpage preview will be shown on top of the message instead of at the bottom. */
        Object.defineProperty(this, "invert_media", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** When was the notification received
        The message must also be stored locally as part of the message history with the user id `777000` (Telegram Notifications). */
        Object.defineProperty(this, "inbox_date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** String, identical in format and contents to the [**type**](https://core.telegram.org/api/errors#error-type) field in API errors. Describes type of service message. It is acceptable to ignore repeated messages of the same **type** within a short period of time (15 minutes). */
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Message text */
        Object.defineProperty(this, "message", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Media content (optional) */
        Object.defineProperty(this, "media", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Message entities for styled text](https://core.telegram.org/api/entities) */
        Object.defineProperty(this, "entities", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.popup = params.popup;
        this.invert_media = params.invert_media;
        this.inbox_date = params.inbox_date;
        this.type = params.type;
        this.message = params.message;
        this.media = params.media;
        this.entities = params.entities;
    }
}
/** Privacy rules were changed */
export class UpdatePrivacy_ extends _Update_ {
    get [id]() {
        return 0xEE3B272A;
    }
    static get [name]() {
        return "updatePrivacy";
    }
    static get [paramDesc]() {
        return [
            ["key", _PrivacyKey_, "PrivacyKey"],
            ["rules", [_PrivacyRule_], "Vector<PrivacyRule>"],
        ];
    }
    get [params]() {
        return [
            [this.key, _PrivacyKey_, "PrivacyKey"],
            [this.rules, [_PrivacyRule_], "Vector<PrivacyRule>"],
        ];
    }
    constructor(params) {
        super();
        /** Peers to which the privacy rules apply */
        Object.defineProperty(this, "key", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New privacy rules */
        Object.defineProperty(this, "rules", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.key = params.key;
        this.rules = params.rules;
    }
}
/** A user's phone number was changed */
export class UpdateUserPhone_ extends _Update_ {
    get [id]() {
        return 0x05492A13;
    }
    static get [name]() {
        return "updateUserPhone";
    }
    static get [paramDesc]() {
        return [
            ["user_id", "bigint", "long"],
            ["phone", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.user_id, "bigint", "long"],
            [this.phone, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** User ID */
        Object.defineProperty(this, "user_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New phone number */
        Object.defineProperty(this, "phone", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.user_id = params.user_id;
        this.phone = params.phone;
    }
}
/** Incoming messages were read */
export class UpdateReadHistoryInbox_ extends _Update_ {
    get [id]() {
        return 0x9C974FDF;
    }
    static get [name]() {
        return "updateReadHistoryInbox";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["folder_id", "number", "flags.0?int"],
            ["peer", _Peer_, "Peer"],
            ["max_id", "number", "int"],
            ["still_unread_count", "number", "int"],
            ["pts", "number", "int"],
            ["pts_count", "number", "int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.folder_id ?? null, "number", "flags.0?int"],
            [this.peer, _Peer_, "Peer"],
            [this.max_id, "number", "int"],
            [this.still_unread_count, "number", "int"],
            [this.pts, "number", "int"],
            [this.pts_count, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** [Peer folder ID, for more info click here](https://core.telegram.org/api/folders#peer-folders) */
        Object.defineProperty(this, "folder_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Peer */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Maximum ID of messages read */
        Object.defineProperty(this, "max_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of messages that are still unread */
        Object.defineProperty(this, "still_unread_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Event count after generation](https://core.telegram.org/api/updates) */
        Object.defineProperty(this, "pts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Number of events that were generated](https://core.telegram.org/api/updates) */
        Object.defineProperty(this, "pts_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.folder_id = params.folder_id;
        this.peer = params.peer;
        this.max_id = params.max_id;
        this.still_unread_count = params.still_unread_count;
        this.pts = params.pts;
        this.pts_count = params.pts_count;
    }
}
/** Outgoing messages were read */
export class UpdateReadHistoryOutbox_ extends _Update_ {
    get [id]() {
        return 0x2F2F21BF;
    }
    static get [name]() {
        return "updateReadHistoryOutbox";
    }
    static get [paramDesc]() {
        return [
            ["peer", _Peer_, "Peer"],
            ["max_id", "number", "int"],
            ["pts", "number", "int"],
            ["pts_count", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.peer, _Peer_, "Peer"],
            [this.max_id, "number", "int"],
            [this.pts, "number", "int"],
            [this.pts_count, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Peer */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Maximum ID of read outgoing messages */
        Object.defineProperty(this, "max_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Event count after generation](https://core.telegram.org/api/updates) */
        Object.defineProperty(this, "pts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Number of events that were generated](https://core.telegram.org/api/updates) */
        Object.defineProperty(this, "pts_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.peer = params.peer;
        this.max_id = params.max_id;
        this.pts = params.pts;
        this.pts_count = params.pts_count;
    }
}
/** An [instant view](https://instantview.telegram.org) webpage preview was generated */
export class UpdateWebPage_ extends _Update_ {
    get [id]() {
        return 0x7F891213;
    }
    static get [name]() {
        return "updateWebPage";
    }
    static get [paramDesc]() {
        return [
            ["webpage", _WebPage_, "WebPage"],
            ["pts", "number", "int"],
            ["pts_count", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.webpage, _WebPage_, "WebPage"],
            [this.pts, "number", "int"],
            [this.pts_count, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Webpage preview */
        Object.defineProperty(this, "webpage", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Event count after generation](https://core.telegram.org/api/updates) */
        Object.defineProperty(this, "pts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Number of events that were generated](https://core.telegram.org/api/updates) */
        Object.defineProperty(this, "pts_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.webpage = params.webpage;
        this.pts = params.pts;
        this.pts_count = params.pts_count;
    }
}
/** Contents of messages in the common [message box](https://core.telegram.org/api/updates) were read */
export class UpdateReadMessagesContents_ extends _Update_ {
    get [id]() {
        return 0xF8227181;
    }
    static get [name]() {
        return "updateReadMessagesContents";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["messages", ["number"], "Vector<int>"],
            ["pts", "number", "int"],
            ["pts_count", "number", "int"],
            ["date", "number", "flags.0?int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.messages, ["number"], "Vector<int>"],
            [this.pts, "number", "int"],
            [this.pts_count, "number", "int"],
            [this.date ?? null, "number", "flags.0?int"],
        ];
    }
    constructor(params) {
        super();
        /** IDs of read messages */
        Object.defineProperty(this, "messages", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Event count after generation](https://core.telegram.org/api/updates) */
        Object.defineProperty(this, "pts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Number of events that were generated](https://core.telegram.org/api/updates) */
        Object.defineProperty(this, "pts_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** When was the last message in `messages` marked as read. */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.messages = params.messages;
        this.pts = params.pts;
        this.pts_count = params.pts_count;
        this.date = params.date;
    }
}
/** There are new updates in the specified channel, the client must fetch them.
If the difference is too long or if the channel isn't currently in the states, start fetching from the specified pts. */
export class UpdateChannelTooLong_ extends _Update_ {
    get [id]() {
        return 0x108D941F;
    }
    static get [name]() {
        return "updateChannelTooLong";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["channel_id", "bigint", "long"],
            ["pts", "number", "flags.0?int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.channel_id, "bigint", "long"],
            [this.pts ?? null, "number", "flags.0?int"],
        ];
    }
    constructor(params) {
        super();
        /** The channel */
        Object.defineProperty(this, "channel_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The [PTS](https://core.telegram.org/api/updates). */
        Object.defineProperty(this, "pts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.channel_id = params.channel_id;
        this.pts = params.pts;
    }
}
/** A new channel or supergroup is available, or info about an existing channel has changed and must be refeteched. */
export class UpdateChannel_ extends _Update_ {
    get [id]() {
        return 0x635B4C09;
    }
    static get [name]() {
        return "updateChannel";
    }
    static get [paramDesc]() {
        return [
            ["channel_id", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.channel_id, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** Channel ID */
        Object.defineProperty(this, "channel_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.channel_id = params.channel_id;
    }
}
/** A new message was sent in a [channel/supergroup](https://core.telegram.org/api/channel) */
export class UpdateNewChannelMessage_ extends _Update_ {
    get [id]() {
        return 0x62BA04D9;
    }
    static get [name]() {
        return "updateNewChannelMessage";
    }
    static get [paramDesc]() {
        return [
            ["message", _Message_, "Message"],
            ["pts", "number", "int"],
            ["pts_count", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.message, _Message_, "Message"],
            [this.pts, "number", "int"],
            [this.pts_count, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** New message */
        Object.defineProperty(this, "message", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Event count after generation](https://core.telegram.org/api/updates) */
        Object.defineProperty(this, "pts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Number of events that were generated](https://core.telegram.org/api/updates) */
        Object.defineProperty(this, "pts_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.message = params.message;
        this.pts = params.pts;
        this.pts_count = params.pts_count;
    }
}
/** Incoming messages in a [channel/supergroup](https://core.telegram.org/api/channel) were read */
export class UpdateReadChannelInbox_ extends _Update_ {
    get [id]() {
        return 0x922E6E10;
    }
    static get [name]() {
        return "updateReadChannelInbox";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["folder_id", "number", "flags.0?int"],
            ["channel_id", "bigint", "long"],
            ["max_id", "number", "int"],
            ["still_unread_count", "number", "int"],
            ["pts", "number", "int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.folder_id ?? null, "number", "flags.0?int"],
            [this.channel_id, "bigint", "long"],
            [this.max_id, "number", "int"],
            [this.still_unread_count, "number", "int"],
            [this.pts, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** [Peer folder ID, for more info click here](https://core.telegram.org/api/folders#peer-folders) */
        Object.defineProperty(this, "folder_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Channel/supergroup ID */
        Object.defineProperty(this, "channel_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Position up to which all incoming messages are read. */
        Object.defineProperty(this, "max_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Count of messages weren't read yet */
        Object.defineProperty(this, "still_unread_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Event count after generation](https://core.telegram.org/api/updates) */
        Object.defineProperty(this, "pts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.folder_id = params.folder_id;
        this.channel_id = params.channel_id;
        this.max_id = params.max_id;
        this.still_unread_count = params.still_unread_count;
        this.pts = params.pts;
    }
}
/** Some messages in a [supergroup/channel](https://core.telegram.org/api/channel) were deleted */
export class UpdateDeleteChannelMessages_ extends _Update_ {
    get [id]() {
        return 0xC32D5B12;
    }
    static get [name]() {
        return "updateDeleteChannelMessages";
    }
    static get [paramDesc]() {
        return [
            ["channel_id", "bigint", "long"],
            ["messages", ["number"], "Vector<int>"],
            ["pts", "number", "int"],
            ["pts_count", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.channel_id, "bigint", "long"],
            [this.messages, ["number"], "Vector<int>"],
            [this.pts, "number", "int"],
            [this.pts_count, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Channel ID */
        Object.defineProperty(this, "channel_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** IDs of messages that were deleted */
        Object.defineProperty(this, "messages", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Event count after generation](https://core.telegram.org/api/updates) */
        Object.defineProperty(this, "pts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Number of events that were generated](https://core.telegram.org/api/updates) */
        Object.defineProperty(this, "pts_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.channel_id = params.channel_id;
        this.messages = params.messages;
        this.pts = params.pts;
        this.pts_count = params.pts_count;
    }
}
/** The view counter of a message in a channel has changed */
export class UpdateChannelMessageViews_ extends _Update_ {
    get [id]() {
        return 0xF226AC08;
    }
    static get [name]() {
        return "updateChannelMessageViews";
    }
    static get [paramDesc]() {
        return [
            ["channel_id", "bigint", "long"],
            ["id", "number", "int"],
            ["views", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.channel_id, "bigint", "long"],
            [this.id, "number", "int"],
            [this.views, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Channel ID */
        Object.defineProperty(this, "channel_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the message */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New view counter */
        Object.defineProperty(this, "views", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.channel_id = params.channel_id;
        this.id = params.id;
        this.views = params.views;
    }
}
/** Admin permissions of a user in a [basic group](https://core.telegram.org/api/channel#basic-groups) were changed */
export class UpdateChatParticipantAdmin_ extends _Update_ {
    get [id]() {
        return 0xD7CA61A2;
    }
    static get [name]() {
        return "updateChatParticipantAdmin";
    }
    static get [paramDesc]() {
        return [
            ["chat_id", "bigint", "long"],
            ["user_id", "bigint", "long"],
            ["is_admin", "boolean", "Bool"],
            ["version", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.chat_id, "bigint", "long"],
            [this.user_id, "bigint", "long"],
            [this.is_admin, "boolean", "Bool"],
            [this.version, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Chat ID */
        Object.defineProperty(this, "chat_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the (de)admined user */
        Object.defineProperty(this, "user_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether the user was rendered admin */
        Object.defineProperty(this, "is_admin", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Used in basic groups to reorder updates and make sure that all of them was received. */
        Object.defineProperty(this, "version", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.chat_id = params.chat_id;
        this.user_id = params.user_id;
        this.is_admin = params.is_admin;
        this.version = params.version;
    }
}
/** A new stickerset was installed */
export class UpdateNewStickerSet_ extends _Update_ {
    get [id]() {
        return 0x688A30AA;
    }
    static get [name]() {
        return "updateNewStickerSet";
    }
    static get [paramDesc]() {
        return [
            ["stickerset", _messages_StickerSet_, "messages.StickerSet"],
        ];
    }
    get [params]() {
        return [
            [this.stickerset, _messages_StickerSet_, "messages.StickerSet"],
        ];
    }
    constructor(params) {
        super();
        /** The installed stickerset */
        Object.defineProperty(this, "stickerset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.stickerset = params.stickerset;
    }
}
/** The order of stickersets was changed */
export class UpdateStickerSetsOrder_ extends _Update_ {
    get [id]() {
        return 0x0BB2D201;
    }
    static get [name]() {
        return "updateStickerSetsOrder";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["masks", "true", "flags.0?true"],
            ["emojis", "true", "flags.1?true"],
            ["order", ["bigint"], "Vector<long>"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.masks ?? null, "true", "flags.0?true"],
            [this.emojis ?? null, "true", "flags.1?true"],
            [this.order, ["bigint"], "Vector<long>"],
        ];
    }
    constructor(params) {
        super();
        /** Whether the updated stickers are mask stickers */
        Object.defineProperty(this, "masks", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether the updated stickers are custom emoji stickers */
        Object.defineProperty(this, "emojis", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New sticker order by sticker ID */
        Object.defineProperty(this, "order", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.masks = params.masks;
        this.emojis = params.emojis;
        this.order = params.order;
    }
}
/** Installed stickersets have changed, the client should refetch them as [described in the docs](https://core.telegram.org/api/stickers#installing-stickersets). */
export class UpdateStickerSets_ extends _Update_ {
    get [id]() {
        return 0x31C24808;
    }
    static get [name]() {
        return "updateStickerSets";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["masks", "true", "flags.0?true"],
            ["emojis", "true", "flags.1?true"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.masks ?? null, "true", "flags.0?true"],
            [this.emojis ?? null, "true", "flags.1?true"],
        ];
    }
    constructor(params) {
        super();
        /** Whether mask stickersets have changed */
        Object.defineProperty(this, "masks", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether the list of installed [custom emoji stickersets](https://core.telegram.org/api/custom-emoji) has changed */
        Object.defineProperty(this, "emojis", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.masks = params?.masks;
        this.emojis = params?.emojis;
    }
}
/** The saved gif list has changed, the client should refetch it using [messages.getSavedGifs](https://core.telegram.org/method/messages.getSavedGifs) */
export class UpdateSavedGifs_ extends _Update_ {
    get [id]() {
        return 0x9375341E;
    }
    static get [name]() {
        return "updateSavedGifs";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** An incoming inline query */
export class UpdateBotInlineQuery_ extends _Update_ {
    get [id]() {
        return 0x496F379C;
    }
    static get [name]() {
        return "updateBotInlineQuery";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["query_id", "bigint", "long"],
            ["user_id", "bigint", "long"],
            ["query", "string", "string"],
            ["geo", _GeoPoint_, "flags.0?GeoPoint"],
            ["peer_type", _InlineQueryPeerType_, "flags.1?InlineQueryPeerType"],
            ["offset", "string", "string"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.query_id, "bigint", "long"],
            [this.user_id, "bigint", "long"],
            [this.query, "string", "string"],
            [this.geo ?? null, _GeoPoint_, "flags.0?GeoPoint"],
            [this.peer_type ?? null, _InlineQueryPeerType_, "flags.1?InlineQueryPeerType"],
            [this.offset, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Query ID */
        Object.defineProperty(this, "query_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** User that sent the query */
        Object.defineProperty(this, "user_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Text of query */
        Object.defineProperty(this, "query", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Attached geolocation */
        Object.defineProperty(this, "geo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Type of the chat from which the inline query was sent. */
        Object.defineProperty(this, "peer_type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Offset to navigate through results */
        Object.defineProperty(this, "offset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.query_id = params.query_id;
        this.user_id = params.user_id;
        this.query = params.query;
        this.geo = params.geo;
        this.peer_type = params.peer_type;
        this.offset = params.offset;
    }
}
/** The result of an inline query that was chosen by a user and sent to their chat partner. Please see our documentation on the [feedback collecting](https://core.telegram.org/bots/inline#collecting-feedback) for details on how to enable these updates for your bot. */
export class UpdateBotInlineSend_ extends _Update_ {
    get [id]() {
        return 0x12F12A07;
    }
    static get [name]() {
        return "updateBotInlineSend";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["user_id", "bigint", "long"],
            ["query", "string", "string"],
            ["geo", _GeoPoint_, "flags.0?GeoPoint"],
            ["id", "string", "string"],
            ["msg_id", _InputBotInlineMessageID_, "flags.1?InputBotInlineMessageID"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.user_id, "bigint", "long"],
            [this.query, "string", "string"],
            [this.geo ?? null, _GeoPoint_, "flags.0?GeoPoint"],
            [this.id, "string", "string"],
            [this.msg_id ?? null, _InputBotInlineMessageID_, "flags.1?InputBotInlineMessageID"],
        ];
    }
    constructor(params) {
        super();
        /** The user that chose the result */
        Object.defineProperty(this, "user_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The query that was used to obtain the result */
        Object.defineProperty(this, "query", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Optional. Sender location, only for bots that require user location */
        Object.defineProperty(this, "geo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The unique identifier for the result that was chosen */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Identifier of the sent inline message. Available only if there is an inline keyboard attached to the message. Will be also received in callback queries and can be used to edit the message. */
        Object.defineProperty(this, "msg_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.user_id = params.user_id;
        this.query = params.query;
        this.geo = params.geo;
        this.id = params.id;
        this.msg_id = params.msg_id;
    }
}
/** A message was edited in a [channel/supergroup](https://core.telegram.org/api/channel) */
export class UpdateEditChannelMessage_ extends _Update_ {
    get [id]() {
        return 0x1B3F4DF7;
    }
    static get [name]() {
        return "updateEditChannelMessage";
    }
    static get [paramDesc]() {
        return [
            ["message", _Message_, "Message"],
            ["pts", "number", "int"],
            ["pts_count", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.message, _Message_, "Message"],
            [this.pts, "number", "int"],
            [this.pts_count, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** The new message */
        Object.defineProperty(this, "message", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Event count after generation](https://core.telegram.org/api/updates) */
        Object.defineProperty(this, "pts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Number of events that were generated](https://core.telegram.org/api/updates) */
        Object.defineProperty(this, "pts_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.message = params.message;
        this.pts = params.pts;
        this.pts_count = params.pts_count;
    }
}
/** A callback button was pressed, and the button data was sent to the bot that created the button */
export class UpdateBotCallbackQuery_ extends _Update_ {
    get [id]() {
        return 0xB9CFC48D;
    }
    static get [name]() {
        return "updateBotCallbackQuery";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["query_id", "bigint", "long"],
            ["user_id", "bigint", "long"],
            ["peer", _Peer_, "Peer"],
            ["msg_id", "number", "int"],
            ["chat_instance", "bigint", "long"],
            ["data", Uint8Array, "flags.0?bytes"],
            ["game_short_name", "string", "flags.1?string"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.query_id, "bigint", "long"],
            [this.user_id, "bigint", "long"],
            [this.peer, _Peer_, "Peer"],
            [this.msg_id, "number", "int"],
            [this.chat_instance, "bigint", "long"],
            [this.data ?? null, Uint8Array, "flags.0?bytes"],
            [this.game_short_name ?? null, "string", "flags.1?string"],
        ];
    }
    constructor(params) {
        super();
        /** Query ID */
        Object.defineProperty(this, "query_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the user that pressed the button */
        Object.defineProperty(this, "user_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Chat where the inline keyboard was sent */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Message ID */
        Object.defineProperty(this, "msg_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Global identifier, uniquely corresponding to the chat to which the message with the callback button was sent. Useful for high scores in games. */
        Object.defineProperty(this, "chat_instance", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Callback data */
        Object.defineProperty(this, "data", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Short name of a Game to be returned, serves as the unique identifier for the game */
        Object.defineProperty(this, "game_short_name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.query_id = params.query_id;
        this.user_id = params.user_id;
        this.peer = params.peer;
        this.msg_id = params.msg_id;
        this.chat_instance = params.chat_instance;
        this.data = params.data;
        this.game_short_name = params.game_short_name;
    }
}
/** A message was edited */
export class UpdateEditMessage_ extends _Update_ {
    get [id]() {
        return 0xE40370A3;
    }
    static get [name]() {
        return "updateEditMessage";
    }
    static get [paramDesc]() {
        return [
            ["message", _Message_, "Message"],
            ["pts", "number", "int"],
            ["pts_count", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.message, _Message_, "Message"],
            [this.pts, "number", "int"],
            [this.pts_count, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** The new edited message */
        Object.defineProperty(this, "message", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [PTS](https://core.telegram.org/api/updates) */
        Object.defineProperty(this, "pts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [PTS count](https://core.telegram.org/api/updates) */
        Object.defineProperty(this, "pts_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.message = params.message;
        this.pts = params.pts;
        this.pts_count = params.pts_count;
    }
}
/** This notification is received by bots when a button is pressed */
export class UpdateInlineBotCallbackQuery_ extends _Update_ {
    get [id]() {
        return 0x691E9052;
    }
    static get [name]() {
        return "updateInlineBotCallbackQuery";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["query_id", "bigint", "long"],
            ["user_id", "bigint", "long"],
            ["msg_id", _InputBotInlineMessageID_, "InputBotInlineMessageID"],
            ["chat_instance", "bigint", "long"],
            ["data", Uint8Array, "flags.0?bytes"],
            ["game_short_name", "string", "flags.1?string"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.query_id, "bigint", "long"],
            [this.user_id, "bigint", "long"],
            [this.msg_id, _InputBotInlineMessageID_, "InputBotInlineMessageID"],
            [this.chat_instance, "bigint", "long"],
            [this.data ?? null, Uint8Array, "flags.0?bytes"],
            [this.game_short_name ?? null, "string", "flags.1?string"],
        ];
    }
    constructor(params) {
        super();
        /** Query ID */
        Object.defineProperty(this, "query_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the user that pressed the button */
        Object.defineProperty(this, "user_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the inline message with the button */
        Object.defineProperty(this, "msg_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Global identifier, uniquely corresponding to the chat to which the message with the callback button was sent. Useful for high scores in games. */
        Object.defineProperty(this, "chat_instance", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Data associated with the callback button. Be aware that a bad client can send arbitrary data in this field. */
        Object.defineProperty(this, "data", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Short name of a Game to be returned, serves as the unique identifier for the game */
        Object.defineProperty(this, "game_short_name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.query_id = params.query_id;
        this.user_id = params.user_id;
        this.msg_id = params.msg_id;
        this.chat_instance = params.chat_instance;
        this.data = params.data;
        this.game_short_name = params.game_short_name;
    }
}
/** Outgoing messages in a [channel/supergroup](https://core.telegram.org/api/channel) were read */
export class UpdateReadChannelOutbox_ extends _Update_ {
    get [id]() {
        return 0xB75F99A9;
    }
    static get [name]() {
        return "updateReadChannelOutbox";
    }
    static get [paramDesc]() {
        return [
            ["channel_id", "bigint", "long"],
            ["max_id", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.channel_id, "bigint", "long"],
            [this.max_id, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Channel/supergroup ID */
        Object.defineProperty(this, "channel_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Position up to which all outgoing messages are read. */
        Object.defineProperty(this, "max_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.channel_id = params.channel_id;
        this.max_id = params.max_id;
    }
}
/** Notifies a change of a message [draft](https://core.telegram.org/api/drafts). */
export class UpdateDraftMessage_ extends _Update_ {
    get [id]() {
        return 0x1B49EC6D;
    }
    static get [name]() {
        return "updateDraftMessage";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["peer", _Peer_, "Peer"],
            ["top_msg_id", "number", "flags.0?int"],
            ["draft", _DraftMessage_, "DraftMessage"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.peer, _Peer_, "Peer"],
            [this.top_msg_id ?? null, "number", "flags.0?int"],
            [this.draft, _DraftMessage_, "DraftMessage"],
        ];
    }
    constructor(params) {
        super();
        /** The peer to which the draft is associated */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the [forum topic](https://core.telegram.org/api/forum#forum-topics) to which the draft is associated */
        Object.defineProperty(this, "top_msg_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The draft */
        Object.defineProperty(this, "draft", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.peer = params.peer;
        this.top_msg_id = params.top_msg_id;
        this.draft = params.draft;
    }
}
/** Some featured stickers were marked as read */
export class UpdateReadFeaturedStickers_ extends _Update_ {
    get [id]() {
        return 0x571D2742;
    }
    static get [name]() {
        return "updateReadFeaturedStickers";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** The recent sticker list was updated */
export class UpdateRecentStickers_ extends _Update_ {
    get [id]() {
        return 0x9A422C20;
    }
    static get [name]() {
        return "updateRecentStickers";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** The server-side configuration has changed; the client should re-fetch the config using [help.getConfig](https://core.telegram.org/method/help.getConfig) */
export class UpdateConfig_ extends _Update_ {
    get [id]() {
        return 0xA229DD06;
    }
    static get [name]() {
        return "updateConfig";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** [Common message box sequence PTS](https://core.telegram.org/api/updates) has changed, [state has to be refetched using updates.getState](https://core.telegram.org/api/updates#fetching-state) */
export class UpdatePtsChanged_ extends _Update_ {
    get [id]() {
        return 0x3354678F;
    }
    static get [name]() {
        return "updatePtsChanged";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** A webpage preview of a link in a [channel/supergroup](https://core.telegram.org/api/channel) message was generated */
export class UpdateChannelWebPage_ extends _Update_ {
    get [id]() {
        return 0x2F2BA99F;
    }
    static get [name]() {
        return "updateChannelWebPage";
    }
    static get [paramDesc]() {
        return [
            ["channel_id", "bigint", "long"],
            ["webpage", _WebPage_, "WebPage"],
            ["pts", "number", "int"],
            ["pts_count", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.channel_id, "bigint", "long"],
            [this.webpage, _WebPage_, "WebPage"],
            [this.pts, "number", "int"],
            [this.pts_count, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** [Channel/supergroup](https://core.telegram.org/api/channel) ID */
        Object.defineProperty(this, "channel_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Generated webpage preview */
        Object.defineProperty(this, "webpage", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Event count after generation](https://core.telegram.org/api/updates) */
        Object.defineProperty(this, "pts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Number of events that were generated](https://core.telegram.org/api/updates) */
        Object.defineProperty(this, "pts_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.channel_id = params.channel_id;
        this.webpage = params.webpage;
        this.pts = params.pts;
        this.pts_count = params.pts_count;
    }
}
/** A dialog was pinned/unpinned */
export class UpdateDialogPinned_ extends _Update_ {
    get [id]() {
        return 0x6E6FE51C;
    }
    static get [name]() {
        return "updateDialogPinned";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["pinned", "true", "flags.0?true"],
            ["folder_id", "number", "flags.1?int"],
            ["peer", _DialogPeer_, "DialogPeer"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.pinned ?? null, "true", "flags.0?true"],
            [this.folder_id ?? null, "number", "flags.1?int"],
            [this.peer, _DialogPeer_, "DialogPeer"],
        ];
    }
    constructor(params) {
        super();
        /** Whether the dialog was pinned */
        Object.defineProperty(this, "pinned", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Peer folder ID, for more info click here](https://core.telegram.org/api/folders#peer-folders) */
        Object.defineProperty(this, "folder_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The dialog */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.pinned = params.pinned;
        this.folder_id = params.folder_id;
        this.peer = params.peer;
    }
}
/** Pinned dialogs were updated */
export class UpdatePinnedDialogs_ extends _Update_ {
    get [id]() {
        return 0xFA0F3CA2;
    }
    static get [name]() {
        return "updatePinnedDialogs";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["folder_id", "number", "flags.1?int"],
            ["order", [_DialogPeer_], "flags.0?Vector<DialogPeer>"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.folder_id ?? null, "number", "flags.1?int"],
            [this.order ?? null, [_DialogPeer_], "flags.0?Vector<DialogPeer>"],
        ];
    }
    constructor(params) {
        super();
        /** [Peer folder ID, for more info click here](https://core.telegram.org/api/folders#peer-folders) */
        Object.defineProperty(this, "folder_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New order of pinned dialogs */
        Object.defineProperty(this, "order", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.folder_id = params?.folder_id;
        this.order = params?.order;
    }
}
/** A new incoming event; for bots only */
export class UpdateBotWebhookJSON_ extends _Update_ {
    get [id]() {
        return 0x8317C0C3;
    }
    static get [name]() {
        return "updateBotWebhookJSON";
    }
    static get [paramDesc]() {
        return [
            ["data", _DataJSON_, "DataJSON"],
        ];
    }
    get [params]() {
        return [
            [this.data, _DataJSON_, "DataJSON"],
        ];
    }
    constructor(params) {
        super();
        /** The event */
        Object.defineProperty(this, "data", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.data = params.data;
    }
}
/** A new incoming query; for bots only */
export class UpdateBotWebhookJSONQuery_ extends _Update_ {
    get [id]() {
        return 0x9B9240A6;
    }
    static get [name]() {
        return "updateBotWebhookJSONQuery";
    }
    static get [paramDesc]() {
        return [
            ["query_id", "bigint", "long"],
            ["data", _DataJSON_, "DataJSON"],
            ["timeout", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.query_id, "bigint", "long"],
            [this.data, _DataJSON_, "DataJSON"],
            [this.timeout, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Query identifier */
        Object.defineProperty(this, "query_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Query data */
        Object.defineProperty(this, "data", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Query timeout */
        Object.defineProperty(this, "timeout", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.query_id = params.query_id;
        this.data = params.data;
        this.timeout = params.timeout;
    }
}
/** This object contains information about an incoming shipping query. */
export class UpdateBotShippingQuery_ extends _Update_ {
    get [id]() {
        return 0xB5AEFD7D;
    }
    static get [name]() {
        return "updateBotShippingQuery";
    }
    static get [paramDesc]() {
        return [
            ["query_id", "bigint", "long"],
            ["user_id", "bigint", "long"],
            ["payload", Uint8Array, "bytes"],
            ["shipping_address", _PostAddress_, "PostAddress"],
        ];
    }
    get [params]() {
        return [
            [this.query_id, "bigint", "long"],
            [this.user_id, "bigint", "long"],
            [this.payload, Uint8Array, "bytes"],
            [this.shipping_address, _PostAddress_, "PostAddress"],
        ];
    }
    constructor(params) {
        super();
        /** Unique query identifier */
        Object.defineProperty(this, "query_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** User who sent the query */
        Object.defineProperty(this, "user_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Bot specified invoice payload */
        Object.defineProperty(this, "payload", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** User specified shipping address */
        Object.defineProperty(this, "shipping_address", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.query_id = params.query_id;
        this.user_id = params.user_id;
        this.payload = params.payload;
        this.shipping_address = params.shipping_address;
    }
}
/** This object contains information about an incoming pre-checkout query. */
export class UpdateBotPrecheckoutQuery_ extends _Update_ {
    get [id]() {
        return 0x8CAA9A96;
    }
    static get [name]() {
        return "updateBotPrecheckoutQuery";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["query_id", "bigint", "long"],
            ["user_id", "bigint", "long"],
            ["payload", Uint8Array, "bytes"],
            ["info", _PaymentRequestedInfo_, "flags.0?PaymentRequestedInfo"],
            ["shipping_option_id", "string", "flags.1?string"],
            ["currency", "string", "string"],
            ["total_amount", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.query_id, "bigint", "long"],
            [this.user_id, "bigint", "long"],
            [this.payload, Uint8Array, "bytes"],
            [this.info ?? null, _PaymentRequestedInfo_, "flags.0?PaymentRequestedInfo"],
            [this.shipping_option_id ?? null, "string", "flags.1?string"],
            [this.currency, "string", "string"],
            [this.total_amount, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** Unique query identifier */
        Object.defineProperty(this, "query_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** User who sent the query */
        Object.defineProperty(this, "user_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Bot specified invoice payload */
        Object.defineProperty(this, "payload", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Order info provided by the user */
        Object.defineProperty(this, "info", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Identifier of the shipping option chosen by the user */
        Object.defineProperty(this, "shipping_option_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code */
        Object.defineProperty(this, "currency", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Total amount in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). */
        Object.defineProperty(this, "total_amount", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.query_id = params.query_id;
        this.user_id = params.user_id;
        this.payload = params.payload;
        this.info = params.info;
        this.shipping_option_id = params.shipping_option_id;
        this.currency = params.currency;
        this.total_amount = params.total_amount;
    }
}
/** An incoming phone call */
export class UpdatePhoneCall_ extends _Update_ {
    get [id]() {
        return 0xAB0F6B1E;
    }
    static get [name]() {
        return "updatePhoneCall";
    }
    static get [paramDesc]() {
        return [
            ["phone_call", _PhoneCall_, "PhoneCall"],
        ];
    }
    get [params]() {
        return [
            [this.phone_call, _PhoneCall_, "PhoneCall"],
        ];
    }
    constructor(params) {
        super();
        /** Phone call */
        Object.defineProperty(this, "phone_call", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.phone_call = params.phone_call;
    }
}
/** A language pack has changed, the client should manually fetch the changed strings using [langpack.getDifference](https://core.telegram.org/method/langpack.getDifference) */
export class UpdateLangPackTooLong_ extends _Update_ {
    get [id]() {
        return 0x46560264;
    }
    static get [name]() {
        return "updateLangPackTooLong";
    }
    static get [paramDesc]() {
        return [
            ["lang_code", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.lang_code, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Language code */
        Object.defineProperty(this, "lang_code", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.lang_code = params.lang_code;
    }
}
/** Language pack updated */
export class UpdateLangPack_ extends _Update_ {
    get [id]() {
        return 0x56022F4D;
    }
    static get [name]() {
        return "updateLangPack";
    }
    static get [paramDesc]() {
        return [
            ["difference", _LangPackDifference_, "LangPackDifference"],
        ];
    }
    get [params]() {
        return [
            [this.difference, _LangPackDifference_, "LangPackDifference"],
        ];
    }
    constructor(params) {
        super();
        /** Changed strings */
        Object.defineProperty(this, "difference", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.difference = params.difference;
    }
}
/** The list of favorited stickers was changed, the client should call [messages.getFavedStickers](https://core.telegram.org/method/messages.getFavedStickers) to refetch the new list */
export class UpdateFavedStickers_ extends _Update_ {
    get [id]() {
        return 0xE511996D;
    }
    static get [name]() {
        return "updateFavedStickers";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** The specified [channel/supergroup](https://core.telegram.org/api/channel) messages were read */
export class UpdateChannelReadMessagesContents_ extends _Update_ {
    get [id]() {
        return 0xEA29055D;
    }
    static get [name]() {
        return "updateChannelReadMessagesContents";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["channel_id", "bigint", "long"],
            ["top_msg_id", "number", "flags.0?int"],
            ["messages", ["number"], "Vector<int>"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.channel_id, "bigint", "long"],
            [this.top_msg_id ?? null, "number", "flags.0?int"],
            [this.messages, ["number"], "Vector<int>"],
        ];
    }
    constructor(params) {
        super();
        /** [Channel/supergroup](https://core.telegram.org/api/channel) ID */
        Object.defineProperty(this, "channel_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Forum topic ID](https://core.telegram.org/api/forum#forum-topics). */
        Object.defineProperty(this, "top_msg_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** IDs of messages that were read */
        Object.defineProperty(this, "messages", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.channel_id = params.channel_id;
        this.top_msg_id = params.top_msg_id;
        this.messages = params.messages;
    }
}
/** All contacts were deleted */
export class UpdateContactsReset_ extends _Update_ {
    get [id]() {
        return 0x7084A7BE;
    }
    static get [name]() {
        return "updateContactsReset";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** The history of a [channel/supergroup](https://core.telegram.org/api/channel) was hidden. */
export class UpdateChannelAvailableMessages_ extends _Update_ {
    get [id]() {
        return 0xB23FC698;
    }
    static get [name]() {
        return "updateChannelAvailableMessages";
    }
    static get [paramDesc]() {
        return [
            ["channel_id", "bigint", "long"],
            ["available_min_id", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.channel_id, "bigint", "long"],
            [this.available_min_id, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Channel/supergroup ID */
        Object.defineProperty(this, "channel_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Identifier of a maximum unavailable message in a channel due to hidden history. */
        Object.defineProperty(this, "available_min_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.channel_id = params.channel_id;
        this.available_min_id = params.available_min_id;
    }
}
/** The manual unread mark of a chat was changed */
export class UpdateDialogUnreadMark_ extends _Update_ {
    get [id]() {
        return 0xE16459C3;
    }
    static get [name]() {
        return "updateDialogUnreadMark";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["unread", "true", "flags.0?true"],
            ["peer", _DialogPeer_, "DialogPeer"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.unread ?? null, "true", "flags.0?true"],
            [this.peer, _DialogPeer_, "DialogPeer"],
        ];
    }
    constructor(params) {
        super();
        /** Was the chat marked or unmarked as read */
        Object.defineProperty(this, "unread", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The dialog */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.unread = params.unread;
        this.peer = params.peer;
    }
}
/** The results of a poll have changed */
export class UpdateMessagePoll_ extends _Update_ {
    get [id]() {
        return 0xACA1657B;
    }
    static get [name]() {
        return "updateMessagePoll";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["poll_id", "bigint", "long"],
            ["poll", _Poll_, "flags.0?Poll"],
            ["results", _PollResults_, "PollResults"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.poll_id, "bigint", "long"],
            [this.poll ?? null, _Poll_, "flags.0?Poll"],
            [this.results, _PollResults_, "PollResults"],
        ];
    }
    constructor(params) {
        super();
        /** Poll ID */
        Object.defineProperty(this, "poll_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If the server knows the client hasn't cached this poll yet, the poll itself */
        Object.defineProperty(this, "poll", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New poll results */
        Object.defineProperty(this, "results", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.poll_id = params.poll_id;
        this.poll = params.poll;
        this.results = params.results;
    }
}
/** Default banned rights in a [normal chat](https://core.telegram.org/api/channel) were updated */
export class UpdateChatDefaultBannedRights_ extends _Update_ {
    get [id]() {
        return 0x54C01850;
    }
    static get [name]() {
        return "updateChatDefaultBannedRights";
    }
    static get [paramDesc]() {
        return [
            ["peer", _Peer_, "Peer"],
            ["default_banned_rights", _ChatBannedRights_, "ChatBannedRights"],
            ["version", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.peer, _Peer_, "Peer"],
            [this.default_banned_rights, _ChatBannedRights_, "ChatBannedRights"],
            [this.version, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** The chat */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New default banned rights */
        Object.defineProperty(this, "default_banned_rights", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Version */
        Object.defineProperty(this, "version", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.peer = params.peer;
        this.default_banned_rights = params.default_banned_rights;
        this.version = params.version;
    }
}
/** The peer list of a [peer folder](https://core.telegram.org/api/folders#peer-folders) was updated */
export class UpdateFolderPeers_ extends _Update_ {
    get [id]() {
        return 0x19360DC0;
    }
    static get [name]() {
        return "updateFolderPeers";
    }
    static get [paramDesc]() {
        return [
            ["folder_peers", [_FolderPeer_], "Vector<FolderPeer>"],
            ["pts", "number", "int"],
            ["pts_count", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.folder_peers, [_FolderPeer_], "Vector<FolderPeer>"],
            [this.pts, "number", "int"],
            [this.pts_count, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** New peer list */
        Object.defineProperty(this, "folder_peers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Event count after generation](https://core.telegram.org/api/updates) */
        Object.defineProperty(this, "pts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Number of events that were generated](https://core.telegram.org/api/updates) */
        Object.defineProperty(this, "pts_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.folder_peers = params.folder_peers;
        this.pts = params.pts;
        this.pts_count = params.pts_count;
    }
}
/** Settings of a certain peer have changed */
export class UpdatePeerSettings_ extends _Update_ {
    get [id]() {
        return 0x6A7E7366;
    }
    static get [name]() {
        return "updatePeerSettings";
    }
    static get [paramDesc]() {
        return [
            ["peer", _Peer_, "Peer"],
            ["settings", _PeerSettings_, "PeerSettings"],
        ];
    }
    get [params]() {
        return [
            [this.peer, _Peer_, "Peer"],
            [this.settings, _PeerSettings_, "PeerSettings"],
        ];
    }
    constructor(params) {
        super();
        /** The peer */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Associated peer settings */
        Object.defineProperty(this, "settings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.peer = params.peer;
        this.settings = params.settings;
    }
}
/** List of peers near you was updated */
export class UpdatePeerLocated_ extends _Update_ {
    get [id]() {
        return 0xB4AFCFB0;
    }
    static get [name]() {
        return "updatePeerLocated";
    }
    static get [paramDesc]() {
        return [
            ["peers", [_PeerLocated_], "Vector<PeerLocated>"],
        ];
    }
    get [params]() {
        return [
            [this.peers, [_PeerLocated_], "Vector<PeerLocated>"],
        ];
    }
    constructor(params) {
        super();
        /** Geolocated peer list update */
        Object.defineProperty(this, "peers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.peers = params.peers;
    }
}
/** A message was added to the [schedule queue of a chat](https://core.telegram.org/api/scheduled-messages) */
export class UpdateNewScheduledMessage_ extends _Update_ {
    get [id]() {
        return 0x39A51DFB;
    }
    static get [name]() {
        return "updateNewScheduledMessage";
    }
    static get [paramDesc]() {
        return [
            ["message", _Message_, "Message"],
        ];
    }
    get [params]() {
        return [
            [this.message, _Message_, "Message"],
        ];
    }
    constructor(params) {
        super();
        /** Message */
        Object.defineProperty(this, "message", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.message = params.message;
    }
}
/** Some [scheduled messages](https://core.telegram.org/api/scheduled-messages) were deleted from the schedule queue of a chat */
export class UpdateDeleteScheduledMessages_ extends _Update_ {
    get [id]() {
        return 0x90866CEE;
    }
    static get [name]() {
        return "updateDeleteScheduledMessages";
    }
    static get [paramDesc]() {
        return [
            ["peer", _Peer_, "Peer"],
            ["messages", ["number"], "Vector<int>"],
        ];
    }
    get [params]() {
        return [
            [this.peer, _Peer_, "Peer"],
            [this.messages, ["number"], "Vector<int>"],
        ];
    }
    constructor(params) {
        super();
        /** Peer */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Deleted scheduled messages */
        Object.defineProperty(this, "messages", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.peer = params.peer;
        this.messages = params.messages;
    }
}
/** A cloud theme was updated */
export class UpdateTheme_ extends _Update_ {
    get [id]() {
        return 0x8216FBA3;
    }
    static get [name]() {
        return "updateTheme";
    }
    static get [paramDesc]() {
        return [
            ["theme", _Theme_, "Theme"],
        ];
    }
    get [params]() {
        return [
            [this.theme, _Theme_, "Theme"],
        ];
    }
    constructor(params) {
        super();
        /** Theme */
        Object.defineProperty(this, "theme", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.theme = params.theme;
    }
}
/** Live geoposition message was viewed */
export class UpdateGeoLiveViewed_ extends _Update_ {
    get [id]() {
        return 0x871FB939;
    }
    static get [name]() {
        return "updateGeoLiveViewed";
    }
    static get [paramDesc]() {
        return [
            ["peer", _Peer_, "Peer"],
            ["msg_id", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.peer, _Peer_, "Peer"],
            [this.msg_id, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** The user that viewed the live geoposition */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Message ID of geoposition message */
        Object.defineProperty(this, "msg_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.peer = params.peer;
        this.msg_id = params.msg_id;
    }
}
/** A login token (for login via QR code) was accepted. */
export class UpdateLoginToken_ extends _Update_ {
    get [id]() {
        return 0x564FE691;
    }
    static get [name]() {
        return "updateLoginToken";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** A specific peer has voted in a poll */
export class UpdateMessagePollVote_ extends _Update_ {
    get [id]() {
        return 0x24F40E77;
    }
    static get [name]() {
        return "updateMessagePollVote";
    }
    static get [paramDesc]() {
        return [
            ["poll_id", "bigint", "long"],
            ["peer", _Peer_, "Peer"],
            ["options", [Uint8Array], "Vector<bytes>"],
            ["qts", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.poll_id, "bigint", "long"],
            [this.peer, _Peer_, "Peer"],
            [this.options, [Uint8Array], "Vector<bytes>"],
            [this.qts, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Poll ID */
        Object.defineProperty(this, "poll_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The peer that voted in the poll */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Chosen option(s) */
        Object.defineProperty(this, "options", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New **qts** value, see [updates »](https://core.telegram.org/api/updates) for more info. */
        Object.defineProperty(this, "qts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.poll_id = params.poll_id;
        this.peer = params.peer;
        this.options = params.options;
        this.qts = params.qts;
    }
}
/** A new [folder](https://core.telegram.org/api/folders) was added */
export class UpdateDialogFilter_ extends _Update_ {
    get [id]() {
        return 0x26FFDE7D;
    }
    static get [name]() {
        return "updateDialogFilter";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["id", "number", "int"],
            ["filter", _DialogFilter_, "flags.0?DialogFilter"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.id, "number", "int"],
            [this.filter ?? null, _DialogFilter_, "flags.0?DialogFilter"],
        ];
    }
    constructor(params) {
        super();
        /** [Folder](https://core.telegram.org/api/folders) ID */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Folder](https://core.telegram.org/api/folders) info */
        Object.defineProperty(this, "filter", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
        this.filter = params.filter;
    }
}
/** New [folder](https://core.telegram.org/api/folders) order */
export class UpdateDialogFilterOrder_ extends _Update_ {
    get [id]() {
        return 0xA5D72105;
    }
    static get [name]() {
        return "updateDialogFilterOrder";
    }
    static get [paramDesc]() {
        return [
            ["order", ["number"], "Vector<int>"],
        ];
    }
    get [params]() {
        return [
            [this.order, ["number"], "Vector<int>"],
        ];
    }
    constructor(params) {
        super();
        /** Ordered [folder IDs](https://core.telegram.org/api/folders) */
        Object.defineProperty(this, "order", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.order = params.order;
    }
}
/** Clients should update [folder](https://core.telegram.org/api/folders) info */
export class UpdateDialogFilters_ extends _Update_ {
    get [id]() {
        return 0x3504914F;
    }
    static get [name]() {
        return "updateDialogFilters";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Incoming phone call signaling payload */
export class UpdatePhoneCallSignalingData_ extends _Update_ {
    get [id]() {
        return 0x2661BF09;
    }
    static get [name]() {
        return "updatePhoneCallSignalingData";
    }
    static get [paramDesc]() {
        return [
            ["phone_call_id", "bigint", "long"],
            ["data", Uint8Array, "bytes"],
        ];
    }
    get [params]() {
        return [
            [this.phone_call_id, "bigint", "long"],
            [this.data, Uint8Array, "bytes"],
        ];
    }
    constructor(params) {
        super();
        /** Phone call ID */
        Object.defineProperty(this, "phone_call_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Signaling payload */
        Object.defineProperty(this, "data", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.phone_call_id = params.phone_call_id;
        this.data = params.data;
    }
}
/** The forward counter of a message in a channel has changed */
export class UpdateChannelMessageForwards_ extends _Update_ {
    get [id]() {
        return 0xD29A27F4;
    }
    static get [name]() {
        return "updateChannelMessageForwards";
    }
    static get [paramDesc]() {
        return [
            ["channel_id", "bigint", "long"],
            ["id", "number", "int"],
            ["forwards", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.channel_id, "bigint", "long"],
            [this.id, "number", "int"],
            [this.forwards, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Channel ID */
        Object.defineProperty(this, "channel_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the message */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New forward counter */
        Object.defineProperty(this, "forwards", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.channel_id = params.channel_id;
        this.id = params.id;
        this.forwards = params.forwards;
    }
}
/** Incoming comments in a [discussion thread](https://core.telegram.org/api/threads) were marked as read */
export class UpdateReadChannelDiscussionInbox_ extends _Update_ {
    get [id]() {
        return 0xD6B19546;
    }
    static get [name]() {
        return "updateReadChannelDiscussionInbox";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["channel_id", "bigint", "long"],
            ["top_msg_id", "number", "int"],
            ["read_max_id", "number", "int"],
            ["broadcast_id", "bigint", "flags.0?long"],
            ["broadcast_post", "number", "flags.0?int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.channel_id, "bigint", "long"],
            [this.top_msg_id, "number", "int"],
            [this.read_max_id, "number", "int"],
            [this.broadcast_id ?? null, "bigint", "flags.0?long"],
            [this.broadcast_post ?? null, "number", "flags.0?int"],
        ];
    }
    constructor(params) {
        super();
        /** [Discussion group ID](https://core.telegram.org/api/channel) */
        Object.defineProperty(this, "channel_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the group message that started the [thread](https://core.telegram.org/api/threads) (message in linked discussion group) */
        Object.defineProperty(this, "top_msg_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Message ID of latest read incoming message for this [thread](https://core.telegram.org/api/threads) */
        Object.defineProperty(this, "read_max_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, contains the ID of the [channel](https://core.telegram.org/api/channel) that contains the post that started the [comment thread](https://core.telegram.org/api/threads) in the discussion group (`channel_id`) */
        Object.defineProperty(this, "broadcast_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, contains the ID of the channel post that started the [comment thread](https://core.telegram.org/api/threads) */
        Object.defineProperty(this, "broadcast_post", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.channel_id = params.channel_id;
        this.top_msg_id = params.top_msg_id;
        this.read_max_id = params.read_max_id;
        this.broadcast_id = params.broadcast_id;
        this.broadcast_post = params.broadcast_post;
    }
}
/** Outgoing comments in a [discussion thread](https://core.telegram.org/api/threads) were marked as read */
export class UpdateReadChannelDiscussionOutbox_ extends _Update_ {
    get [id]() {
        return 0x695C9E7C;
    }
    static get [name]() {
        return "updateReadChannelDiscussionOutbox";
    }
    static get [paramDesc]() {
        return [
            ["channel_id", "bigint", "long"],
            ["top_msg_id", "number", "int"],
            ["read_max_id", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.channel_id, "bigint", "long"],
            [this.top_msg_id, "number", "int"],
            [this.read_max_id, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** [Supergroup ID](https://core.telegram.org/api/channel) */
        Object.defineProperty(this, "channel_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the group message that started the [thread](https://core.telegram.org/api/threads) */
        Object.defineProperty(this, "top_msg_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Message ID of latest read outgoing message for this [thread](https://core.telegram.org/api/threads) */
        Object.defineProperty(this, "read_max_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.channel_id = params.channel_id;
        this.top_msg_id = params.top_msg_id;
        this.read_max_id = params.read_max_id;
    }
}
/** We blocked a peer, see [here »](https://core.telegram.org/api/block) for more info on blocklists. */
export class UpdatePeerBlocked_ extends _Update_ {
    get [id]() {
        return 0xEBE07752;
    }
    static get [name]() {
        return "updatePeerBlocked";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["blocked", "true", "flags.0?true"],
            ["blocked_my_stories_from", "true", "flags.1?true"],
            ["peer_id", _Peer_, "Peer"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.blocked ?? null, "true", "flags.0?true"],
            [this.blocked_my_stories_from ?? null, "true", "flags.1?true"],
            [this.peer_id, _Peer_, "Peer"],
        ];
    }
    constructor(params) {
        super();
        /** Whether the peer was blocked or unblocked */
        Object.defineProperty(this, "blocked", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether the peer was added/removed to/from the story blocklist; if not set, this update affects the main blocklist, see [here »](https://core.telegram.org/api/block) for more info. */
        Object.defineProperty(this, "blocked_my_stories_from", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The (un)blocked peer */
        Object.defineProperty(this, "peer_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.blocked = params.blocked;
        this.blocked_my_stories_from = params.blocked_my_stories_from;
        this.peer_id = params.peer_id;
    }
}
/** A user is typing in a [supergroup, channel](https://core.telegram.org/api/channel) or [message thread](https://core.telegram.org/api/threads) */
export class UpdateChannelUserTyping_ extends _Update_ {
    get [id]() {
        return 0x8C88C923;
    }
    static get [name]() {
        return "updateChannelUserTyping";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["channel_id", "bigint", "long"],
            ["top_msg_id", "number", "flags.0?int"],
            ["from_id", _Peer_, "Peer"],
            ["action", _SendMessageAction_, "SendMessageAction"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.channel_id, "bigint", "long"],
            [this.top_msg_id ?? null, "number", "flags.0?int"],
            [this.from_id, _Peer_, "Peer"],
            [this.action, _SendMessageAction_, "SendMessageAction"],
        ];
    }
    constructor(params) {
        super();
        /** Channel ID */
        Object.defineProperty(this, "channel_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Thread ID](https://core.telegram.org/api/threads) */
        Object.defineProperty(this, "top_msg_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The peer that is typing */
        Object.defineProperty(this, "from_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether the user is typing, sending a media or doing something else */
        Object.defineProperty(this, "action", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.channel_id = params.channel_id;
        this.top_msg_id = params.top_msg_id;
        this.from_id = params.from_id;
        this.action = params.action;
    }
}
/** Some messages were pinned in a chat */
export class UpdatePinnedMessages_ extends _Update_ {
    get [id]() {
        return 0xED85EAB5;
    }
    static get [name]() {
        return "updatePinnedMessages";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["pinned", "true", "flags.0?true"],
            ["peer", _Peer_, "Peer"],
            ["messages", ["number"], "Vector<int>"],
            ["pts", "number", "int"],
            ["pts_count", "number", "int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.pinned ?? null, "true", "flags.0?true"],
            [this.peer, _Peer_, "Peer"],
            [this.messages, ["number"], "Vector<int>"],
            [this.pts, "number", "int"],
            [this.pts_count, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Whether the messages were pinned or unpinned */
        Object.defineProperty(this, "pinned", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Peer */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Message IDs */
        Object.defineProperty(this, "messages", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Event count after generation](https://core.telegram.org/api/updates) */
        Object.defineProperty(this, "pts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Number of events that were generated](https://core.telegram.org/api/updates) */
        Object.defineProperty(this, "pts_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.pinned = params.pinned;
        this.peer = params.peer;
        this.messages = params.messages;
        this.pts = params.pts;
        this.pts_count = params.pts_count;
    }
}
/** Messages were pinned/unpinned in a [channel/supergroup](https://core.telegram.org/api/channel) */
export class UpdatePinnedChannelMessages_ extends _Update_ {
    get [id]() {
        return 0x5BB98608;
    }
    static get [name]() {
        return "updatePinnedChannelMessages";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["pinned", "true", "flags.0?true"],
            ["channel_id", "bigint", "long"],
            ["messages", ["number"], "Vector<int>"],
            ["pts", "number", "int"],
            ["pts_count", "number", "int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.pinned ?? null, "true", "flags.0?true"],
            [this.channel_id, "bigint", "long"],
            [this.messages, ["number"], "Vector<int>"],
            [this.pts, "number", "int"],
            [this.pts_count, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Whether the messages were pinned or unpinned */
        Object.defineProperty(this, "pinned", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Channel ID */
        Object.defineProperty(this, "channel_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Messages */
        Object.defineProperty(this, "messages", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Event count after generation](https://core.telegram.org/api/updates) */
        Object.defineProperty(this, "pts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Number of events that were generated](https://core.telegram.org/api/updates) */
        Object.defineProperty(this, "pts_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.pinned = params.pinned;
        this.channel_id = params.channel_id;
        this.messages = params.messages;
        this.pts = params.pts;
        this.pts_count = params.pts_count;
    }
}
/** A new chat is available */
export class UpdateChat_ extends _Update_ {
    get [id]() {
        return 0xF89A6A4E;
    }
    static get [name]() {
        return "updateChat";
    }
    static get [paramDesc]() {
        return [
            ["chat_id", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.chat_id, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** Chat ID */
        Object.defineProperty(this, "chat_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.chat_id = params.chat_id;
    }
}
/** The participant list of a certain group call has changed */
export class UpdateGroupCallParticipants_ extends _Update_ {
    get [id]() {
        return 0xF2EBDB4E;
    }
    static get [name]() {
        return "updateGroupCallParticipants";
    }
    static get [paramDesc]() {
        return [
            ["call", _InputGroupCall_, "InputGroupCall"],
            ["participants", [_GroupCallParticipant_], "Vector<GroupCallParticipant>"],
            ["version", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.call, _InputGroupCall_, "InputGroupCall"],
            [this.participants, [_GroupCallParticipant_], "Vector<GroupCallParticipant>"],
            [this.version, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Group call */
        Object.defineProperty(this, "call", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New participant list */
        Object.defineProperty(this, "participants", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Version */
        Object.defineProperty(this, "version", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.call = params.call;
        this.participants = params.participants;
        this.version = params.version;
    }
}
/** A new groupcall was started */
export class UpdateGroupCall_ extends _Update_ {
    get [id]() {
        return 0x14B24500;
    }
    static get [name]() {
        return "updateGroupCall";
    }
    static get [paramDesc]() {
        return [
            ["chat_id", "bigint", "long"],
            ["call", _GroupCall_, "GroupCall"],
        ];
    }
    get [params]() {
        return [
            [this.chat_id, "bigint", "long"],
            [this.call, _GroupCall_, "GroupCall"],
        ];
    }
    constructor(params) {
        super();
        /** The [channel/supergroup](https://core.telegram.org/api/channel) where this group call or livestream takes place */
        Object.defineProperty(this, "chat_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Info about the group call or livestream */
        Object.defineProperty(this, "call", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.chat_id = params.chat_id;
        this.call = params.call;
    }
}
/** The Time-To-Live for messages sent by the current user in a specific chat has changed */
export class UpdatePeerHistoryTTL_ extends _Update_ {
    get [id]() {
        return 0xBB9BB9A5;
    }
    static get [name]() {
        return "updatePeerHistoryTTL";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["peer", _Peer_, "Peer"],
            ["ttl_period", "number", "flags.0?int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.peer, _Peer_, "Peer"],
            [this.ttl_period ?? null, "number", "flags.0?int"],
        ];
    }
    constructor(params) {
        super();
        /** The chat */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The new Time-To-Live */
        Object.defineProperty(this, "ttl_period", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.peer = params.peer;
        this.ttl_period = params.ttl_period;
    }
}
/** A user has joined or left a specific chat */
export class UpdateChatParticipant_ extends _Update_ {
    get [id]() {
        return 0xD087663A;
    }
    static get [name]() {
        return "updateChatParticipant";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["chat_id", "bigint", "long"],
            ["date", "number", "int"],
            ["actor_id", "bigint", "long"],
            ["user_id", "bigint", "long"],
            ["prev_participant", _ChatParticipant_, "flags.0?ChatParticipant"],
            ["new_participant", _ChatParticipant_, "flags.1?ChatParticipant"],
            ["invite", _ExportedChatInvite_, "flags.2?ExportedChatInvite"],
            ["qts", "number", "int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.chat_id, "bigint", "long"],
            [this.date, "number", "int"],
            [this.actor_id, "bigint", "long"],
            [this.user_id, "bigint", "long"],
            [this.prev_participant ?? null, _ChatParticipant_, "flags.0?ChatParticipant"],
            [this.new_participant ?? null, _ChatParticipant_, "flags.1?ChatParticipant"],
            [this.invite ?? null, _ExportedChatInvite_, "flags.2?ExportedChatInvite"],
            [this.qts, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** [Chat](https://core.telegram.org/api/channel) ID */
        Object.defineProperty(this, "chat_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** When did this event occur */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** User that triggered the change (inviter, admin that kicked the user, or the even the **user\_id** itself) */
        Object.defineProperty(this, "actor_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** User that was affected by the change */
        Object.defineProperty(this, "user_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Previous participant info (empty if this participant just joined) */
        Object.defineProperty(this, "prev_participant", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New participant info (empty if this participant just left) */
        Object.defineProperty(this, "new_participant", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The invite that was used to join the group */
        Object.defineProperty(this, "invite", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New **qts** value, see [updates »](https://core.telegram.org/api/updates) for more info. */
        Object.defineProperty(this, "qts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.chat_id = params.chat_id;
        this.date = params.date;
        this.actor_id = params.actor_id;
        this.user_id = params.user_id;
        this.prev_participant = params.prev_participant;
        this.new_participant = params.new_participant;
        this.invite = params.invite;
        this.qts = params.qts;
    }
}
/** A participant has left, joined, was banned or admined in a [channel or supergroup](https://core.telegram.org/api/channel). */
export class UpdateChannelParticipant_ extends _Update_ {
    get [id]() {
        return 0x985D3ABB;
    }
    static get [name]() {
        return "updateChannelParticipant";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["via_chatlist", "true", "flags.3?true"],
            ["channel_id", "bigint", "long"],
            ["date", "number", "int"],
            ["actor_id", "bigint", "long"],
            ["user_id", "bigint", "long"],
            ["prev_participant", _ChannelParticipant_, "flags.0?ChannelParticipant"],
            ["new_participant", _ChannelParticipant_, "flags.1?ChannelParticipant"],
            ["invite", _ExportedChatInvite_, "flags.2?ExportedChatInvite"],
            ["qts", "number", "int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.via_chatlist ?? null, "true", "flags.3?true"],
            [this.channel_id, "bigint", "long"],
            [this.date, "number", "int"],
            [this.actor_id, "bigint", "long"],
            [this.user_id, "bigint", "long"],
            [this.prev_participant ?? null, _ChannelParticipant_, "flags.0?ChannelParticipant"],
            [this.new_participant ?? null, _ChannelParticipant_, "flags.1?ChannelParticipant"],
            [this.invite ?? null, _ExportedChatInvite_, "flags.2?ExportedChatInvite"],
            [this.qts, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Whether the participant joined using a [chat folder deep link »](https://core.telegram.org/api/links#chat-folder-links). */
        Object.defineProperty(this, "via_chatlist", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Channel ID */
        Object.defineProperty(this, "channel_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Date of the event */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** User that triggered the change (inviter, admin that kicked the user, or the even the **user\_id** itself) */
        Object.defineProperty(this, "actor_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** User that was affected by the change */
        Object.defineProperty(this, "user_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Previous participant status */
        Object.defineProperty(this, "prev_participant", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New participant status */
        Object.defineProperty(this, "new_participant", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Chat invite used to join the [channel/supergroup](https://core.telegram.org/api/channel) */
        Object.defineProperty(this, "invite", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New **qts** value, see [updates »](https://core.telegram.org/api/updates) for more info. */
        Object.defineProperty(this, "qts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.via_chatlist = params.via_chatlist;
        this.channel_id = params.channel_id;
        this.date = params.date;
        this.actor_id = params.actor_id;
        this.user_id = params.user_id;
        this.prev_participant = params.prev_participant;
        this.new_participant = params.new_participant;
        this.invite = params.invite;
        this.qts = params.qts;
    }
}
/** A bot was stopped or re-started. */
export class UpdateBotStopped_ extends _Update_ {
    get [id]() {
        return 0xC4870A49;
    }
    static get [name]() {
        return "updateBotStopped";
    }
    static get [paramDesc]() {
        return [
            ["user_id", "bigint", "long"],
            ["date", "number", "int"],
            ["stopped", "boolean", "Bool"],
            ["qts", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.user_id, "bigint", "long"],
            [this.date, "number", "int"],
            [this.stopped, "boolean", "Bool"],
            [this.qts, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** The user ID */
        Object.defineProperty(this, "user_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** When did this action occur */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether the bot was stopped or started */
        Object.defineProperty(this, "stopped", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New **qts** value, see [updates »](https://core.telegram.org/api/updates) for more info. */
        Object.defineProperty(this, "qts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.user_id = params.user_id;
        this.date = params.date;
        this.stopped = params.stopped;
        this.qts = params.qts;
    }
}
/** New WebRTC parameters */
export class UpdateGroupCallConnection_ extends _Update_ {
    get [id]() {
        return 0x0B783982;
    }
    static get [name]() {
        return "updateGroupCallConnection";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["presentation", "true", "flags.0?true"],
            ["params", _DataJSON_, "DataJSON"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.presentation ?? null, "true", "flags.0?true"],
            [this.params, _DataJSON_, "DataJSON"],
        ];
    }
    constructor(params) {
        super();
        /** Are these parameters related to the screen capture session currently in progress? */
        Object.defineProperty(this, "presentation", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** WebRTC parameters */
        Object.defineProperty(this, "params", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.presentation = params.presentation;
        this.params = params.params;
    }
}
/** The [command set](https://core.telegram.org/api/bots/commands) of a certain bot in a certain chat has changed. */
export class UpdateBotCommands_ extends _Update_ {
    get [id]() {
        return 0x4D712F2E;
    }
    static get [name]() {
        return "updateBotCommands";
    }
    static get [paramDesc]() {
        return [
            ["peer", _Peer_, "Peer"],
            ["bot_id", "bigint", "long"],
            ["commands", [_BotCommand_], "Vector<BotCommand>"],
        ];
    }
    get [params]() {
        return [
            [this.peer, _Peer_, "Peer"],
            [this.bot_id, "bigint", "long"],
            [this.commands, [_BotCommand_], "Vector<BotCommand>"],
        ];
    }
    constructor(params) {
        super();
        /** The affected chat */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the bot that changed its command set */
        Object.defineProperty(this, "bot_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New bot commands */
        Object.defineProperty(this, "commands", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.peer = params.peer;
        this.bot_id = params.bot_id;
        this.commands = params.commands;
    }
}
/** Someone has requested to join a chat or channel */
export class UpdatePendingJoinRequests_ extends _Update_ {
    get [id]() {
        return 0x7063C3DB;
    }
    static get [name]() {
        return "updatePendingJoinRequests";
    }
    static get [paramDesc]() {
        return [
            ["peer", _Peer_, "Peer"],
            ["requests_pending", "number", "int"],
            ["recent_requesters", ["bigint"], "Vector<long>"],
        ];
    }
    get [params]() {
        return [
            [this.peer, _Peer_, "Peer"],
            [this.requests_pending, "number", "int"],
            [this.recent_requesters, ["bigint"], "Vector<long>"],
        ];
    }
    constructor(params) {
        super();
        /** Chat or channel */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of pending [join requests »](https://core.telegram.org/api/invites#join-requests) for the chat or channel */
        Object.defineProperty(this, "requests_pending", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** IDs of users that have recently requested to join */
        Object.defineProperty(this, "recent_requesters", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.peer = params.peer;
        this.requests_pending = params.requests_pending;
        this.recent_requesters = params.recent_requesters;
    }
}
/** Someone has requested to join a chat or channel (bots only, users will receive an [updatePendingJoinRequests](https://core.telegram.org/constructor/updatePendingJoinRequests), instead) */
export class UpdateBotChatInviteRequester_ extends _Update_ {
    get [id]() {
        return 0x11DFA986;
    }
    static get [name]() {
        return "updateBotChatInviteRequester";
    }
    static get [paramDesc]() {
        return [
            ["peer", _Peer_, "Peer"],
            ["date", "number", "int"],
            ["user_id", "bigint", "long"],
            ["about", "string", "string"],
            ["invite", _ExportedChatInvite_, "ExportedChatInvite"],
            ["qts", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.peer, _Peer_, "Peer"],
            [this.date, "number", "int"],
            [this.user_id, "bigint", "long"],
            [this.about, "string", "string"],
            [this.invite, _ExportedChatInvite_, "ExportedChatInvite"],
            [this.qts, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** The chat or channel in question */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** When was the [join request »](https://core.telegram.org/api/invites#join-requests) made */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The user ID that is asking to join the chat or channel */
        Object.defineProperty(this, "user_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Bio of the user */
        Object.defineProperty(this, "about", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Chat invite link that was used by the user to send the [join request »](https://core.telegram.org/api/invites#join-requests) */
        Object.defineProperty(this, "invite", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [QTS](https://core.telegram.org/api/updates) event sequence identifier */
        Object.defineProperty(this, "qts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.peer = params.peer;
        this.date = params.date;
        this.user_id = params.user_id;
        this.about = params.about;
        this.invite = params.invite;
        this.qts = params.qts;
    }
}
/** New [message reactions »](https://core.telegram.org/api/reactions) are available */
export class UpdateMessageReactions_ extends _Update_ {
    get [id]() {
        return 0x5E1B3CB8;
    }
    static get [name]() {
        return "updateMessageReactions";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["peer", _Peer_, "Peer"],
            ["msg_id", "number", "int"],
            ["top_msg_id", "number", "flags.0?int"],
            ["reactions", _MessageReactions_, "MessageReactions"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.peer, _Peer_, "Peer"],
            [this.msg_id, "number", "int"],
            [this.top_msg_id ?? null, "number", "flags.0?int"],
            [this.reactions, _MessageReactions_, "MessageReactions"],
        ];
    }
    constructor(params) {
        super();
        /** Peer */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Message ID */
        Object.defineProperty(this, "msg_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Forum topic ID](https://core.telegram.org/api/forum#forum-topics) */
        Object.defineProperty(this, "top_msg_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Reactions */
        Object.defineProperty(this, "reactions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.peer = params.peer;
        this.msg_id = params.msg_id;
        this.top_msg_id = params.top_msg_id;
        this.reactions = params.reactions;
    }
}
/** The list of installed [attachment menu entries »](https://core.telegram.org/api/bots/attach) has changed, use [messages.getAttachMenuBots](https://core.telegram.org/method/messages.getAttachMenuBots) to fetch the updated list. */
export class UpdateAttachMenuBots_ extends _Update_ {
    get [id]() {
        return 0x17B7A20B;
    }
    static get [name]() {
        return "updateAttachMenuBots";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Indicates to a bot that a webview was closed and an inline message was sent on behalf of the user using [messages.sendWebViewResultMessage](https://core.telegram.org/method/messages.sendWebViewResultMessage) */
export class UpdateWebViewResultSent_ extends _Update_ {
    get [id]() {
        return 0x1592B79D;
    }
    static get [name]() {
        return "updateWebViewResultSent";
    }
    static get [paramDesc]() {
        return [
            ["query_id", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.query_id, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** Web app interaction ID */
        Object.defineProperty(this, "query_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.query_id = params.query_id;
    }
}
/** The menu button behavior for the specified bot has changed */
export class UpdateBotMenuButton_ extends _Update_ {
    get [id]() {
        return 0x14B85813;
    }
    static get [name]() {
        return "updateBotMenuButton";
    }
    static get [paramDesc]() {
        return [
            ["bot_id", "bigint", "long"],
            ["button", _BotMenuButton_, "BotMenuButton"],
        ];
    }
    get [params]() {
        return [
            [this.bot_id, "bigint", "long"],
            [this.button, _BotMenuButton_, "BotMenuButton"],
        ];
    }
    constructor(params) {
        super();
        /** Bot ID */
        Object.defineProperty(this, "bot_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New menu button */
        Object.defineProperty(this, "button", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.bot_id = params.bot_id;
        this.button = params.button;
    }
}
/** The list of saved notification sounds has changed, use [account.getSavedRingtones](https://core.telegram.org/method/account.getSavedRingtones) to fetch the new list. */
export class UpdateSavedRingtones_ extends _Update_ {
    get [id]() {
        return 0x74D8BE99;
    }
    static get [name]() {
        return "updateSavedRingtones";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** A pending [voice message transcription »](https://core.telegram.org/api/transcribe) initiated with [messages.transcribeAudio](https://core.telegram.org/method/messages.transcribeAudio) was updated. */
export class UpdateTranscribedAudio_ extends _Update_ {
    get [id]() {
        return 0x0084CD5A;
    }
    static get [name]() {
        return "updateTranscribedAudio";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["pending", "true", "flags.0?true"],
            ["peer", _Peer_, "Peer"],
            ["msg_id", "number", "int"],
            ["transcription_id", "bigint", "long"],
            ["text", "string", "string"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.pending ?? null, "true", "flags.0?true"],
            [this.peer, _Peer_, "Peer"],
            [this.msg_id, "number", "int"],
            [this.transcription_id, "bigint", "long"],
            [this.text, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Whether this transcription is still pending and further [updateTranscribedAudio](https://core.telegram.org/constructor/updateTranscribedAudio) about it will be sent in the future. */
        Object.defineProperty(this, "pending", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Peer of the transcribed message */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Transcribed message ID */
        Object.defineProperty(this, "msg_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Transcription ID */
        Object.defineProperty(this, "transcription_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Transcribed text */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.pending = params.pending;
        this.peer = params.peer;
        this.msg_id = params.msg_id;
        this.transcription_id = params.transcription_id;
        this.text = params.text;
    }
}
/** Some featured [custom emoji stickers](https://core.telegram.org/api/custom-emoji) were marked as read */
export class UpdateReadFeaturedEmojiStickers_ extends _Update_ {
    get [id]() {
        return 0xFB4C496C;
    }
    static get [name]() {
        return "updateReadFeaturedEmojiStickers";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** The [emoji status](https://core.telegram.org/api/emoji-status) of a certain user has changed */
export class UpdateUserEmojiStatus_ extends _Update_ {
    get [id]() {
        return 0x28373599;
    }
    static get [name]() {
        return "updateUserEmojiStatus";
    }
    static get [paramDesc]() {
        return [
            ["user_id", "bigint", "long"],
            ["emoji_status", _EmojiStatus_, "EmojiStatus"],
        ];
    }
    get [params]() {
        return [
            [this.user_id, "bigint", "long"],
            [this.emoji_status, _EmojiStatus_, "EmojiStatus"],
        ];
    }
    constructor(params) {
        super();
        /** User ID */
        Object.defineProperty(this, "user_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New [emoji status](https://core.telegram.org/api/emoji-status) */
        Object.defineProperty(this, "emoji_status", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.user_id = params.user_id;
        this.emoji_status = params.emoji_status;
    }
}
/** The list of recent [emoji statuses](https://core.telegram.org/api/emoji-status) has changed */
export class UpdateRecentEmojiStatuses_ extends _Update_ {
    get [id]() {
        return 0x30F443DB;
    }
    static get [name]() {
        return "updateRecentEmojiStatuses";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** The list of recent [message reactions](https://core.telegram.org/api/reactions) has changed */
export class UpdateRecentReactions_ extends _Update_ {
    get [id]() {
        return 0x6F7863F4;
    }
    static get [name]() {
        return "updateRecentReactions";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** A stickerset was just moved to top, [see here for more info »](https://core.telegram.org/api/stickers#recent-stickersets) */
export class UpdateMoveStickerSetToTop_ extends _Update_ {
    get [id]() {
        return 0x86FCCF85;
    }
    static get [name]() {
        return "updateMoveStickerSetToTop";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["masks", "true", "flags.0?true"],
            ["emojis", "true", "flags.1?true"],
            ["stickerset", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.masks ?? null, "true", "flags.0?true"],
            [this.emojis ?? null, "true", "flags.1?true"],
            [this.stickerset, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** This update is referring to a [mask stickerset](https://core.telegram.org/api/stickers#mask-stickers) */
        Object.defineProperty(this, "masks", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** This update is referring to a [custom emoji stickerset](https://core.telegram.org/api/custom-emoji) */
        Object.defineProperty(this, "emojis", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Stickerset](https://core.telegram.org/api/stickers) ID */
        Object.defineProperty(this, "stickerset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.masks = params.masks;
        this.emojis = params.emojis;
        this.stickerset = params.stickerset;
    }
}
/** Extended media update */
export class UpdateMessageExtendedMedia_ extends _Update_ {
    get [id]() {
        return 0x5A73A98C;
    }
    static get [name]() {
        return "updateMessageExtendedMedia";
    }
    static get [paramDesc]() {
        return [
            ["peer", _Peer_, "Peer"],
            ["msg_id", "number", "int"],
            ["extended_media", _MessageExtendedMedia_, "MessageExtendedMedia"],
        ];
    }
    get [params]() {
        return [
            [this.peer, _Peer_, "Peer"],
            [this.msg_id, "number", "int"],
            [this.extended_media, _MessageExtendedMedia_, "MessageExtendedMedia"],
        ];
    }
    constructor(params) {
        super();
        /** Peer */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Message ID */
        Object.defineProperty(this, "msg_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Extended media */
        Object.defineProperty(this, "extended_media", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.peer = params.peer;
        this.msg_id = params.msg_id;
        this.extended_media = params.extended_media;
    }
}
/** A [forum topic »](https://core.telegram.org/api/forum#forum-topics) was pinned or unpinned. */
export class UpdateChannelPinnedTopic_ extends _Update_ {
    get [id]() {
        return 0x192EFBE3;
    }
    static get [name]() {
        return "updateChannelPinnedTopic";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["pinned", "true", "flags.0?true"],
            ["channel_id", "bigint", "long"],
            ["topic_id", "number", "int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.pinned ?? null, "true", "flags.0?true"],
            [this.channel_id, "bigint", "long"],
            [this.topic_id, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Whether the topic was pinned or unpinned */
        Object.defineProperty(this, "pinned", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The forum ID */
        Object.defineProperty(this, "channel_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The topic ID */
        Object.defineProperty(this, "topic_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.pinned = params.pinned;
        this.channel_id = params.channel_id;
        this.topic_id = params.topic_id;
    }
}
/** The [pinned topics](https://core.telegram.org/api/forum#forum-topics) of a forum have changed. */
export class UpdateChannelPinnedTopics_ extends _Update_ {
    get [id]() {
        return 0xFE198602;
    }
    static get [name]() {
        return "updateChannelPinnedTopics";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["channel_id", "bigint", "long"],
            ["order", ["number"], "flags.0?Vector<int>"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.channel_id, "bigint", "long"],
            [this.order ?? null, ["number"], "flags.0?Vector<int>"],
        ];
    }
    constructor(params) {
        super();
        /** Forum ID. */
        Object.defineProperty(this, "channel_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Ordered list containing the IDs of all pinned topics. */
        Object.defineProperty(this, "order", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.channel_id = params.channel_id;
        this.order = params.order;
    }
}
/** User information was updated, it must be refetched using [users.getFullUser](https://core.telegram.org/method/users.getFullUser). */
export class UpdateUser_ extends _Update_ {
    get [id]() {
        return 0x20529438;
    }
    static get [name]() {
        return "updateUser";
    }
    static get [paramDesc]() {
        return [
            ["user_id", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.user_id, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** User ID */
        Object.defineProperty(this, "user_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.user_id = params.user_id;
    }
}
/** Media autosave settings have changed and must be refetched using [account.getAutoSaveSettings](https://core.telegram.org/method/account.getAutoSaveSettings). */
export class UpdateAutoSaveSettings_ extends _Update_ {
    get [id]() {
        return 0xEC05B097;
    }
    static get [name]() {
        return "updateAutoSaveSettings";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** 0-N updates of this type may be returned only when invoking [messages.addChatUser](https://core.telegram.org/method/messages.addChatUser), [channels.inviteToChannel](https://core.telegram.org/method/channels.inviteToChannel) or [messages.createChat](https://core.telegram.org/method/messages.createChat): it indicates we couldn't add a user to a chat because of their privacy settings; if required, an [invite link](https://core.telegram.org/api/invites) can be shared with the user, instead. */
export class UpdateGroupInvitePrivacyForbidden_ extends _Update_ {
    get [id]() {
        return 0xCCF08AD6;
    }
    static get [name]() {
        return "updateGroupInvitePrivacyForbidden";
    }
    static get [paramDesc]() {
        return [
            ["user_id", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.user_id, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** ID of the user we couldn't add. */
        Object.defineProperty(this, "user_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.user_id = params.user_id;
    }
}
/** A new story was posted. */
export class UpdateStory_ extends _Update_ {
    get [id]() {
        return 0x75B3B798;
    }
    static get [name]() {
        return "updateStory";
    }
    static get [paramDesc]() {
        return [
            ["peer", _Peer_, "Peer"],
            ["story", _StoryItem_, "StoryItem"],
        ];
    }
    get [params]() {
        return [
            [this.peer, _Peer_, "Peer"],
            [this.story, _StoryItem_, "StoryItem"],
        ];
    }
    constructor(params) {
        super();
        /** ID of the poster. */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The story that was posted. */
        Object.defineProperty(this, "story", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.peer = params.peer;
        this.story = params.story;
    }
}
/** Stories of a specific peer were marked as read. */
export class UpdateReadStories_ extends _Update_ {
    get [id]() {
        return 0xF74E932B;
    }
    static get [name]() {
        return "updateReadStories";
    }
    static get [paramDesc]() {
        return [
            ["peer", _Peer_, "Peer"],
            ["max_id", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.peer, _Peer_, "Peer"],
            [this.max_id, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** The peer */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the last story that was marked as read */
        Object.defineProperty(this, "max_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.peer = params.peer;
        this.max_id = params.max_id;
    }
}
/** A story was successfully uploaded. */
export class UpdateStoryID_ extends _Update_ {
    get [id]() {
        return 0x1BF335B9;
    }
    static get [name]() {
        return "updateStoryID";
    }
    static get [paramDesc]() {
        return [
            ["id", "number", "int"],
            ["random_id", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.id, "number", "int"],
            [this.random_id, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** The `id` that was attributed to the story. */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The `random_id` that was passed to [stories.sendStory](https://core.telegram.org/method/stories.sendStory). */
        Object.defineProperty(this, "random_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
        this.random_id = params.random_id;
    }
}
/** Indicates that [stories stealth mode](https://core.telegram.org/api/stories#stealth-mode) was activated. */
export class UpdateStoriesStealthMode_ extends _Update_ {
    get [id]() {
        return 0x2C084DC1;
    }
    static get [name]() {
        return "updateStoriesStealthMode";
    }
    static get [paramDesc]() {
        return [
            ["stealth_mode", _StoriesStealthMode_, "StoriesStealthMode"],
        ];
    }
    get [params]() {
        return [
            [this.stealth_mode, _StoriesStealthMode_, "StoriesStealthMode"],
        ];
    }
    constructor(params) {
        super();
        /** Information about the current [stealth mode](https://core.telegram.org/api/stories#stealth-mode) session. */
        Object.defineProperty(this, "stealth_mode", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.stealth_mode = params.stealth_mode;
    }
}
/** Indicates we [reacted to a story »](https://core.telegram.org/api/stories#reactions). */
export class UpdateSentStoryReaction_ extends _Update_ {
    get [id]() {
        return 0x7D627683;
    }
    static get [name]() {
        return "updateSentStoryReaction";
    }
    static get [paramDesc]() {
        return [
            ["peer", _Peer_, "Peer"],
            ["story_id", "number", "int"],
            ["reaction", _Reaction_, "Reaction"],
        ];
    }
    get [params]() {
        return [
            [this.peer, _Peer_, "Peer"],
            [this.story_id, "number", "int"],
            [this.reaction, _Reaction_, "Reaction"],
        ];
    }
    constructor(params) {
        super();
        /** The peer that sent the story */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the story we reacted to */
        Object.defineProperty(this, "story_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The reaction that was sent */
        Object.defineProperty(this, "reaction", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.peer = params.peer;
        this.story_id = params.story_id;
        this.reaction = params.reaction;
    }
}
/** A [channel boost](https://core.telegram.org/api/boost) has changed (bots only) */
export class UpdateBotChatBoost_ extends _Update_ {
    get [id]() {
        return 0x904DD49C;
    }
    static get [name]() {
        return "updateBotChatBoost";
    }
    static get [paramDesc]() {
        return [
            ["peer", _Peer_, "Peer"],
            ["boost", _Boost_, "Boost"],
            ["qts", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.peer, _Peer_, "Peer"],
            [this.boost, _Boost_, "Boost"],
            [this.qts, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Channel */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New boost information */
        Object.defineProperty(this, "boost", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [QTS](https://core.telegram.org/api/updates) event sequence identifier */
        Object.defineProperty(this, "qts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.peer = params.peer;
        this.boost = params.boost;
        this.qts = params.qts;
    }
}
/** Users may also choose to display messages from all topics as if they were sent to a normal group, using a "View as messages" setting in the local client.
This setting only affects the current account, and is synced to other logged in sessions using the [channels.toggleViewForumAsMessages](https://core.telegram.org/method/channels.toggleViewForumAsMessages) method; invoking this method will update the value of the `view_forum_as_messages` flag of [channelFull](https://core.telegram.org/constructor/channelFull) or [dialog](https://core.telegram.org/constructor/dialog) and emit an [updateChannelViewForumAsMessages](https://core.telegram.org/constructor/updateChannelViewForumAsMessages). */
export class UpdateChannelViewForumAsMessages_ extends _Update_ {
    get [id]() {
        return 0x07B68920;
    }
    static get [name]() {
        return "updateChannelViewForumAsMessages";
    }
    static get [paramDesc]() {
        return [
            ["channel_id", "bigint", "long"],
            ["enabled", "boolean", "Bool"],
        ];
    }
    get [params]() {
        return [
            [this.channel_id, "bigint", "long"],
            [this.enabled, "boolean", "Bool"],
        ];
    }
    constructor(params) {
        super();
        /** The forum ID */
        Object.defineProperty(this, "channel_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The new value of the toggle. */
        Object.defineProperty(this, "enabled", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.channel_id = params.channel_id;
        this.enabled = params.enabled;
    }
}
/** The [wallpaper »](https://core.telegram.org/api/wallpapers) of a given peer has changed. */
export class UpdatePeerWallpaper_ extends _Update_ {
    get [id]() {
        return 0xAE3F101D;
    }
    static get [name]() {
        return "updatePeerWallpaper";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["wallpaper_overridden", "true", "flags.1?true"],
            ["peer", _Peer_, "Peer"],
            ["wallpaper", _WallPaper_, "flags.0?WallPaper"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.wallpaper_overridden ?? null, "true", "flags.1?true"],
            [this.peer, _Peer_, "Peer"],
            [this.wallpaper ?? null, _WallPaper_, "flags.0?WallPaper"],
        ];
    }
    constructor(params) {
        super();
        /** Whether the other user has chosen a custom wallpaper for us using [messages.setChatWallPaper](https://core.telegram.org/method/messages.setChatWallPaper) and the `for_both` flag, see [here »](https://core.telegram.org/api/wallpapers#installing-wallpapers-in-a-specific-chat-or-channel) for more info. */
        Object.defineProperty(this, "wallpaper_overridden", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The peer where the wallpaper has changed. */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The new wallpaper, if none the wallpaper was removed and the default wallpaper should be used. */
        Object.defineProperty(this, "wallpaper", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.wallpaper_overridden = params.wallpaper_overridden;
        this.peer = params.peer;
        this.wallpaper = params.wallpaper;
    }
}
/** Bots only: a user has changed their reactions on a message with public reactions. */
export class UpdateBotMessageReaction_ extends _Update_ {
    get [id]() {
        return 0xAC21D3CE;
    }
    static get [name]() {
        return "updateBotMessageReaction";
    }
    static get [paramDesc]() {
        return [
            ["peer", _Peer_, "Peer"],
            ["msg_id", "number", "int"],
            ["date", "number", "int"],
            ["actor", _Peer_, "Peer"],
            ["old_reactions", [_Reaction_], "Vector<Reaction>"],
            ["new_reactions", [_Reaction_], "Vector<Reaction>"],
            ["qts", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.peer, _Peer_, "Peer"],
            [this.msg_id, "number", "int"],
            [this.date, "number", "int"],
            [this.actor, _Peer_, "Peer"],
            [this.old_reactions, [_Reaction_], "Vector<Reaction>"],
            [this.new_reactions, [_Reaction_], "Vector<Reaction>"],
            [this.qts, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Peer of the reacted-to message. */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the reacted-to message. */
        Object.defineProperty(this, "msg_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Date of the change. */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The user that (un)reacted to the message. */
        Object.defineProperty(this, "actor", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Old reactions */
        Object.defineProperty(this, "old_reactions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New reactions */
        Object.defineProperty(this, "new_reactions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [QTS](https://core.telegram.org/api/updates) event sequence identifier */
        Object.defineProperty(this, "qts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.peer = params.peer;
        this.msg_id = params.msg_id;
        this.date = params.date;
        this.actor = params.actor;
        this.old_reactions = params.old_reactions;
        this.new_reactions = params.new_reactions;
        this.qts = params.qts;
    }
}
/** Bots only: the number of reactions on a message with anonymous reactions has changed. */
export class UpdateBotMessageReactions_ extends _Update_ {
    get [id]() {
        return 0x09CB7759;
    }
    static get [name]() {
        return "updateBotMessageReactions";
    }
    static get [paramDesc]() {
        return [
            ["peer", _Peer_, "Peer"],
            ["msg_id", "number", "int"],
            ["date", "number", "int"],
            ["reactions", [_ReactionCount_], "Vector<ReactionCount>"],
            ["qts", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.peer, _Peer_, "Peer"],
            [this.msg_id, "number", "int"],
            [this.date, "number", "int"],
            [this.reactions, [_ReactionCount_], "Vector<ReactionCount>"],
            [this.qts, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Peer of the reacted-to message. */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the reacted-to message. */
        Object.defineProperty(this, "msg_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Date of the change. */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New reaction counters. */
        Object.defineProperty(this, "reactions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [QTS](https://core.telegram.org/api/updates) event sequence identifier */
        Object.defineProperty(this, "qts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.peer = params.peer;
        this.msg_id = params.msg_id;
        this.date = params.date;
        this.reactions = params.reactions;
        this.qts = params.qts;
    }
}
/** A [saved message dialog](https://core.telegram.org/api/saved-messages) was pinned/unpinned */
export class UpdateSavedDialogPinned_ extends _Update_ {
    get [id]() {
        return 0xAEAF9E74;
    }
    static get [name]() {
        return "updateSavedDialogPinned";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["pinned", "true", "flags.0?true"],
            ["peer", _DialogPeer_, "DialogPeer"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.pinned ?? null, "true", "flags.0?true"],
            [this.peer, _DialogPeer_, "DialogPeer"],
        ];
    }
    constructor(params) {
        super();
        /** Whether the dialog was pinned */
        Object.defineProperty(this, "pinned", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The dialog */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.pinned = params.pinned;
        this.peer = params.peer;
    }
}
/** [Pinned saved dialogs »](https://core.telegram.org/api/saved-messages) were updated */
export class UpdatePinnedSavedDialogs_ extends _Update_ {
    get [id]() {
        return 0x686C85A6;
    }
    static get [name]() {
        return "updatePinnedSavedDialogs";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["order", [_DialogPeer_], "flags.0?Vector<DialogPeer>"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.order ?? null, [_DialogPeer_], "flags.0?Vector<DialogPeer>"],
        ];
    }
    constructor(params) {
        super();
        /** New order of pinned saved dialogs */
        Object.defineProperty(this, "order", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.order = params?.order;
    }
}
export class UpdateSavedReactionTags_ extends _Update_ {
    get [id]() {
        return 0x39C67432;
    }
    static get [name]() {
        return "updateSavedReactionTags";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
export class UpdateSmsJob_ extends _Update_ {
    get [id]() {
        return 0xF16269D4;
    }
    static get [name]() {
        return "updateSmsJob";
    }
    static get [paramDesc]() {
        return [
            ["job_id", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.job_id, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "job_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.job_id = params.job_id;
    }
}
export class UpdateQuickReplies_ extends _Update_ {
    get [id]() {
        return 0xF9470AB2;
    }
    static get [name]() {
        return "updateQuickReplies";
    }
    static get [paramDesc]() {
        return [
            ["quick_replies", [_QuickReply_], "Vector<QuickReply>"],
        ];
    }
    get [params]() {
        return [
            [this.quick_replies, [_QuickReply_], "Vector<QuickReply>"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "quick_replies", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.quick_replies = params.quick_replies;
    }
}
export class UpdateNewQuickReply_ extends _Update_ {
    get [id]() {
        return 0xF53DA717;
    }
    static get [name]() {
        return "updateNewQuickReply";
    }
    static get [paramDesc]() {
        return [
            ["quick_reply", _QuickReply_, "QuickReply"],
        ];
    }
    get [params]() {
        return [
            [this.quick_reply, _QuickReply_, "QuickReply"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "quick_reply", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.quick_reply = params.quick_reply;
    }
}
export class UpdateDeleteQuickReply_ extends _Update_ {
    get [id]() {
        return 0x53E6F1EC;
    }
    static get [name]() {
        return "updateDeleteQuickReply";
    }
    static get [paramDesc]() {
        return [
            ["shortcut_id", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.shortcut_id, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "shortcut_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.shortcut_id = params.shortcut_id;
    }
}
export class UpdateQuickReplyMessage_ extends _Update_ {
    get [id]() {
        return 0x3E050D0F;
    }
    static get [name]() {
        return "updateQuickReplyMessage";
    }
    static get [paramDesc]() {
        return [
            ["message", _Message_, "Message"],
        ];
    }
    get [params]() {
        return [
            [this.message, _Message_, "Message"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "message", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.message = params.message;
    }
}
export class UpdateDeleteQuickReplyMessages_ extends _Update_ {
    get [id]() {
        return 0x566FE7CD;
    }
    static get [name]() {
        return "updateDeleteQuickReplyMessages";
    }
    static get [paramDesc]() {
        return [
            ["shortcut_id", "number", "int"],
            ["messages", ["number"], "Vector<int>"],
        ];
    }
    get [params]() {
        return [
            [this.shortcut_id, "number", "int"],
            [this.messages, ["number"], "Vector<int>"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "shortcut_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "messages", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.shortcut_id = params.shortcut_id;
        this.messages = params.messages;
    }
}
/** Updates state. */
export class updates_State_ extends _updates_State_ {
    get [id]() {
        return 0xA56C2A3E;
    }
    static get [name]() {
        return "updates.state";
    }
    static get [paramDesc]() {
        return [
            ["pts", "number", "int"],
            ["qts", "number", "int"],
            ["date", "number", "int"],
            ["seq", "number", "int"],
            ["unread_count", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.pts, "number", "int"],
            [this.qts, "number", "int"],
            [this.date, "number", "int"],
            [this.seq, "number", "int"],
            [this.unread_count, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Number of events occurred in a text box */
        Object.defineProperty(this, "pts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Position in a sequence of updates in secret chats. For further details refer to article [secret chats](https://core.telegram.org/api/end-to-end) */
        Object.defineProperty(this, "qts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Date of condition */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of sent updates */
        Object.defineProperty(this, "seq", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of unread messages */
        Object.defineProperty(this, "unread_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.pts = params.pts;
        this.qts = params.qts;
        this.date = params.date;
        this.seq = params.seq;
        this.unread_count = params.unread_count;
    }
}
/** No events. */
export class updates_DifferenceEmpty_ extends _updates_Difference_ {
    get [id]() {
        return 0x5D75A138;
    }
    static get [name]() {
        return "updates.differenceEmpty";
    }
    static get [paramDesc]() {
        return [
            ["date", "number", "int"],
            ["seq", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.date, "number", "int"],
            [this.seq, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Current date */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of sent updates */
        Object.defineProperty(this, "seq", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.date = params.date;
        this.seq = params.seq;
    }
}
/** Full list of occurred events. */
export class updates_Difference_ extends _updates_Difference_ {
    get [id]() {
        return 0x00F49CA0;
    }
    static get [name]() {
        return "updates.difference";
    }
    static get [paramDesc]() {
        return [
            ["new_messages", [_Message_], "Vector<Message>"],
            ["new_encrypted_messages", [_EncryptedMessage_], "Vector<EncryptedMessage>"],
            ["other_updates", [_Update_], "Vector<Update>"],
            ["chats", [_Chat_], "Vector<Chat>"],
            ["users", [_User_], "Vector<User>"],
            ["state", _updates_State_, "updates.State"],
        ];
    }
    get [params]() {
        return [
            [this.new_messages, [_Message_], "Vector<Message>"],
            [this.new_encrypted_messages, [_EncryptedMessage_], "Vector<EncryptedMessage>"],
            [this.other_updates, [_Update_], "Vector<Update>"],
            [this.chats, [_Chat_], "Vector<Chat>"],
            [this.users, [_User_], "Vector<User>"],
            [this.state, _updates_State_, "updates.State"],
        ];
    }
    constructor(params) {
        super();
        /** List of new messages */
        Object.defineProperty(this, "new_messages", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** List of new encrypted secret chat messages */
        Object.defineProperty(this, "new_encrypted_messages", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** List of updates */
        Object.defineProperty(this, "other_updates", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** List of chats mentioned in events */
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** List of users mentioned in events */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Current state */
        Object.defineProperty(this, "state", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.new_messages = params.new_messages;
        this.new_encrypted_messages = params.new_encrypted_messages;
        this.other_updates = params.other_updates;
        this.chats = params.chats;
        this.users = params.users;
        this.state = params.state;
    }
}
/** Incomplete list of occurred events. */
export class updates_DifferenceSlice_ extends _updates_Difference_ {
    get [id]() {
        return 0xA8FB1981;
    }
    static get [name]() {
        return "updates.differenceSlice";
    }
    static get [paramDesc]() {
        return [
            ["new_messages", [_Message_], "Vector<Message>"],
            ["new_encrypted_messages", [_EncryptedMessage_], "Vector<EncryptedMessage>"],
            ["other_updates", [_Update_], "Vector<Update>"],
            ["chats", [_Chat_], "Vector<Chat>"],
            ["users", [_User_], "Vector<User>"],
            ["intermediate_state", _updates_State_, "updates.State"],
        ];
    }
    get [params]() {
        return [
            [this.new_messages, [_Message_], "Vector<Message>"],
            [this.new_encrypted_messages, [_EncryptedMessage_], "Vector<EncryptedMessage>"],
            [this.other_updates, [_Update_], "Vector<Update>"],
            [this.chats, [_Chat_], "Vector<Chat>"],
            [this.users, [_User_], "Vector<User>"],
            [this.intermediate_state, _updates_State_, "updates.State"],
        ];
    }
    constructor(params) {
        super();
        /** List of new messages */
        Object.defineProperty(this, "new_messages", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New messages from the [encrypted event sequence](https://core.telegram.org/api/updates) */
        Object.defineProperty(this, "new_encrypted_messages", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** List of updates */
        Object.defineProperty(this, "other_updates", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** List of chats mentioned in events */
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** List of users mentioned in events */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Intermediary state */
        Object.defineProperty(this, "intermediate_state", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.new_messages = params.new_messages;
        this.new_encrypted_messages = params.new_encrypted_messages;
        this.other_updates = params.other_updates;
        this.chats = params.chats;
        this.users = params.users;
        this.intermediate_state = params.intermediate_state;
    }
}
/** The difference is [too long](https://core.telegram.org/api/updates#recovering-gaps), and the specified state must be used to refetch updates. */
export class updates_DifferenceTooLong_ extends _updates_Difference_ {
    get [id]() {
        return 0x4AFE8F6D;
    }
    static get [name]() {
        return "updates.differenceTooLong";
    }
    static get [paramDesc]() {
        return [
            ["pts", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.pts, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** The new state to use. */
        Object.defineProperty(this, "pts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.pts = params.pts;
    }
}
/** Too many updates, it is necessary to execute [updates.getDifference](https://core.telegram.org/method/updates.getDifference). */
export class UpdatesTooLong_ extends _Updates_ {
    get [id]() {
        return 0xE317AF7E;
    }
    static get [name]() {
        return "updatesTooLong";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Info about a message sent to (received from) another user */
export class UpdateShortMessage_ extends _Updates_ {
    get [id]() {
        return 0x313BC7F8;
    }
    static get [name]() {
        return "updateShortMessage";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["out", "true", "flags.1?true"],
            ["mentioned", "true", "flags.4?true"],
            ["media_unread", "true", "flags.5?true"],
            ["silent", "true", "flags.13?true"],
            ["id", "number", "int"],
            ["user_id", "bigint", "long"],
            ["message", "string", "string"],
            ["pts", "number", "int"],
            ["pts_count", "number", "int"],
            ["date", "number", "int"],
            ["fwd_from", _MessageFwdHeader_, "flags.2?MessageFwdHeader"],
            ["via_bot_id", "bigint", "flags.11?long"],
            ["reply_to", _MessageReplyHeader_, "flags.3?MessageReplyHeader"],
            ["entities", [_MessageEntity_], "flags.7?Vector<MessageEntity>"],
            ["ttl_period", "number", "flags.25?int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.out ?? null, "true", "flags.1?true"],
            [this.mentioned ?? null, "true", "flags.4?true"],
            [this.media_unread ?? null, "true", "flags.5?true"],
            [this.silent ?? null, "true", "flags.13?true"],
            [this.id, "number", "int"],
            [this.user_id, "bigint", "long"],
            [this.message, "string", "string"],
            [this.pts, "number", "int"],
            [this.pts_count, "number", "int"],
            [this.date, "number", "int"],
            [this.fwd_from ?? null, _MessageFwdHeader_, "flags.2?MessageFwdHeader"],
            [this.via_bot_id ?? null, "bigint", "flags.11?long"],
            [this.reply_to ?? null, _MessageReplyHeader_, "flags.3?MessageReplyHeader"],
            [this.entities ?? null, [_MessageEntity_], "flags.7?Vector<MessageEntity>"],
            [this.ttl_period ?? null, "number", "flags.25?int"],
        ];
    }
    constructor(params) {
        super();
        /** Whether the message is outgoing */
        Object.defineProperty(this, "out", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether we were mentioned in the message */
        Object.defineProperty(this, "mentioned", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether there are some **unread** mentions in this message */
        Object.defineProperty(this, "media_unread", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If true, the message is a silent message, no notifications should be triggered */
        Object.defineProperty(this, "silent", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The message ID */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The ID of the sender (if `outgoing` will be the ID of the destination) of the message */
        Object.defineProperty(this, "user_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The message */
        Object.defineProperty(this, "message", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [PTS](https://core.telegram.org/api/updates) */
        Object.defineProperty(this, "pts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [PTS count](https://core.telegram.org/api/updates) */
        Object.defineProperty(this, "pts_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [date](https://core.telegram.org/api/updates) */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Info about a forwarded message */
        Object.defineProperty(this, "fwd_from", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Info about the inline bot used to generate this message */
        Object.defineProperty(this, "via_bot_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Reply and [thread](https://core.telegram.org/api/threads) information */
        Object.defineProperty(this, "reply_to", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Entities](https://core.telegram.org/api/entities) for styled text */
        Object.defineProperty(this, "entities", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Time To Live of the message, once message.date+message.ttl\_period === time(), the message will be deleted on the server, and must be deleted locally as well. */
        Object.defineProperty(this, "ttl_period", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.out = params.out;
        this.mentioned = params.mentioned;
        this.media_unread = params.media_unread;
        this.silent = params.silent;
        this.id = params.id;
        this.user_id = params.user_id;
        this.message = params.message;
        this.pts = params.pts;
        this.pts_count = params.pts_count;
        this.date = params.date;
        this.fwd_from = params.fwd_from;
        this.via_bot_id = params.via_bot_id;
        this.reply_to = params.reply_to;
        this.entities = params.entities;
        this.ttl_period = params.ttl_period;
    }
}
/** Shortened constructor containing info on one new incoming text message from a chat */
export class UpdateShortChatMessage_ extends _Updates_ {
    get [id]() {
        return 0x4D6DEEA5;
    }
    static get [name]() {
        return "updateShortChatMessage";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["out", "true", "flags.1?true"],
            ["mentioned", "true", "flags.4?true"],
            ["media_unread", "true", "flags.5?true"],
            ["silent", "true", "flags.13?true"],
            ["id", "number", "int"],
            ["from_id", "bigint", "long"],
            ["chat_id", "bigint", "long"],
            ["message", "string", "string"],
            ["pts", "number", "int"],
            ["pts_count", "number", "int"],
            ["date", "number", "int"],
            ["fwd_from", _MessageFwdHeader_, "flags.2?MessageFwdHeader"],
            ["via_bot_id", "bigint", "flags.11?long"],
            ["reply_to", _MessageReplyHeader_, "flags.3?MessageReplyHeader"],
            ["entities", [_MessageEntity_], "flags.7?Vector<MessageEntity>"],
            ["ttl_period", "number", "flags.25?int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.out ?? null, "true", "flags.1?true"],
            [this.mentioned ?? null, "true", "flags.4?true"],
            [this.media_unread ?? null, "true", "flags.5?true"],
            [this.silent ?? null, "true", "flags.13?true"],
            [this.id, "number", "int"],
            [this.from_id, "bigint", "long"],
            [this.chat_id, "bigint", "long"],
            [this.message, "string", "string"],
            [this.pts, "number", "int"],
            [this.pts_count, "number", "int"],
            [this.date, "number", "int"],
            [this.fwd_from ?? null, _MessageFwdHeader_, "flags.2?MessageFwdHeader"],
            [this.via_bot_id ?? null, "bigint", "flags.11?long"],
            [this.reply_to ?? null, _MessageReplyHeader_, "flags.3?MessageReplyHeader"],
            [this.entities ?? null, [_MessageEntity_], "flags.7?Vector<MessageEntity>"],
            [this.ttl_period ?? null, "number", "flags.25?int"],
        ];
    }
    constructor(params) {
        super();
        /** Whether the message is outgoing */
        Object.defineProperty(this, "out", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether we were mentioned in this message */
        Object.defineProperty(this, "mentioned", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether the message contains some **unread** mentions */
        Object.defineProperty(this, "media_unread", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If true, the message is a silent message, no notifications should be triggered */
        Object.defineProperty(this, "silent", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the message */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the sender of the message */
        Object.defineProperty(this, "from_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the chat where the message was sent */
        Object.defineProperty(this, "chat_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Message */
        Object.defineProperty(this, "message", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [PTS](https://core.telegram.org/api/updates) */
        Object.defineProperty(this, "pts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [PTS count](https://core.telegram.org/api/updates) */
        Object.defineProperty(this, "pts_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [date](https://core.telegram.org/api/updates) */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Info about a forwarded message */
        Object.defineProperty(this, "fwd_from", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Info about the inline bot used to generate this message */
        Object.defineProperty(this, "via_bot_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Reply (thread) information */
        Object.defineProperty(this, "reply_to", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Entities](https://core.telegram.org/api/entities) for styled text */
        Object.defineProperty(this, "entities", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Time To Live of the message, once updateShortChatMessage.date+updateShortChatMessage.ttl\_period === time(), the message will be deleted on the server, and must be deleted locally as well. */
        Object.defineProperty(this, "ttl_period", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.out = params.out;
        this.mentioned = params.mentioned;
        this.media_unread = params.media_unread;
        this.silent = params.silent;
        this.id = params.id;
        this.from_id = params.from_id;
        this.chat_id = params.chat_id;
        this.message = params.message;
        this.pts = params.pts;
        this.pts_count = params.pts_count;
        this.date = params.date;
        this.fwd_from = params.fwd_from;
        this.via_bot_id = params.via_bot_id;
        this.reply_to = params.reply_to;
        this.entities = params.entities;
        this.ttl_period = params.ttl_period;
    }
}
/** Shortened constructor containing info on one update not requiring auxiliary data */
export class UpdateShort_ extends _Updates_ {
    get [id]() {
        return 0x78D4DEC1;
    }
    static get [name]() {
        return "updateShort";
    }
    static get [paramDesc]() {
        return [
            ["update", _Update_, "Update"],
            ["date", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.update, _Update_, "Update"],
            [this.date, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Update */
        Object.defineProperty(this, "update", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Date of event */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.update = params.update;
        this.date = params.date;
    }
}
/** Constructor for a group of updates. */
export class UpdatesCombined_ extends _Updates_ {
    get [id]() {
        return 0x725B04C3;
    }
    static get [name]() {
        return "updatesCombined";
    }
    static get [paramDesc]() {
        return [
            ["updates", [_Update_], "Vector<Update>"],
            ["users", [_User_], "Vector<User>"],
            ["chats", [_Chat_], "Vector<Chat>"],
            ["date", "number", "int"],
            ["seq_start", "number", "int"],
            ["seq", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.updates, [_Update_], "Vector<Update>"],
            [this.users, [_User_], "Vector<User>"],
            [this.chats, [_Chat_], "Vector<Chat>"],
            [this.date, "number", "int"],
            [this.seq_start, "number", "int"],
            [this.seq, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** List of updates */
        Object.defineProperty(this, "updates", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** List of users mentioned in updates */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** List of chats mentioned in updates */
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Current date */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Value **seq** for the earliest update in a group */
        Object.defineProperty(this, "seq_start", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Value **seq** for the latest update in a group */
        Object.defineProperty(this, "seq", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.updates = params.updates;
        this.users = params.users;
        this.chats = params.chats;
        this.date = params.date;
        this.seq_start = params.seq_start;
        this.seq = params.seq;
    }
}
/** Full constructor of updates */
export class Updates_ extends _Updates_ {
    get [id]() {
        return 0x74AE4240;
    }
    static get [name]() {
        return "updates";
    }
    static get [paramDesc]() {
        return [
            ["updates", [_Update_], "Vector<Update>"],
            ["users", [_User_], "Vector<User>"],
            ["chats", [_Chat_], "Vector<Chat>"],
            ["date", "number", "int"],
            ["seq", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.updates, [_Update_], "Vector<Update>"],
            [this.users, [_User_], "Vector<User>"],
            [this.chats, [_Chat_], "Vector<Chat>"],
            [this.date, "number", "int"],
            [this.seq, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** List of updates */
        Object.defineProperty(this, "updates", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** List of users mentioned in updates */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** List of chats mentioned in updates */
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Current date */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Total number of sent updates */
        Object.defineProperty(this, "seq", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.updates = params.updates;
        this.users = params.users;
        this.chats = params.chats;
        this.date = params.date;
        this.seq = params.seq;
    }
}
/** Shortened constructor containing info on one outgoing message to a contact (the destination chat has to be extracted from the method call that returned this object). */
export class UpdateShortSentMessage_ extends _Updates_ {
    get [id]() {
        return 0x9015E101;
    }
    static get [name]() {
        return "updateShortSentMessage";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["out", "true", "flags.1?true"],
            ["id", "number", "int"],
            ["pts", "number", "int"],
            ["pts_count", "number", "int"],
            ["date", "number", "int"],
            ["media", _MessageMedia_, "flags.9?MessageMedia"],
            ["entities", [_MessageEntity_], "flags.7?Vector<MessageEntity>"],
            ["ttl_period", "number", "flags.25?int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.out ?? null, "true", "flags.1?true"],
            [this.id, "number", "int"],
            [this.pts, "number", "int"],
            [this.pts_count, "number", "int"],
            [this.date, "number", "int"],
            [this.media ?? null, _MessageMedia_, "flags.9?MessageMedia"],
            [this.entities ?? null, [_MessageEntity_], "flags.7?Vector<MessageEntity>"],
            [this.ttl_period ?? null, "number", "flags.25?int"],
        ];
    }
    constructor(params) {
        super();
        /** Whether the message is outgoing */
        Object.defineProperty(this, "out", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the sent message */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [PTS](https://core.telegram.org/api/updates) */
        Object.defineProperty(this, "pts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [PTS count](https://core.telegram.org/api/updates) */
        Object.defineProperty(this, "pts_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [date](https://core.telegram.org/api/updates) */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Attached media */
        Object.defineProperty(this, "media", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Entities](https://core.telegram.org/api/entities) for styled text */
        Object.defineProperty(this, "entities", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Time To Live of the message, once message.date+message.ttl\_period === time(), the message will be deleted on the server, and must be deleted locally as well. */
        Object.defineProperty(this, "ttl_period", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.out = params.out;
        this.id = params.id;
        this.pts = params.pts;
        this.pts_count = params.pts_count;
        this.date = params.date;
        this.media = params.media;
        this.entities = params.entities;
        this.ttl_period = params.ttl_period;
    }
}
/** Full list of photos with auxiliary data. */
export class photos_Photos_ extends _photos_Photos_ {
    get [id]() {
        return 0x8DCA6AA5;
    }
    static get [name]() {
        return "photos.photos";
    }
    static get [paramDesc]() {
        return [
            ["photos", [_Photo_], "Vector<Photo>"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            [this.photos, [_Photo_], "Vector<Photo>"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** List of photos */
        Object.defineProperty(this, "photos", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** List of mentioned users */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.photos = params.photos;
        this.users = params.users;
    }
}
/** Incomplete list of photos with auxiliary data. */
export class photos_PhotosSlice_ extends _photos_Photos_ {
    get [id]() {
        return 0x15051F54;
    }
    static get [name]() {
        return "photos.photosSlice";
    }
    static get [paramDesc]() {
        return [
            ["count", "number", "int"],
            ["photos", [_Photo_], "Vector<Photo>"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            [this.count, "number", "int"],
            [this.photos, [_Photo_], "Vector<Photo>"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** Total number of photos */
        Object.defineProperty(this, "count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** List of photos */
        Object.defineProperty(this, "photos", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** List of mentioned users */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.count = params.count;
        this.photos = params.photos;
        this.users = params.users;
    }
}
/** Photo with auxiliary data. */
export class photos_Photo_ extends _photos_Photo_ {
    get [id]() {
        return 0x20212CA8;
    }
    static get [name]() {
        return "photos.photo";
    }
    static get [paramDesc]() {
        return [
            ["photo", _Photo_, "Photo"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            [this.photo, _Photo_, "Photo"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** Photo */
        Object.defineProperty(this, "photo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Users */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.photo = params.photo;
        this.users = params.users;
    }
}
/** File content. */
export class upload_File_ extends _upload_File_ {
    get [id]() {
        return 0x096A18D5;
    }
    static get [name]() {
        return "upload.file";
    }
    static get [paramDesc]() {
        return [
            ["type", _storage_FileType_, "storage.FileType"],
            ["mtime", "number", "int"],
            ["bytes", Uint8Array, "bytes"],
        ];
    }
    get [params]() {
        return [
            [this.type, _storage_FileType_, "storage.FileType"],
            [this.mtime, "number", "int"],
            [this.bytes, Uint8Array, "bytes"],
        ];
    }
    constructor(params) {
        super();
        /** File type */
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Modification time */
        Object.defineProperty(this, "mtime", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Binary data, file content */
        Object.defineProperty(this, "bytes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.type = params.type;
        this.mtime = params.mtime;
        this.bytes = params.bytes;
    }
}
/** The file must be downloaded from a [CDN DC](https://core.telegram.org/cdn). */
export class upload_FileCdnRedirect_ extends _upload_File_ {
    get [id]() {
        return 0xF18CDA44;
    }
    static get [name]() {
        return "upload.fileCdnRedirect";
    }
    static get [paramDesc]() {
        return [
            ["dc_id", "number", "int"],
            ["file_token", Uint8Array, "bytes"],
            ["encryption_key", Uint8Array, "bytes"],
            ["encryption_iv", Uint8Array, "bytes"],
            ["file_hashes", [_FileHash_], "Vector<FileHash>"],
        ];
    }
    get [params]() {
        return [
            [this.dc_id, "number", "int"],
            [this.file_token, Uint8Array, "bytes"],
            [this.encryption_key, Uint8Array, "bytes"],
            [this.encryption_iv, Uint8Array, "bytes"],
            [this.file_hashes, [_FileHash_], "Vector<FileHash>"],
        ];
    }
    constructor(params) {
        super();
        /** [CDN DC](https://core.telegram.org/cdn) ID */
        Object.defineProperty(this, "dc_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** File token (see [CDN files](https://core.telegram.org/cdn)) */
        Object.defineProperty(this, "file_token", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Encryption key (see [CDN files](https://core.telegram.org/cdn)) */
        Object.defineProperty(this, "encryption_key", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Encryption IV (see [CDN files](https://core.telegram.org/cdn)) */
        Object.defineProperty(this, "encryption_iv", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** File hashes (see [CDN files](https://core.telegram.org/cdn)) */
        Object.defineProperty(this, "file_hashes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.dc_id = params.dc_id;
        this.file_token = params.file_token;
        this.encryption_key = params.encryption_key;
        this.encryption_iv = params.encryption_iv;
        this.file_hashes = params.file_hashes;
    }
}
/** Data center */
export class DcOption_ extends _DcOption_ {
    get [id]() {
        return 0x18B7A10D;
    }
    static get [name]() {
        return "dcOption";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["ipv6", "true", "flags.0?true"],
            ["media_only", "true", "flags.1?true"],
            ["tcpo_only", "true", "flags.2?true"],
            ["cdn", "true", "flags.3?true"],
            ["static", "true", "flags.4?true"],
            ["this_port_only", "true", "flags.5?true"],
            ["id", "number", "int"],
            ["ip_address", "string", "string"],
            ["port", "number", "int"],
            ["secret", Uint8Array, "flags.10?bytes"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.ipv6 ?? null, "true", "flags.0?true"],
            [this.media_only ?? null, "true", "flags.1?true"],
            [this.tcpo_only ?? null, "true", "flags.2?true"],
            [this.cdn ?? null, "true", "flags.3?true"],
            [this.static ?? null, "true", "flags.4?true"],
            [this.this_port_only ?? null, "true", "flags.5?true"],
            [this.id, "number", "int"],
            [this.ip_address, "string", "string"],
            [this.port, "number", "int"],
            [this.secret ?? null, Uint8Array, "flags.10?bytes"],
        ];
    }
    constructor(params) {
        super();
        /** Whether the specified IP is an IPv6 address */
        Object.defineProperty(this, "ipv6", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this DC should only be used to [download or upload files](https://core.telegram.org/api/files) */
        Object.defineProperty(this, "media_only", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this DC only supports connection with [transport obfuscation](https://core.telegram.org/mtproto/mtproto-transports#transport-obfuscation) */
        Object.defineProperty(this, "tcpo_only", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this is a [CDN DC](https://core.telegram.org/cdn). */
        Object.defineProperty(this, "cdn", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, this IP should be used when connecting through a proxy */
        Object.defineProperty(this, "static", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, clients must connect using only the specified port, without trying any other port. */
        Object.defineProperty(this, "this_port_only", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** DC ID */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** IP address of DC */
        Object.defineProperty(this, "ip_address", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Port */
        Object.defineProperty(this, "port", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If the `tcpo_only` flag is set, specifies the secret to use when connecting using [transport obfuscation](https://core.telegram.org/mtproto/mtproto-transports#transport-obfuscation) */
        Object.defineProperty(this, "secret", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.ipv6 = params.ipv6;
        this.media_only = params.media_only;
        this.tcpo_only = params.tcpo_only;
        this.cdn = params.cdn;
        this.static = params.static;
        this.this_port_only = params.this_port_only;
        this.id = params.id;
        this.ip_address = params.ip_address;
        this.port = params.port;
        this.secret = params.secret;
    }
}
/** Current configuration */
export class Config_ extends _Config_ {
    get [id]() {
        return 0xCC1A241E;
    }
    static get [name]() {
        return "config";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["default_p2p_contacts", "true", "flags.3?true"],
            ["preload_featured_stickers", "true", "flags.4?true"],
            ["revoke_pm_inbox", "true", "flags.6?true"],
            ["blocked_mode", "true", "flags.8?true"],
            ["force_try_ipv6", "true", "flags.14?true"],
            ["date", "number", "int"],
            ["expires", "number", "int"],
            ["test_mode", "boolean", "Bool"],
            ["this_dc", "number", "int"],
            ["dc_options", [_DcOption_], "Vector<DcOption>"],
            ["dc_txt_domain_name", "string", "string"],
            ["chat_size_max", "number", "int"],
            ["megagroup_size_max", "number", "int"],
            ["forwarded_count_max", "number", "int"],
            ["online_update_period_ms", "number", "int"],
            ["offline_blur_timeout_ms", "number", "int"],
            ["offline_idle_timeout_ms", "number", "int"],
            ["online_cloud_timeout_ms", "number", "int"],
            ["notify_cloud_delay_ms", "number", "int"],
            ["notify_default_delay_ms", "number", "int"],
            ["push_chat_period_ms", "number", "int"],
            ["push_chat_limit", "number", "int"],
            ["edit_time_limit", "number", "int"],
            ["revoke_time_limit", "number", "int"],
            ["revoke_pm_time_limit", "number", "int"],
            ["rating_e_decay", "number", "int"],
            ["stickers_recent_limit", "number", "int"],
            ["channels_read_media_period", "number", "int"],
            ["tmp_sessions", "number", "flags.0?int"],
            ["call_receive_timeout_ms", "number", "int"],
            ["call_ring_timeout_ms", "number", "int"],
            ["call_connect_timeout_ms", "number", "int"],
            ["call_packet_timeout_ms", "number", "int"],
            ["me_url_prefix", "string", "string"],
            ["autoupdate_url_prefix", "string", "flags.7?string"],
            ["gif_search_username", "string", "flags.9?string"],
            ["venue_search_username", "string", "flags.10?string"],
            ["img_search_username", "string", "flags.11?string"],
            ["static_maps_provider", "string", "flags.12?string"],
            ["caption_length_max", "number", "int"],
            ["message_length_max", "number", "int"],
            ["webfile_dc_id", "number", "int"],
            ["suggested_lang_code", "string", "flags.2?string"],
            ["lang_pack_version", "number", "flags.2?int"],
            ["base_lang_pack_version", "number", "flags.2?int"],
            ["reactions_default", _Reaction_, "flags.15?Reaction"],
            ["autologin_token", "string", "flags.16?string"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.default_p2p_contacts ?? null, "true", "flags.3?true"],
            [this.preload_featured_stickers ?? null, "true", "flags.4?true"],
            [this.revoke_pm_inbox ?? null, "true", "flags.6?true"],
            [this.blocked_mode ?? null, "true", "flags.8?true"],
            [this.force_try_ipv6 ?? null, "true", "flags.14?true"],
            [this.date, "number", "int"],
            [this.expires, "number", "int"],
            [this.test_mode, "boolean", "Bool"],
            [this.this_dc, "number", "int"],
            [this.dc_options, [_DcOption_], "Vector<DcOption>"],
            [this.dc_txt_domain_name, "string", "string"],
            [this.chat_size_max, "number", "int"],
            [this.megagroup_size_max, "number", "int"],
            [this.forwarded_count_max, "number", "int"],
            [this.online_update_period_ms, "number", "int"],
            [this.offline_blur_timeout_ms, "number", "int"],
            [this.offline_idle_timeout_ms, "number", "int"],
            [this.online_cloud_timeout_ms, "number", "int"],
            [this.notify_cloud_delay_ms, "number", "int"],
            [this.notify_default_delay_ms, "number", "int"],
            [this.push_chat_period_ms, "number", "int"],
            [this.push_chat_limit, "number", "int"],
            [this.edit_time_limit, "number", "int"],
            [this.revoke_time_limit, "number", "int"],
            [this.revoke_pm_time_limit, "number", "int"],
            [this.rating_e_decay, "number", "int"],
            [this.stickers_recent_limit, "number", "int"],
            [this.channels_read_media_period, "number", "int"],
            [this.tmp_sessions ?? null, "number", "flags.0?int"],
            [this.call_receive_timeout_ms, "number", "int"],
            [this.call_ring_timeout_ms, "number", "int"],
            [this.call_connect_timeout_ms, "number", "int"],
            [this.call_packet_timeout_ms, "number", "int"],
            [this.me_url_prefix, "string", "string"],
            [this.autoupdate_url_prefix ?? null, "string", "flags.7?string"],
            [this.gif_search_username ?? null, "string", "flags.9?string"],
            [this.venue_search_username ?? null, "string", "flags.10?string"],
            [this.img_search_username ?? null, "string", "flags.11?string"],
            [this.static_maps_provider ?? null, "string", "flags.12?string"],
            [this.caption_length_max, "number", "int"],
            [this.message_length_max, "number", "int"],
            [this.webfile_dc_id, "number", "int"],
            [this.suggested_lang_code ?? null, "string", "flags.2?string"],
            [this.lang_pack_version ?? null, "number", "flags.2?int"],
            [this.base_lang_pack_version ?? null, "number", "flags.2?int"],
            [this.reactions_default ?? null, _Reaction_, "flags.15?Reaction"],
            [this.autologin_token ?? null, "string", "flags.16?string"],
        ];
    }
    constructor(params) {
        super();
        /** Whether the client should use P2P by default for phone calls with contacts */
        Object.defineProperty(this, "default_p2p_contacts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether the client should preload featured stickers */
        Object.defineProperty(this, "preload_featured_stickers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether incoming private messages can be deleted for both participants */
        Object.defineProperty(this, "revoke_pm_inbox", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Indicates that telegram is _probably_ censored by governments/ISPs in the current region */
        Object.defineProperty(this, "blocked_mode", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether to forcefully connect using IPv6 [dcOptions](https://core.telegram.org/type/DcOption), even if the client knows that IPv4 is available. */
        Object.defineProperty(this, "force_try_ipv6", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Current date at the server */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Expiration date of this config: when it expires it'll have to be refetched using [help.getConfig](https://core.telegram.org/method/help.getConfig) */
        Object.defineProperty(this, "expires", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether we're connected to the test DCs */
        Object.defineProperty(this, "test_mode", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the DC that returned the reply */
        Object.defineProperty(this, "this_dc", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** DC IP list */
        Object.defineProperty(this, "dc_options", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Domain name for fetching encrypted DC list from DNS TXT record */
        Object.defineProperty(this, "dc_txt_domain_name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Maximum member count for normal [groups](https://core.telegram.org/api/channel) */
        Object.defineProperty(this, "chat_size_max", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Maximum member count for [supergroups](https://core.telegram.org/api/channel) */
        Object.defineProperty(this, "megagroup_size_max", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Maximum number of messages that can be forwarded at once using [messages.forwardMessages](https://core.telegram.org/method/messages.forwardMessages). */
        Object.defineProperty(this, "forwarded_count_max", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The client should [update its online status](https://core.telegram.org/method/account.updateStatus) every N milliseconds */
        Object.defineProperty(this, "online_update_period_ms", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Delay before offline status needs to be sent to the server */
        Object.defineProperty(this, "offline_blur_timeout_ms", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Time without any user activity after which it should be treated offline */
        Object.defineProperty(this, "offline_idle_timeout_ms", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If we are offline, but were online from some other client in last `online_cloud_timeout_ms` milliseconds after we had gone offline, then delay offline notification for `notify_cloud_delay_ms` milliseconds. */
        Object.defineProperty(this, "online_cloud_timeout_ms", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If we are offline, but online from some other client then delay sending the offline notification for `notify_cloud_delay_ms` milliseconds. */
        Object.defineProperty(this, "notify_cloud_delay_ms", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If some other client is online, then delay notification for `notification_default_delay_ms` milliseconds */
        Object.defineProperty(this, "notify_default_delay_ms", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Not for client use */
        Object.defineProperty(this, "push_chat_period_ms", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Not for client use */
        Object.defineProperty(this, "push_chat_limit", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Only messages with age smaller than the one specified can be edited */
        Object.defineProperty(this, "edit_time_limit", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Only channel/supergroup messages with age smaller than the specified can be deleted */
        Object.defineProperty(this, "revoke_time_limit", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Only private messages with age smaller than the specified can be deleted */
        Object.defineProperty(this, "revoke_pm_time_limit", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Exponential decay rate for computing [top peer rating](https://core.telegram.org/api/top-rating) */
        Object.defineProperty(this, "rating_e_decay", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Maximum number of recent stickers */
        Object.defineProperty(this, "stickers_recent_limit", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Indicates that round videos (video notes) and voice messages sent in channels and older than the specified period must be marked as read */
        Object.defineProperty(this, "channels_read_media_period", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Temporary [passport](https://core.telegram.org/passport) sessions */
        Object.defineProperty(this, "tmp_sessions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Maximum allowed outgoing ring time in VoIP calls: if the user we're calling doesn't reply within the specified time (in milliseconds), we should hang up the call */
        Object.defineProperty(this, "call_receive_timeout_ms", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Maximum allowed incoming ring time in VoIP calls: if the current user doesn't reply within the specified time (in milliseconds), the call will be automatically refused */
        Object.defineProperty(this, "call_ring_timeout_ms", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** VoIP connection timeout: if the instance of libtgvoip on the other side of the call doesn't connect to our instance of libtgvoip within the specified time (in milliseconds), the call must be aborted */
        Object.defineProperty(this, "call_connect_timeout_ms", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If during a VoIP call a packet isn't received for the specified period of time, the call must be aborted */
        Object.defineProperty(this, "call_packet_timeout_ms", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The domain to use to parse [deep links »](https://core.telegram.org/api/links). */
        Object.defineProperty(this, "me_url_prefix", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** URL to use to auto-update the current app */
        Object.defineProperty(this, "autoupdate_url_prefix", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Username of the bot to use to search for GIFs */
        Object.defineProperty(this, "gif_search_username", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Username of the bot to use to search for venues */
        Object.defineProperty(this, "venue_search_username", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Username of the bot to use for image search */
        Object.defineProperty(this, "img_search_username", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the map provider to use for venues */
        Object.defineProperty(this, "static_maps_provider", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Maximum length of caption (length in utf8 codepoints) */
        Object.defineProperty(this, "caption_length_max", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Maximum length of messages (length in utf8 codepoints) */
        Object.defineProperty(this, "message_length_max", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** DC ID to use to download [webfiles](https://core.telegram.org/api/files#downloading-webfiles) */
        Object.defineProperty(this, "webfile_dc_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Suggested language code */
        Object.defineProperty(this, "suggested_lang_code", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Language pack version */
        Object.defineProperty(this, "lang_pack_version", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Basic language pack version */
        Object.defineProperty(this, "base_lang_pack_version", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Default [message reaction](https://core.telegram.org/api/reactions) */
        Object.defineProperty(this, "reactions_default", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Autologin token, [click here for more info on URL authorization »](https://core.telegram.org/api/url-authorization#link-url-authorization). */
        Object.defineProperty(this, "autologin_token", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.default_p2p_contacts = params.default_p2p_contacts;
        this.preload_featured_stickers = params.preload_featured_stickers;
        this.revoke_pm_inbox = params.revoke_pm_inbox;
        this.blocked_mode = params.blocked_mode;
        this.force_try_ipv6 = params.force_try_ipv6;
        this.date = params.date;
        this.expires = params.expires;
        this.test_mode = params.test_mode;
        this.this_dc = params.this_dc;
        this.dc_options = params.dc_options;
        this.dc_txt_domain_name = params.dc_txt_domain_name;
        this.chat_size_max = params.chat_size_max;
        this.megagroup_size_max = params.megagroup_size_max;
        this.forwarded_count_max = params.forwarded_count_max;
        this.online_update_period_ms = params.online_update_period_ms;
        this.offline_blur_timeout_ms = params.offline_blur_timeout_ms;
        this.offline_idle_timeout_ms = params.offline_idle_timeout_ms;
        this.online_cloud_timeout_ms = params.online_cloud_timeout_ms;
        this.notify_cloud_delay_ms = params.notify_cloud_delay_ms;
        this.notify_default_delay_ms = params.notify_default_delay_ms;
        this.push_chat_period_ms = params.push_chat_period_ms;
        this.push_chat_limit = params.push_chat_limit;
        this.edit_time_limit = params.edit_time_limit;
        this.revoke_time_limit = params.revoke_time_limit;
        this.revoke_pm_time_limit = params.revoke_pm_time_limit;
        this.rating_e_decay = params.rating_e_decay;
        this.stickers_recent_limit = params.stickers_recent_limit;
        this.channels_read_media_period = params.channels_read_media_period;
        this.tmp_sessions = params.tmp_sessions;
        this.call_receive_timeout_ms = params.call_receive_timeout_ms;
        this.call_ring_timeout_ms = params.call_ring_timeout_ms;
        this.call_connect_timeout_ms = params.call_connect_timeout_ms;
        this.call_packet_timeout_ms = params.call_packet_timeout_ms;
        this.me_url_prefix = params.me_url_prefix;
        this.autoupdate_url_prefix = params.autoupdate_url_prefix;
        this.gif_search_username = params.gif_search_username;
        this.venue_search_username = params.venue_search_username;
        this.img_search_username = params.img_search_username;
        this.static_maps_provider = params.static_maps_provider;
        this.caption_length_max = params.caption_length_max;
        this.message_length_max = params.message_length_max;
        this.webfile_dc_id = params.webfile_dc_id;
        this.suggested_lang_code = params.suggested_lang_code;
        this.lang_pack_version = params.lang_pack_version;
        this.base_lang_pack_version = params.base_lang_pack_version;
        this.reactions_default = params.reactions_default;
        this.autologin_token = params.autologin_token;
    }
}
/** Nearest data center, according to geo-ip. */
export class NearestDc_ extends _NearestDc_ {
    get [id]() {
        return 0x8E1A1775;
    }
    static get [name]() {
        return "nearestDc";
    }
    static get [paramDesc]() {
        return [
            ["country", "string", "string"],
            ["this_dc", "number", "int"],
            ["nearest_dc", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.country, "string", "string"],
            [this.this_dc, "number", "int"],
            [this.nearest_dc, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Country code determined by geo-ip */
        Object.defineProperty(this, "country", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of current data center */
        Object.defineProperty(this, "this_dc", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of nearest data center */
        Object.defineProperty(this, "nearest_dc", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.country = params.country;
        this.this_dc = params.this_dc;
        this.nearest_dc = params.nearest_dc;
    }
}
/** An update is available for the application. */
export class help_AppUpdate_ extends _help_AppUpdate_ {
    get [id]() {
        return 0xCCBBCE30;
    }
    static get [name]() {
        return "help.appUpdate";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["can_not_skip", "true", "flags.0?true"],
            ["id", "number", "int"],
            ["version", "string", "string"],
            ["text", "string", "string"],
            ["entities", [_MessageEntity_], "Vector<MessageEntity>"],
            ["document", _Document_, "flags.1?Document"],
            ["url", "string", "flags.2?string"],
            ["sticker", _Document_, "flags.3?Document"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.can_not_skip ?? null, "true", "flags.0?true"],
            [this.id, "number", "int"],
            [this.version, "string", "string"],
            [this.text, "string", "string"],
            [this.entities, [_MessageEntity_], "Vector<MessageEntity>"],
            [this.document ?? null, _Document_, "flags.1?Document"],
            [this.url ?? null, "string", "flags.2?string"],
            [this.sticker ?? null, _Document_, "flags.3?Document"],
        ];
    }
    constructor(params) {
        super();
        /** Unskippable, the new info must be shown to the user (with a popup or something else) */
        Object.defineProperty(this, "can_not_skip", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Update ID */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New version name */
        Object.defineProperty(this, "version", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Text description of the update */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Message entities for styled text](https://core.telegram.org/api/entities) */
        Object.defineProperty(this, "entities", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Application binary */
        Object.defineProperty(this, "document", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Application download URL */
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Associated sticker */
        Object.defineProperty(this, "sticker", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.can_not_skip = params.can_not_skip;
        this.id = params.id;
        this.version = params.version;
        this.text = params.text;
        this.entities = params.entities;
        this.document = params.document;
        this.url = params.url;
        this.sticker = params.sticker;
    }
}
/** No updates are available for the application. */
export class help_NoAppUpdate_ extends _help_AppUpdate_ {
    get [id]() {
        return 0xC45A6536;
    }
    static get [name]() {
        return "help.noAppUpdate";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Text of a text message with an invitation to install Telegram. */
export class help_InviteText_ extends _help_InviteText_ {
    get [id]() {
        return 0x18CB9F78;
    }
    static get [name]() {
        return "help.inviteText";
    }
    static get [paramDesc]() {
        return [
            ["message", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.message, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Text of the message */
        Object.defineProperty(this, "message", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.message = params.message;
    }
}
/** Empty constructor. */
export class EncryptedChatEmpty_ extends _EncryptedChat_ {
    get [id]() {
        return 0xAB7EC0A0;
    }
    static get [name]() {
        return "encryptedChatEmpty";
    }
    static get [paramDesc]() {
        return [
            ["id", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.id, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Chat ID */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
    }
}
/** Chat waiting for approval of second participant. */
export class EncryptedChatWaiting_ extends _EncryptedChat_ {
    get [id]() {
        return 0x66B25953;
    }
    static get [name]() {
        return "encryptedChatWaiting";
    }
    static get [paramDesc]() {
        return [
            ["id", "number", "int"],
            ["access_hash", "bigint", "long"],
            ["date", "number", "int"],
            ["admin_id", "bigint", "long"],
            ["participant_id", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.id, "number", "int"],
            [this.access_hash, "bigint", "long"],
            [this.date, "number", "int"],
            [this.admin_id, "bigint", "long"],
            [this.participant_id, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** Chat ID */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Checking sum depending on user ID */
        Object.defineProperty(this, "access_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Date of chat creation */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Chat creator ID */
        Object.defineProperty(this, "admin_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of second chat participant */
        Object.defineProperty(this, "participant_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
        this.access_hash = params.access_hash;
        this.date = params.date;
        this.admin_id = params.admin_id;
        this.participant_id = params.participant_id;
    }
}
/** Request to create an encrypted chat. */
export class EncryptedChatRequested_ extends _EncryptedChat_ {
    get [id]() {
        return 0x48F1D94C;
    }
    static get [name]() {
        return "encryptedChatRequested";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["folder_id", "number", "flags.0?int"],
            ["id", "number", "int"],
            ["access_hash", "bigint", "long"],
            ["date", "number", "int"],
            ["admin_id", "bigint", "long"],
            ["participant_id", "bigint", "long"],
            ["g_a", Uint8Array, "bytes"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.folder_id ?? null, "number", "flags.0?int"],
            [this.id, "number", "int"],
            [this.access_hash, "bigint", "long"],
            [this.date, "number", "int"],
            [this.admin_id, "bigint", "long"],
            [this.participant_id, "bigint", "long"],
            [this.g_a, Uint8Array, "bytes"],
        ];
    }
    constructor(params) {
        super();
        /** [Peer folder ID, for more info click here](https://core.telegram.org/api/folders#peer-folders) */
        Object.defineProperty(this, "folder_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Chat ID */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Check sum depending on user ID */
        Object.defineProperty(this, "access_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Chat creation date */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Chat creator ID */
        Object.defineProperty(this, "admin_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of second chat participant */
        Object.defineProperty(this, "participant_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** `A = g ^ a mod p`, see [Wikipedia](https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange) */
        Object.defineProperty(this, "g_a", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.folder_id = params.folder_id;
        this.id = params.id;
        this.access_hash = params.access_hash;
        this.date = params.date;
        this.admin_id = params.admin_id;
        this.participant_id = params.participant_id;
        this.g_a = params.g_a;
    }
}
/** Encrypted chat */
export class EncryptedChat_ extends _EncryptedChat_ {
    get [id]() {
        return 0x61F0D4C7;
    }
    static get [name]() {
        return "encryptedChat";
    }
    static get [paramDesc]() {
        return [
            ["id", "number", "int"],
            ["access_hash", "bigint", "long"],
            ["date", "number", "int"],
            ["admin_id", "bigint", "long"],
            ["participant_id", "bigint", "long"],
            ["g_a_or_b", Uint8Array, "bytes"],
            ["key_fingerprint", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.id, "number", "int"],
            [this.access_hash, "bigint", "long"],
            [this.date, "number", "int"],
            [this.admin_id, "bigint", "long"],
            [this.participant_id, "bigint", "long"],
            [this.g_a_or_b, Uint8Array, "bytes"],
            [this.key_fingerprint, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** Chat ID */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Check sum dependent on the user ID */
        Object.defineProperty(this, "access_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Date chat was created */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Chat creator ID */
        Object.defineProperty(this, "admin_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the second chat participant */
        Object.defineProperty(this, "participant_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** `B = g ^ b mod p`, if the currently authorized user is the chat's creator,
        or `A = g ^ a mod p` otherwise
        See [Wikipedia](https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange) for more info */
        Object.defineProperty(this, "g_a_or_b", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** 64-bit fingerprint of received key */
        Object.defineProperty(this, "key_fingerprint", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
        this.access_hash = params.access_hash;
        this.date = params.date;
        this.admin_id = params.admin_id;
        this.participant_id = params.participant_id;
        this.g_a_or_b = params.g_a_or_b;
        this.key_fingerprint = params.key_fingerprint;
    }
}
/** Discarded or deleted chat. */
export class EncryptedChatDiscarded_ extends _EncryptedChat_ {
    get [id]() {
        return 0x1E1C7C45;
    }
    static get [name]() {
        return "encryptedChatDiscarded";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["history_deleted", "true", "flags.0?true"],
            ["id", "number", "int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.history_deleted ?? null, "true", "flags.0?true"],
            [this.id, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Whether both users of this secret chat should also remove all of its messages */
        Object.defineProperty(this, "history_deleted", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Chat ID */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.history_deleted = params.history_deleted;
        this.id = params.id;
    }
}
/** Creates an encrypted chat. */
export class InputEncryptedChat_ extends _InputEncryptedChat_ {
    get [id]() {
        return 0xF141B5E1;
    }
    static get [name]() {
        return "inputEncryptedChat";
    }
    static get [paramDesc]() {
        return [
            ["chat_id", "number", "int"],
            ["access_hash", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.chat_id, "number", "int"],
            [this.access_hash, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** Chat ID */
        Object.defineProperty(this, "chat_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Checking sum from constructor [encryptedChat](https://core.telegram.org/constructor/encryptedChat), [encryptedChatWaiting](https://core.telegram.org/constructor/encryptedChatWaiting) or [encryptedChatRequested](https://core.telegram.org/constructor/encryptedChatRequested) */
        Object.defineProperty(this, "access_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.chat_id = params.chat_id;
        this.access_hash = params.access_hash;
    }
}
/** Empty constructor, non-existing file. */
export class EncryptedFileEmpty_ extends _EncryptedFile_ {
    get [id]() {
        return 0xC21F497E;
    }
    static get [name]() {
        return "encryptedFileEmpty";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Encrypted file. */
export class EncryptedFile_ extends _EncryptedFile_ {
    get [id]() {
        return 0xA8008CD8;
    }
    static get [name]() {
        return "encryptedFile";
    }
    static get [paramDesc]() {
        return [
            ["id", "bigint", "long"],
            ["access_hash", "bigint", "long"],
            ["size", "bigint", "long"],
            ["dc_id", "number", "int"],
            ["key_fingerprint", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.id, "bigint", "long"],
            [this.access_hash, "bigint", "long"],
            [this.size, "bigint", "long"],
            [this.dc_id, "number", "int"],
            [this.key_fingerprint, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** File ID */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Checking sum depending on user ID */
        Object.defineProperty(this, "access_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** File size in bytes */
        Object.defineProperty(this, "size", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of data center */
        Object.defineProperty(this, "dc_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** 32-bit fingerprint of key used for file encryption */
        Object.defineProperty(this, "key_fingerprint", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
        this.access_hash = params.access_hash;
        this.size = params.size;
        this.dc_id = params.dc_id;
        this.key_fingerprint = params.key_fingerprint;
    }
}
/** Empty constructor. */
export class InputEncryptedFileEmpty_ extends _InputEncryptedFile_ {
    get [id]() {
        return 0x1837C364;
    }
    static get [name]() {
        return "inputEncryptedFileEmpty";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Sets new encrypted file saved by parts using upload.saveFilePart method. */
export class InputEncryptedFileUploaded_ extends _InputEncryptedFile_ {
    get [id]() {
        return 0x64BD0306;
    }
    static get [name]() {
        return "inputEncryptedFileUploaded";
    }
    static get [paramDesc]() {
        return [
            ["id", "bigint", "long"],
            ["parts", "number", "int"],
            ["md5_checksum", "string", "string"],
            ["key_fingerprint", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.id, "bigint", "long"],
            [this.parts, "number", "int"],
            [this.md5_checksum, "string", "string"],
            [this.key_fingerprint, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Random file ID created by client */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of saved parts */
        Object.defineProperty(this, "parts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** In case [md5-HASH](https://en.wikipedia.org/wiki/MD5) of the (already encrypted) file was transmitted, file content will be checked prior to use */
        Object.defineProperty(this, "md5_checksum", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** 32-bit fingerprint of the key used to encrypt a file */
        Object.defineProperty(this, "key_fingerprint", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
        this.parts = params.parts;
        this.md5_checksum = params.md5_checksum;
        this.key_fingerprint = params.key_fingerprint;
    }
}
/** Sets forwarded encrypted file for attachment. */
export class InputEncryptedFile_ extends _InputEncryptedFile_ {
    get [id]() {
        return 0x5A17B5E5;
    }
    static get [name]() {
        return "inputEncryptedFile";
    }
    static get [paramDesc]() {
        return [
            ["id", "bigint", "long"],
            ["access_hash", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.id, "bigint", "long"],
            [this.access_hash, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** File ID, value of **id** parameter from [encryptedFile](https://core.telegram.org/constructor/encryptedFile) */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Checking sum, value of **access\_hash** parameter from [encryptedFile](https://core.telegram.org/constructor/encryptedFile) */
        Object.defineProperty(this, "access_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
        this.access_hash = params.access_hash;
    }
}
/** Assigns a new big encrypted file (over 10 MB in size), saved in parts using the method [upload.saveBigFilePart](https://core.telegram.org/method/upload.saveBigFilePart). */
export class InputEncryptedFileBigUploaded_ extends _InputEncryptedFile_ {
    get [id]() {
        return 0x2DC173C8;
    }
    static get [name]() {
        return "inputEncryptedFileBigUploaded";
    }
    static get [paramDesc]() {
        return [
            ["id", "bigint", "long"],
            ["parts", "number", "int"],
            ["key_fingerprint", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.id, "bigint", "long"],
            [this.parts, "number", "int"],
            [this.key_fingerprint, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Random file id, created by the client */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of saved parts */
        Object.defineProperty(this, "parts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** 32-bit imprint of the key used to encrypt the file */
        Object.defineProperty(this, "key_fingerprint", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
        this.parts = params.parts;
        this.key_fingerprint = params.key_fingerprint;
    }
}
/** Encrypted message. */
export class EncryptedMessage_ extends _EncryptedMessage_ {
    get [id]() {
        return 0xED18C118;
    }
    static get [name]() {
        return "encryptedMessage";
    }
    static get [paramDesc]() {
        return [
            ["random_id", "bigint", "long"],
            ["chat_id", "number", "int"],
            ["date", "number", "int"],
            ["bytes", Uint8Array, "bytes"],
            ["file", _EncryptedFile_, "EncryptedFile"],
        ];
    }
    get [params]() {
        return [
            [this.random_id, "bigint", "long"],
            [this.chat_id, "number", "int"],
            [this.date, "number", "int"],
            [this.bytes, Uint8Array, "bytes"],
            [this.file, _EncryptedFile_, "EncryptedFile"],
        ];
    }
    constructor(params) {
        super();
        /** Random message ID, assigned by the author of message */
        Object.defineProperty(this, "random_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of encrypted chat */
        Object.defineProperty(this, "chat_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Date of sending */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** TL-serialization of [DecryptedMessage](https://core.telegram.org/type/DecryptedMessage) type, encrypted with the key created at chat initialization */
        Object.defineProperty(this, "bytes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Attached encrypted file */
        Object.defineProperty(this, "file", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.random_id = params.random_id;
        this.chat_id = params.chat_id;
        this.date = params.date;
        this.bytes = params.bytes;
        this.file = params.file;
    }
}
/** Encrypted service message */
export class EncryptedMessageService_ extends _EncryptedMessage_ {
    get [id]() {
        return 0x23734B06;
    }
    static get [name]() {
        return "encryptedMessageService";
    }
    static get [paramDesc]() {
        return [
            ["random_id", "bigint", "long"],
            ["chat_id", "number", "int"],
            ["date", "number", "int"],
            ["bytes", Uint8Array, "bytes"],
        ];
    }
    get [params]() {
        return [
            [this.random_id, "bigint", "long"],
            [this.chat_id, "number", "int"],
            [this.date, "number", "int"],
            [this.bytes, Uint8Array, "bytes"],
        ];
    }
    constructor(params) {
        super();
        /** Random message ID, assigned by the author of message */
        Object.defineProperty(this, "random_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of encrypted chat */
        Object.defineProperty(this, "chat_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Date of sending */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** TL-serialization of the [DecryptedMessage](https://core.telegram.org/type/DecryptedMessage) type, encrypted with the key created at chat initialization */
        Object.defineProperty(this, "bytes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.random_id = params.random_id;
        this.chat_id = params.chat_id;
        this.date = params.date;
        this.bytes = params.bytes;
    }
}
/** Configuring parameters did not change. */
export class messages_DhConfigNotModified_ extends _messages_DhConfig_ {
    get [id]() {
        return 0xC0E24635;
    }
    static get [name]() {
        return "messages.dhConfigNotModified";
    }
    static get [paramDesc]() {
        return [
            ["random", Uint8Array, "bytes"],
        ];
    }
    get [params]() {
        return [
            [this.random, Uint8Array, "bytes"],
        ];
    }
    constructor(params) {
        super();
        /** Random sequence of bytes of assigned length */
        Object.defineProperty(this, "random", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.random = params.random;
    }
}
/** New set of configuring parameters. */
export class messages_DhConfig_ extends _messages_DhConfig_ {
    get [id]() {
        return 0x2C221EDD;
    }
    static get [name]() {
        return "messages.dhConfig";
    }
    static get [paramDesc]() {
        return [
            ["g", "number", "int"],
            ["p", Uint8Array, "bytes"],
            ["version", "number", "int"],
            ["random", Uint8Array, "bytes"],
        ];
    }
    get [params]() {
        return [
            [this.g, "number", "int"],
            [this.p, Uint8Array, "bytes"],
            [this.version, "number", "int"],
            [this.random, Uint8Array, "bytes"],
        ];
    }
    constructor(params) {
        super();
        /** New value **prime**, see [Wikipedia](https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange) */
        Object.defineProperty(this, "g", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New value **primitive root**, see [Wikipedia](https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange) */
        Object.defineProperty(this, "p", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Version of set of parameters */
        Object.defineProperty(this, "version", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Random sequence of bytes of assigned length */
        Object.defineProperty(this, "random", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.g = params.g;
        this.p = params.p;
        this.version = params.version;
        this.random = params.random;
    }
}
/** Message without file attachments sent to an encrypted file. */
export class messages_SentEncryptedMessage_ extends _messages_SentEncryptedMessage_ {
    get [id]() {
        return 0x560F8935;
    }
    static get [name]() {
        return "messages.sentEncryptedMessage";
    }
    static get [paramDesc]() {
        return [
            ["date", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.date, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Date of sending */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.date = params.date;
    }
}
/** Message with a file enclosure sent to a protected chat */
export class messages_SentEncryptedFile_ extends _messages_SentEncryptedMessage_ {
    get [id]() {
        return 0x9493FF32;
    }
    static get [name]() {
        return "messages.sentEncryptedFile";
    }
    static get [paramDesc]() {
        return [
            ["date", "number", "int"],
            ["file", _EncryptedFile_, "EncryptedFile"],
        ];
    }
    get [params]() {
        return [
            [this.date, "number", "int"],
            [this.file, _EncryptedFile_, "EncryptedFile"],
        ];
    }
    constructor(params) {
        super();
        /** Sending date */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Attached file */
        Object.defineProperty(this, "file", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.date = params.date;
        this.file = params.file;
    }
}
/** Empty constructor. */
export class InputDocumentEmpty_ extends _InputDocument_ {
    get [id]() {
        return 0x72F0EAAE;
    }
    static get [name]() {
        return "inputDocumentEmpty";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Defines a document for subsequent interaction. */
export class InputDocument_ extends _InputDocument_ {
    get [id]() {
        return 0x1ABFB575;
    }
    static get [name]() {
        return "inputDocument";
    }
    static get [paramDesc]() {
        return [
            ["id", "bigint", "long"],
            ["access_hash", "bigint", "long"],
            ["file_reference", Uint8Array, "bytes"],
        ];
    }
    get [params]() {
        return [
            [this.id, "bigint", "long"],
            [this.access_hash, "bigint", "long"],
            [this.file_reference, Uint8Array, "bytes"],
        ];
    }
    constructor(params) {
        super();
        /** Document ID */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** **access\_hash** parameter from the [document](https://core.telegram.org/constructor/document) constructor */
        Object.defineProperty(this, "access_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [File reference](https://core.telegram.org/api/file_reference) */
        Object.defineProperty(this, "file_reference", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
        this.access_hash = params.access_hash;
        this.file_reference = params.file_reference;
    }
}
/** Empty constructor, document doesn't exist. */
export class DocumentEmpty_ extends _Document_ {
    get [id]() {
        return 0x36F8C871;
    }
    static get [name]() {
        return "documentEmpty";
    }
    static get [paramDesc]() {
        return [
            ["id", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.id, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** Document ID or `0` */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
    }
}
/** Document */
export class Document_ extends _Document_ {
    get [id]() {
        return 0x8FD4C4D8;
    }
    static get [name]() {
        return "document";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["id", "bigint", "long"],
            ["access_hash", "bigint", "long"],
            ["file_reference", Uint8Array, "bytes"],
            ["date", "number", "int"],
            ["mime_type", "string", "string"],
            ["size", "bigint", "long"],
            ["thumbs", [_PhotoSize_], "flags.0?Vector<PhotoSize>"],
            ["video_thumbs", [_VideoSize_], "flags.1?Vector<VideoSize>"],
            ["dc_id", "number", "int"],
            ["attributes", [_DocumentAttribute_], "Vector<DocumentAttribute>"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.id, "bigint", "long"],
            [this.access_hash, "bigint", "long"],
            [this.file_reference, Uint8Array, "bytes"],
            [this.date, "number", "int"],
            [this.mime_type, "string", "string"],
            [this.size, "bigint", "long"],
            [this.thumbs ?? null, [_PhotoSize_], "flags.0?Vector<PhotoSize>"],
            [this.video_thumbs ?? null, [_VideoSize_], "flags.1?Vector<VideoSize>"],
            [this.dc_id, "number", "int"],
            [this.attributes, [_DocumentAttribute_], "Vector<DocumentAttribute>"],
        ];
    }
    constructor(params) {
        super();
        /** Document ID */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Check sum, dependent on document ID */
        Object.defineProperty(this, "access_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [File reference](https://core.telegram.org/api/file_reference) */
        Object.defineProperty(this, "file_reference", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Creation date */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** MIME type */
        Object.defineProperty(this, "mime_type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Size */
        Object.defineProperty(this, "size", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Thumbnails */
        Object.defineProperty(this, "thumbs", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Video thumbnails */
        Object.defineProperty(this, "video_thumbs", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** DC ID */
        Object.defineProperty(this, "dc_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Attributes */
        Object.defineProperty(this, "attributes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
        this.access_hash = params.access_hash;
        this.file_reference = params.file_reference;
        this.date = params.date;
        this.mime_type = params.mime_type;
        this.size = params.size;
        this.thumbs = params.thumbs;
        this.video_thumbs = params.video_thumbs;
        this.dc_id = params.dc_id;
        this.attributes = params.attributes;
    }
}
/** Info on support user. */
export class help_Support_ extends _help_Support_ {
    get [id]() {
        return 0x17C6B5F6;
    }
    static get [name]() {
        return "help.support";
    }
    static get [paramDesc]() {
        return [
            ["phone_number", "string", "string"],
            ["user", _User_, "User"],
        ];
    }
    get [params]() {
        return [
            [this.phone_number, "string", "string"],
            [this.user, _User_, "User"],
        ];
    }
    constructor(params) {
        super();
        /** Phone number */
        Object.defineProperty(this, "phone_number", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** User */
        Object.defineProperty(this, "user", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.phone_number = params.phone_number;
        this.user = params.user;
    }
}
/** Notifications generated by a certain user or group. */
export class NotifyPeer_ extends _NotifyPeer_ {
    get [id]() {
        return 0x9FD40BD8;
    }
    static get [name]() {
        return "notifyPeer";
    }
    static get [paramDesc]() {
        return [
            ["peer", _Peer_, "Peer"],
        ];
    }
    get [params]() {
        return [
            [this.peer, _Peer_, "Peer"],
        ];
    }
    constructor(params) {
        super();
        /** user or group */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.peer = params.peer;
    }
}
/** Notifications generated by all users. */
export class NotifyUsers_ extends _NotifyPeer_ {
    get [id]() {
        return 0xB4C83B4C;
    }
    static get [name]() {
        return "notifyUsers";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Notifications generated by all groups. */
export class NotifyChats_ extends _NotifyPeer_ {
    get [id]() {
        return 0xC007CEC3;
    }
    static get [name]() {
        return "notifyChats";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Channel notification settings */
export class NotifyBroadcasts_ extends _NotifyPeer_ {
    get [id]() {
        return 0xD612E8EF;
    }
    static get [name]() {
        return "notifyBroadcasts";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Notifications generated by a [topic](https://core.telegram.org/api/forum#forum-topics) in a [forum](https://core.telegram.org/api/forum). */
export class NotifyForumTopic_ extends _NotifyPeer_ {
    get [id]() {
        return 0x226E6308;
    }
    static get [name]() {
        return "notifyForumTopic";
    }
    static get [paramDesc]() {
        return [
            ["peer", _Peer_, "Peer"],
            ["top_msg_id", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.peer, _Peer_, "Peer"],
            [this.top_msg_id, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Forum ID */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Topic ID](https://core.telegram.org/api/forum#forum-topics) */
        Object.defineProperty(this, "top_msg_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.peer = params.peer;
        this.top_msg_id = params.top_msg_id;
    }
}
/** User is typing. */
export class SendMessageTypingAction_ extends _SendMessageAction_ {
    get [id]() {
        return 0x16BF744E;
    }
    static get [name]() {
        return "sendMessageTypingAction";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Invalidate all previous action updates. E.g. when user deletes entered text or aborts a video upload. */
export class SendMessageCancelAction_ extends _SendMessageAction_ {
    get [id]() {
        return 0xFD5EC8F5;
    }
    static get [name]() {
        return "sendMessageCancelAction";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** User is recording a video. */
export class SendMessageRecordVideoAction_ extends _SendMessageAction_ {
    get [id]() {
        return 0xA187D66F;
    }
    static get [name]() {
        return "sendMessageRecordVideoAction";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** User is uploading a video. */
export class SendMessageUploadVideoAction_ extends _SendMessageAction_ {
    get [id]() {
        return 0xE9763AEC;
    }
    static get [name]() {
        return "sendMessageUploadVideoAction";
    }
    static get [paramDesc]() {
        return [
            ["progress", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.progress, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Progress percentage */
        Object.defineProperty(this, "progress", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.progress = params.progress;
    }
}
/** User is recording a voice message. */
export class SendMessageRecordAudioAction_ extends _SendMessageAction_ {
    get [id]() {
        return 0xD52F73F7;
    }
    static get [name]() {
        return "sendMessageRecordAudioAction";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** User is uploading a voice message. */
export class SendMessageUploadAudioAction_ extends _SendMessageAction_ {
    get [id]() {
        return 0xF351D7AB;
    }
    static get [name]() {
        return "sendMessageUploadAudioAction";
    }
    static get [paramDesc]() {
        return [
            ["progress", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.progress, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Progress percentage */
        Object.defineProperty(this, "progress", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.progress = params.progress;
    }
}
/** User is uploading a photo. */
export class SendMessageUploadPhotoAction_ extends _SendMessageAction_ {
    get [id]() {
        return 0xD1D34A26;
    }
    static get [name]() {
        return "sendMessageUploadPhotoAction";
    }
    static get [paramDesc]() {
        return [
            ["progress", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.progress, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Progress percentage */
        Object.defineProperty(this, "progress", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.progress = params.progress;
    }
}
/** User is uploading a file. */
export class SendMessageUploadDocumentAction_ extends _SendMessageAction_ {
    get [id]() {
        return 0xAA0CD9E4;
    }
    static get [name]() {
        return "sendMessageUploadDocumentAction";
    }
    static get [paramDesc]() {
        return [
            ["progress", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.progress, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Progress percentage */
        Object.defineProperty(this, "progress", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.progress = params.progress;
    }
}
/** User is selecting a location to share. */
export class SendMessageGeoLocationAction_ extends _SendMessageAction_ {
    get [id]() {
        return 0x176F8BA1;
    }
    static get [name]() {
        return "sendMessageGeoLocationAction";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** User is selecting a contact to share. */
export class SendMessageChooseContactAction_ extends _SendMessageAction_ {
    get [id]() {
        return 0x628CBC6F;
    }
    static get [name]() {
        return "sendMessageChooseContactAction";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** User is playing a game */
export class SendMessageGamePlayAction_ extends _SendMessageAction_ {
    get [id]() {
        return 0xDD6A8F48;
    }
    static get [name]() {
        return "sendMessageGamePlayAction";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** User is recording a round video to share */
export class SendMessageRecordRoundAction_ extends _SendMessageAction_ {
    get [id]() {
        return 0x88F27FBC;
    }
    static get [name]() {
        return "sendMessageRecordRoundAction";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** User is uploading a round video */
export class SendMessageUploadRoundAction_ extends _SendMessageAction_ {
    get [id]() {
        return 0x243E1C66;
    }
    static get [name]() {
        return "sendMessageUploadRoundAction";
    }
    static get [paramDesc]() {
        return [
            ["progress", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.progress, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Progress percentage */
        Object.defineProperty(this, "progress", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.progress = params.progress;
    }
}
/** User is currently speaking in the group call */
export class SpeakingInGroupCallAction_ extends _SendMessageAction_ {
    get [id]() {
        return 0xD92C2285;
    }
    static get [name]() {
        return "speakingInGroupCallAction";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Chat history is being imported */
export class SendMessageHistoryImportAction_ extends _SendMessageAction_ {
    get [id]() {
        return 0xDBDA9246;
    }
    static get [name]() {
        return "sendMessageHistoryImportAction";
    }
    static get [paramDesc]() {
        return [
            ["progress", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.progress, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Progress percentage */
        Object.defineProperty(this, "progress", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.progress = params.progress;
    }
}
/** User is choosing a sticker */
export class SendMessageChooseStickerAction_ extends _SendMessageAction_ {
    get [id]() {
        return 0xB05AC6B1;
    }
    static get [name]() {
        return "sendMessageChooseStickerAction";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** User has clicked on an animated emoji triggering a [reaction, click here for more info »](https://core.telegram.org/api/animated-emojis#emoji-reactions). */
export class SendMessageEmojiInteraction_ extends _SendMessageAction_ {
    get [id]() {
        return 0x25972BCB;
    }
    static get [name]() {
        return "sendMessageEmojiInteraction";
    }
    static get [paramDesc]() {
        return [
            ["emoticon", "string", "string"],
            ["msg_id", "number", "int"],
            ["interaction", _DataJSON_, "DataJSON"],
        ];
    }
    get [params]() {
        return [
            [this.emoticon, "string", "string"],
            [this.msg_id, "number", "int"],
            [this.interaction, _DataJSON_, "DataJSON"],
        ];
    }
    constructor(params) {
        super();
        /** Emoji */
        Object.defineProperty(this, "emoticon", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Message ID of the animated emoji that was clicked */
        Object.defineProperty(this, "msg_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** A JSON object with interaction info, [click here for more info »](https://core.telegram.org/api/animated-emojis#emoji-reactions) */
        Object.defineProperty(this, "interaction", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.emoticon = params.emoticon;
        this.msg_id = params.msg_id;
        this.interaction = params.interaction;
    }
}
/** User is watching an animated emoji reaction triggered by another user, [click here for more info »](https://core.telegram.org/api/animated-emojis#emoji-reactions). */
export class SendMessageEmojiInteractionSeen_ extends _SendMessageAction_ {
    get [id]() {
        return 0xB665902E;
    }
    static get [name]() {
        return "sendMessageEmojiInteractionSeen";
    }
    static get [paramDesc]() {
        return [
            ["emoticon", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.emoticon, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Emoji */
        Object.defineProperty(this, "emoticon", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.emoticon = params.emoticon;
    }
}
/** Users found by name substring and auxiliary data. */
export class contacts_Found_ extends _contacts_Found_ {
    get [id]() {
        return 0xB3134D9D;
    }
    static get [name]() {
        return "contacts.found";
    }
    static get [paramDesc]() {
        return [
            ["my_results", [_Peer_], "Vector<Peer>"],
            ["results", [_Peer_], "Vector<Peer>"],
            ["chats", [_Chat_], "Vector<Chat>"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            [this.my_results, [_Peer_], "Vector<Peer>"],
            [this.results, [_Peer_], "Vector<Peer>"],
            [this.chats, [_Chat_], "Vector<Chat>"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** Personalized results */
        Object.defineProperty(this, "my_results", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** List of found user identifiers */
        Object.defineProperty(this, "results", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Found chats */
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** List of users */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.my_results = params.my_results;
        this.results = params.results;
        this.chats = params.chats;
        this.users = params.users;
    }
}
/** Whether people will be able to see your exact last online timestamp */
export class InputPrivacyKeyStatusTimestamp_ extends _InputPrivacyKey_ {
    get [id]() {
        return 0x4F96CB18;
    }
    static get [name]() {
        return "inputPrivacyKeyStatusTimestamp";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Whether people will be able to invite you to chats */
export class InputPrivacyKeyChatInvite_ extends _InputPrivacyKey_ {
    get [id]() {
        return 0xBDFB0426;
    }
    static get [name]() {
        return "inputPrivacyKeyChatInvite";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Whether you will accept phone calls */
export class InputPrivacyKeyPhoneCall_ extends _InputPrivacyKey_ {
    get [id]() {
        return 0xFABADC5F;
    }
    static get [name]() {
        return "inputPrivacyKeyPhoneCall";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Whether to allow P2P communication during VoIP calls */
export class InputPrivacyKeyPhoneP2P_ extends _InputPrivacyKey_ {
    get [id]() {
        return 0xDB9E70D2;
    }
    static get [name]() {
        return "inputPrivacyKeyPhoneP2P";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Whether messages forwarded from you will be [anonymous](https://telegram.org/blog/unsend-privacy-emoji#anonymous-forwarding) */
export class InputPrivacyKeyForwards_ extends _InputPrivacyKey_ {
    get [id]() {
        return 0xA4DD4C08;
    }
    static get [name]() {
        return "inputPrivacyKeyForwards";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Whether people will be able to see your profile picture */
export class InputPrivacyKeyProfilePhoto_ extends _InputPrivacyKey_ {
    get [id]() {
        return 0x5719BACC;
    }
    static get [name]() {
        return "inputPrivacyKeyProfilePhoto";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Whether people will be able to see your phone number */
export class InputPrivacyKeyPhoneNumber_ extends _InputPrivacyKey_ {
    get [id]() {
        return 0x0352DAFA;
    }
    static get [name]() {
        return "inputPrivacyKeyPhoneNumber";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Whether people can add you to their contact list by your phone number */
export class InputPrivacyKeyAddedByPhone_ extends _InputPrivacyKey_ {
    get [id]() {
        return 0xD1219BDD;
    }
    static get [name]() {
        return "inputPrivacyKeyAddedByPhone";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Whether people can send you voice messages */
export class InputPrivacyKeyVoiceMessages_ extends _InputPrivacyKey_ {
    get [id]() {
        return 0xAEE69D68;
    }
    static get [name]() {
        return "inputPrivacyKeyVoiceMessages";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Whether people can see your bio */
export class InputPrivacyKeyAbout_ extends _InputPrivacyKey_ {
    get [id]() {
        return 0x3823CC40;
    }
    static get [name]() {
        return "inputPrivacyKeyAbout";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Whether we can see the last online timestamp of this user */
export class PrivacyKeyStatusTimestamp_ extends _PrivacyKey_ {
    get [id]() {
        return 0xBC2EAB30;
    }
    static get [name]() {
        return "privacyKeyStatusTimestamp";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Whether the user can be invited to chats */
export class PrivacyKeyChatInvite_ extends _PrivacyKey_ {
    get [id]() {
        return 0x500E6DFA;
    }
    static get [name]() {
        return "privacyKeyChatInvite";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Whether the user accepts phone calls */
export class PrivacyKeyPhoneCall_ extends _PrivacyKey_ {
    get [id]() {
        return 0x3D662B7B;
    }
    static get [name]() {
        return "privacyKeyPhoneCall";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Whether P2P connections in phone calls with this user are allowed */
export class PrivacyKeyPhoneP2P_ extends _PrivacyKey_ {
    get [id]() {
        return 0x39491CC8;
    }
    static get [name]() {
        return "privacyKeyPhoneP2P";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Whether messages forwarded from the user will be [anonymously forwarded](https://telegram.org/blog/unsend-privacy-emoji#anonymous-forwarding) */
export class PrivacyKeyForwards_ extends _PrivacyKey_ {
    get [id]() {
        return 0x69EC56A3;
    }
    static get [name]() {
        return "privacyKeyForwards";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Whether the profile picture of the user is visible */
export class PrivacyKeyProfilePhoto_ extends _PrivacyKey_ {
    get [id]() {
        return 0x96151FED;
    }
    static get [name]() {
        return "privacyKeyProfilePhoto";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Whether the user allows us to see his phone number */
export class PrivacyKeyPhoneNumber_ extends _PrivacyKey_ {
    get [id]() {
        return 0xD19AE46D;
    }
    static get [name]() {
        return "privacyKeyPhoneNumber";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Whether this user can be added to our contact list by their phone number */
export class PrivacyKeyAddedByPhone_ extends _PrivacyKey_ {
    get [id]() {
        return 0x42FFD42B;
    }
    static get [name]() {
        return "privacyKeyAddedByPhone";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Whether the user accepts voice messages */
export class PrivacyKeyVoiceMessages_ extends _PrivacyKey_ {
    get [id]() {
        return 0x0697F414;
    }
    static get [name]() {
        return "privacyKeyVoiceMessages";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Whether people can see your bio */
export class PrivacyKeyAbout_ extends _PrivacyKey_ {
    get [id]() {
        return 0xA486B761;
    }
    static get [name]() {
        return "privacyKeyAbout";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Allow only contacts */
export class InputPrivacyValueAllowContacts_ extends _InputPrivacyRule_ {
    get [id]() {
        return 0x0D09E07B;
    }
    static get [name]() {
        return "inputPrivacyValueAllowContacts";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Allow all users */
export class InputPrivacyValueAllowAll_ extends _InputPrivacyRule_ {
    get [id]() {
        return 0x184B35CE;
    }
    static get [name]() {
        return "inputPrivacyValueAllowAll";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Allow only certain users */
export class InputPrivacyValueAllowUsers_ extends _InputPrivacyRule_ {
    get [id]() {
        return 0x131CC67F;
    }
    static get [name]() {
        return "inputPrivacyValueAllowUsers";
    }
    static get [paramDesc]() {
        return [
            ["users", [_InputUser_], "Vector<InputUser>"],
        ];
    }
    get [params]() {
        return [
            [this.users, [_InputUser_], "Vector<InputUser>"],
        ];
    }
    constructor(params) {
        super();
        /** Allowed users */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.users = params.users;
    }
}
/** Disallow only contacts */
export class InputPrivacyValueDisallowContacts_ extends _InputPrivacyRule_ {
    get [id]() {
        return 0x0BA52007;
    }
    static get [name]() {
        return "inputPrivacyValueDisallowContacts";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Disallow all */
export class InputPrivacyValueDisallowAll_ extends _InputPrivacyRule_ {
    get [id]() {
        return 0xD66B66C9;
    }
    static get [name]() {
        return "inputPrivacyValueDisallowAll";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Disallow only certain users */
export class InputPrivacyValueDisallowUsers_ extends _InputPrivacyRule_ {
    get [id]() {
        return 0x90110467;
    }
    static get [name]() {
        return "inputPrivacyValueDisallowUsers";
    }
    static get [paramDesc]() {
        return [
            ["users", [_InputUser_], "Vector<InputUser>"],
        ];
    }
    get [params]() {
        return [
            [this.users, [_InputUser_], "Vector<InputUser>"],
        ];
    }
    constructor(params) {
        super();
        /** Users to disallow */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.users = params.users;
    }
}
/** Allow only participants of certain chats */
export class InputPrivacyValueAllowChatParticipants_ extends _InputPrivacyRule_ {
    get [id]() {
        return 0x840649CF;
    }
    static get [name]() {
        return "inputPrivacyValueAllowChatParticipants";
    }
    static get [paramDesc]() {
        return [
            ["chats", ["bigint"], "Vector<long>"],
        ];
    }
    get [params]() {
        return [
            [this.chats, ["bigint"], "Vector<long>"],
        ];
    }
    constructor(params) {
        super();
        /** Allowed chat IDs */
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.chats = params.chats;
    }
}
/** Disallow only participants of certain chats */
export class InputPrivacyValueDisallowChatParticipants_ extends _InputPrivacyRule_ {
    get [id]() {
        return 0xE94F0F86;
    }
    static get [name]() {
        return "inputPrivacyValueDisallowChatParticipants";
    }
    static get [paramDesc]() {
        return [
            ["chats", ["bigint"], "Vector<long>"],
        ];
    }
    get [params]() {
        return [
            [this.chats, ["bigint"], "Vector<long>"],
        ];
    }
    constructor(params) {
        super();
        /** Disallowed chat IDs */
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.chats = params.chats;
    }
}
/** Allow only [close friends »](https://core.telegram.org/api/privacy) */
export class InputPrivacyValueAllowCloseFriends_ extends _InputPrivacyRule_ {
    get [id]() {
        return 0x2F453E49;
    }
    static get [name]() {
        return "inputPrivacyValueAllowCloseFriends";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Allow all contacts */
export class PrivacyValueAllowContacts_ extends _PrivacyRule_ {
    get [id]() {
        return 0xFFFE1BAC;
    }
    static get [name]() {
        return "privacyValueAllowContacts";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Allow all users */
export class PrivacyValueAllowAll_ extends _PrivacyRule_ {
    get [id]() {
        return 0x65427B82;
    }
    static get [name]() {
        return "privacyValueAllowAll";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Allow only certain users */
export class PrivacyValueAllowUsers_ extends _PrivacyRule_ {
    get [id]() {
        return 0xB8905FB2;
    }
    static get [name]() {
        return "privacyValueAllowUsers";
    }
    static get [paramDesc]() {
        return [
            ["users", ["bigint"], "Vector<long>"],
        ];
    }
    get [params]() {
        return [
            [this.users, ["bigint"], "Vector<long>"],
        ];
    }
    constructor(params) {
        super();
        /** Allowed users */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.users = params.users;
    }
}
/** Disallow only contacts */
export class PrivacyValueDisallowContacts_ extends _PrivacyRule_ {
    get [id]() {
        return 0xF888FA1A;
    }
    static get [name]() {
        return "privacyValueDisallowContacts";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Disallow all users */
export class PrivacyValueDisallowAll_ extends _PrivacyRule_ {
    get [id]() {
        return 0x8B73E763;
    }
    static get [name]() {
        return "privacyValueDisallowAll";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Disallow only certain users */
export class PrivacyValueDisallowUsers_ extends _PrivacyRule_ {
    get [id]() {
        return 0xE4621141;
    }
    static get [name]() {
        return "privacyValueDisallowUsers";
    }
    static get [paramDesc]() {
        return [
            ["users", ["bigint"], "Vector<long>"],
        ];
    }
    get [params]() {
        return [
            [this.users, ["bigint"], "Vector<long>"],
        ];
    }
    constructor(params) {
        super();
        /** Disallowed users */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.users = params.users;
    }
}
/** Allow all participants of certain chats */
export class PrivacyValueAllowChatParticipants_ extends _PrivacyRule_ {
    get [id]() {
        return 0x6B134E8E;
    }
    static get [name]() {
        return "privacyValueAllowChatParticipants";
    }
    static get [paramDesc]() {
        return [
            ["chats", ["bigint"], "Vector<long>"],
        ];
    }
    get [params]() {
        return [
            [this.chats, ["bigint"], "Vector<long>"],
        ];
    }
    constructor(params) {
        super();
        /** Allowed chats */
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.chats = params.chats;
    }
}
/** Disallow only participants of certain chats */
export class PrivacyValueDisallowChatParticipants_ extends _PrivacyRule_ {
    get [id]() {
        return 0x41C87565;
    }
    static get [name]() {
        return "privacyValueDisallowChatParticipants";
    }
    static get [paramDesc]() {
        return [
            ["chats", ["bigint"], "Vector<long>"],
        ];
    }
    get [params]() {
        return [
            [this.chats, ["bigint"], "Vector<long>"],
        ];
    }
    constructor(params) {
        super();
        /** Disallowed chats */
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.chats = params.chats;
    }
}
/** Allow only [close friends »](https://core.telegram.org/api/privacy) */
export class PrivacyValueAllowCloseFriends_ extends _PrivacyRule_ {
    get [id]() {
        return 0xF7E8D89B;
    }
    static get [name]() {
        return "privacyValueAllowCloseFriends";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Privacy rules */
export class account_PrivacyRules_ extends _account_PrivacyRules_ {
    get [id]() {
        return 0x50A04E45;
    }
    static get [name]() {
        return "account.privacyRules";
    }
    static get [paramDesc]() {
        return [
            ["rules", [_PrivacyRule_], "Vector<PrivacyRule>"],
            ["chats", [_Chat_], "Vector<Chat>"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            [this.rules, [_PrivacyRule_], "Vector<PrivacyRule>"],
            [this.chats, [_Chat_], "Vector<Chat>"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** Privacy rules */
        Object.defineProperty(this, "rules", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Chats to which the rules apply */
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Users to which the rules apply */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.rules = params.rules;
        this.chats = params.chats;
        this.users = params.users;
    }
}
/** Time to live in days of the current account */
export class AccountDaysTTL_ extends _AccountDaysTTL_ {
    get [id]() {
        return 0xB8D0AFDF;
    }
    static get [name]() {
        return "accountDaysTTL";
    }
    static get [paramDesc]() {
        return [
            ["days", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.days, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** This account will self-destruct in the specified number of days */
        Object.defineProperty(this, "days", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.days = params.days;
    }
}
/** Defines the width and height of an image uploaded as document */
export class DocumentAttributeImageSize_ extends _DocumentAttribute_ {
    get [id]() {
        return 0x6C37C15C;
    }
    static get [name]() {
        return "documentAttributeImageSize";
    }
    static get [paramDesc]() {
        return [
            ["w", "number", "int"],
            ["h", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.w, "number", "int"],
            [this.h, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Width of image */
        Object.defineProperty(this, "w", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Height of image */
        Object.defineProperty(this, "h", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.w = params.w;
        this.h = params.h;
    }
}
/** Defines an animated GIF */
export class DocumentAttributeAnimated_ extends _DocumentAttribute_ {
    get [id]() {
        return 0x11B58939;
    }
    static get [name]() {
        return "documentAttributeAnimated";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Defines a sticker */
export class DocumentAttributeSticker_ extends _DocumentAttribute_ {
    get [id]() {
        return 0x6319D612;
    }
    static get [name]() {
        return "documentAttributeSticker";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["mask", "true", "flags.1?true"],
            ["alt", "string", "string"],
            ["stickerset", _InputStickerSet_, "InputStickerSet"],
            ["mask_coords", _MaskCoords_, "flags.0?MaskCoords"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.mask ?? null, "true", "flags.1?true"],
            [this.alt, "string", "string"],
            [this.stickerset, _InputStickerSet_, "InputStickerSet"],
            [this.mask_coords ?? null, _MaskCoords_, "flags.0?MaskCoords"],
        ];
    }
    constructor(params) {
        super();
        /** Whether this is a mask sticker */
        Object.defineProperty(this, "mask", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Alternative emoji representation of sticker */
        Object.defineProperty(this, "alt", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Associated stickerset */
        Object.defineProperty(this, "stickerset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Mask coordinates (if this is a mask sticker, attached to a photo) */
        Object.defineProperty(this, "mask_coords", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.mask = params.mask;
        this.alt = params.alt;
        this.stickerset = params.stickerset;
        this.mask_coords = params.mask_coords;
    }
}
/** Defines a video */
export class DocumentAttributeVideo_ extends _DocumentAttribute_ {
    get [id]() {
        return 0xD38FF1C2;
    }
    static get [name]() {
        return "documentAttributeVideo";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["round_message", "true", "flags.0?true"],
            ["supports_streaming", "true", "flags.1?true"],
            ["nosound", "true", "flags.3?true"],
            ["duration", "number", "double"],
            ["w", "number", "int"],
            ["h", "number", "int"],
            ["preload_prefix_size", "number", "flags.2?int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.round_message ?? null, "true", "flags.0?true"],
            [this.supports_streaming ?? null, "true", "flags.1?true"],
            [this.nosound ?? null, "true", "flags.3?true"],
            [this.duration, "number", "double"],
            [this.w, "number", "int"],
            [this.h, "number", "int"],
            [this.preload_prefix_size ?? null, "number", "flags.2?int"],
        ];
    }
    constructor(params) {
        super();
        /** Whether this is a round video */
        Object.defineProperty(this, "round_message", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether the video supports streaming */
        Object.defineProperty(this, "supports_streaming", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether the specified document is a video file with no audio tracks (a GIF animation (even as MPEG4), for example) */
        Object.defineProperty(this, "nosound", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Duration in seconds */
        Object.defineProperty(this, "duration", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Video width */
        Object.defineProperty(this, "w", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Video height */
        Object.defineProperty(this, "h", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of bytes to preload when preloading videos (particularly [video stories](https://core.telegram.org/api/stories)). */
        Object.defineProperty(this, "preload_prefix_size", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.round_message = params.round_message;
        this.supports_streaming = params.supports_streaming;
        this.nosound = params.nosound;
        this.duration = params.duration;
        this.w = params.w;
        this.h = params.h;
        this.preload_prefix_size = params.preload_prefix_size;
    }
}
/** Represents an audio file */
export class DocumentAttributeAudio_ extends _DocumentAttribute_ {
    get [id]() {
        return 0x9852F9C6;
    }
    static get [name]() {
        return "documentAttributeAudio";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["voice", "true", "flags.10?true"],
            ["duration", "number", "int"],
            ["title", "string", "flags.0?string"],
            ["performer", "string", "flags.1?string"],
            ["waveform", Uint8Array, "flags.2?bytes"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.voice ?? null, "true", "flags.10?true"],
            [this.duration, "number", "int"],
            [this.title ?? null, "string", "flags.0?string"],
            [this.performer ?? null, "string", "flags.1?string"],
            [this.waveform ?? null, Uint8Array, "flags.2?bytes"],
        ];
    }
    constructor(params) {
        super();
        /** Whether this is a voice message */
        Object.defineProperty(this, "voice", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Duration in seconds */
        Object.defineProperty(this, "duration", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Name of song */
        Object.defineProperty(this, "title", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Performer */
        Object.defineProperty(this, "performer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Waveform: consists in a series of bitpacked 5-bit values.
        Example implementation: [android](https://github.com/DrKLO/Telegram/blob/96dce2c9aabc33b87db61d830aa087b6b03fe397/TMessagesProj/jni/audio.c#L546). */
        Object.defineProperty(this, "waveform", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.voice = params.voice;
        this.duration = params.duration;
        this.title = params.title;
        this.performer = params.performer;
        this.waveform = params.waveform;
    }
}
/** A simple document with a file name */
export class DocumentAttributeFilename_ extends _DocumentAttribute_ {
    get [id]() {
        return 0x15590068;
    }
    static get [name]() {
        return "documentAttributeFilename";
    }
    static get [paramDesc]() {
        return [
            ["file_name", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.file_name, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** The file name */
        Object.defineProperty(this, "file_name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.file_name = params.file_name;
    }
}
/** Whether the current document has stickers attached */
export class DocumentAttributeHasStickers_ extends _DocumentAttribute_ {
    get [id]() {
        return 0x9801D2F7;
    }
    static get [name]() {
        return "documentAttributeHasStickers";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Info about a custom emoji */
export class DocumentAttributeCustomEmoji_ extends _DocumentAttribute_ {
    get [id]() {
        return 0xFD149899;
    }
    static get [name]() {
        return "documentAttributeCustomEmoji";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["free", "true", "flags.0?true"],
            ["text_color", "true", "flags.1?true"],
            ["alt", "string", "string"],
            ["stickerset", _InputStickerSet_, "InputStickerSet"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.free ?? null, "true", "flags.0?true"],
            [this.text_color ?? null, "true", "flags.1?true"],
            [this.alt, "string", "string"],
            [this.stickerset, _InputStickerSet_, "InputStickerSet"],
        ];
    }
    constructor(params) {
        super();
        /** Whether this custom emoji can be sent by non-Premium users */
        Object.defineProperty(this, "free", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether the color of this TGS custom emoji should be changed to the text color when used in messages, the accent color if used as emoji status, white on chat photos, or another appropriate color based on context. */
        Object.defineProperty(this, "text_color", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The actual emoji */
        Object.defineProperty(this, "alt", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The emoji stickerset to which this emoji belongs. */
        Object.defineProperty(this, "stickerset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.free = params.free;
        this.text_color = params.text_color;
        this.alt = params.alt;
        this.stickerset = params.stickerset;
    }
}
/** No new stickers were found for the given query */
export class messages_StickersNotModified_ extends _messages_Stickers_ {
    get [id]() {
        return 0xF1749A22;
    }
    static get [name]() {
        return "messages.stickersNotModified";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Found stickers */
export class messages_Stickers_ extends _messages_Stickers_ {
    get [id]() {
        return 0x30A6EC7E;
    }
    static get [name]() {
        return "messages.stickers";
    }
    static get [paramDesc]() {
        return [
            ["hash", "bigint", "long"],
            ["stickers", [_Document_], "Vector<Document>"],
        ];
    }
    get [params]() {
        return [
            [this.hash, "bigint", "long"],
            [this.stickers, [_Document_], "Vector<Document>"],
        ];
    }
    constructor(params) {
        super();
        /** [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation) */
        Object.defineProperty(this, "hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Stickers */
        Object.defineProperty(this, "stickers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.hash = params.hash;
        this.stickers = params.stickers;
    }
}
/** A stickerpack is a group of stickers associated to the same emoji.
It is **not** a sticker pack the way it is usually intended, you may be looking for a [StickerSet](https://core.telegram.org/type/StickerSet). */
export class StickerPack_ extends _StickerPack_ {
    get [id]() {
        return 0x12B299D4;
    }
    static get [name]() {
        return "stickerPack";
    }
    static get [paramDesc]() {
        return [
            ["emoticon", "string", "string"],
            ["documents", ["bigint"], "Vector<long>"],
        ];
    }
    get [params]() {
        return [
            [this.emoticon, "string", "string"],
            [this.documents, ["bigint"], "Vector<long>"],
        ];
    }
    constructor(params) {
        super();
        /** Emoji */
        Object.defineProperty(this, "emoticon", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Stickers */
        Object.defineProperty(this, "documents", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.emoticon = params.emoticon;
        this.documents = params.documents;
    }
}
/** Info about all installed stickers hasn't changed */
export class messages_AllStickersNotModified_ extends _messages_AllStickers_ {
    get [id]() {
        return 0xE86602C3;
    }
    static get [name]() {
        return "messages.allStickersNotModified";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Info about all installed stickers */
export class messages_AllStickers_ extends _messages_AllStickers_ {
    get [id]() {
        return 0xCDBBCEBB;
    }
    static get [name]() {
        return "messages.allStickers";
    }
    static get [paramDesc]() {
        return [
            ["hash", "bigint", "long"],
            ["sets", [_StickerSet_], "Vector<StickerSet>"],
        ];
    }
    get [params]() {
        return [
            [this.hash, "bigint", "long"],
            [this.sets, [_StickerSet_], "Vector<StickerSet>"],
        ];
    }
    constructor(params) {
        super();
        /** [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation) */
        Object.defineProperty(this, "hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** All stickersets */
        Object.defineProperty(this, "sets", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.hash = params.hash;
        this.sets = params.sets;
    }
}
/** Events affected by operation */
export class messages_AffectedMessages_ extends _messages_AffectedMessages_ {
    get [id]() {
        return 0x84D19185;
    }
    static get [name]() {
        return "messages.affectedMessages";
    }
    static get [paramDesc]() {
        return [
            ["pts", "number", "int"],
            ["pts_count", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.pts, "number", "int"],
            [this.pts_count, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** [Event count after generation](https://core.telegram.org/api/updates) */
        Object.defineProperty(this, "pts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Number of events that were generated](https://core.telegram.org/api/updates) */
        Object.defineProperty(this, "pts_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.pts = params.pts;
        this.pts_count = params.pts_count;
    }
}
/** No preview is available for the webpage */
export class WebPageEmpty_ extends _WebPage_ {
    get [id]() {
        return 0x211A1788;
    }
    static get [name]() {
        return "webPageEmpty";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["id", "bigint", "long"],
            ["url", "string", "flags.0?string"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.id, "bigint", "long"],
            [this.url ?? null, "string", "flags.0?string"],
        ];
    }
    constructor(params) {
        super();
        /** Preview ID */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** URL of the webpage. */
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
        this.url = params.url;
    }
}
/** A preview of the webpage is currently being generated */
export class WebPagePending_ extends _WebPage_ {
    get [id]() {
        return 0xB0D13E47;
    }
    static get [name]() {
        return "webPagePending";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["id", "bigint", "long"],
            ["url", "string", "flags.0?string"],
            ["date", "number", "int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.id, "bigint", "long"],
            [this.url ?? null, "string", "flags.0?string"],
            [this.date, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** ID of preview */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** URL of the webpage */
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** When was the processing started */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
        this.url = params.url;
        this.date = params.date;
    }
}
/** Webpage preview */
export class WebPage_ extends _WebPage_ {
    get [id]() {
        return 0xE89C45B2;
    }
    static get [name]() {
        return "webPage";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["has_large_media", "true", "flags.13?true"],
            ["id", "bigint", "long"],
            ["url", "string", "string"],
            ["display_url", "string", "string"],
            ["hash", "number", "int"],
            ["type", "string", "flags.0?string"],
            ["site_name", "string", "flags.1?string"],
            ["title", "string", "flags.2?string"],
            ["description", "string", "flags.3?string"],
            ["photo", _Photo_, "flags.4?Photo"],
            ["embed_url", "string", "flags.5?string"],
            ["embed_type", "string", "flags.5?string"],
            ["embed_width", "number", "flags.6?int"],
            ["embed_height", "number", "flags.6?int"],
            ["duration", "number", "flags.7?int"],
            ["author", "string", "flags.8?string"],
            ["document", _Document_, "flags.9?Document"],
            ["cached_page", _Page_, "flags.10?Page"],
            ["attributes", [_WebPageAttribute_], "flags.12?Vector<WebPageAttribute>"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.has_large_media ?? null, "true", "flags.13?true"],
            [this.id, "bigint", "long"],
            [this.url, "string", "string"],
            [this.display_url, "string", "string"],
            [this.hash, "number", "int"],
            [this.type ?? null, "string", "flags.0?string"],
            [this.site_name ?? null, "string", "flags.1?string"],
            [this.title ?? null, "string", "flags.2?string"],
            [this.description ?? null, "string", "flags.3?string"],
            [this.photo ?? null, _Photo_, "flags.4?Photo"],
            [this.embed_url ?? null, "string", "flags.5?string"],
            [this.embed_type ?? null, "string", "flags.5?string"],
            [this.embed_width ?? null, "number", "flags.6?int"],
            [this.embed_height ?? null, "number", "flags.6?int"],
            [this.duration ?? null, "number", "flags.7?int"],
            [this.author ?? null, "string", "flags.8?string"],
            [this.document ?? null, _Document_, "flags.9?Document"],
            [this.cached_page ?? null, _Page_, "flags.10?Page"],
            [this.attributes ?? null, [_WebPageAttribute_], "flags.12?Vector<WebPageAttribute>"],
        ];
    }
    constructor(params) {
        super();
        /** Whether the size of the media in the preview can be changed. */
        Object.defineProperty(this, "has_large_media", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Preview ID */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** URL of previewed webpage */
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Webpage URL to be displayed to the user */
        Object.defineProperty(this, "display_url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation) */
        Object.defineProperty(this, "hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Type of the web page. Can be: article, photo, audio, video, document, profile, app, or something else */
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Short name of the site (e.g., Google Docs, App Store) */
        Object.defineProperty(this, "site_name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Title of the content */
        Object.defineProperty(this, "title", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Content description */
        Object.defineProperty(this, "description", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Image representing the content */
        Object.defineProperty(this, "photo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** URL to show in the embedded preview */
        Object.defineProperty(this, "embed_url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** MIME type of the embedded preview, (e.g., text/html or video/mp4) */
        Object.defineProperty(this, "embed_type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Width of the embedded preview */
        Object.defineProperty(this, "embed_width", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Height of the embedded preview */
        Object.defineProperty(this, "embed_height", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Duration of the content, in seconds */
        Object.defineProperty(this, "duration", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Author of the content */
        Object.defineProperty(this, "author", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Preview of the content as a media file */
        Object.defineProperty(this, "document", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Page contents in [instant view](https://instantview.telegram.org) format */
        Object.defineProperty(this, "cached_page", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Webpage attributes */
        Object.defineProperty(this, "attributes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.has_large_media = params.has_large_media;
        this.id = params.id;
        this.url = params.url;
        this.display_url = params.display_url;
        this.hash = params.hash;
        this.type = params.type;
        this.site_name = params.site_name;
        this.title = params.title;
        this.description = params.description;
        this.photo = params.photo;
        this.embed_url = params.embed_url;
        this.embed_type = params.embed_type;
        this.embed_width = params.embed_width;
        this.embed_height = params.embed_height;
        this.duration = params.duration;
        this.author = params.author;
        this.document = params.document;
        this.cached_page = params.cached_page;
        this.attributes = params.attributes;
    }
}
/** The preview of the webpage hasn't changed */
export class WebPageNotModified_ extends _WebPage_ {
    get [id]() {
        return 0x7311CA11;
    }
    static get [name]() {
        return "webPageNotModified";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["cached_page_views", "number", "flags.0?int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.cached_page_views ?? null, "number", "flags.0?int"],
        ];
    }
    constructor(params) {
        super();
        /** Page view count */
        Object.defineProperty(this, "cached_page_views", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.cached_page_views = params?.cached_page_views;
    }
}
/** Logged-in session */
export class Authorization_ extends _Authorization_ {
    get [id]() {
        return 0xAD01D61D;
    }
    static get [name]() {
        return "authorization";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["current", "true", "flags.0?true"],
            ["official_app", "true", "flags.1?true"],
            ["password_pending", "true", "flags.2?true"],
            ["encrypted_requests_disabled", "true", "flags.3?true"],
            ["call_requests_disabled", "true", "flags.4?true"],
            ["unconfirmed", "true", "flags.5?true"],
            ["hash", "bigint", "long"],
            ["device_model", "string", "string"],
            ["platform", "string", "string"],
            ["system_version", "string", "string"],
            ["api_id", "number", "int"],
            ["app_name", "string", "string"],
            ["app_version", "string", "string"],
            ["date_created", "number", "int"],
            ["date_active", "number", "int"],
            ["ip", "string", "string"],
            ["country", "string", "string"],
            ["region", "string", "string"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.current ?? null, "true", "flags.0?true"],
            [this.official_app ?? null, "true", "flags.1?true"],
            [this.password_pending ?? null, "true", "flags.2?true"],
            [this.encrypted_requests_disabled ?? null, "true", "flags.3?true"],
            [this.call_requests_disabled ?? null, "true", "flags.4?true"],
            [this.unconfirmed ?? null, "true", "flags.5?true"],
            [this.hash, "bigint", "long"],
            [this.device_model, "string", "string"],
            [this.platform, "string", "string"],
            [this.system_version, "string", "string"],
            [this.api_id, "number", "int"],
            [this.app_name, "string", "string"],
            [this.app_version, "string", "string"],
            [this.date_created, "number", "int"],
            [this.date_active, "number", "int"],
            [this.ip, "string", "string"],
            [this.country, "string", "string"],
            [this.region, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Whether this is the current session */
        Object.defineProperty(this, "current", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether the session is from an official app */
        Object.defineProperty(this, "official_app", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether the session is still waiting for a 2FA password */
        Object.defineProperty(this, "password_pending", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this session will accept encrypted chats */
        Object.defineProperty(this, "encrypted_requests_disabled", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this session will accept phone calls */
        Object.defineProperty(this, "call_requests_disabled", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether the session is [unconfirmed, see here »](https://core.telegram.org/api/auth#confirming-login) for more info. */
        Object.defineProperty(this, "unconfirmed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Identifier */
        Object.defineProperty(this, "hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Device model */
        Object.defineProperty(this, "device_model", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Platform */
        Object.defineProperty(this, "platform", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** System version */
        Object.defineProperty(this, "system_version", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [API ID](https://core.telegram.org/api/obtaining_api_id) */
        Object.defineProperty(this, "api_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** App name */
        Object.defineProperty(this, "app_name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** App version */
        Object.defineProperty(this, "app_version", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** When was the session created */
        Object.defineProperty(this, "date_created", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** When was the session last active */
        Object.defineProperty(this, "date_active", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Last known IP */
        Object.defineProperty(this, "ip", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Country determined from IP */
        Object.defineProperty(this, "country", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Region determined from IP */
        Object.defineProperty(this, "region", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.current = params.current;
        this.official_app = params.official_app;
        this.password_pending = params.password_pending;
        this.encrypted_requests_disabled = params.encrypted_requests_disabled;
        this.call_requests_disabled = params.call_requests_disabled;
        this.unconfirmed = params.unconfirmed;
        this.hash = params.hash;
        this.device_model = params.device_model;
        this.platform = params.platform;
        this.system_version = params.system_version;
        this.api_id = params.api_id;
        this.app_name = params.app_name;
        this.app_version = params.app_version;
        this.date_created = params.date_created;
        this.date_active = params.date_active;
        this.ip = params.ip;
        this.country = params.country;
        this.region = params.region;
    }
}
/** Logged-in sessions */
export class account_Authorizations_ extends _account_Authorizations_ {
    get [id]() {
        return 0x4BFF8EA0;
    }
    static get [name]() {
        return "account.authorizations";
    }
    static get [paramDesc]() {
        return [
            ["authorization_ttl_days", "number", "int"],
            ["authorizations", [_Authorization_], "Vector<Authorization>"],
        ];
    }
    get [params]() {
        return [
            [this.authorization_ttl_days, "number", "int"],
            [this.authorizations, [_Authorization_], "Vector<Authorization>"],
        ];
    }
    constructor(params) {
        super();
        /** Time-to-live of session */
        Object.defineProperty(this, "authorization_ttl_days", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Logged-in sessions */
        Object.defineProperty(this, "authorizations", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.authorization_ttl_days = params.authorization_ttl_days;
        this.authorizations = params.authorizations;
    }
}
/** Configuration for two-factor authorization */
export class account_Password_ extends _account_Password_ {
    get [id]() {
        return 0x957B50FB;
    }
    static get [name]() {
        return "account.password";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["has_recovery", "true", "flags.0?true"],
            ["has_secure_values", "true", "flags.1?true"],
            ["has_password", "true", "flags.2?true"],
            ["current_algo", _PasswordKdfAlgo_, "flags.2?PasswordKdfAlgo"],
            ["srp_B", Uint8Array, "flags.2?bytes"],
            ["srp_id", "bigint", "flags.2?long"],
            ["hint", "string", "flags.3?string"],
            ["email_unconfirmed_pattern", "string", "flags.4?string"],
            ["new_algo", _PasswordKdfAlgo_, "PasswordKdfAlgo"],
            ["new_secure_algo", _SecurePasswordKdfAlgo_, "SecurePasswordKdfAlgo"],
            ["secure_random", Uint8Array, "bytes"],
            ["pending_reset_date", "number", "flags.5?int"],
            ["login_email_pattern", "string", "flags.6?string"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.has_recovery ?? null, "true", "flags.0?true"],
            [this.has_secure_values ?? null, "true", "flags.1?true"],
            [this.has_password ?? null, "true", "flags.2?true"],
            [this.current_algo ?? null, _PasswordKdfAlgo_, "flags.2?PasswordKdfAlgo"],
            [this.srp_B ?? null, Uint8Array, "flags.2?bytes"],
            [this.srp_id ?? null, "bigint", "flags.2?long"],
            [this.hint ?? null, "string", "flags.3?string"],
            [this.email_unconfirmed_pattern ?? null, "string", "flags.4?string"],
            [this.new_algo, _PasswordKdfAlgo_, "PasswordKdfAlgo"],
            [this.new_secure_algo, _SecurePasswordKdfAlgo_, "SecurePasswordKdfAlgo"],
            [this.secure_random, Uint8Array, "bytes"],
            [this.pending_reset_date ?? null, "number", "flags.5?int"],
            [this.login_email_pattern ?? null, "string", "flags.6?string"],
        ];
    }
    constructor(params) {
        super();
        /** Whether the user has a recovery method configured */
        Object.defineProperty(this, "has_recovery", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether telegram [passport](https://core.telegram.org/passport) is enabled */
        Object.defineProperty(this, "has_secure_values", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether the user has a password */
        Object.defineProperty(this, "has_password", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The [KDF algorithm for SRP two-factor authentication](https://core.telegram.org/api/srp) of the current password */
        Object.defineProperty(this, "current_algo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Srp B param for [SRP authorization](https://core.telegram.org/api/srp) */
        Object.defineProperty(this, "srp_B", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Srp ID param for [SRP authorization](https://core.telegram.org/api/srp) */
        Object.defineProperty(this, "srp_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Text hint for the password */
        Object.defineProperty(this, "hint", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** A [password recovery email](https://core.telegram.org/api/srp#email-verification) with the specified [pattern](https://core.telegram.org/api/pattern) is still awaiting verification */
        Object.defineProperty(this, "email_unconfirmed_pattern", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The [KDF algorithm for SRP two-factor authentication](https://core.telegram.org/api/srp) to use when creating new passwords */
        Object.defineProperty(this, "new_algo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The KDF algorithm for telegram [passport](https://core.telegram.org/passport) */
        Object.defineProperty(this, "new_secure_algo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Secure random string */
        Object.defineProperty(this, "secure_random", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The 2FA password will be automatically removed at this date, unless the user cancels the operation */
        Object.defineProperty(this, "pending_reset_date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** A verified login email with the specified [pattern](https://core.telegram.org/api/pattern) is configured */
        Object.defineProperty(this, "login_email_pattern", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.has_recovery = params.has_recovery;
        this.has_secure_values = params.has_secure_values;
        this.has_password = params.has_password;
        this.current_algo = params.current_algo;
        this.srp_B = params.srp_B;
        this.srp_id = params.srp_id;
        this.hint = params.hint;
        this.email_unconfirmed_pattern = params.email_unconfirmed_pattern;
        this.new_algo = params.new_algo;
        this.new_secure_algo = params.new_secure_algo;
        this.secure_random = params.secure_random;
        this.pending_reset_date = params.pending_reset_date;
        this.login_email_pattern = params.login_email_pattern;
    }
}
/** Private info associated to the password info (recovery email, telegram [passport](https://core.telegram.org/passport) info & so on) */
export class account_PasswordSettings_ extends _account_PasswordSettings_ {
    get [id]() {
        return 0x9A5C33E5;
    }
    static get [name]() {
        return "account.passwordSettings";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["email", "string", "flags.0?string"],
            ["secure_settings", _SecureSecretSettings_, "flags.1?SecureSecretSettings"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.email ?? null, "string", "flags.0?string"],
            [this.secure_settings ?? null, _SecureSecretSettings_, "flags.1?SecureSecretSettings"],
        ];
    }
    constructor(params) {
        super();
        /** [2FA Recovery email](https://core.telegram.org/api/srp#email-verification) */
        Object.defineProperty(this, "email", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Telegram [passport](https://core.telegram.org/passport) settings */
        Object.defineProperty(this, "secure_settings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.email = params?.email;
        this.secure_settings = params?.secure_settings;
    }
}
/** Settings for setting up a new password */
export class account_PasswordInputSettings_ extends _account_PasswordInputSettings_ {
    get [id]() {
        return 0xC23727C9;
    }
    static get [name]() {
        return "account.passwordInputSettings";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["new_algo", _PasswordKdfAlgo_, "flags.0?PasswordKdfAlgo"],
            ["new_password_hash", Uint8Array, "flags.0?bytes"],
            ["hint", "string", "flags.0?string"],
            ["email", "string", "flags.1?string"],
            ["new_secure_settings", _SecureSecretSettings_, "flags.2?SecureSecretSettings"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.new_algo ?? null, _PasswordKdfAlgo_, "flags.0?PasswordKdfAlgo"],
            [this.new_password_hash ?? null, Uint8Array, "flags.0?bytes"],
            [this.hint ?? null, "string", "flags.0?string"],
            [this.email ?? null, "string", "flags.1?string"],
            [this.new_secure_settings ?? null, _SecureSecretSettings_, "flags.2?SecureSecretSettings"],
        ];
    }
    constructor(params) {
        super();
        /** The [SRP algorithm](https://core.telegram.org/api/srp) to use */
        Object.defineProperty(this, "new_algo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The [computed password hash](https://core.telegram.org/api/srp) */
        Object.defineProperty(this, "new_password_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Text hint for the password */
        Object.defineProperty(this, "hint", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Password recovery email */
        Object.defineProperty(this, "email", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Telegram [passport](https://core.telegram.org/passport) settings */
        Object.defineProperty(this, "new_secure_settings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.new_algo = params?.new_algo;
        this.new_password_hash = params?.new_password_hash;
        this.hint = params?.hint;
        this.email = params?.email;
        this.new_secure_settings = params?.new_secure_settings;
    }
}
/** Recovery info of a [2FA password](https://core.telegram.org/api/srp), only for accounts with a [recovery email configured](https://core.telegram.org/api/srp#email-verification). */
export class auth_PasswordRecovery_ extends _auth_PasswordRecovery_ {
    get [id]() {
        return 0x137948A5;
    }
    static get [name]() {
        return "auth.passwordRecovery";
    }
    static get [paramDesc]() {
        return [
            ["email_pattern", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.email_pattern, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** The email to which the recovery code was sent must match this [pattern](https://core.telegram.org/api/pattern). */
        Object.defineProperty(this, "email_pattern", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.email_pattern = params.email_pattern;
    }
}
/** Message ID, for which PUSH-notifications were cancelled. */
export class ReceivedNotifyMessage_ extends _ReceivedNotifyMessage_ {
    get [id]() {
        return 0xA384B779;
    }
    static get [name]() {
        return "receivedNotifyMessage";
    }
    static get [paramDesc]() {
        return [
            ["id", "number", "int"],
            ["flags", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.id, "number", "int"],
            [this.flags, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Message ID, for which PUSH-notifications were canceled */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Reserved for future use */
        Object.defineProperty(this, "flags", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
        this.flags = params.flags;
    }
}
/** Exported chat invite */
export class ChatInviteExported_ extends _ExportedChatInvite_ {
    get [id]() {
        return 0x0AB4A819;
    }
    static get [name]() {
        return "chatInviteExported";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["revoked", "true", "flags.0?true"],
            ["permanent", "true", "flags.5?true"],
            ["request_needed", "true", "flags.6?true"],
            ["link", "string", "string"],
            ["admin_id", "bigint", "long"],
            ["date", "number", "int"],
            ["start_date", "number", "flags.4?int"],
            ["expire_date", "number", "flags.1?int"],
            ["usage_limit", "number", "flags.2?int"],
            ["usage", "number", "flags.3?int"],
            ["requested", "number", "flags.7?int"],
            ["title", "string", "flags.8?string"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.revoked ?? null, "true", "flags.0?true"],
            [this.permanent ?? null, "true", "flags.5?true"],
            [this.request_needed ?? null, "true", "flags.6?true"],
            [this.link, "string", "string"],
            [this.admin_id, "bigint", "long"],
            [this.date, "number", "int"],
            [this.start_date ?? null, "number", "flags.4?int"],
            [this.expire_date ?? null, "number", "flags.1?int"],
            [this.usage_limit ?? null, "number", "flags.2?int"],
            [this.usage ?? null, "number", "flags.3?int"],
            [this.requested ?? null, "number", "flags.7?int"],
            [this.title ?? null, "string", "flags.8?string"],
        ];
    }
    constructor(params) {
        super();
        /** Whether this chat invite was revoked */
        Object.defineProperty(this, "revoked", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this chat invite has no expiration */
        Object.defineProperty(this, "permanent", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether users importing this invite link will have to be approved to join the channel or group */
        Object.defineProperty(this, "request_needed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Chat invitation link */
        Object.defineProperty(this, "link", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the admin that created this chat invite */
        Object.defineProperty(this, "admin_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** When was this chat invite created */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** When was this chat invite last modified */
        Object.defineProperty(this, "start_date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** When does this chat invite expire */
        Object.defineProperty(this, "expire_date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Maximum number of users that can join using this link */
        Object.defineProperty(this, "usage_limit", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** How many users joined using this link */
        Object.defineProperty(this, "usage", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of users that have already used this link to join */
        Object.defineProperty(this, "requested", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Custom description for the invite link, visible only to admins */
        Object.defineProperty(this, "title", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.revoked = params.revoked;
        this.permanent = params.permanent;
        this.request_needed = params.request_needed;
        this.link = params.link;
        this.admin_id = params.admin_id;
        this.date = params.date;
        this.start_date = params.start_date;
        this.expire_date = params.expire_date;
        this.usage_limit = params.usage_limit;
        this.usage = params.usage;
        this.requested = params.requested;
        this.title = params.title;
    }
}
/** Used in updates and in the channel log to indicate when a user is requesting to join or has joined a [discussion group](https://core.telegram.org/api/discussion#requiring-users-to-join-the-group) */
export class ChatInvitePublicJoinRequests_ extends _ExportedChatInvite_ {
    get [id]() {
        return 0xED107AB7;
    }
    static get [name]() {
        return "chatInvitePublicJoinRequests";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** The user has already joined this chat */
export class ChatInviteAlready_ extends _ChatInvite_ {
    get [id]() {
        return 0x5A686D7C;
    }
    static get [name]() {
        return "chatInviteAlready";
    }
    static get [paramDesc]() {
        return [
            ["chat", _Chat_, "Chat"],
        ];
    }
    get [params]() {
        return [
            [this.chat, _Chat_, "Chat"],
        ];
    }
    constructor(params) {
        super();
        /** The chat connected to the invite */
        Object.defineProperty(this, "chat", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.chat = params.chat;
    }
}
/** Chat invite info */
export class ChatInvite_ extends _ChatInvite_ {
    get [id]() {
        return 0xCDE0EC40;
    }
    static get [name]() {
        return "chatInvite";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["channel", "true", "flags.0?true"],
            ["broadcast", "true", "flags.1?true"],
            ["public", "true", "flags.2?true"],
            ["megagroup", "true", "flags.3?true"],
            ["request_needed", "true", "flags.6?true"],
            ["verified", "true", "flags.7?true"],
            ["scam", "true", "flags.8?true"],
            ["fake", "true", "flags.9?true"],
            ["title", "string", "string"],
            ["about", "string", "flags.5?string"],
            ["photo", _Photo_, "Photo"],
            ["participants_count", "number", "int"],
            ["participants", [_User_], "flags.4?Vector<User>"],
            ["color", "number", "int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.channel ?? null, "true", "flags.0?true"],
            [this.broadcast ?? null, "true", "flags.1?true"],
            [this.public ?? null, "true", "flags.2?true"],
            [this.megagroup ?? null, "true", "flags.3?true"],
            [this.request_needed ?? null, "true", "flags.6?true"],
            [this.verified ?? null, "true", "flags.7?true"],
            [this.scam ?? null, "true", "flags.8?true"],
            [this.fake ?? null, "true", "flags.9?true"],
            [this.title, "string", "string"],
            [this.about ?? null, "string", "flags.5?string"],
            [this.photo, _Photo_, "Photo"],
            [this.participants_count, "number", "int"],
            [this.participants ?? null, [_User_], "flags.4?Vector<User>"],
            [this.color, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Whether this is a [channel/supergroup](https://core.telegram.org/api/channel) or a [normal group](https://core.telegram.org/api/channel) */
        Object.defineProperty(this, "channel", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this is a [channel](https://core.telegram.org/api/channel) */
        Object.defineProperty(this, "broadcast", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this is a public [channel/supergroup](https://core.telegram.org/api/channel) */
        Object.defineProperty(this, "public", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this is a [supergroup](https://core.telegram.org/api/channel) */
        Object.defineProperty(this, "megagroup", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether the [join request »](https://core.telegram.org/api/invites#join-requests) must be first approved by an administrator */
        Object.defineProperty(this, "request_needed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Is this chat or channel verified by Telegram? */
        Object.defineProperty(this, "verified", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** This chat is probably a scam */
        Object.defineProperty(this, "scam", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, this chat was reported by many users as a fake or scam: be careful when interacting with it. */
        Object.defineProperty(this, "fake", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Chat/supergroup/channel title */
        Object.defineProperty(this, "title", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Description of the group of channel */
        Object.defineProperty(this, "about", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Chat/supergroup/channel photo */
        Object.defineProperty(this, "photo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Participant count */
        Object.defineProperty(this, "participants_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** A few of the participants that are in the group */
        Object.defineProperty(this, "participants", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Profile color palette ID](https://core.telegram.org/api/colors) */
        Object.defineProperty(this, "color", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.channel = params.channel;
        this.broadcast = params.broadcast;
        this.public = params.public;
        this.megagroup = params.megagroup;
        this.request_needed = params.request_needed;
        this.verified = params.verified;
        this.scam = params.scam;
        this.fake = params.fake;
        this.title = params.title;
        this.about = params.about;
        this.photo = params.photo;
        this.participants_count = params.participants_count;
        this.participants = params.participants;
        this.color = params.color;
    }
}
/** A chat invitation that also allows peeking into the group to read messages without joining it. */
export class ChatInvitePeek_ extends _ChatInvite_ {
    get [id]() {
        return 0x61695CB0;
    }
    static get [name]() {
        return "chatInvitePeek";
    }
    static get [paramDesc]() {
        return [
            ["chat", _Chat_, "Chat"],
            ["expires", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.chat, _Chat_, "Chat"],
            [this.expires, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Chat information */
        Object.defineProperty(this, "chat", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Read-only anonymous access to this group will be revoked at this date */
        Object.defineProperty(this, "expires", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.chat = params.chat;
        this.expires = params.expires;
    }
}
/** Empty constructor */
export class InputStickerSetEmpty_ extends _InputStickerSet_ {
    get [id]() {
        return 0xFFB62B95;
    }
    static get [name]() {
        return "inputStickerSetEmpty";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Stickerset by ID */
export class InputStickerSetID_ extends _InputStickerSet_ {
    get [id]() {
        return 0x9DE7A269;
    }
    static get [name]() {
        return "inputStickerSetID";
    }
    static get [paramDesc]() {
        return [
            ["id", "bigint", "long"],
            ["access_hash", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.id, "bigint", "long"],
            [this.access_hash, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** ID */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Access hash */
        Object.defineProperty(this, "access_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
        this.access_hash = params.access_hash;
    }
}
/** Stickerset by short name, from a [stickerset deep link »](https://core.telegram.org/api/links#stickerset-links) */
export class InputStickerSetShortName_ extends _InputStickerSet_ {
    get [id]() {
        return 0x861CC8A0;
    }
    static get [name]() {
        return "inputStickerSetShortName";
    }
    static get [paramDesc]() {
        return [
            ["short_name", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.short_name, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Short name from a [stickerset deep link »](https://core.telegram.org/api/links#stickerset-links) */
        Object.defineProperty(this, "short_name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.short_name = params.short_name;
    }
}
/** Animated emojis stickerset */
export class InputStickerSetAnimatedEmoji_ extends _InputStickerSet_ {
    get [id]() {
        return 0x028703C8;
    }
    static get [name]() {
        return "inputStickerSetAnimatedEmoji";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Used for fetching [animated dice stickers](https://core.telegram.org/api/dice) */
export class InputStickerSetDice_ extends _InputStickerSet_ {
    get [id]() {
        return 0xE67F520E;
    }
    static get [name]() {
        return "inputStickerSetDice";
    }
    static get [paramDesc]() {
        return [
            ["emoticon", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.emoticon, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** The emoji, for now ![🏀](//telegram.org/img/emoji/40/F09F8F80.png), ![🎲](//telegram.org/img/emoji/40/F09F8EB2.png) and ![🎯](//telegram.org/img/emoji/40/F09F8EAF.png) are supported */
        Object.defineProperty(this, "emoticon", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.emoticon = params.emoticon;
    }
}
/** Animated emoji reaction stickerset (contains animations to play when a user clicks on a given animated emoji) */
export class InputStickerSetAnimatedEmojiAnimations_ extends _InputStickerSet_ {
    get [id]() {
        return 0x0CDE3739;
    }
    static get [name]() {
        return "inputStickerSetAnimatedEmojiAnimations";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Stickers to show when receiving a gifted Telegram Premium subscription */
export class InputStickerSetPremiumGifts_ extends _InputStickerSet_ {
    get [id]() {
        return 0xC88B3B02;
    }
    static get [name]() {
        return "inputStickerSetPremiumGifts";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Generic animation stickerset containing animations to play when [reacting to messages using a normal emoji without a custom animation](https://core.telegram.org/api/reactions) */
export class InputStickerSetEmojiGenericAnimations_ extends _InputStickerSet_ {
    get [id]() {
        return 0x04C4D4CE;
    }
    static get [name]() {
        return "inputStickerSetEmojiGenericAnimations";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Default [custom emoji status](https://core.telegram.org/api/emoji-status) stickerset */
export class InputStickerSetEmojiDefaultStatuses_ extends _InputStickerSet_ {
    get [id]() {
        return 0x29D0F5EE;
    }
    static get [name]() {
        return "inputStickerSetEmojiDefaultStatuses";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Default [custom emoji](https://core.telegram.org/api/custom-emoji) stickerset for [forum topic icons](https://core.telegram.org/api/forum#forum-topics) */
export class InputStickerSetEmojiDefaultTopicIcons_ extends _InputStickerSet_ {
    get [id]() {
        return 0x44C1F8E9;
    }
    static get [name]() {
        return "inputStickerSetEmojiDefaultTopicIcons";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Default [custom emoji status](https://core.telegram.org/api/emoji-status) stickerset for channel statuses */
export class InputStickerSetEmojiChannelDefaultStatuses_ extends _InputStickerSet_ {
    get [id]() {
        return 0x49748553;
    }
    static get [name]() {
        return "inputStickerSetEmojiChannelDefaultStatuses";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Represents a stickerset (stickerpack) */
export class StickerSet_ extends _StickerSet_ {
    get [id]() {
        return 0x2DD14EDC;
    }
    static get [name]() {
        return "stickerSet";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["archived", "true", "flags.1?true"],
            ["official", "true", "flags.2?true"],
            ["masks", "true", "flags.3?true"],
            ["animated", "true", "flags.5?true"],
            ["videos", "true", "flags.6?true"],
            ["emojis", "true", "flags.7?true"],
            ["text_color", "true", "flags.9?true"],
            ["channel_emoji_status", "true", "flags.10?true"],
            ["installed_date", "number", "flags.0?int"],
            ["id", "bigint", "long"],
            ["access_hash", "bigint", "long"],
            ["title", "string", "string"],
            ["short_name", "string", "string"],
            ["thumbs", [_PhotoSize_], "flags.4?Vector<PhotoSize>"],
            ["thumb_dc_id", "number", "flags.4?int"],
            ["thumb_version", "number", "flags.4?int"],
            ["thumb_document_id", "bigint", "flags.8?long"],
            ["count", "number", "int"],
            ["hash", "number", "int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.archived ?? null, "true", "flags.1?true"],
            [this.official ?? null, "true", "flags.2?true"],
            [this.masks ?? null, "true", "flags.3?true"],
            [this.animated ?? null, "true", "flags.5?true"],
            [this.videos ?? null, "true", "flags.6?true"],
            [this.emojis ?? null, "true", "flags.7?true"],
            [this.text_color ?? null, "true", "flags.9?true"],
            [this.channel_emoji_status ?? null, "true", "flags.10?true"],
            [this.installed_date ?? null, "number", "flags.0?int"],
            [this.id, "bigint", "long"],
            [this.access_hash, "bigint", "long"],
            [this.title, "string", "string"],
            [this.short_name, "string", "string"],
            [this.thumbs ?? null, [_PhotoSize_], "flags.4?Vector<PhotoSize>"],
            [this.thumb_dc_id ?? null, "number", "flags.4?int"],
            [this.thumb_version ?? null, "number", "flags.4?int"],
            [this.thumb_document_id ?? null, "bigint", "flags.8?long"],
            [this.count, "number", "int"],
            [this.hash, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Whether this stickerset was archived (due to too many saved stickers in the current account) */
        Object.defineProperty(this, "archived", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Is this stickerset official */
        Object.defineProperty(this, "official", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Is this a mask stickerset */
        Object.defineProperty(this, "masks", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Is this an animated stickerpack */
        Object.defineProperty(this, "animated", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Is this a video stickerpack */
        Object.defineProperty(this, "videos", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** This is a custom emoji stickerset */
        Object.defineProperty(this, "emojis", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether the color of this TGS custom emoji stickerset should be changed to the text color when used in messages, the accent color if used as emoji status, white on chat photos, or another appropriate color based on context. */
        Object.defineProperty(this, "text_color", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, this custom emoji stickerset can be used in [channel emoji statuses](https://core.telegram.org/api/emoji-status). */
        Object.defineProperty(this, "channel_emoji_status", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** When was this stickerset installed */
        Object.defineProperty(this, "installed_date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the stickerset */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Access hash of stickerset */
        Object.defineProperty(this, "access_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Title of stickerset */
        Object.defineProperty(this, "title", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Short name of stickerset, used when sharing stickerset using [stickerset deep links](https://core.telegram.org/api/links#stickerset-links). */
        Object.defineProperty(this, "short_name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Stickerset thumbnail */
        Object.defineProperty(this, "thumbs", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** DC ID of thumbnail */
        Object.defineProperty(this, "thumb_dc_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Thumbnail version */
        Object.defineProperty(this, "thumb_version", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Document ID of custom emoji thumbnail, fetch the document using [messages.getCustomEmojiDocuments](https://core.telegram.org/method/messages.getCustomEmojiDocuments) */
        Object.defineProperty(this, "thumb_document_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of stickers in pack */
        Object.defineProperty(this, "count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Hash */
        Object.defineProperty(this, "hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.archived = params.archived;
        this.official = params.official;
        this.masks = params.masks;
        this.animated = params.animated;
        this.videos = params.videos;
        this.emojis = params.emojis;
        this.text_color = params.text_color;
        this.channel_emoji_status = params.channel_emoji_status;
        this.installed_date = params.installed_date;
        this.id = params.id;
        this.access_hash = params.access_hash;
        this.title = params.title;
        this.short_name = params.short_name;
        this.thumbs = params.thumbs;
        this.thumb_dc_id = params.thumb_dc_id;
        this.thumb_version = params.thumb_version;
        this.thumb_document_id = params.thumb_document_id;
        this.count = params.count;
        this.hash = params.hash;
    }
}
/** Stickerset and stickers inside it */
export class messages_StickerSet_ extends _messages_StickerSet_ {
    get [id]() {
        return 0x6E153F16;
    }
    static get [name]() {
        return "messages.stickerSet";
    }
    static get [paramDesc]() {
        return [
            ["set", _StickerSet_, "StickerSet"],
            ["packs", [_StickerPack_], "Vector<StickerPack>"],
            ["keywords", [_StickerKeyword_], "Vector<StickerKeyword>"],
            ["documents", [_Document_], "Vector<Document>"],
        ];
    }
    get [params]() {
        return [
            [this.set, _StickerSet_, "StickerSet"],
            [this.packs, [_StickerPack_], "Vector<StickerPack>"],
            [this.keywords, [_StickerKeyword_], "Vector<StickerKeyword>"],
            [this.documents, [_Document_], "Vector<Document>"],
        ];
    }
    constructor(params) {
        super();
        /** The stickerset */
        Object.defineProperty(this, "set", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Emoji info for stickers */
        Object.defineProperty(this, "packs", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Keywords for some or every sticker in the stickerset. */
        Object.defineProperty(this, "keywords", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Stickers in stickerset */
        Object.defineProperty(this, "documents", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.set = params.set;
        this.packs = params.packs;
        this.keywords = params.keywords;
        this.documents = params.documents;
    }
}
/** The stickerset hasn't changed */
export class messages_StickerSetNotModified_ extends _messages_StickerSet_ {
    get [id]() {
        return 0xD3F924EB;
    }
    static get [name]() {
        return "messages.stickerSetNotModified";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Describes a bot command that can be used in a chat */
export class BotCommand_ extends _BotCommand_ {
    get [id]() {
        return 0xC27AC8C7;
    }
    static get [name]() {
        return "botCommand";
    }
    static get [paramDesc]() {
        return [
            ["command", "string", "string"],
            ["description", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.command, "string", "string"],
            [this.description, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** `/command` name */
        Object.defineProperty(this, "command", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Description of the command */
        Object.defineProperty(this, "description", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.command = params.command;
        this.description = params.description;
    }
}
/** Info about bots (available bot commands, etc) */
export class BotInfo_ extends _BotInfo_ {
    get [id]() {
        return 0x8F300B57;
    }
    static get [name]() {
        return "botInfo";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["user_id", "bigint", "flags.0?long"],
            ["description", "string", "flags.1?string"],
            ["description_photo", _Photo_, "flags.4?Photo"],
            ["description_document", _Document_, "flags.5?Document"],
            ["commands", [_BotCommand_], "flags.2?Vector<BotCommand>"],
            ["menu_button", _BotMenuButton_, "flags.3?BotMenuButton"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.user_id ?? null, "bigint", "flags.0?long"],
            [this.description ?? null, "string", "flags.1?string"],
            [this.description_photo ?? null, _Photo_, "flags.4?Photo"],
            [this.description_document ?? null, _Document_, "flags.5?Document"],
            [this.commands ?? null, [_BotCommand_], "flags.2?Vector<BotCommand>"],
            [this.menu_button ?? null, _BotMenuButton_, "flags.3?BotMenuButton"],
        ];
    }
    constructor(params) {
        super();
        /** ID of the bot */
        Object.defineProperty(this, "user_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Description of the bot */
        Object.defineProperty(this, "description", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Description photo */
        Object.defineProperty(this, "description_photo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Description animation in MPEG4 format */
        Object.defineProperty(this, "description_document", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Bot commands that can be used in the chat */
        Object.defineProperty(this, "commands", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Indicates the action to execute when pressing the in-UI menu button for bots */
        Object.defineProperty(this, "menu_button", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.user_id = params?.user_id;
        this.description = params?.description;
        this.description_photo = params?.description_photo;
        this.description_document = params?.description_document;
        this.commands = params?.commands;
        this.menu_button = params?.menu_button;
    }
}
/** Bot keyboard button */
export class KeyboardButton_ extends _KeyboardButton_ {
    get [id]() {
        return 0xA2FA4880;
    }
    static get [name]() {
        return "keyboardButton";
    }
    static get [paramDesc]() {
        return [
            ["text", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.text, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Button text */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.text = params.text;
    }
}
/** URL button */
export class KeyboardButtonUrl_ extends _KeyboardButton_ {
    get [id]() {
        return 0x258AFF05;
    }
    static get [name]() {
        return "keyboardButtonUrl";
    }
    static get [paramDesc]() {
        return [
            ["text", "string", "string"],
            ["url", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.text, "string", "string"],
            [this.url, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Button label */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** URL */
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.text = params.text;
        this.url = params.url;
    }
}
/** Callback button */
export class KeyboardButtonCallback_ extends _KeyboardButton_ {
    get [id]() {
        return 0x35BBDB6B;
    }
    static get [name]() {
        return "keyboardButtonCallback";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["requires_password", "true", "flags.0?true"],
            ["text", "string", "string"],
            ["data", Uint8Array, "bytes"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.requires_password ?? null, "true", "flags.0?true"],
            [this.text, "string", "string"],
            [this.data, Uint8Array, "bytes"],
        ];
    }
    constructor(params) {
        super();
        /** Whether the user should verify his identity by entering his [2FA SRP parameters](https://core.telegram.org/api/srp) to the [messages.getBotCallbackAnswer](https://core.telegram.org/method/messages.getBotCallbackAnswer) method. NOTE: telegram and the bot WILL NOT have access to the plaintext password, thanks to [SRP](https://core.telegram.org/api/srp). This button is mainly used by the official [@botfather](https://t.me/botfather) bot, for verifying the user's identity before transferring ownership of a bot to another user. */
        Object.defineProperty(this, "requires_password", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Button text */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Callback data */
        Object.defineProperty(this, "data", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.requires_password = params.requires_password;
        this.text = params.text;
        this.data = params.data;
    }
}
/** Button to request a user's phone number */
export class KeyboardButtonRequestPhone_ extends _KeyboardButton_ {
    get [id]() {
        return 0xB16A6C29;
    }
    static get [name]() {
        return "keyboardButtonRequestPhone";
    }
    static get [paramDesc]() {
        return [
            ["text", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.text, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Button text */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.text = params.text;
    }
}
/** Button to request a user's geolocation */
export class KeyboardButtonRequestGeoLocation_ extends _KeyboardButton_ {
    get [id]() {
        return 0xFC796B3F;
    }
    static get [name]() {
        return "keyboardButtonRequestGeoLocation";
    }
    static get [paramDesc]() {
        return [
            ["text", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.text, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Button text */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.text = params.text;
    }
}
/** Button to force a user to switch to inline mode: pressing the button will prompt the user to select one of their chats, open that chat and insert the bot's username and the specified inline query in the input field. */
export class KeyboardButtonSwitchInline_ extends _KeyboardButton_ {
    get [id]() {
        return 0x93B9FBB5;
    }
    static get [name]() {
        return "keyboardButtonSwitchInline";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["same_peer", "true", "flags.0?true"],
            ["text", "string", "string"],
            ["query", "string", "string"],
            ["peer_types", [_InlineQueryPeerType_], "flags.1?Vector<InlineQueryPeerType>"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.same_peer ?? null, "true", "flags.0?true"],
            [this.text, "string", "string"],
            [this.query, "string", "string"],
            [this.peer_types ?? null, [_InlineQueryPeerType_], "flags.1?Vector<InlineQueryPeerType>"],
        ];
    }
    constructor(params) {
        super();
        /** If set, pressing the button will insert the bot's username and the specified inline `query` in the current chat's input field. */
        Object.defineProperty(this, "same_peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Button label */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The inline query to use */
        Object.defineProperty(this, "query", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Filter to use when selecting chats. */
        Object.defineProperty(this, "peer_types", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.same_peer = params.same_peer;
        this.text = params.text;
        this.query = params.query;
        this.peer_types = params.peer_types;
    }
}
/** Button to start a game */
export class KeyboardButtonGame_ extends _KeyboardButton_ {
    get [id]() {
        return 0x50F41CCF;
    }
    static get [name]() {
        return "keyboardButtonGame";
    }
    static get [paramDesc]() {
        return [
            ["text", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.text, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Button text */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.text = params.text;
    }
}
/** Button to buy a product */
export class KeyboardButtonBuy_ extends _KeyboardButton_ {
    get [id]() {
        return 0xAFD93FBB;
    }
    static get [name]() {
        return "keyboardButtonBuy";
    }
    static get [paramDesc]() {
        return [
            ["text", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.text, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Button text */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.text = params.text;
    }
}
/** Button to request a user to authorize via URL using [Seamless Telegram Login](https://telegram.org/blog/privacy-discussions-web-bots#meet-seamless-web-bots). When the user clicks on such a button, [messages.requestUrlAuth](https://core.telegram.org/method/messages.requestUrlAuth) should be called, providing the `button_id` and the ID of the container message. The returned [urlAuthResultRequest](https://core.telegram.org/constructor/urlAuthResultRequest) object will contain more details about the authorization request (`request_write_access` if the bot would like to send messages to the user along with the username of the bot which will be used for user authorization). Finally, the user can choose to call [messages.acceptUrlAuth](https://core.telegram.org/method/messages.acceptUrlAuth) to get a [urlAuthResultAccepted](https://core.telegram.org/constructor/urlAuthResultAccepted) with the URL to open instead of the `url` of this constructor, or a [urlAuthResultDefault](https://core.telegram.org/constructor/urlAuthResultDefault), in which case the `url` of this constructor must be opened, instead. If the user refuses the authorization request but still wants to open the link, the `url` of this constructor must be used. */
export class KeyboardButtonUrlAuth_ extends _KeyboardButton_ {
    get [id]() {
        return 0x10B78D29;
    }
    static get [name]() {
        return "keyboardButtonUrlAuth";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["text", "string", "string"],
            ["fwd_text", "string", "flags.0?string"],
            ["url", "string", "string"],
            ["button_id", "number", "int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.text, "string", "string"],
            [this.fwd_text ?? null, "string", "flags.0?string"],
            [this.url, "string", "string"],
            [this.button_id, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Button label */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New text of the button in forwarded messages. */
        Object.defineProperty(this, "fwd_text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** An HTTP URL to be opened with user authorization data added to the query string when the button is pressed. If the user refuses to provide authorization data, the original URL without information about the user will be opened. The data added is the same as described in [Receiving authorization data](https://core.telegram.org/widgets/login#receiving-authorization-data).
          
        **NOTE**: Services must **always** check the hash of the received data to verify the authentication and the integrity of the data as described in [Checking authorization](https://core.telegram.org/widgets/login#checking-authorization). */
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the button to pass to [messages.requestUrlAuth](https://core.telegram.org/method/messages.requestUrlAuth) */
        Object.defineProperty(this, "button_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.text = params.text;
        this.fwd_text = params.fwd_text;
        this.url = params.url;
        this.button_id = params.button_id;
    }
}
/** Button to request a user to [authorize](https://core.telegram.org/method/messages.acceptUrlAuth) via URL using [Seamless Telegram Login](https://telegram.org/blog/privacy-discussions-web-bots#meet-seamless-web-bots). */
export class InputKeyboardButtonUrlAuth_ extends _KeyboardButton_ {
    get [id]() {
        return 0xD02E7FD4;
    }
    static get [name]() {
        return "inputKeyboardButtonUrlAuth";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["request_write_access", "true", "flags.0?true"],
            ["text", "string", "string"],
            ["fwd_text", "string", "flags.1?string"],
            ["url", "string", "string"],
            ["bot", _InputUser_, "InputUser"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.request_write_access ?? null, "true", "flags.0?true"],
            [this.text, "string", "string"],
            [this.fwd_text ?? null, "string", "flags.1?string"],
            [this.url, "string", "string"],
            [this.bot, _InputUser_, "InputUser"],
        ];
    }
    constructor(params) {
        super();
        /** Set this flag to request the permission for your bot to send messages to the user. */
        Object.defineProperty(this, "request_write_access", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Button text */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New text of the button in forwarded messages. */
        Object.defineProperty(this, "fwd_text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** An HTTP URL to be opened with user authorization data added to the query string when the button is pressed. If the user refuses to provide authorization data, the original URL without information about the user will be opened. The data added is the same as described in [Receiving authorization data](https://core.telegram.org/widgets/login#receiving-authorization-data).
        NOTE: You must always check the hash of the received data to verify the authentication and the integrity of the data as described in [Checking authorization](https://core.telegram.org/widgets/login#checking-authorization). */
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Username of a bot, which will be used for user authorization. See [Setting up a bot](https://core.telegram.org/widgets/login#setting-up-a-bot) for more details. If not specified, the current bot's username will be assumed. The url's domain must be the same as the domain linked with the bot. See [Linking your domain to the bot](https://core.telegram.org/widgets/login#linking-your-domain-to-the-bot) for more details. */
        Object.defineProperty(this, "bot", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.request_write_access = params.request_write_access;
        this.text = params.text;
        this.fwd_text = params.fwd_text;
        this.url = params.url;
        this.bot = params.bot;
    }
}
/** A button that allows the user to create and send a poll when pressed; available only in private */
export class KeyboardButtonRequestPoll_ extends _KeyboardButton_ {
    get [id]() {
        return 0xBBC7515D;
    }
    static get [name]() {
        return "keyboardButtonRequestPoll";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["quiz", "boolean", "flags.0?Bool"],
            ["text", "string", "string"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.quiz ?? null, "boolean", "flags.0?Bool"],
            [this.text, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** If set, only quiz polls can be sent */
        Object.defineProperty(this, "quiz", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Button text */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.quiz = params.quiz;
        this.text = params.text;
    }
}
/** Button that links directly to a user profile */
export class InputKeyboardButtonUserProfile_ extends _KeyboardButton_ {
    get [id]() {
        return 0xE988037B;
    }
    static get [name]() {
        return "inputKeyboardButtonUserProfile";
    }
    static get [paramDesc]() {
        return [
            ["text", "string", "string"],
            ["user_id", _InputUser_, "InputUser"],
        ];
    }
    get [params]() {
        return [
            [this.text, "string", "string"],
            [this.user_id, _InputUser_, "InputUser"],
        ];
    }
    constructor(params) {
        super();
        /** Button text */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** User ID */
        Object.defineProperty(this, "user_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.text = params.text;
        this.user_id = params.user_id;
    }
}
/** Button that links directly to a user profile */
export class KeyboardButtonUserProfile_ extends _KeyboardButton_ {
    get [id]() {
        return 0x308660C1;
    }
    static get [name]() {
        return "keyboardButtonUserProfile";
    }
    static get [paramDesc]() {
        return [
            ["text", "string", "string"],
            ["user_id", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.text, "string", "string"],
            [this.user_id, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** Button text */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** User ID */
        Object.defineProperty(this, "user_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.text = params.text;
        this.user_id = params.user_id;
    }
}
/** Button to open a [bot mini app](https://core.telegram.org/api/bots/webapps) using [messages.requestWebView](https://core.telegram.org/method/messages.requestWebView), sending over user information after user confirmation. */
export class KeyboardButtonWebView_ extends _KeyboardButton_ {
    get [id]() {
        return 0x13767230;
    }
    static get [name]() {
        return "keyboardButtonWebView";
    }
    static get [paramDesc]() {
        return [
            ["text", "string", "string"],
            ["url", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.text, "string", "string"],
            [this.url, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Button text */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Web app url](https://core.telegram.org/api/bots/webapps) */
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.text = params.text;
        this.url = params.url;
    }
}
/** Button to open a [bot mini app](https://core.telegram.org/api/bots/webapps) using [messages.requestSimpleWebView](https://core.telegram.org/method/messages.requestSimpleWebView), without sending user information to the web app. */
export class KeyboardButtonSimpleWebView_ extends _KeyboardButton_ {
    get [id]() {
        return 0xA0C0505C;
    }
    static get [name]() {
        return "keyboardButtonSimpleWebView";
    }
    static get [paramDesc]() {
        return [
            ["text", "string", "string"],
            ["url", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.text, "string", "string"],
            [this.url, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Button text */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Web app URL](https://core.telegram.org/api/bots/webapps) */
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.text = params.text;
        this.url = params.url;
    }
}
/** Prompts the user to select and share one or more peers with the bot using [messages.sendBotRequestedPeer](https://core.telegram.org/method/messages.sendBotRequestedPeer) */
export class KeyboardButtonRequestPeer_ extends _KeyboardButton_ {
    get [id]() {
        return 0x53D7BFD8;
    }
    static get [name]() {
        return "keyboardButtonRequestPeer";
    }
    static get [paramDesc]() {
        return [
            ["text", "string", "string"],
            ["button_id", "number", "int"],
            ["peer_type", _RequestPeerType_, "RequestPeerType"],
            ["max_quantity", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.text, "string", "string"],
            [this.button_id, "number", "int"],
            [this.peer_type, _RequestPeerType_, "RequestPeerType"],
            [this.max_quantity, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Button text */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Button ID, to be passed to [messages.sendBotRequestedPeer](https://core.telegram.org/method/messages.sendBotRequestedPeer). */
        Object.defineProperty(this, "button_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Filtering criteria to use for the peer selection list shown to the user.
        The list should display all existing peers of the specified type, and should also offer an option for the user to create and immediately use one or more (up to `max_quantity`) peers of the specified type, if needed. */
        Object.defineProperty(this, "peer_type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Maximum number of peers that can be chosne. */
        Object.defineProperty(this, "max_quantity", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.text = params.text;
        this.button_id = params.button_id;
        this.peer_type = params.peer_type;
        this.max_quantity = params.max_quantity;
    }
}
/** Inline keyboard row */
export class KeyboardButtonRow_ extends _KeyboardButtonRow_ {
    get [id]() {
        return 0x77608B83;
    }
    static get [name]() {
        return "keyboardButtonRow";
    }
    static get [paramDesc]() {
        return [
            ["buttons", [_KeyboardButton_], "Vector<KeyboardButton>"],
        ];
    }
    get [params]() {
        return [
            [this.buttons, [_KeyboardButton_], "Vector<KeyboardButton>"],
        ];
    }
    constructor(params) {
        super();
        /** Bot or inline keyboard buttons */
        Object.defineProperty(this, "buttons", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.buttons = params.buttons;
    }
}
/** Hide sent bot keyboard */
export class ReplyKeyboardHide_ extends _ReplyMarkup_ {
    get [id]() {
        return 0xA03E5B85;
    }
    static get [name]() {
        return "replyKeyboardHide";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["selective", "true", "flags.2?true"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.selective ?? null, "true", "flags.2?true"],
        ];
    }
    constructor(params) {
        super();
        /** Use this flag if you want to remove the keyboard for specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply (has reply\_to\_message\_id), sender of the original message.
          
        Example: A user votes in a poll, bot returns confirmation message in reply to the vote and removes the keyboard for that user, while still showing the keyboard with poll options to users who haven't voted yet */
        Object.defineProperty(this, "selective", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.selective = params?.selective;
    }
}
/** Force the user to send a reply */
export class ReplyKeyboardForceReply_ extends _ReplyMarkup_ {
    get [id]() {
        return 0x86B40B08;
    }
    static get [name]() {
        return "replyKeyboardForceReply";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["single_use", "true", "flags.1?true"],
            ["selective", "true", "flags.2?true"],
            ["placeholder", "string", "flags.3?string"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.single_use ?? null, "true", "flags.1?true"],
            [this.selective ?? null, "true", "flags.2?true"],
            [this.placeholder ?? null, "string", "flags.3?string"],
        ];
    }
    constructor(params) {
        super();
        /** Requests clients to hide the keyboard as soon as it's been used. The keyboard will still be available, but clients will automatically display the usual letter-keyboard in the chat – the user can press a special button in the input field to see the custom keyboard again. */
        Object.defineProperty(this, "single_use", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Use this parameter if you want to show the keyboard to specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply (has reply\_to\_message\_id), sender of the original message.
        Example: A user requests to change the bot's language, bot replies to the request with a keyboard to select the new language. Other users in the group don't see the keyboard. */
        Object.defineProperty(this, "selective", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The placeholder to be shown in the input field when the keyboard is active; 1-64 characters. */
        Object.defineProperty(this, "placeholder", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.single_use = params?.single_use;
        this.selective = params?.selective;
        this.placeholder = params?.placeholder;
    }
}
/** Bot keyboard */
export class ReplyKeyboardMarkup_ extends _ReplyMarkup_ {
    get [id]() {
        return 0x85DD99D1;
    }
    static get [name]() {
        return "replyKeyboardMarkup";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["resize", "true", "flags.0?true"],
            ["single_use", "true", "flags.1?true"],
            ["selective", "true", "flags.2?true"],
            ["persistent", "true", "flags.4?true"],
            ["rows", [_KeyboardButtonRow_], "Vector<KeyboardButtonRow>"],
            ["placeholder", "string", "flags.3?string"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.resize ?? null, "true", "flags.0?true"],
            [this.single_use ?? null, "true", "flags.1?true"],
            [this.selective ?? null, "true", "flags.2?true"],
            [this.persistent ?? null, "true", "flags.4?true"],
            [this.rows, [_KeyboardButtonRow_], "Vector<KeyboardButtonRow>"],
            [this.placeholder ?? null, "string", "flags.3?string"],
        ];
    }
    constructor(params) {
        super();
        /** Requests clients to resize the keyboard vertically for optimal fit (e.g., make the keyboard smaller if there are just two rows of buttons). If not set, the custom keyboard is always of the same height as the app's standard keyboard. */
        Object.defineProperty(this, "resize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Requests clients to hide the keyboard as soon as it's been used. The keyboard will still be available, but clients will automatically display the usual letter-keyboard in the chat – the user can press a special button in the input field to see the custom keyboard again. */
        Object.defineProperty(this, "single_use", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Use this parameter if you want to show the keyboard to specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply (has reply\_to\_message\_id), sender of the original message.
          
        Example: A user requests to change the bot's language, bot replies to the request with a keyboard to select the new language. Other users in the group don't see the keyboard. */
        Object.defineProperty(this, "selective", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Requests clients to always show the keyboard when the regular keyboard is hidden. */
        Object.defineProperty(this, "persistent", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Button row */
        Object.defineProperty(this, "rows", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The placeholder to be shown in the input field when the keyboard is active; 1-64 characters. */
        Object.defineProperty(this, "placeholder", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.resize = params.resize;
        this.single_use = params.single_use;
        this.selective = params.selective;
        this.persistent = params.persistent;
        this.rows = params.rows;
        this.placeholder = params.placeholder;
    }
}
/** Bot or inline keyboard */
export class ReplyInlineMarkup_ extends _ReplyMarkup_ {
    get [id]() {
        return 0x48A30254;
    }
    static get [name]() {
        return "replyInlineMarkup";
    }
    static get [paramDesc]() {
        return [
            ["rows", [_KeyboardButtonRow_], "Vector<KeyboardButtonRow>"],
        ];
    }
    get [params]() {
        return [
            [this.rows, [_KeyboardButtonRow_], "Vector<KeyboardButtonRow>"],
        ];
    }
    constructor(params) {
        super();
        /** Bot or inline keyboard rows */
        Object.defineProperty(this, "rows", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.rows = params.rows;
    }
}
/** Unknown message entity */
export class MessageEntityUnknown_ extends _MessageEntity_ {
    get [id]() {
        return 0xBB92BA95;
    }
    static get [name]() {
        return "messageEntityUnknown";
    }
    static get [paramDesc]() {
        return [
            ["offset", "number", "int"],
            ["length", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.offset, "number", "int"],
            [this.length, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
        Object.defineProperty(this, "offset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
        Object.defineProperty(this, "length", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.offset = params.offset;
        this.length = params.length;
    }
}
/** Message entity [mentioning](https://core.telegram.org/api/mentions) a user by `@username`; [messageEntityMentionName](https://core.telegram.org/constructor/messageEntityMentionName) can also be used to mention users by their ID. */
export class MessageEntityMention_ extends _MessageEntity_ {
    get [id]() {
        return 0xFA04579D;
    }
    static get [name]() {
        return "messageEntityMention";
    }
    static get [paramDesc]() {
        return [
            ["offset", "number", "int"],
            ["length", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.offset, "number", "int"],
            [this.length, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
        Object.defineProperty(this, "offset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
        Object.defineProperty(this, "length", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.offset = params.offset;
        this.length = params.length;
    }
}
/** **#hashtag** message entity */
export class MessageEntityHashtag_ extends _MessageEntity_ {
    get [id]() {
        return 0x6F635B0D;
    }
    static get [name]() {
        return "messageEntityHashtag";
    }
    static get [paramDesc]() {
        return [
            ["offset", "number", "int"],
            ["length", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.offset, "number", "int"],
            [this.length, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
        Object.defineProperty(this, "offset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
        Object.defineProperty(this, "length", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.offset = params.offset;
        this.length = params.length;
    }
}
/** Message entity representing a bot /command */
export class MessageEntityBotCommand_ extends _MessageEntity_ {
    get [id]() {
        return 0x6CEF8AC7;
    }
    static get [name]() {
        return "messageEntityBotCommand";
    }
    static get [paramDesc]() {
        return [
            ["offset", "number", "int"],
            ["length", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.offset, "number", "int"],
            [this.length, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
        Object.defineProperty(this, "offset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
        Object.defineProperty(this, "length", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.offset = params.offset;
        this.length = params.length;
    }
}
/** Message entity representing an in-text url: [https://google.com](https://google.com); for [text urls](https://google.com), use [messageEntityTextUrl](https://core.telegram.org/constructor/messageEntityTextUrl). */
export class MessageEntityUrl_ extends _MessageEntity_ {
    get [id]() {
        return 0x6ED02538;
    }
    static get [name]() {
        return "messageEntityUrl";
    }
    static get [paramDesc]() {
        return [
            ["offset", "number", "int"],
            ["length", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.offset, "number", "int"],
            [this.length, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
        Object.defineProperty(this, "offset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
        Object.defineProperty(this, "length", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.offset = params.offset;
        this.length = params.length;
    }
}
/** Message entity representing an [email@example.com](mailto:email@example.com). */
export class MessageEntityEmail_ extends _MessageEntity_ {
    get [id]() {
        return 0x64E475C2;
    }
    static get [name]() {
        return "messageEntityEmail";
    }
    static get [paramDesc]() {
        return [
            ["offset", "number", "int"],
            ["length", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.offset, "number", "int"],
            [this.length, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
        Object.defineProperty(this, "offset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
        Object.defineProperty(this, "length", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.offset = params.offset;
        this.length = params.length;
    }
}
/** Message entity representing **bold text**. */
export class MessageEntityBold_ extends _MessageEntity_ {
    get [id]() {
        return 0xBD610BC9;
    }
    static get [name]() {
        return "messageEntityBold";
    }
    static get [paramDesc]() {
        return [
            ["offset", "number", "int"],
            ["length", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.offset, "number", "int"],
            [this.length, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
        Object.defineProperty(this, "offset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
        Object.defineProperty(this, "length", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.offset = params.offset;
        this.length = params.length;
    }
}
/** Message entity representing _italic text_. */
export class MessageEntityItalic_ extends _MessageEntity_ {
    get [id]() {
        return 0x826F8B60;
    }
    static get [name]() {
        return "messageEntityItalic";
    }
    static get [paramDesc]() {
        return [
            ["offset", "number", "int"],
            ["length", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.offset, "number", "int"],
            [this.length, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
        Object.defineProperty(this, "offset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
        Object.defineProperty(this, "length", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.offset = params.offset;
        this.length = params.length;
    }
}
/** Message entity representing a `codeblock`. */
export class MessageEntityCode_ extends _MessageEntity_ {
    get [id]() {
        return 0x28A20571;
    }
    static get [name]() {
        return "messageEntityCode";
    }
    static get [paramDesc]() {
        return [
            ["offset", "number", "int"],
            ["length", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.offset, "number", "int"],
            [this.length, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
        Object.defineProperty(this, "offset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
        Object.defineProperty(this, "length", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.offset = params.offset;
        this.length = params.length;
    }
}
/** Message entity representing a preformatted `codeblock`, allowing the user to specify a programming language for the codeblock. */
export class MessageEntityPre_ extends _MessageEntity_ {
    get [id]() {
        return 0x73924BE0;
    }
    static get [name]() {
        return "messageEntityPre";
    }
    static get [paramDesc]() {
        return [
            ["offset", "number", "int"],
            ["length", "number", "int"],
            ["language", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.offset, "number", "int"],
            [this.length, "number", "int"],
            [this.language, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
        Object.defineProperty(this, "offset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
        Object.defineProperty(this, "length", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Programming language of the code */
        Object.defineProperty(this, "language", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.offset = params.offset;
        this.length = params.length;
        this.language = params.language;
    }
}
/** Message entity representing a [text url](https://google.com): for in-text urls like [https://google.com](https://google.com) use [messageEntityUrl](https://core.telegram.org/constructor/messageEntityUrl). */
export class MessageEntityTextUrl_ extends _MessageEntity_ {
    get [id]() {
        return 0x76A6D327;
    }
    static get [name]() {
        return "messageEntityTextUrl";
    }
    static get [paramDesc]() {
        return [
            ["offset", "number", "int"],
            ["length", "number", "int"],
            ["url", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.offset, "number", "int"],
            [this.length, "number", "int"],
            [this.url, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
        Object.defineProperty(this, "offset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
        Object.defineProperty(this, "length", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The actual URL */
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.offset = params.offset;
        this.length = params.length;
        this.url = params.url;
    }
}
/** Message entity representing a [user mention](https://core.telegram.org/api/mentions): for _creating_ a mention use [inputMessageEntityMentionName](https://core.telegram.org/constructor/inputMessageEntityMentionName). */
export class MessageEntityMentionName_ extends _MessageEntity_ {
    get [id]() {
        return 0xDC7B1140;
    }
    static get [name]() {
        return "messageEntityMentionName";
    }
    static get [paramDesc]() {
        return [
            ["offset", "number", "int"],
            ["length", "number", "int"],
            ["user_id", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.offset, "number", "int"],
            [this.length, "number", "int"],
            [this.user_id, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
        Object.defineProperty(this, "offset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
        Object.defineProperty(this, "length", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Identifier of the user that was mentioned */
        Object.defineProperty(this, "user_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.offset = params.offset;
        this.length = params.length;
        this.user_id = params.user_id;
    }
}
/** Message entity that can be used to create a user [user mention](https://core.telegram.org/api/mentions): received mentions use the [messageEntityMentionName](https://core.telegram.org/constructor/messageEntityMentionName) constructor, instead. */
export class InputMessageEntityMentionName_ extends _MessageEntity_ {
    get [id]() {
        return 0x208E68C9;
    }
    static get [name]() {
        return "inputMessageEntityMentionName";
    }
    static get [paramDesc]() {
        return [
            ["offset", "number", "int"],
            ["length", "number", "int"],
            ["user_id", _InputUser_, "InputUser"],
        ];
    }
    get [params]() {
        return [
            [this.offset, "number", "int"],
            [this.length, "number", "int"],
            [this.user_id, _InputUser_, "InputUser"],
        ];
    }
    constructor(params) {
        super();
        /** Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
        Object.defineProperty(this, "offset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
        Object.defineProperty(this, "length", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Identifier of the user that was mentioned */
        Object.defineProperty(this, "user_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.offset = params.offset;
        this.length = params.length;
        this.user_id = params.user_id;
    }
}
/** Message entity representing a phone number. */
export class MessageEntityPhone_ extends _MessageEntity_ {
    get [id]() {
        return 0x9B69E34B;
    }
    static get [name]() {
        return "messageEntityPhone";
    }
    static get [paramDesc]() {
        return [
            ["offset", "number", "int"],
            ["length", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.offset, "number", "int"],
            [this.length, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
        Object.defineProperty(this, "offset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
        Object.defineProperty(this, "length", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.offset = params.offset;
        this.length = params.length;
    }
}
/** Message entity representing a **$cashtag**. */
export class MessageEntityCashtag_ extends _MessageEntity_ {
    get [id]() {
        return 0x4C4E743F;
    }
    static get [name]() {
        return "messageEntityCashtag";
    }
    static get [paramDesc]() {
        return [
            ["offset", "number", "int"],
            ["length", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.offset, "number", "int"],
            [this.length, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
        Object.defineProperty(this, "offset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
        Object.defineProperty(this, "length", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.offset = params.offset;
        this.length = params.length;
    }
}
/** Message entity representing underlined text. */
export class MessageEntityUnderline_ extends _MessageEntity_ {
    get [id]() {
        return 0x9C4E7E8B;
    }
    static get [name]() {
        return "messageEntityUnderline";
    }
    static get [paramDesc]() {
        return [
            ["offset", "number", "int"],
            ["length", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.offset, "number", "int"],
            [this.length, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
        Object.defineProperty(this, "offset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
        Object.defineProperty(this, "length", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.offset = params.offset;
        this.length = params.length;
    }
}
/** Message entity representing strikethrough text. */
export class MessageEntityStrike_ extends _MessageEntity_ {
    get [id]() {
        return 0xBF0693D4;
    }
    static get [name]() {
        return "messageEntityStrike";
    }
    static get [paramDesc]() {
        return [
            ["offset", "number", "int"],
            ["length", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.offset, "number", "int"],
            [this.length, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
        Object.defineProperty(this, "offset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
        Object.defineProperty(this, "length", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.offset = params.offset;
        this.length = params.length;
    }
}
/** Indicates a credit card number */
export class MessageEntityBankCard_ extends _MessageEntity_ {
    get [id]() {
        return 0x761E6AF4;
    }
    static get [name]() {
        return "messageEntityBankCard";
    }
    static get [paramDesc]() {
        return [
            ["offset", "number", "int"],
            ["length", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.offset, "number", "int"],
            [this.length, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
        Object.defineProperty(this, "offset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
        Object.defineProperty(this, "length", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.offset = params.offset;
        this.length = params.length;
    }
}
/** Message entity representing a spoiler */
export class MessageEntitySpoiler_ extends _MessageEntity_ {
    get [id]() {
        return 0x32CA960F;
    }
    static get [name]() {
        return "messageEntitySpoiler";
    }
    static get [paramDesc]() {
        return [
            ["offset", "number", "int"],
            ["length", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.offset, "number", "int"],
            [this.length, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
        Object.defineProperty(this, "offset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
        Object.defineProperty(this, "length", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.offset = params.offset;
        this.length = params.length;
    }
}
/** Represents a custom emoji.
Note that this entity must wrap exactly one regular emoji (the one contained in [documentAttributeCustomEmoji](https://core.telegram.org/constructor/documentAttributeCustomEmoji).`alt`) in the related text, otherwise the server will ignore it. */
export class MessageEntityCustomEmoji_ extends _MessageEntity_ {
    get [id]() {
        return 0xC8CF05F8;
    }
    static get [name]() {
        return "messageEntityCustomEmoji";
    }
    static get [paramDesc]() {
        return [
            ["offset", "number", "int"],
            ["length", "number", "int"],
            ["document_id", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.offset, "number", "int"],
            [this.length, "number", "int"],
            [this.document_id, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
        Object.defineProperty(this, "offset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
        Object.defineProperty(this, "length", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Document ID of the [custom emoji](https://core.telegram.org/api/custom-emoji), use [messages.getCustomEmojiDocuments](https://core.telegram.org/method/messages.getCustomEmojiDocuments) to fetch the emoji animation and the actual emoji it represents. */
        Object.defineProperty(this, "document_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.offset = params.offset;
        this.length = params.length;
        this.document_id = params.document_id;
    }
}
/** Message entity representing a block quote. */
export class MessageEntityBlockquote_ extends _MessageEntity_ {
    get [id]() {
        return 0x020DF5D0;
    }
    static get [name]() {
        return "messageEntityBlockquote";
    }
    static get [paramDesc]() {
        return [
            ["offset", "number", "int"],
            ["length", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.offset, "number", "int"],
            [this.length, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Offset of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
        Object.defineProperty(this, "offset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Length of message entity within message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)) */
        Object.defineProperty(this, "length", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.offset = params.offset;
        this.length = params.length;
    }
}
/** Represents the absence of a channel */
export class InputChannelEmpty_ extends _InputChannel_ {
    get [id]() {
        return 0xEE8C1E86;
    }
    static get [name]() {
        return "inputChannelEmpty";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Represents a channel */
export class InputChannel_ extends _InputChannel_ {
    get [id]() {
        return 0xF35AEC28;
    }
    static get [name]() {
        return "inputChannel";
    }
    static get [paramDesc]() {
        return [
            ["channel_id", "bigint", "long"],
            ["access_hash", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.channel_id, "bigint", "long"],
            [this.access_hash, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** Channel ID */
        Object.defineProperty(this, "channel_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Access hash taken from the [channel](https://core.telegram.org/constructor/channel) constructor */
        Object.defineProperty(this, "access_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.channel_id = params.channel_id;
        this.access_hash = params.access_hash;
    }
}
/** Defines a [min](https://core.telegram.org/api/min) channel that was seen in a certain message of a certain chat. */
export class InputChannelFromMessage_ extends _InputChannel_ {
    get [id]() {
        return 0x5B934F9D;
    }
    static get [name]() {
        return "inputChannelFromMessage";
    }
    static get [paramDesc]() {
        return [
            ["peer", _InputPeer_, "InputPeer"],
            ["msg_id", "number", "int"],
            ["channel_id", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.peer, _InputPeer_, "InputPeer"],
            [this.msg_id, "number", "int"],
            [this.channel_id, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** The chat where the channel was seen */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The message ID in the chat where the channel was seen */
        Object.defineProperty(this, "msg_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The channel ID */
        Object.defineProperty(this, "channel_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.peer = params.peer;
        this.msg_id = params.msg_id;
        this.channel_id = params.channel_id;
    }
}
/** Resolved peer */
export class contacts_ResolvedPeer_ extends _contacts_ResolvedPeer_ {
    get [id]() {
        return 0x7F077AD9;
    }
    static get [name]() {
        return "contacts.resolvedPeer";
    }
    static get [paramDesc]() {
        return [
            ["peer", _Peer_, "Peer"],
            ["chats", [_Chat_], "Vector<Chat>"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            [this.peer, _Peer_, "Peer"],
            [this.chats, [_Chat_], "Vector<Chat>"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** The peer */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Chats */
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Users */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.peer = params.peer;
        this.chats = params.chats;
        this.users = params.users;
    }
}
/** Indicates a range of chat messages */
export class MessageRange_ extends _MessageRange_ {
    get [id]() {
        return 0x0AE30253;
    }
    static get [name]() {
        return "messageRange";
    }
    static get [paramDesc]() {
        return [
            ["min_id", "number", "int"],
            ["max_id", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.min_id, "number", "int"],
            [this.max_id, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Start of range (message ID) */
        Object.defineProperty(this, "min_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** End of range (message ID) */
        Object.defineProperty(this, "max_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.min_id = params.min_id;
        this.max_id = params.max_id;
    }
}
/** There are no new updates */
export class updates_ChannelDifferenceEmpty_ extends _updates_ChannelDifference_ {
    get [id]() {
        return 0x3E11AFFB;
    }
    static get [name]() {
        return "updates.channelDifferenceEmpty";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["final", "true", "flags.0?true"],
            ["pts", "number", "int"],
            ["timeout", "number", "flags.1?int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.final ?? null, "true", "flags.0?true"],
            [this.pts, "number", "int"],
            [this.timeout ?? null, "number", "flags.1?int"],
        ];
    }
    constructor(params) {
        super();
        /** Whether there are more updates that must be fetched (always false) */
        Object.defineProperty(this, "final", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The latest [PTS](https://core.telegram.org/api/updates) */
        Object.defineProperty(this, "pts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Clients are supposed to refetch the channel difference after timeout seconds have elapsed */
        Object.defineProperty(this, "timeout", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.final = params.final;
        this.pts = params.pts;
        this.timeout = params.timeout;
    }
}
/** The provided `pts + limit < remote pts`. Simply, there are too many updates to be fetched (more than `limit`), the client has to resolve the update gap in one of the following ways (assuming the existence of a persistent database to locally store messages): */
export class updates_ChannelDifferenceTooLong_ extends _updates_ChannelDifference_ {
    get [id]() {
        return 0xA4BCC6FE;
    }
    static get [name]() {
        return "updates.channelDifferenceTooLong";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["final", "true", "flags.0?true"],
            ["timeout", "number", "flags.1?int"],
            ["dialog", _Dialog_, "Dialog"],
            ["messages", [_Message_], "Vector<Message>"],
            ["chats", [_Chat_], "Vector<Chat>"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.final ?? null, "true", "flags.0?true"],
            [this.timeout ?? null, "number", "flags.1?int"],
            [this.dialog, _Dialog_, "Dialog"],
            [this.messages, [_Message_], "Vector<Message>"],
            [this.chats, [_Chat_], "Vector<Chat>"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** Whether there are more updates that must be fetched (always false) */
        Object.defineProperty(this, "final", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Clients are supposed to refetch the channel difference after timeout seconds have elapsed */
        Object.defineProperty(this, "timeout", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Dialog containing the latest [PTS](https://core.telegram.org/api/updates) that can be used to reset the channel state */
        Object.defineProperty(this, "dialog", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The latest messages */
        Object.defineProperty(this, "messages", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Chats from messages */
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Users from messages */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.final = params.final;
        this.timeout = params.timeout;
        this.dialog = params.dialog;
        this.messages = params.messages;
        this.chats = params.chats;
        this.users = params.users;
    }
}
/** The new updates */
export class updates_ChannelDifference_ extends _updates_ChannelDifference_ {
    get [id]() {
        return 0x2064674E;
    }
    static get [name]() {
        return "updates.channelDifference";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["final", "true", "flags.0?true"],
            ["pts", "number", "int"],
            ["timeout", "number", "flags.1?int"],
            ["new_messages", [_Message_], "Vector<Message>"],
            ["other_updates", [_Update_], "Vector<Update>"],
            ["chats", [_Chat_], "Vector<Chat>"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.final ?? null, "true", "flags.0?true"],
            [this.pts, "number", "int"],
            [this.timeout ?? null, "number", "flags.1?int"],
            [this.new_messages, [_Message_], "Vector<Message>"],
            [this.other_updates, [_Update_], "Vector<Update>"],
            [this.chats, [_Chat_], "Vector<Chat>"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** Whether there are more updates to be fetched using getDifference, starting from the provided `pts` */
        Object.defineProperty(this, "final", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The [PTS](https://core.telegram.org/api/updates) from which to start getting updates the next time */
        Object.defineProperty(this, "pts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Clients are supposed to refetch the channel difference after timeout seconds have elapsed */
        Object.defineProperty(this, "timeout", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New messages */
        Object.defineProperty(this, "new_messages", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Other updates */
        Object.defineProperty(this, "other_updates", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Chats */
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Users */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.final = params.final;
        this.pts = params.pts;
        this.timeout = params.timeout;
        this.new_messages = params.new_messages;
        this.other_updates = params.other_updates;
        this.chats = params.chats;
        this.users = params.users;
    }
}
/** No filter */
export class ChannelMessagesFilterEmpty_ extends _ChannelMessagesFilter_ {
    get [id]() {
        return 0x94D42EE7;
    }
    static get [name]() {
        return "channelMessagesFilterEmpty";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Filter for getting only certain types of channel messages */
export class ChannelMessagesFilter_ extends _ChannelMessagesFilter_ {
    get [id]() {
        return 0xCD77D957;
    }
    static get [name]() {
        return "channelMessagesFilter";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["exclude_new_messages", "true", "flags.1?true"],
            ["ranges", [_MessageRange_], "Vector<MessageRange>"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.exclude_new_messages ?? null, "true", "flags.1?true"],
            [this.ranges, [_MessageRange_], "Vector<MessageRange>"],
        ];
    }
    constructor(params) {
        super();
        /** Whether to exclude new messages from the search */
        Object.defineProperty(this, "exclude_new_messages", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** A range of messages to fetch */
        Object.defineProperty(this, "ranges", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.exclude_new_messages = params.exclude_new_messages;
        this.ranges = params.ranges;
    }
}
/** Channel/supergroup participant */
export class ChannelParticipant_ extends _ChannelParticipant_ {
    get [id]() {
        return 0xC00C07C0;
    }
    static get [name]() {
        return "channelParticipant";
    }
    static get [paramDesc]() {
        return [
            ["user_id", "bigint", "long"],
            ["date", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.user_id, "bigint", "long"],
            [this.date, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Participant user ID */
        Object.defineProperty(this, "user_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Date joined */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.user_id = params.user_id;
        this.date = params.date;
    }
}
/** Myself */
export class ChannelParticipantSelf_ extends _ChannelParticipant_ {
    get [id]() {
        return 0x35A8BFA7;
    }
    static get [name]() {
        return "channelParticipantSelf";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["via_request", "true", "flags.0?true"],
            ["user_id", "bigint", "long"],
            ["inviter_id", "bigint", "long"],
            ["date", "number", "int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.via_request ?? null, "true", "flags.0?true"],
            [this.user_id, "bigint", "long"],
            [this.inviter_id, "bigint", "long"],
            [this.date, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Whether I joined upon specific approval of an admin */
        Object.defineProperty(this, "via_request", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** User ID */
        Object.defineProperty(this, "user_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** User that invited me to the channel/supergroup */
        Object.defineProperty(this, "inviter_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** When did I join the channel/supergroup */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.via_request = params.via_request;
        this.user_id = params.user_id;
        this.inviter_id = params.inviter_id;
        this.date = params.date;
    }
}
/** Channel/supergroup creator */
export class ChannelParticipantCreator_ extends _ChannelParticipant_ {
    get [id]() {
        return 0x2FE601D3;
    }
    static get [name]() {
        return "channelParticipantCreator";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["user_id", "bigint", "long"],
            ["admin_rights", _ChatAdminRights_, "ChatAdminRights"],
            ["rank", "string", "flags.0?string"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.user_id, "bigint", "long"],
            [this.admin_rights, _ChatAdminRights_, "ChatAdminRights"],
            [this.rank ?? null, "string", "flags.0?string"],
        ];
    }
    constructor(params) {
        super();
        /** User ID */
        Object.defineProperty(this, "user_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Creator admin rights */
        Object.defineProperty(this, "admin_rights", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The role (rank) of the group creator in the group: just an arbitrary string, `admin` by default */
        Object.defineProperty(this, "rank", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.user_id = params.user_id;
        this.admin_rights = params.admin_rights;
        this.rank = params.rank;
    }
}
/** Admin */
export class ChannelParticipantAdmin_ extends _ChannelParticipant_ {
    get [id]() {
        return 0x34C3BB53;
    }
    static get [name]() {
        return "channelParticipantAdmin";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["can_edit", "true", "flags.0?true"],
            ["self", "true", "flags.1?true"],
            ["user_id", "bigint", "long"],
            ["inviter_id", "bigint", "flags.1?long"],
            ["promoted_by", "bigint", "long"],
            ["date", "number", "int"],
            ["admin_rights", _ChatAdminRights_, "ChatAdminRights"],
            ["rank", "string", "flags.2?string"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.can_edit ?? null, "true", "flags.0?true"],
            [this.self ?? null, "true", "flags.1?true"],
            [this.user_id, "bigint", "long"],
            [this.inviter_id ?? null, "bigint", "flags.1?long"],
            [this.promoted_by, "bigint", "long"],
            [this.date, "number", "int"],
            [this.admin_rights, _ChatAdminRights_, "ChatAdminRights"],
            [this.rank ?? null, "string", "flags.2?string"],
        ];
    }
    constructor(params) {
        super();
        /** Can this admin promote other admins with the same permissions? */
        Object.defineProperty(this, "can_edit", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Is this the current user */
        Object.defineProperty(this, "self", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Admin user ID */
        Object.defineProperty(this, "user_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** User that invited the admin to the channel/group */
        Object.defineProperty(this, "inviter_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** User that promoted the user to admin */
        Object.defineProperty(this, "promoted_by", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** When did the user join */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Admin [rights](https://core.telegram.org/api/rights) */
        Object.defineProperty(this, "admin_rights", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The role (rank) of the admin in the group: just an arbitrary string, `admin` by default */
        Object.defineProperty(this, "rank", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.can_edit = params.can_edit;
        this.self = params.self;
        this.user_id = params.user_id;
        this.inviter_id = params.inviter_id;
        this.promoted_by = params.promoted_by;
        this.date = params.date;
        this.admin_rights = params.admin_rights;
        this.rank = params.rank;
    }
}
/** Banned/kicked user */
export class ChannelParticipantBanned_ extends _ChannelParticipant_ {
    get [id]() {
        return 0x6DF8014E;
    }
    static get [name]() {
        return "channelParticipantBanned";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["left", "true", "flags.0?true"],
            ["peer", _Peer_, "Peer"],
            ["kicked_by", "bigint", "long"],
            ["date", "number", "int"],
            ["banned_rights", _ChatBannedRights_, "ChatBannedRights"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.left ?? null, "true", "flags.0?true"],
            [this.peer, _Peer_, "Peer"],
            [this.kicked_by, "bigint", "long"],
            [this.date, "number", "int"],
            [this.banned_rights, _ChatBannedRights_, "ChatBannedRights"],
        ];
    }
    constructor(params) {
        super();
        /** Whether the user has left the group */
        Object.defineProperty(this, "left", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The banned peer */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** User was kicked by the specified admin */
        Object.defineProperty(this, "kicked_by", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** When did the user join the group */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Banned [rights](https://core.telegram.org/api/rights) */
        Object.defineProperty(this, "banned_rights", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.left = params.left;
        this.peer = params.peer;
        this.kicked_by = params.kicked_by;
        this.date = params.date;
        this.banned_rights = params.banned_rights;
    }
}
/** A participant that left the channel/supergroup */
export class ChannelParticipantLeft_ extends _ChannelParticipant_ {
    get [id]() {
        return 0x1B03F006;
    }
    static get [name]() {
        return "channelParticipantLeft";
    }
    static get [paramDesc]() {
        return [
            ["peer", _Peer_, "Peer"],
        ];
    }
    get [params]() {
        return [
            [this.peer, _Peer_, "Peer"],
        ];
    }
    constructor(params) {
        super();
        /** The peer that left */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.peer = params.peer;
    }
}
/** Fetch only recent participants */
export class ChannelParticipantsRecent_ extends _ChannelParticipantsFilter_ {
    get [id]() {
        return 0xDE3F3C79;
    }
    static get [name]() {
        return "channelParticipantsRecent";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Fetch only admin participants */
export class ChannelParticipantsAdmins_ extends _ChannelParticipantsFilter_ {
    get [id]() {
        return 0xB4608969;
    }
    static get [name]() {
        return "channelParticipantsAdmins";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Fetch only kicked participants */
export class ChannelParticipantsKicked_ extends _ChannelParticipantsFilter_ {
    get [id]() {
        return 0xA3B54985;
    }
    static get [name]() {
        return "channelParticipantsKicked";
    }
    static get [paramDesc]() {
        return [
            ["q", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.q, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Optional filter for searching kicked participants by name (otherwise empty) */
        Object.defineProperty(this, "q", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.q = params.q;
    }
}
/** Fetch only bot participants */
export class ChannelParticipantsBots_ extends _ChannelParticipantsFilter_ {
    get [id]() {
        return 0xB0D1865B;
    }
    static get [name]() {
        return "channelParticipantsBots";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Fetch only banned participants */
export class ChannelParticipantsBanned_ extends _ChannelParticipantsFilter_ {
    get [id]() {
        return 0x1427A5E1;
    }
    static get [name]() {
        return "channelParticipantsBanned";
    }
    static get [paramDesc]() {
        return [
            ["q", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.q, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Optional filter for searching banned participants by name (otherwise empty) */
        Object.defineProperty(this, "q", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.q = params.q;
    }
}
/** Query participants by name */
export class ChannelParticipantsSearch_ extends _ChannelParticipantsFilter_ {
    get [id]() {
        return 0x0656AC4B;
    }
    static get [name]() {
        return "channelParticipantsSearch";
    }
    static get [paramDesc]() {
        return [
            ["q", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.q, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Search query */
        Object.defineProperty(this, "q", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.q = params.q;
    }
}
/** Fetch only participants that are also contacts */
export class ChannelParticipantsContacts_ extends _ChannelParticipantsFilter_ {
    get [id]() {
        return 0xBB6AE88D;
    }
    static get [name]() {
        return "channelParticipantsContacts";
    }
    static get [paramDesc]() {
        return [
            ["q", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.q, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Optional search query for searching contact participants by name */
        Object.defineProperty(this, "q", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.q = params.q;
    }
}
/** This filter is used when looking for supergroup members to mention.
This filter will automatically remove anonymous admins, and return even non-participant users that replied to a specific [thread](https://core.telegram.org/api/threads) through the [comment section](https://core.telegram.org/api/threads#channel-comments) of a channel. */
export class ChannelParticipantsMentions_ extends _ChannelParticipantsFilter_ {
    get [id]() {
        return 0xE04B5CEB;
    }
    static get [name]() {
        return "channelParticipantsMentions";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["q", "string", "flags.0?string"],
            ["top_msg_id", "number", "flags.1?int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.q ?? null, "string", "flags.0?string"],
            [this.top_msg_id ?? null, "number", "flags.1?int"],
        ];
    }
    constructor(params) {
        super();
        /** Filter by user name or username */
        Object.defineProperty(this, "q", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Look only for users that posted in this [thread](https://core.telegram.org/api/threads) */
        Object.defineProperty(this, "top_msg_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.q = params?.q;
        this.top_msg_id = params?.top_msg_id;
    }
}
/** Represents multiple channel participants */
export class channels_ChannelParticipants_ extends _channels_ChannelParticipants_ {
    get [id]() {
        return 0x9AB0FEAF;
    }
    static get [name]() {
        return "channels.channelParticipants";
    }
    static get [paramDesc]() {
        return [
            ["count", "number", "int"],
            ["participants", [_ChannelParticipant_], "Vector<ChannelParticipant>"],
            ["chats", [_Chat_], "Vector<Chat>"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            [this.count, "number", "int"],
            [this.participants, [_ChannelParticipant_], "Vector<ChannelParticipant>"],
            [this.chats, [_Chat_], "Vector<Chat>"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** Total number of participants that correspond to the given query */
        Object.defineProperty(this, "count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Participants */
        Object.defineProperty(this, "participants", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Mentioned chats */
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Users mentioned in participant info */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.count = params.count;
        this.participants = params.participants;
        this.chats = params.chats;
        this.users = params.users;
    }
}
/** No new participant info could be found */
export class channels_ChannelParticipantsNotModified_ extends _channels_ChannelParticipants_ {
    get [id]() {
        return 0xF0173FE9;
    }
    static get [name]() {
        return "channels.channelParticipantsNotModified";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Represents a channel participant */
export class channels_ChannelParticipant_ extends _channels_ChannelParticipant_ {
    get [id]() {
        return 0xDFB80317;
    }
    static get [name]() {
        return "channels.channelParticipant";
    }
    static get [paramDesc]() {
        return [
            ["participant", _ChannelParticipant_, "ChannelParticipant"],
            ["chats", [_Chat_], "Vector<Chat>"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            [this.participant, _ChannelParticipant_, "ChannelParticipant"],
            [this.chats, [_Chat_], "Vector<Chat>"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** The channel participant */
        Object.defineProperty(this, "participant", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Mentioned chats */
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Users */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.participant = params.participant;
        this.chats = params.chats;
        this.users = params.users;
    }
}
/** Info about the latest telegram Terms Of Service */
export class help_TermsOfService_ extends _help_TermsOfService_ {
    get [id]() {
        return 0x780A0310;
    }
    static get [name]() {
        return "help.termsOfService";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["popup", "true", "flags.0?true"],
            ["id", _DataJSON_, "DataJSON"],
            ["text", "string", "string"],
            ["entities", [_MessageEntity_], "Vector<MessageEntity>"],
            ["min_age_confirm", "number", "flags.1?int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.popup ?? null, "true", "flags.0?true"],
            [this.id, _DataJSON_, "DataJSON"],
            [this.text, "string", "string"],
            [this.entities, [_MessageEntity_], "Vector<MessageEntity>"],
            [this.min_age_confirm ?? null, "number", "flags.1?int"],
        ];
    }
    constructor(params) {
        super();
        /** Whether a prompt must be showed to the user, in order to accept the new terms. */
        Object.defineProperty(this, "popup", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the new terms */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Text of the new terms */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Message entities for styled text](https://core.telegram.org/api/entities) */
        Object.defineProperty(this, "entities", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Minimum age required to sign up to telegram, the user must confirm that they is older than the minimum age. */
        Object.defineProperty(this, "min_age_confirm", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.popup = params.popup;
        this.id = params.id;
        this.text = params.text;
        this.entities = params.entities;
        this.min_age_confirm = params.min_age_confirm;
    }
}
/** No new saved gifs were found */
export class messages_SavedGifsNotModified_ extends _messages_SavedGifs_ {
    get [id]() {
        return 0xE8025CA2;
    }
    static get [name]() {
        return "messages.savedGifsNotModified";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Saved gifs */
export class messages_SavedGifs_ extends _messages_SavedGifs_ {
    get [id]() {
        return 0x84A02A0D;
    }
    static get [name]() {
        return "messages.savedGifs";
    }
    static get [paramDesc]() {
        return [
            ["hash", "bigint", "long"],
            ["gifs", [_Document_], "Vector<Document>"],
        ];
    }
    get [params]() {
        return [
            [this.hash, "bigint", "long"],
            [this.gifs, [_Document_], "Vector<Document>"],
        ];
    }
    constructor(params) {
        super();
        /** [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation) */
        Object.defineProperty(this, "hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** List of saved gifs */
        Object.defineProperty(this, "gifs", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.hash = params.hash;
        this.gifs = params.gifs;
    }
}
/** A media */
export class InputBotInlineMessageMediaAuto_ extends _InputBotInlineMessage_ {
    get [id]() {
        return 0x3380C786;
    }
    static get [name]() {
        return "inputBotInlineMessageMediaAuto";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["invert_media", "true", "flags.3?true"],
            ["message", "string", "string"],
            ["entities", [_MessageEntity_], "flags.1?Vector<MessageEntity>"],
            ["reply_markup", _ReplyMarkup_, "flags.2?ReplyMarkup"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.invert_media ?? null, "true", "flags.3?true"],
            [this.message, "string", "string"],
            [this.entities ?? null, [_MessageEntity_], "flags.1?Vector<MessageEntity>"],
            [this.reply_markup ?? null, _ReplyMarkup_, "flags.2?ReplyMarkup"],
        ];
    }
    constructor(params) {
        super();
        /** If set, any eventual webpage preview will be shown on top of the message instead of at the bottom. */
        Object.defineProperty(this, "invert_media", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Caption */
        Object.defineProperty(this, "message", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Message entities for styled text](https://core.telegram.org/api/entities) */
        Object.defineProperty(this, "entities", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Inline keyboard */
        Object.defineProperty(this, "reply_markup", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.invert_media = params.invert_media;
        this.message = params.message;
        this.entities = params.entities;
        this.reply_markup = params.reply_markup;
    }
}
/** Simple text message */
export class InputBotInlineMessageText_ extends _InputBotInlineMessage_ {
    get [id]() {
        return 0x3DCD7A87;
    }
    static get [name]() {
        return "inputBotInlineMessageText";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["no_webpage", "true", "flags.0?true"],
            ["invert_media", "true", "flags.3?true"],
            ["message", "string", "string"],
            ["entities", [_MessageEntity_], "flags.1?Vector<MessageEntity>"],
            ["reply_markup", _ReplyMarkup_, "flags.2?ReplyMarkup"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.no_webpage ?? null, "true", "flags.0?true"],
            [this.invert_media ?? null, "true", "flags.3?true"],
            [this.message, "string", "string"],
            [this.entities ?? null, [_MessageEntity_], "flags.1?Vector<MessageEntity>"],
            [this.reply_markup ?? null, _ReplyMarkup_, "flags.2?ReplyMarkup"],
        ];
    }
    constructor(params) {
        super();
        /** Disable webpage preview */
        Object.defineProperty(this, "no_webpage", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, any eventual webpage preview will be shown on top of the message instead of at the bottom. */
        Object.defineProperty(this, "invert_media", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Message */
        Object.defineProperty(this, "message", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Message entities for styled text](https://core.telegram.org/api/entities) */
        Object.defineProperty(this, "entities", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Inline keyboard */
        Object.defineProperty(this, "reply_markup", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.no_webpage = params.no_webpage;
        this.invert_media = params.invert_media;
        this.message = params.message;
        this.entities = params.entities;
        this.reply_markup = params.reply_markup;
    }
}
/** Geolocation */
export class InputBotInlineMessageMediaGeo_ extends _InputBotInlineMessage_ {
    get [id]() {
        return 0x96929A85;
    }
    static get [name]() {
        return "inputBotInlineMessageMediaGeo";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["geo_point", _InputGeoPoint_, "InputGeoPoint"],
            ["heading", "number", "flags.0?int"],
            ["period", "number", "flags.1?int"],
            ["proximity_notification_radius", "number", "flags.3?int"],
            ["reply_markup", _ReplyMarkup_, "flags.2?ReplyMarkup"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.geo_point, _InputGeoPoint_, "InputGeoPoint"],
            [this.heading ?? null, "number", "flags.0?int"],
            [this.period ?? null, "number", "flags.1?int"],
            [this.proximity_notification_radius ?? null, "number", "flags.3?int"],
            [this.reply_markup ?? null, _ReplyMarkup_, "flags.2?ReplyMarkup"],
        ];
    }
    constructor(params) {
        super();
        /** Geolocation */
        Object.defineProperty(this, "geo_point", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** For [live locations](https://core.telegram.org/api/live-location), a direction in which the location moves, in degrees; 1-360 */
        Object.defineProperty(this, "heading", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Validity period */
        Object.defineProperty(this, "period", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** For [live locations](https://core.telegram.org/api/live-location), a maximum distance to another chat member for proximity alerts, in meters (0-100000) */
        Object.defineProperty(this, "proximity_notification_radius", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Reply markup for bot/inline keyboards */
        Object.defineProperty(this, "reply_markup", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.geo_point = params.geo_point;
        this.heading = params.heading;
        this.period = params.period;
        this.proximity_notification_radius = params.proximity_notification_radius;
        this.reply_markup = params.reply_markup;
    }
}
/** Venue */
export class InputBotInlineMessageMediaVenue_ extends _InputBotInlineMessage_ {
    get [id]() {
        return 0x417BBF11;
    }
    static get [name]() {
        return "inputBotInlineMessageMediaVenue";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["geo_point", _InputGeoPoint_, "InputGeoPoint"],
            ["title", "string", "string"],
            ["address", "string", "string"],
            ["provider", "string", "string"],
            ["venue_id", "string", "string"],
            ["venue_type", "string", "string"],
            ["reply_markup", _ReplyMarkup_, "flags.2?ReplyMarkup"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.geo_point, _InputGeoPoint_, "InputGeoPoint"],
            [this.title, "string", "string"],
            [this.address, "string", "string"],
            [this.provider, "string", "string"],
            [this.venue_id, "string", "string"],
            [this.venue_type, "string", "string"],
            [this.reply_markup ?? null, _ReplyMarkup_, "flags.2?ReplyMarkup"],
        ];
    }
    constructor(params) {
        super();
        /** Geolocation */
        Object.defineProperty(this, "geo_point", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Venue name */
        Object.defineProperty(this, "title", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Address */
        Object.defineProperty(this, "address", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Venue provider: currently only "foursquare" and "gplaces" (Google Places) need to be supported */
        Object.defineProperty(this, "provider", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Venue ID in the provider's database */
        Object.defineProperty(this, "venue_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Venue type in the provider's database */
        Object.defineProperty(this, "venue_type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Inline keyboard */
        Object.defineProperty(this, "reply_markup", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.geo_point = params.geo_point;
        this.title = params.title;
        this.address = params.address;
        this.provider = params.provider;
        this.venue_id = params.venue_id;
        this.venue_type = params.venue_type;
        this.reply_markup = params.reply_markup;
    }
}
/** A contact */
export class InputBotInlineMessageMediaContact_ extends _InputBotInlineMessage_ {
    get [id]() {
        return 0xA6EDBFFD;
    }
    static get [name]() {
        return "inputBotInlineMessageMediaContact";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["phone_number", "string", "string"],
            ["first_name", "string", "string"],
            ["last_name", "string", "string"],
            ["vcard", "string", "string"],
            ["reply_markup", _ReplyMarkup_, "flags.2?ReplyMarkup"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.phone_number, "string", "string"],
            [this.first_name, "string", "string"],
            [this.last_name, "string", "string"],
            [this.vcard, "string", "string"],
            [this.reply_markup ?? null, _ReplyMarkup_, "flags.2?ReplyMarkup"],
        ];
    }
    constructor(params) {
        super();
        /** Phone number */
        Object.defineProperty(this, "phone_number", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** First name */
        Object.defineProperty(this, "first_name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Last name */
        Object.defineProperty(this, "last_name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** VCard info */
        Object.defineProperty(this, "vcard", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Inline keyboard */
        Object.defineProperty(this, "reply_markup", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.phone_number = params.phone_number;
        this.first_name = params.first_name;
        this.last_name = params.last_name;
        this.vcard = params.vcard;
        this.reply_markup = params.reply_markup;
    }
}
/** A game */
export class InputBotInlineMessageGame_ extends _InputBotInlineMessage_ {
    get [id]() {
        return 0x4B425864;
    }
    static get [name]() {
        return "inputBotInlineMessageGame";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["reply_markup", _ReplyMarkup_, "flags.2?ReplyMarkup"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.reply_markup ?? null, _ReplyMarkup_, "flags.2?ReplyMarkup"],
        ];
    }
    constructor(params) {
        super();
        /** Inline keyboard */
        Object.defineProperty(this, "reply_markup", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.reply_markup = params?.reply_markup;
    }
}
/** An invoice */
export class InputBotInlineMessageMediaInvoice_ extends _InputBotInlineMessage_ {
    get [id]() {
        return 0xD7E78225;
    }
    static get [name]() {
        return "inputBotInlineMessageMediaInvoice";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["title", "string", "string"],
            ["description", "string", "string"],
            ["photo", _InputWebDocument_, "flags.0?InputWebDocument"],
            ["invoice", _Invoice_, "Invoice"],
            ["payload", Uint8Array, "bytes"],
            ["provider", "string", "string"],
            ["provider_data", _DataJSON_, "DataJSON"],
            ["reply_markup", _ReplyMarkup_, "flags.2?ReplyMarkup"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.title, "string", "string"],
            [this.description, "string", "string"],
            [this.photo ?? null, _InputWebDocument_, "flags.0?InputWebDocument"],
            [this.invoice, _Invoice_, "Invoice"],
            [this.payload, Uint8Array, "bytes"],
            [this.provider, "string", "string"],
            [this.provider_data, _DataJSON_, "DataJSON"],
            [this.reply_markup ?? null, _ReplyMarkup_, "flags.2?ReplyMarkup"],
        ];
    }
    constructor(params) {
        super();
        /** Product name, 1-32 characters */
        Object.defineProperty(this, "title", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Product description, 1-255 characters */
        Object.defineProperty(this, "description", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Invoice photo */
        Object.defineProperty(this, "photo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The invoice */
        Object.defineProperty(this, "invoice", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes. */
        Object.defineProperty(this, "payload", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Payments provider token, obtained via [Botfather](https://t.me/botfather) */
        Object.defineProperty(this, "provider", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** A JSON-serialized object for data about the invoice, which will be shared with the payment provider. A detailed description of the required fields should be provided by the payment provider. */
        Object.defineProperty(this, "provider_data", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Inline keyboard */
        Object.defineProperty(this, "reply_markup", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.title = params.title;
        this.description = params.description;
        this.photo = params.photo;
        this.invoice = params.invoice;
        this.payload = params.payload;
        this.provider = params.provider;
        this.provider_data = params.provider_data;
        this.reply_markup = params.reply_markup;
    }
}
/** Specifies options that will be used to generate the link preview for the message, or even a standalone link preview without an attached message. */
export class InputBotInlineMessageMediaWebPage_ extends _InputBotInlineMessage_ {
    get [id]() {
        return 0xBDDCC510;
    }
    static get [name]() {
        return "inputBotInlineMessageMediaWebPage";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["invert_media", "true", "flags.3?true"],
            ["force_large_media", "true", "flags.4?true"],
            ["force_small_media", "true", "flags.5?true"],
            ["optional", "true", "flags.6?true"],
            ["message", "string", "string"],
            ["entities", [_MessageEntity_], "flags.1?Vector<MessageEntity>"],
            ["url", "string", "string"],
            ["reply_markup", _ReplyMarkup_, "flags.2?ReplyMarkup"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.invert_media ?? null, "true", "flags.3?true"],
            [this.force_large_media ?? null, "true", "flags.4?true"],
            [this.force_small_media ?? null, "true", "flags.5?true"],
            [this.optional ?? null, "true", "flags.6?true"],
            [this.message, "string", "string"],
            [this.entities ?? null, [_MessageEntity_], "flags.1?Vector<MessageEntity>"],
            [this.url, "string", "string"],
            [this.reply_markup ?? null, _ReplyMarkup_, "flags.2?ReplyMarkup"],
        ];
    }
    constructor(params) {
        super();
        /** If set, any eventual webpage preview will be shown on top of the message instead of at the bottom. */
        Object.defineProperty(this, "invert_media", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, specifies that a large media preview should be used. */
        Object.defineProperty(this, "force_large_media", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, specifies that a small media preview should be used. */
        Object.defineProperty(this, "force_small_media", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If **not** set, a `WEBPAGE_NOT_FOUND` RPC error will be emitted if a webpage preview cannot be generated for the specified `url`; otherwise, no error will be emitted (unless the provided message is also empty, in which case a `MESSAGE_EMPTY` will be emitted, instead). */
        Object.defineProperty(this, "optional", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The message, can be empty. */
        Object.defineProperty(this, "message", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Message entities for styled text](https://core.telegram.org/api/entities) */
        Object.defineProperty(this, "entities", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The URL to use for the link preview. */
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Inline keyboard */
        Object.defineProperty(this, "reply_markup", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.invert_media = params.invert_media;
        this.force_large_media = params.force_large_media;
        this.force_small_media = params.force_small_media;
        this.optional = params.optional;
        this.message = params.message;
        this.entities = params.entities;
        this.url = params.url;
        this.reply_markup = params.reply_markup;
    }
}
/** An inline bot result */
export class InputBotInlineResult_ extends _InputBotInlineResult_ {
    get [id]() {
        return 0x88BF9319;
    }
    static get [name]() {
        return "inputBotInlineResult";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["id", "string", "string"],
            ["type", "string", "string"],
            ["title", "string", "flags.1?string"],
            ["description", "string", "flags.2?string"],
            ["url", "string", "flags.3?string"],
            ["thumb", _InputWebDocument_, "flags.4?InputWebDocument"],
            ["content", _InputWebDocument_, "flags.5?InputWebDocument"],
            ["send_message", _InputBotInlineMessage_, "InputBotInlineMessage"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.id, "string", "string"],
            [this.type, "string", "string"],
            [this.title ?? null, "string", "flags.1?string"],
            [this.description ?? null, "string", "flags.2?string"],
            [this.url ?? null, "string", "flags.3?string"],
            [this.thumb ?? null, _InputWebDocument_, "flags.4?InputWebDocument"],
            [this.content ?? null, _InputWebDocument_, "flags.5?InputWebDocument"],
            [this.send_message, _InputBotInlineMessage_, "InputBotInlineMessage"],
        ];
    }
    constructor(params) {
        super();
        /** ID of result */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Result type (see [bot API docs](https://core.telegram.org/bots/api#inlinequeryresult)) */
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Result title */
        Object.defineProperty(this, "title", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Result description */
        Object.defineProperty(this, "description", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** URL of result */
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Thumbnail for result */
        Object.defineProperty(this, "thumb", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Result contents */
        Object.defineProperty(this, "content", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Message to send when the result is selected */
        Object.defineProperty(this, "send_message", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
        this.type = params.type;
        this.title = params.title;
        this.description = params.description;
        this.url = params.url;
        this.thumb = params.thumb;
        this.content = params.content;
        this.send_message = params.send_message;
    }
}
/** Photo */
export class InputBotInlineResultPhoto_ extends _InputBotInlineResult_ {
    get [id]() {
        return 0xA8D864A7;
    }
    static get [name]() {
        return "inputBotInlineResultPhoto";
    }
    static get [paramDesc]() {
        return [
            ["id", "string", "string"],
            ["type", "string", "string"],
            ["photo", _InputPhoto_, "InputPhoto"],
            ["send_message", _InputBotInlineMessage_, "InputBotInlineMessage"],
        ];
    }
    get [params]() {
        return [
            [this.id, "string", "string"],
            [this.type, "string", "string"],
            [this.photo, _InputPhoto_, "InputPhoto"],
            [this.send_message, _InputBotInlineMessage_, "InputBotInlineMessage"],
        ];
    }
    constructor(params) {
        super();
        /** Result ID */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Result type (see [bot API docs](https://core.telegram.org/bots/api#inlinequeryresult)) */
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Photo to send */
        Object.defineProperty(this, "photo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Message to send when the result is selected */
        Object.defineProperty(this, "send_message", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
        this.type = params.type;
        this.photo = params.photo;
        this.send_message = params.send_message;
    }
}
/** Document (media of any type except for photos) */
export class InputBotInlineResultDocument_ extends _InputBotInlineResult_ {
    get [id]() {
        return 0xFFF8FDC4;
    }
    static get [name]() {
        return "inputBotInlineResultDocument";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["id", "string", "string"],
            ["type", "string", "string"],
            ["title", "string", "flags.1?string"],
            ["description", "string", "flags.2?string"],
            ["document", _InputDocument_, "InputDocument"],
            ["send_message", _InputBotInlineMessage_, "InputBotInlineMessage"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.id, "string", "string"],
            [this.type, "string", "string"],
            [this.title ?? null, "string", "flags.1?string"],
            [this.description ?? null, "string", "flags.2?string"],
            [this.document, _InputDocument_, "InputDocument"],
            [this.send_message, _InputBotInlineMessage_, "InputBotInlineMessage"],
        ];
    }
    constructor(params) {
        super();
        /** Result ID */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Result type (see [bot API docs](https://core.telegram.org/bots/api#inlinequeryresult)) */
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Result title */
        Object.defineProperty(this, "title", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Result description */
        Object.defineProperty(this, "description", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Document to send */
        Object.defineProperty(this, "document", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Message to send when the result is selected */
        Object.defineProperty(this, "send_message", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
        this.type = params.type;
        this.title = params.title;
        this.description = params.description;
        this.document = params.document;
        this.send_message = params.send_message;
    }
}
/** Game */
export class InputBotInlineResultGame_ extends _InputBotInlineResult_ {
    get [id]() {
        return 0x4FA417F2;
    }
    static get [name]() {
        return "inputBotInlineResultGame";
    }
    static get [paramDesc]() {
        return [
            ["id", "string", "string"],
            ["short_name", "string", "string"],
            ["send_message", _InputBotInlineMessage_, "InputBotInlineMessage"],
        ];
    }
    get [params]() {
        return [
            [this.id, "string", "string"],
            [this.short_name, "string", "string"],
            [this.send_message, _InputBotInlineMessage_, "InputBotInlineMessage"],
        ];
    }
    constructor(params) {
        super();
        /** Result ID */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Game short name */
        Object.defineProperty(this, "short_name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Message to send when the result is selected */
        Object.defineProperty(this, "send_message", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
        this.short_name = params.short_name;
        this.send_message = params.send_message;
    }
}
/** Send whatever media is attached to the [botInlineMediaResult](https://core.telegram.org/constructor/botInlineMediaResult) */
export class BotInlineMessageMediaAuto_ extends _BotInlineMessage_ {
    get [id]() {
        return 0x764CF810;
    }
    static get [name]() {
        return "botInlineMessageMediaAuto";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["invert_media", "true", "flags.3?true"],
            ["message", "string", "string"],
            ["entities", [_MessageEntity_], "flags.1?Vector<MessageEntity>"],
            ["reply_markup", _ReplyMarkup_, "flags.2?ReplyMarkup"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.invert_media ?? null, "true", "flags.3?true"],
            [this.message, "string", "string"],
            [this.entities ?? null, [_MessageEntity_], "flags.1?Vector<MessageEntity>"],
            [this.reply_markup ?? null, _ReplyMarkup_, "flags.2?ReplyMarkup"],
        ];
    }
    constructor(params) {
        super();
        /** If set, any eventual webpage preview will be shown on top of the message instead of at the bottom. */
        Object.defineProperty(this, "invert_media", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Caption */
        Object.defineProperty(this, "message", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Message entities for styled text](https://core.telegram.org/api/entities) */
        Object.defineProperty(this, "entities", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Inline keyboard */
        Object.defineProperty(this, "reply_markup", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.invert_media = params.invert_media;
        this.message = params.message;
        this.entities = params.entities;
        this.reply_markup = params.reply_markup;
    }
}
/** Send a simple text message */
export class BotInlineMessageText_ extends _BotInlineMessage_ {
    get [id]() {
        return 0x8C7F65E2;
    }
    static get [name]() {
        return "botInlineMessageText";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["no_webpage", "true", "flags.0?true"],
            ["invert_media", "true", "flags.3?true"],
            ["message", "string", "string"],
            ["entities", [_MessageEntity_], "flags.1?Vector<MessageEntity>"],
            ["reply_markup", _ReplyMarkup_, "flags.2?ReplyMarkup"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.no_webpage ?? null, "true", "flags.0?true"],
            [this.invert_media ?? null, "true", "flags.3?true"],
            [this.message, "string", "string"],
            [this.entities ?? null, [_MessageEntity_], "flags.1?Vector<MessageEntity>"],
            [this.reply_markup ?? null, _ReplyMarkup_, "flags.2?ReplyMarkup"],
        ];
    }
    constructor(params) {
        super();
        /** Disable webpage preview */
        Object.defineProperty(this, "no_webpage", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, any eventual webpage preview will be shown on top of the message instead of at the bottom. */
        Object.defineProperty(this, "invert_media", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The message */
        Object.defineProperty(this, "message", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Message entities for styled text](https://core.telegram.org/api/entities) */
        Object.defineProperty(this, "entities", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Inline keyboard */
        Object.defineProperty(this, "reply_markup", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.no_webpage = params.no_webpage;
        this.invert_media = params.invert_media;
        this.message = params.message;
        this.entities = params.entities;
        this.reply_markup = params.reply_markup;
    }
}
/** Send a geolocation */
export class BotInlineMessageMediaGeo_ extends _BotInlineMessage_ {
    get [id]() {
        return 0x051846FD;
    }
    static get [name]() {
        return "botInlineMessageMediaGeo";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["geo", _GeoPoint_, "GeoPoint"],
            ["heading", "number", "flags.0?int"],
            ["period", "number", "flags.1?int"],
            ["proximity_notification_radius", "number", "flags.3?int"],
            ["reply_markup", _ReplyMarkup_, "flags.2?ReplyMarkup"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.geo, _GeoPoint_, "GeoPoint"],
            [this.heading ?? null, "number", "flags.0?int"],
            [this.period ?? null, "number", "flags.1?int"],
            [this.proximity_notification_radius ?? null, "number", "flags.3?int"],
            [this.reply_markup ?? null, _ReplyMarkup_, "flags.2?ReplyMarkup"],
        ];
    }
    constructor(params) {
        super();
        /** Geolocation */
        Object.defineProperty(this, "geo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** For [live locations](https://core.telegram.org/api/live-location), a direction in which the location moves, in degrees; 1-360. */
        Object.defineProperty(this, "heading", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Validity period */
        Object.defineProperty(this, "period", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** For [live locations](https://core.telegram.org/api/live-location), a maximum distance to another chat member for proximity alerts, in meters (0-100000). */
        Object.defineProperty(this, "proximity_notification_radius", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Inline keyboard */
        Object.defineProperty(this, "reply_markup", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.geo = params.geo;
        this.heading = params.heading;
        this.period = params.period;
        this.proximity_notification_radius = params.proximity_notification_radius;
        this.reply_markup = params.reply_markup;
    }
}
/** Send a venue */
export class BotInlineMessageMediaVenue_ extends _BotInlineMessage_ {
    get [id]() {
        return 0x8A86659C;
    }
    static get [name]() {
        return "botInlineMessageMediaVenue";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["geo", _GeoPoint_, "GeoPoint"],
            ["title", "string", "string"],
            ["address", "string", "string"],
            ["provider", "string", "string"],
            ["venue_id", "string", "string"],
            ["venue_type", "string", "string"],
            ["reply_markup", _ReplyMarkup_, "flags.2?ReplyMarkup"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.geo, _GeoPoint_, "GeoPoint"],
            [this.title, "string", "string"],
            [this.address, "string", "string"],
            [this.provider, "string", "string"],
            [this.venue_id, "string", "string"],
            [this.venue_type, "string", "string"],
            [this.reply_markup ?? null, _ReplyMarkup_, "flags.2?ReplyMarkup"],
        ];
    }
    constructor(params) {
        super();
        /** Geolocation of venue */
        Object.defineProperty(this, "geo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Venue name */
        Object.defineProperty(this, "title", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Address */
        Object.defineProperty(this, "address", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Venue provider: currently only "foursquare" and "gplaces" (Google Places) need to be supported */
        Object.defineProperty(this, "provider", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Venue ID in the provider's database */
        Object.defineProperty(this, "venue_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Venue type in the provider's database */
        Object.defineProperty(this, "venue_type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Inline keyboard */
        Object.defineProperty(this, "reply_markup", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.geo = params.geo;
        this.title = params.title;
        this.address = params.address;
        this.provider = params.provider;
        this.venue_id = params.venue_id;
        this.venue_type = params.venue_type;
        this.reply_markup = params.reply_markup;
    }
}
/** Send a contact */
export class BotInlineMessageMediaContact_ extends _BotInlineMessage_ {
    get [id]() {
        return 0x18D1CDC2;
    }
    static get [name]() {
        return "botInlineMessageMediaContact";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["phone_number", "string", "string"],
            ["first_name", "string", "string"],
            ["last_name", "string", "string"],
            ["vcard", "string", "string"],
            ["reply_markup", _ReplyMarkup_, "flags.2?ReplyMarkup"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.phone_number, "string", "string"],
            [this.first_name, "string", "string"],
            [this.last_name, "string", "string"],
            [this.vcard, "string", "string"],
            [this.reply_markup ?? null, _ReplyMarkup_, "flags.2?ReplyMarkup"],
        ];
    }
    constructor(params) {
        super();
        /** Phone number */
        Object.defineProperty(this, "phone_number", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** First name */
        Object.defineProperty(this, "first_name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Last name */
        Object.defineProperty(this, "last_name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** VCard info */
        Object.defineProperty(this, "vcard", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Inline keyboard */
        Object.defineProperty(this, "reply_markup", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.phone_number = params.phone_number;
        this.first_name = params.first_name;
        this.last_name = params.last_name;
        this.vcard = params.vcard;
        this.reply_markup = params.reply_markup;
    }
}
/** Send an invoice */
export class BotInlineMessageMediaInvoice_ extends _BotInlineMessage_ {
    get [id]() {
        return 0x354A9B09;
    }
    static get [name]() {
        return "botInlineMessageMediaInvoice";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["shipping_address_requested", "true", "flags.1?true"],
            ["test", "true", "flags.3?true"],
            ["title", "string", "string"],
            ["description", "string", "string"],
            ["photo", _WebDocument_, "flags.0?WebDocument"],
            ["currency", "string", "string"],
            ["total_amount", "bigint", "long"],
            ["reply_markup", _ReplyMarkup_, "flags.2?ReplyMarkup"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.shipping_address_requested ?? null, "true", "flags.1?true"],
            [this.test ?? null, "true", "flags.3?true"],
            [this.title, "string", "string"],
            [this.description, "string", "string"],
            [this.photo ?? null, _WebDocument_, "flags.0?WebDocument"],
            [this.currency, "string", "string"],
            [this.total_amount, "bigint", "long"],
            [this.reply_markup ?? null, _ReplyMarkup_, "flags.2?ReplyMarkup"],
        ];
    }
    constructor(params) {
        super();
        /** Set this flag if you require the user's shipping address to complete the order */
        Object.defineProperty(this, "shipping_address_requested", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Test invoice */
        Object.defineProperty(this, "test", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Product name, 1-32 characters */
        Object.defineProperty(this, "title", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Product description, 1-255 characters */
        Object.defineProperty(this, "description", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Product photo */
        Object.defineProperty(this, "photo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code */
        Object.defineProperty(this, "currency", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Total price in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). */
        Object.defineProperty(this, "total_amount", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Inline keyboard */
        Object.defineProperty(this, "reply_markup", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.shipping_address_requested = params.shipping_address_requested;
        this.test = params.test;
        this.title = params.title;
        this.description = params.description;
        this.photo = params.photo;
        this.currency = params.currency;
        this.total_amount = params.total_amount;
        this.reply_markup = params.reply_markup;
    }
}
/** Specifies options that must be used to generate the link preview for the message, or even a standalone link preview without an attached message. */
export class BotInlineMessageMediaWebPage_ extends _BotInlineMessage_ {
    get [id]() {
        return 0x809AD9A6;
    }
    static get [name]() {
        return "botInlineMessageMediaWebPage";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["invert_media", "true", "flags.3?true"],
            ["force_large_media", "true", "flags.4?true"],
            ["force_small_media", "true", "flags.5?true"],
            ["manual", "true", "flags.7?true"],
            ["safe", "true", "flags.8?true"],
            ["message", "string", "string"],
            ["entities", [_MessageEntity_], "flags.1?Vector<MessageEntity>"],
            ["url", "string", "string"],
            ["reply_markup", _ReplyMarkup_, "flags.2?ReplyMarkup"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.invert_media ?? null, "true", "flags.3?true"],
            [this.force_large_media ?? null, "true", "flags.4?true"],
            [this.force_small_media ?? null, "true", "flags.5?true"],
            [this.manual ?? null, "true", "flags.7?true"],
            [this.safe ?? null, "true", "flags.8?true"],
            [this.message, "string", "string"],
            [this.entities ?? null, [_MessageEntity_], "flags.1?Vector<MessageEntity>"],
            [this.url, "string", "string"],
            [this.reply_markup ?? null, _ReplyMarkup_, "flags.2?ReplyMarkup"],
        ];
    }
    constructor(params) {
        super();
        /** If set, any eventual webpage preview will be shown on top of the message instead of at the bottom. */
        Object.defineProperty(this, "invert_media", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, specifies that a large media preview should be used. */
        Object.defineProperty(this, "force_large_media", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, specifies that a small media preview should be used. */
        Object.defineProperty(this, "force_small_media", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, indicates that the URL used for the webpage preview was specified manually using [inputMediaWebPage](https://core.telegram.org/constructor/inputMediaWebPage), and may not be related to any of the URLs specified in the message. */
        Object.defineProperty(this, "manual", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, the link can be opened directly without user confirmation. */
        Object.defineProperty(this, "safe", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The message, can be empty. */
        Object.defineProperty(this, "message", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Message entities for styled text](https://core.telegram.org/api/entities) */
        Object.defineProperty(this, "entities", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The URL to use for the link preview. */
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Reply markup for sending bot buttons */
        Object.defineProperty(this, "reply_markup", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.invert_media = params.invert_media;
        this.force_large_media = params.force_large_media;
        this.force_small_media = params.force_small_media;
        this.manual = params.manual;
        this.safe = params.safe;
        this.message = params.message;
        this.entities = params.entities;
        this.url = params.url;
        this.reply_markup = params.reply_markup;
    }
}
/** Generic result */
export class BotInlineResult_ extends _BotInlineResult_ {
    get [id]() {
        return 0x11965F3A;
    }
    static get [name]() {
        return "botInlineResult";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["id", "string", "string"],
            ["type", "string", "string"],
            ["title", "string", "flags.1?string"],
            ["description", "string", "flags.2?string"],
            ["url", "string", "flags.3?string"],
            ["thumb", _WebDocument_, "flags.4?WebDocument"],
            ["content", _WebDocument_, "flags.5?WebDocument"],
            ["send_message", _BotInlineMessage_, "BotInlineMessage"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.id, "string", "string"],
            [this.type, "string", "string"],
            [this.title ?? null, "string", "flags.1?string"],
            [this.description ?? null, "string", "flags.2?string"],
            [this.url ?? null, "string", "flags.3?string"],
            [this.thumb ?? null, _WebDocument_, "flags.4?WebDocument"],
            [this.content ?? null, _WebDocument_, "flags.5?WebDocument"],
            [this.send_message, _BotInlineMessage_, "BotInlineMessage"],
        ];
    }
    constructor(params) {
        super();
        /** Result ID */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Result type (see [bot API docs](https://core.telegram.org/bots/api#inlinequeryresult)) */
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Result title */
        Object.defineProperty(this, "title", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Result description */
        Object.defineProperty(this, "description", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** URL of article or webpage */
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Thumbnail for the result */
        Object.defineProperty(this, "thumb", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Content of the result */
        Object.defineProperty(this, "content", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Message to send */
        Object.defineProperty(this, "send_message", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
        this.type = params.type;
        this.title = params.title;
        this.description = params.description;
        this.url = params.url;
        this.thumb = params.thumb;
        this.content = params.content;
        this.send_message = params.send_message;
    }
}
/** Media result */
export class BotInlineMediaResult_ extends _BotInlineResult_ {
    get [id]() {
        return 0x17DB940B;
    }
    static get [name]() {
        return "botInlineMediaResult";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["id", "string", "string"],
            ["type", "string", "string"],
            ["photo", _Photo_, "flags.0?Photo"],
            ["document", _Document_, "flags.1?Document"],
            ["title", "string", "flags.2?string"],
            ["description", "string", "flags.3?string"],
            ["send_message", _BotInlineMessage_, "BotInlineMessage"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.id, "string", "string"],
            [this.type, "string", "string"],
            [this.photo ?? null, _Photo_, "flags.0?Photo"],
            [this.document ?? null, _Document_, "flags.1?Document"],
            [this.title ?? null, "string", "flags.2?string"],
            [this.description ?? null, "string", "flags.3?string"],
            [this.send_message, _BotInlineMessage_, "BotInlineMessage"],
        ];
    }
    constructor(params) {
        super();
        /** Result ID */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Result type (see [bot API docs](https://core.telegram.org/bots/api#inlinequeryresult)) */
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If type is `photo`, the photo to send */
        Object.defineProperty(this, "photo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If type is `document`, the document to send */
        Object.defineProperty(this, "document", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Result title */
        Object.defineProperty(this, "title", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Description */
        Object.defineProperty(this, "description", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Depending on the `type` and on the [constructor](https://core.telegram.org/type/BotInlineMessage), contains the caption of the media or the content of the message to be sent **instead** of the media */
        Object.defineProperty(this, "send_message", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
        this.type = params.type;
        this.photo = params.photo;
        this.document = params.document;
        this.title = params.title;
        this.description = params.description;
        this.send_message = params.send_message;
    }
}
/** Result of a query to an inline bot */
export class messages_BotResults_ extends _messages_BotResults_ {
    get [id]() {
        return 0xE021F2F6;
    }
    static get [name]() {
        return "messages.botResults";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["gallery", "true", "flags.0?true"],
            ["query_id", "bigint", "long"],
            ["next_offset", "string", "flags.1?string"],
            ["switch_pm", _InlineBotSwitchPM_, "flags.2?InlineBotSwitchPM"],
            ["switch_webview", _InlineBotWebView_, "flags.3?InlineBotWebView"],
            ["results", [_BotInlineResult_], "Vector<BotInlineResult>"],
            ["cache_time", "number", "int"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.gallery ?? null, "true", "flags.0?true"],
            [this.query_id, "bigint", "long"],
            [this.next_offset ?? null, "string", "flags.1?string"],
            [this.switch_pm ?? null, _InlineBotSwitchPM_, "flags.2?InlineBotSwitchPM"],
            [this.switch_webview ?? null, _InlineBotWebView_, "flags.3?InlineBotWebView"],
            [this.results, [_BotInlineResult_], "Vector<BotInlineResult>"],
            [this.cache_time, "number", "int"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** Whether the result is a picture gallery */
        Object.defineProperty(this, "gallery", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Query ID */
        Object.defineProperty(this, "query_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The next offset to use when navigating through results */
        Object.defineProperty(this, "next_offset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Shown as a button on top of the remaining inline result list; if clicked, redirects the user to a private chat with the bot with the specified start parameter. */
        Object.defineProperty(this, "switch_pm", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Shown as a button on top of the remaining inline result list; if clicked, opens the specified [inline mode mini app](https://core.telegram.org/api/bots/webapps#inline-mode-mini-apps). */
        Object.defineProperty(this, "switch_webview", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The results */
        Object.defineProperty(this, "results", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Caching validity of the results */
        Object.defineProperty(this, "cache_time", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Users mentioned in the results */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.gallery = params.gallery;
        this.query_id = params.query_id;
        this.next_offset = params.next_offset;
        this.switch_pm = params.switch_pm;
        this.switch_webview = params.switch_webview;
        this.results = params.results;
        this.cache_time = params.cache_time;
        this.users = params.users;
    }
}
/** Link to a message in a supergroup/channel */
export class ExportedMessageLink_ extends _ExportedMessageLink_ {
    get [id]() {
        return 0x5DAB1AF4;
    }
    static get [name]() {
        return "exportedMessageLink";
    }
    static get [paramDesc]() {
        return [
            ["link", "string", "string"],
            ["html", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.link, "string", "string"],
            [this.html, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** URL */
        Object.defineProperty(this, "link", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Embed code */
        Object.defineProperty(this, "html", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.link = params.link;
        this.html = params.html;
    }
}
/** Info about a forwarded message */
export class MessageFwdHeader_ extends _MessageFwdHeader_ {
    get [id]() {
        return 0x4E4DF4BB;
    }
    static get [name]() {
        return "messageFwdHeader";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["imported", "true", "flags.7?true"],
            ["saved_out", "true", "flags.11?true"],
            ["from_id", _Peer_, "flags.0?Peer"],
            ["from_name", "string", "flags.5?string"],
            ["date", "number", "int"],
            ["channel_post", "number", "flags.2?int"],
            ["post_author", "string", "flags.3?string"],
            ["saved_from_peer", _Peer_, "flags.4?Peer"],
            ["saved_from_msg_id", "number", "flags.4?int"],
            ["saved_from_id", _Peer_, "flags.8?Peer"],
            ["saved_from_name", "string", "flags.9?string"],
            ["saved_date", "number", "flags.10?int"],
            ["psa_type", "string", "flags.6?string"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.imported ?? null, "true", "flags.7?true"],
            [this.saved_out ?? null, "true", "flags.11?true"],
            [this.from_id ?? null, _Peer_, "flags.0?Peer"],
            [this.from_name ?? null, "string", "flags.5?string"],
            [this.date, "number", "int"],
            [this.channel_post ?? null, "number", "flags.2?int"],
            [this.post_author ?? null, "string", "flags.3?string"],
            [this.saved_from_peer ?? null, _Peer_, "flags.4?Peer"],
            [this.saved_from_msg_id ?? null, "number", "flags.4?int"],
            [this.saved_from_id ?? null, _Peer_, "flags.8?Peer"],
            [this.saved_from_name ?? null, "string", "flags.9?string"],
            [this.saved_date ?? null, "number", "flags.10?int"],
            [this.psa_type ?? null, "string", "flags.6?string"],
        ];
    }
    constructor(params) {
        super();
        /** Whether this message was [imported from a foreign chat service, click here for more info »](https://core.telegram.org/api/import) */
        Object.defineProperty(this, "imported", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Only for messages forwarded to [saved messages »](https://core.telegram.org/api/saved-messages), set if the original message was outgoing (though the message may have been originally outgoing even if this flag is not set, if `from_id` points to the current user). */
        Object.defineProperty(this, "saved_out", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The ID of the user that originally sent the message */
        Object.defineProperty(this, "from_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The name of the user that originally sent the message */
        Object.defineProperty(this, "from_name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** When was the message originally sent */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the channel message that was forwarded */
        Object.defineProperty(this, "channel_post", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** For channels and if signatures are enabled, author of the channel message */
        Object.defineProperty(this, "post_author", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Only for messages forwarded to [saved messages »](https://core.telegram.org/api/saved-messages), contains the dialog where the message was originally sent. */
        Object.defineProperty(this, "saved_from_peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Only for messages forwarded to [saved messages »](https://core.telegram.org/api/saved-messages), contains the original ID of the message in `saved_from_peer`. */
        Object.defineProperty(this, "saved_from_msg_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Only for forwarded messages reforwarded to [saved messages »](https://core.telegram.org/api/saved-messages), contains the sender of the original message (i.e. if user A sends a message, then user B forwards it somewhere, then user C saves it to saved messages, this field will contain the ID of user B and `from_id` will contain the ID of user A). */
        Object.defineProperty(this, "saved_from_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Only for forwarded messages from users with forward privacy enabled, sent by users with forward privacy enabled, reforwarded to [saved messages »](https://core.telegram.org/api/saved-messages), contains the sender of the original message (i.e. if user A (fwd privacy enabled) sends a message, then user B (fwd privacy enabled) forwards it somewhere, then user C saves it to saved messages, this field will contain the name of user B and `from_name` will contain the name of user A). */
        Object.defineProperty(this, "saved_from_name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Only for forwarded messages reforwarded to [saved messages »](https://core.telegram.org/api/saved-messages), indicates when was the original message sent (i.e. if user A sends a message @ unixtime 1, then user B forwards it somewhere @ unixtime 2, then user C saves it to saved messages @ unixtime 3, this field will contain 2, `date` will contain 1 and the `date` of the containing [message](https://core.telegram.org/constructor/message) will contain 3). */
        Object.defineProperty(this, "saved_date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** PSA type */
        Object.defineProperty(this, "psa_type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.imported = params.imported;
        this.saved_out = params.saved_out;
        this.from_id = params.from_id;
        this.from_name = params.from_name;
        this.date = params.date;
        this.channel_post = params.channel_post;
        this.post_author = params.post_author;
        this.saved_from_peer = params.saved_from_peer;
        this.saved_from_msg_id = params.saved_from_msg_id;
        this.saved_from_id = params.saved_from_id;
        this.saved_from_name = params.saved_from_name;
        this.saved_date = params.saved_date;
        this.psa_type = params.psa_type;
    }
}
/** The next time, the authentication code will be delivered via an immediately canceled incoming call. */
export class auth_CodeTypeSms_ extends _auth_CodeType_ {
    get [id]() {
        return 0x72A3158C;
    }
    static get [name]() {
        return "auth.codeTypeSms";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** The next time, the authentication code is to be delivered via an outgoing phone call. */
export class auth_CodeTypeCall_ extends _auth_CodeType_ {
    get [id]() {
        return 0x741CD3E3;
    }
    static get [name]() {
        return "auth.codeTypeCall";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** The next time, the authentication code will be delivered via an immediately canceled incoming call. */
export class auth_CodeTypeFlashCall_ extends _auth_CodeType_ {
    get [id]() {
        return 0x226CCEFB;
    }
    static get [name]() {
        return "auth.codeTypeFlashCall";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** The next time, the authentication code will be delivered via an immediately canceled incoming call, handled manually by the user. */
export class auth_CodeTypeMissedCall_ extends _auth_CodeType_ {
    get [id]() {
        return 0xD61AD6EE;
    }
    static get [name]() {
        return "auth.codeTypeMissedCall";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** The next time, the authentication code will be delivered via [fragment.com](https://fragment.com) */
export class auth_CodeTypeFragmentSms_ extends _auth_CodeType_ {
    get [id]() {
        return 0x06ED998C;
    }
    static get [name]() {
        return "auth.codeTypeFragmentSms";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** The code was sent through the telegram app */
export class auth_SentCodeTypeApp_ extends _auth_SentCodeType_ {
    get [id]() {
        return 0x3DBB5986;
    }
    static get [name]() {
        return "auth.sentCodeTypeApp";
    }
    static get [paramDesc]() {
        return [
            ["length", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.length, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Length of the code in bytes */
        Object.defineProperty(this, "length", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.length = params.length;
    }
}
/** The code was sent via SMS */
export class auth_SentCodeTypeSms_ extends _auth_SentCodeType_ {
    get [id]() {
        return 0xC000BBA2;
    }
    static get [name]() {
        return "auth.sentCodeTypeSms";
    }
    static get [paramDesc]() {
        return [
            ["length", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.length, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Length of the code in bytes */
        Object.defineProperty(this, "length", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.length = params.length;
    }
}
/** The code will be sent via a phone call: a synthesized voice will tell the user which verification code to input. */
export class auth_SentCodeTypeCall_ extends _auth_SentCodeType_ {
    get [id]() {
        return 0x5353E5A7;
    }
    static get [name]() {
        return "auth.sentCodeTypeCall";
    }
    static get [paramDesc]() {
        return [
            ["length", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.length, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Length of the verification code */
        Object.defineProperty(this, "length", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.length = params.length;
    }
}
/** The code will be sent via a flash phone call, that will be closed immediately. The phone code will then be the phone number itself, just make sure that the phone number matches the specified pattern. */
export class auth_SentCodeTypeFlashCall_ extends _auth_SentCodeType_ {
    get [id]() {
        return 0xAB03C6D9;
    }
    static get [name]() {
        return "auth.sentCodeTypeFlashCall";
    }
    static get [paramDesc]() {
        return [
            ["pattern", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.pattern, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** [pattern](https://core.telegram.org/api/pattern) to match */
        Object.defineProperty(this, "pattern", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.pattern = params.pattern;
    }
}
/** The code will be sent via a flash phone call, that will be closed immediately. The last digits of the phone number that calls are the code that must be entered manually by the user. */
export class auth_SentCodeTypeMissedCall_ extends _auth_SentCodeType_ {
    get [id]() {
        return 0x82006484;
    }
    static get [name]() {
        return "auth.sentCodeTypeMissedCall";
    }
    static get [paramDesc]() {
        return [
            ["prefix", "string", "string"],
            ["length", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.prefix, "string", "string"],
            [this.length, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Prefix of the phone number from which the call will be made */
        Object.defineProperty(this, "prefix", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Length of the verification code */
        Object.defineProperty(this, "length", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.prefix = params.prefix;
        this.length = params.length;
    }
}
/** The code was sent via the [previously configured login email »](https://core.telegram.org/api/auth#email-verification) */
export class auth_SentCodeTypeEmailCode_ extends _auth_SentCodeType_ {
    get [id]() {
        return 0xF450F59B;
    }
    static get [name]() {
        return "auth.sentCodeTypeEmailCode";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["apple_signin_allowed", "true", "flags.0?true"],
            ["google_signin_allowed", "true", "flags.1?true"],
            ["email_pattern", "string", "string"],
            ["length", "number", "int"],
            ["reset_available_period", "number", "flags.3?int"],
            ["reset_pending_date", "number", "flags.4?int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.apple_signin_allowed ?? null, "true", "flags.0?true"],
            [this.google_signin_allowed ?? null, "true", "flags.1?true"],
            [this.email_pattern, "string", "string"],
            [this.length, "number", "int"],
            [this.reset_available_period ?? null, "number", "flags.3?int"],
            [this.reset_pending_date ?? null, "number", "flags.4?int"],
        ];
    }
    constructor(params) {
        super();
        /** Whether authorization through Apple ID is allowed */
        Object.defineProperty(this, "apple_signin_allowed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether authorization through Google ID is allowed */
        Object.defineProperty(this, "google_signin_allowed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Pattern](https://core.telegram.org/api/pattern) of the email */
        Object.defineProperty(this, "email_pattern", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Length of the sent verification code */
        Object.defineProperty(this, "length", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Clients should wait for the specified amount of seconds before allowing the user to invoke [auth.resetLoginEmail](https://core.telegram.org/method/auth.resetLoginEmail) (will be 0 for [Premium](https://core.telegram.org/api/premium) users). */
        Object.defineProperty(this, "reset_available_period", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** An email reset was already requested, and will occur at the specified date. */
        Object.defineProperty(this, "reset_pending_date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.apple_signin_allowed = params.apple_signin_allowed;
        this.google_signin_allowed = params.google_signin_allowed;
        this.email_pattern = params.email_pattern;
        this.length = params.length;
        this.reset_available_period = params.reset_available_period;
        this.reset_pending_date = params.reset_pending_date;
    }
}
/** The user should add and verify an email address in order to login as described [here »](https://core.telegram.org/api/auth#email-verification). */
export class auth_SentCodeTypeSetUpEmailRequired_ extends _auth_SentCodeType_ {
    get [id]() {
        return 0xA5491DEA;
    }
    static get [name]() {
        return "auth.sentCodeTypeSetUpEmailRequired";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["apple_signin_allowed", "true", "flags.0?true"],
            ["google_signin_allowed", "true", "flags.1?true"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.apple_signin_allowed ?? null, "true", "flags.0?true"],
            [this.google_signin_allowed ?? null, "true", "flags.1?true"],
        ];
    }
    constructor(params) {
        super();
        /** Whether authorization through Apple ID is allowed */
        Object.defineProperty(this, "apple_signin_allowed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether authorization through Google ID is allowed */
        Object.defineProperty(this, "google_signin_allowed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.apple_signin_allowed = params?.apple_signin_allowed;
        this.google_signin_allowed = params?.google_signin_allowed;
    }
}
/** The code was delivered via [fragment.com](https://fragment.com). */
export class auth_SentCodeTypeFragmentSms_ extends _auth_SentCodeType_ {
    get [id]() {
        return 0xD9565C39;
    }
    static get [name]() {
        return "auth.sentCodeTypeFragmentSms";
    }
    static get [paramDesc]() {
        return [
            ["url", "string", "string"],
            ["length", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.url, "string", "string"],
            [this.length, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Open the specified URL to log into [fragment.com](https://fragment.com) with the wallet that owns the specified phone number and view the code. */
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Length of the delivered code. */
        Object.defineProperty(this, "length", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.url = params.url;
        this.length = params.length;
    }
}
/** An authentication code should be delivered via SMS after Firebase attestation, as described in the [auth documentation »](https://core.telegram.org/api/auth). */
export class auth_SentCodeTypeFirebaseSms_ extends _auth_SentCodeType_ {
    get [id]() {
        return 0xE57B1432;
    }
    static get [name]() {
        return "auth.sentCodeTypeFirebaseSms";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["nonce", Uint8Array, "flags.0?bytes"],
            ["receipt", "string", "flags.1?string"],
            ["push_timeout", "number", "flags.1?int"],
            ["length", "number", "int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.nonce ?? null, Uint8Array, "flags.0?bytes"],
            [this.receipt ?? null, "string", "flags.1?string"],
            [this.push_timeout ?? null, "number", "flags.1?int"],
            [this.length, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** On Android, the nonce to be used as described in the [auth documentation »](https://core.telegram.org/api/auth) */
        Object.defineProperty(this, "nonce", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** On iOS, must be compared with the `receipt` extracted from the received push notification. */
        Object.defineProperty(this, "receipt", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** On iOS: if a push notification with the `ios_push_secret` isn't received within `push_timeout` seconds, the `next_type` authentication method must be used, with [auth.resendCode](https://core.telegram.org/method/auth.resendCode). */
        Object.defineProperty(this, "push_timeout", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Length of the code that will be delivered. */
        Object.defineProperty(this, "length", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.nonce = params.nonce;
        this.receipt = params.receipt;
        this.push_timeout = params.push_timeout;
        this.length = params.length;
    }
}
/** Callback answer sent by the bot in response to a button press */
export class messages_BotCallbackAnswer_ extends _messages_BotCallbackAnswer_ {
    get [id]() {
        return 0x36585EA4;
    }
    static get [name]() {
        return "messages.botCallbackAnswer";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["alert", "true", "flags.1?true"],
            ["has_url", "true", "flags.3?true"],
            ["native_ui", "true", "flags.4?true"],
            ["message", "string", "flags.0?string"],
            ["url", "string", "flags.2?string"],
            ["cache_time", "number", "int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.alert ?? null, "true", "flags.1?true"],
            [this.has_url ?? null, "true", "flags.3?true"],
            [this.native_ui ?? null, "true", "flags.4?true"],
            [this.message ?? null, "string", "flags.0?string"],
            [this.url ?? null, "string", "flags.2?string"],
            [this.cache_time, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Whether an alert should be shown to the user instead of a toast notification */
        Object.defineProperty(this, "alert", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether an URL is present */
        Object.defineProperty(this, "has_url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether to show games in WebView or in native UI. */
        Object.defineProperty(this, "native_ui", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Alert to show */
        Object.defineProperty(this, "message", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** URL to open */
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** For how long should this answer be cached */
        Object.defineProperty(this, "cache_time", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.alert = params.alert;
        this.has_url = params.has_url;
        this.native_ui = params.native_ui;
        this.message = params.message;
        this.url = params.url;
        this.cache_time = params.cache_time;
    }
}
/** Message edit data for media */
export class messages_MessageEditData_ extends _messages_MessageEditData_ {
    get [id]() {
        return 0x26B5DDE6;
    }
    static get [name]() {
        return "messages.messageEditData";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["caption", "true", "flags.0?true"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.caption ?? null, "true", "flags.0?true"],
        ];
    }
    constructor(params) {
        super();
        /** Media caption, if the specified media's caption can be edited */
        Object.defineProperty(this, "caption", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.caption = params?.caption;
    }
}
/** Represents a sent inline message from the perspective of a bot (legacy constructor) */
export class InputBotInlineMessageID_ extends _InputBotInlineMessageID_ {
    get [id]() {
        return 0x890C3D89;
    }
    static get [name]() {
        return "inputBotInlineMessageID";
    }
    static get [paramDesc]() {
        return [
            ["dc_id", "number", "int"],
            ["id", "bigint", "long"],
            ["access_hash", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.dc_id, "number", "int"],
            [this.id, "bigint", "long"],
            [this.access_hash, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** DC ID to use when working with this inline message */
        Object.defineProperty(this, "dc_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of message, contains both the (32-bit, legacy) owner ID and the message ID, used only for Bot API backwards compatibility with 32-bit user ID. */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Access hash of message */
        Object.defineProperty(this, "access_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.dc_id = params.dc_id;
        this.id = params.id;
        this.access_hash = params.access_hash;
    }
}
/** Represents a sent inline message from the perspective of a bot */
export class InputBotInlineMessageID64_ extends _InputBotInlineMessageID_ {
    get [id]() {
        return 0xB6D915D7;
    }
    static get [name]() {
        return "inputBotInlineMessageID64";
    }
    static get [paramDesc]() {
        return [
            ["dc_id", "number", "int"],
            ["owner_id", "bigint", "long"],
            ["id", "number", "int"],
            ["access_hash", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.dc_id, "number", "int"],
            [this.owner_id, "bigint", "long"],
            [this.id, "number", "int"],
            [this.access_hash, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** DC ID to use when working with this inline message */
        Object.defineProperty(this, "dc_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the owner of this message */
        Object.defineProperty(this, "owner_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of message */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Access hash of message */
        Object.defineProperty(this, "access_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.dc_id = params.dc_id;
        this.owner_id = params.owner_id;
        this.id = params.id;
        this.access_hash = params.access_hash;
    }
}
/** The bot requested the user to message them in private */
export class InlineBotSwitchPM_ extends _InlineBotSwitchPM_ {
    get [id]() {
        return 0x3C20629F;
    }
    static get [name]() {
        return "inlineBotSwitchPM";
    }
    static get [paramDesc]() {
        return [
            ["text", "string", "string"],
            ["start_param", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.text, "string", "string"],
            [this.start_param, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Text for the button that switches the user to a private chat with the bot and sends the bot a start message with the parameter `start_parameter` (can be empty) */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The parameter for the `/start parameter` */
        Object.defineProperty(this, "start_param", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.text = params.text;
        this.start_param = params.start_param;
    }
}
/** Dialog info of multiple peers */
export class messages_PeerDialogs_ extends _messages_PeerDialogs_ {
    get [id]() {
        return 0x3371C354;
    }
    static get [name]() {
        return "messages.peerDialogs";
    }
    static get [paramDesc]() {
        return [
            ["dialogs", [_Dialog_], "Vector<Dialog>"],
            ["messages", [_Message_], "Vector<Message>"],
            ["chats", [_Chat_], "Vector<Chat>"],
            ["users", [_User_], "Vector<User>"],
            ["state", _updates_State_, "updates.State"],
        ];
    }
    get [params]() {
        return [
            [this.dialogs, [_Dialog_], "Vector<Dialog>"],
            [this.messages, [_Message_], "Vector<Message>"],
            [this.chats, [_Chat_], "Vector<Chat>"],
            [this.users, [_User_], "Vector<User>"],
            [this.state, _updates_State_, "updates.State"],
        ];
    }
    constructor(params) {
        super();
        /** Dialog info */
        Object.defineProperty(this, "dialogs", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Messages mentioned in dialog info */
        Object.defineProperty(this, "messages", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Chats */
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Users */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Current [update state of dialog](https://core.telegram.org/api/updates) */
        Object.defineProperty(this, "state", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.dialogs = params.dialogs;
        this.messages = params.messages;
        this.chats = params.chats;
        this.users = params.users;
        this.state = params.state;
    }
}
/** Top peer */
export class TopPeer_ extends _TopPeer_ {
    get [id]() {
        return 0xEDCDC05B;
    }
    static get [name]() {
        return "topPeer";
    }
    static get [paramDesc]() {
        return [
            ["peer", _Peer_, "Peer"],
            ["rating", "number", "double"],
        ];
    }
    get [params]() {
        return [
            [this.peer, _Peer_, "Peer"],
            [this.rating, "number", "double"],
        ];
    }
    constructor(params) {
        super();
        /** Peer */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Rating as computed in [top peer rating »](https://core.telegram.org/api/top-rating) */
        Object.defineProperty(this, "rating", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.peer = params.peer;
        this.rating = params.rating;
    }
}
/** Most used bots */
export class TopPeerCategoryBotsPM_ extends _TopPeerCategory_ {
    get [id]() {
        return 0xAB661B5B;
    }
    static get [name]() {
        return "topPeerCategoryBotsPM";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Most used inline bots */
export class TopPeerCategoryBotsInline_ extends _TopPeerCategory_ {
    get [id]() {
        return 0x148677E2;
    }
    static get [name]() {
        return "topPeerCategoryBotsInline";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Users we've chatted most frequently with */
export class TopPeerCategoryCorrespondents_ extends _TopPeerCategory_ {
    get [id]() {
        return 0x0637B7ED;
    }
    static get [name]() {
        return "topPeerCategoryCorrespondents";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Often-opened groups and supergroups */
export class TopPeerCategoryGroups_ extends _TopPeerCategory_ {
    get [id]() {
        return 0xBD17A14A;
    }
    static get [name]() {
        return "topPeerCategoryGroups";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Most frequently visited channels */
export class TopPeerCategoryChannels_ extends _TopPeerCategory_ {
    get [id]() {
        return 0x161D9628;
    }
    static get [name]() {
        return "topPeerCategoryChannels";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Most frequently called users */
export class TopPeerCategoryPhoneCalls_ extends _TopPeerCategory_ {
    get [id]() {
        return 0x1E76A78C;
    }
    static get [name]() {
        return "topPeerCategoryPhoneCalls";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Users to which the users often forwards messages to */
export class TopPeerCategoryForwardUsers_ extends _TopPeerCategory_ {
    get [id]() {
        return 0xA8406CA9;
    }
    static get [name]() {
        return "topPeerCategoryForwardUsers";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Chats to which the users often forwards messages to */
export class TopPeerCategoryForwardChats_ extends _TopPeerCategory_ {
    get [id]() {
        return 0xFBEEC0F0;
    }
    static get [name]() {
        return "topPeerCategoryForwardChats";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Top peer category */
export class TopPeerCategoryPeers_ extends _TopPeerCategoryPeers_ {
    get [id]() {
        return 0xFB834291;
    }
    static get [name]() {
        return "topPeerCategoryPeers";
    }
    static get [paramDesc]() {
        return [
            ["category", _TopPeerCategory_, "TopPeerCategory"],
            ["count", "number", "int"],
            ["peers", [_TopPeer_], "Vector<TopPeer>"],
        ];
    }
    get [params]() {
        return [
            [this.category, _TopPeerCategory_, "TopPeerCategory"],
            [this.count, "number", "int"],
            [this.peers, [_TopPeer_], "Vector<TopPeer>"],
        ];
    }
    constructor(params) {
        super();
        /** Top peer category of peers */
        Object.defineProperty(this, "category", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Count of peers */
        Object.defineProperty(this, "count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Peers */
        Object.defineProperty(this, "peers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.category = params.category;
        this.count = params.count;
        this.peers = params.peers;
    }
}
/** Top peer info hasn't changed */
export class contacts_TopPeersNotModified_ extends _contacts_TopPeers_ {
    get [id]() {
        return 0xDE266EF5;
    }
    static get [name]() {
        return "contacts.topPeersNotModified";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Top peers */
export class contacts_TopPeers_ extends _contacts_TopPeers_ {
    get [id]() {
        return 0x70B772A8;
    }
    static get [name]() {
        return "contacts.topPeers";
    }
    static get [paramDesc]() {
        return [
            ["categories", [_TopPeerCategoryPeers_], "Vector<TopPeerCategoryPeers>"],
            ["chats", [_Chat_], "Vector<Chat>"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            [this.categories, [_TopPeerCategoryPeers_], "Vector<TopPeerCategoryPeers>"],
            [this.chats, [_Chat_], "Vector<Chat>"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** Top peers by top peer category */
        Object.defineProperty(this, "categories", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Chats */
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Users */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.categories = params.categories;
        this.chats = params.chats;
        this.users = params.users;
    }
}
/** Top peers disabled */
export class contacts_TopPeersDisabled_ extends _contacts_TopPeers_ {
    get [id]() {
        return 0xB52C939D;
    }
    static get [name]() {
        return "contacts.topPeersDisabled";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Empty draft */
export class DraftMessageEmpty_ extends _DraftMessage_ {
    get [id]() {
        return 0x1B0C841A;
    }
    static get [name]() {
        return "draftMessageEmpty";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["date", "number", "flags.0?int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.date ?? null, "number", "flags.0?int"],
        ];
    }
    constructor(params) {
        super();
        /** When was the draft last updated */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.date = params?.date;
    }
}
/** Represents a message [draft](https://core.telegram.org/api/drafts). */
export class DraftMessage_ extends _DraftMessage_ {
    get [id]() {
        return 0x3FCCF7EF;
    }
    static get [name]() {
        return "draftMessage";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["no_webpage", "true", "flags.1?true"],
            ["invert_media", "true", "flags.6?true"],
            ["reply_to", _InputReplyTo_, "flags.4?InputReplyTo"],
            ["message", "string", "string"],
            ["entities", [_MessageEntity_], "flags.3?Vector<MessageEntity>"],
            ["media", _InputMedia_, "flags.5?InputMedia"],
            ["date", "number", "int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.no_webpage ?? null, "true", "flags.1?true"],
            [this.invert_media ?? null, "true", "flags.6?true"],
            [this.reply_to ?? null, _InputReplyTo_, "flags.4?InputReplyTo"],
            [this.message, "string", "string"],
            [this.entities ?? null, [_MessageEntity_], "flags.3?Vector<MessageEntity>"],
            [this.media ?? null, _InputMedia_, "flags.5?InputMedia"],
            [this.date, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Whether no webpage preview will be generated */
        Object.defineProperty(this, "no_webpage", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, any eventual webpage preview will be shown on top of the message instead of at the bottom. */
        Object.defineProperty(this, "invert_media", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, indicates that the message should be sent in reply to the specified message or story. */
        Object.defineProperty(this, "reply_to", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The draft */
        Object.defineProperty(this, "message", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Message [entities](https://core.telegram.org/api/entities) for styled text. */
        Object.defineProperty(this, "entities", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Media. */
        Object.defineProperty(this, "media", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Date of last update of the draft. */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.no_webpage = params.no_webpage;
        this.invert_media = params.invert_media;
        this.reply_to = params.reply_to;
        this.message = params.message;
        this.entities = params.entities;
        this.media = params.media;
        this.date = params.date;
    }
}
/** Featured stickers haven't changed */
export class messages_FeaturedStickersNotModified_ extends _messages_FeaturedStickers_ {
    get [id]() {
        return 0xC6DC0C66;
    }
    static get [name]() {
        return "messages.featuredStickersNotModified";
    }
    static get [paramDesc]() {
        return [
            ["count", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.count, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Total number of featured stickers */
        Object.defineProperty(this, "count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.count = params.count;
    }
}
/** Featured stickersets */
export class messages_FeaturedStickers_ extends _messages_FeaturedStickers_ {
    get [id]() {
        return 0xBE382906;
    }
    static get [name]() {
        return "messages.featuredStickers";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["premium", "true", "flags.0?true"],
            ["hash", "bigint", "long"],
            ["count", "number", "int"],
            ["sets", [_StickerSetCovered_], "Vector<StickerSetCovered>"],
            ["unread", ["bigint"], "Vector<long>"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.premium ?? null, "true", "flags.0?true"],
            [this.hash, "bigint", "long"],
            [this.count, "number", "int"],
            [this.sets, [_StickerSetCovered_], "Vector<StickerSetCovered>"],
            [this.unread, ["bigint"], "Vector<long>"],
        ];
    }
    constructor(params) {
        super();
        /** Whether this is a premium stickerset */
        Object.defineProperty(this, "premium", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation) */
        Object.defineProperty(this, "hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Total number of featured stickers */
        Object.defineProperty(this, "count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Featured stickersets */
        Object.defineProperty(this, "sets", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** IDs of new featured stickersets */
        Object.defineProperty(this, "unread", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.premium = params.premium;
        this.hash = params.hash;
        this.count = params.count;
        this.sets = params.sets;
        this.unread = params.unread;
    }
}
/** No new recent sticker was found */
export class messages_RecentStickersNotModified_ extends _messages_RecentStickers_ {
    get [id]() {
        return 0x0B17F890;
    }
    static get [name]() {
        return "messages.recentStickersNotModified";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Recently used stickers */
export class messages_RecentStickers_ extends _messages_RecentStickers_ {
    get [id]() {
        return 0x88D37C56;
    }
    static get [name]() {
        return "messages.recentStickers";
    }
    static get [paramDesc]() {
        return [
            ["hash", "bigint", "long"],
            ["packs", [_StickerPack_], "Vector<StickerPack>"],
            ["stickers", [_Document_], "Vector<Document>"],
            ["dates", ["number"], "Vector<int>"],
        ];
    }
    get [params]() {
        return [
            [this.hash, "bigint", "long"],
            [this.packs, [_StickerPack_], "Vector<StickerPack>"],
            [this.stickers, [_Document_], "Vector<Document>"],
            [this.dates, ["number"], "Vector<int>"],
        ];
    }
    constructor(params) {
        super();
        /** [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation) */
        Object.defineProperty(this, "hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Emojis associated to stickers */
        Object.defineProperty(this, "packs", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Recent stickers */
        Object.defineProperty(this, "stickers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** When was each sticker last used */
        Object.defineProperty(this, "dates", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.hash = params.hash;
        this.packs = params.packs;
        this.stickers = params.stickers;
        this.dates = params.dates;
    }
}
/** Archived stickersets */
export class messages_ArchivedStickers_ extends _messages_ArchivedStickers_ {
    get [id]() {
        return 0x4FCBA9C8;
    }
    static get [name]() {
        return "messages.archivedStickers";
    }
    static get [paramDesc]() {
        return [
            ["count", "number", "int"],
            ["sets", [_StickerSetCovered_], "Vector<StickerSetCovered>"],
        ];
    }
    get [params]() {
        return [
            [this.count, "number", "int"],
            [this.sets, [_StickerSetCovered_], "Vector<StickerSetCovered>"],
        ];
    }
    constructor(params) {
        super();
        /** Number of archived stickers */
        Object.defineProperty(this, "count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Archived stickersets */
        Object.defineProperty(this, "sets", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.count = params.count;
        this.sets = params.sets;
    }
}
/** The stickerset was installed successfully */
export class messages_StickerSetInstallResultSuccess_ extends _messages_StickerSetInstallResult_ {
    get [id]() {
        return 0x38641628;
    }
    static get [name]() {
        return "messages.stickerSetInstallResultSuccess";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** The stickerset was installed, but since there are too many stickersets some were archived */
export class messages_StickerSetInstallResultArchive_ extends _messages_StickerSetInstallResult_ {
    get [id]() {
        return 0x35E410A8;
    }
    static get [name]() {
        return "messages.stickerSetInstallResultArchive";
    }
    static get [paramDesc]() {
        return [
            ["sets", [_StickerSetCovered_], "Vector<StickerSetCovered>"],
        ];
    }
    get [params]() {
        return [
            [this.sets, [_StickerSetCovered_], "Vector<StickerSetCovered>"],
        ];
    }
    constructor(params) {
        super();
        /** Archived stickersets */
        Object.defineProperty(this, "sets", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.sets = params.sets;
    }
}
/** Stickerset with a single sticker as preview */
export class StickerSetCovered_ extends _StickerSetCovered_ {
    get [id]() {
        return 0x6410A5D2;
    }
    static get [name]() {
        return "stickerSetCovered";
    }
    static get [paramDesc]() {
        return [
            ["set", _StickerSet_, "StickerSet"],
            ["cover", _Document_, "Document"],
        ];
    }
    get [params]() {
        return [
            [this.set, _StickerSet_, "StickerSet"],
            [this.cover, _Document_, "Document"],
        ];
    }
    constructor(params) {
        super();
        /** Stickerset */
        Object.defineProperty(this, "set", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Preview */
        Object.defineProperty(this, "cover", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.set = params.set;
        this.cover = params.cover;
    }
}
/** Stickerset, with multiple stickers as preview */
export class StickerSetMultiCovered_ extends _StickerSetCovered_ {
    get [id]() {
        return 0x3407E51B;
    }
    static get [name]() {
        return "stickerSetMultiCovered";
    }
    static get [paramDesc]() {
        return [
            ["set", _StickerSet_, "StickerSet"],
            ["covers", [_Document_], "Vector<Document>"],
        ];
    }
    get [params]() {
        return [
            [this.set, _StickerSet_, "StickerSet"],
            [this.covers, [_Document_], "Vector<Document>"],
        ];
    }
    constructor(params) {
        super();
        /** Stickerset */
        Object.defineProperty(this, "set", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Preview stickers */
        Object.defineProperty(this, "covers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.set = params.set;
        this.covers = params.covers;
    }
}
/** Stickerset preview with all stickers of the stickerset included.
Currently used only for [custom emoji stickersets](https://core.telegram.org/api/custom-emoji), to avoid a further call to [messages.getStickerSet](https://core.telegram.org/method/messages.getStickerSet). */
export class StickerSetFullCovered_ extends _StickerSetCovered_ {
    get [id]() {
        return 0x40D13C0E;
    }
    static get [name]() {
        return "stickerSetFullCovered";
    }
    static get [paramDesc]() {
        return [
            ["set", _StickerSet_, "StickerSet"],
            ["packs", [_StickerPack_], "Vector<StickerPack>"],
            ["keywords", [_StickerKeyword_], "Vector<StickerKeyword>"],
            ["documents", [_Document_], "Vector<Document>"],
        ];
    }
    get [params]() {
        return [
            [this.set, _StickerSet_, "StickerSet"],
            [this.packs, [_StickerPack_], "Vector<StickerPack>"],
            [this.keywords, [_StickerKeyword_], "Vector<StickerKeyword>"],
            [this.documents, [_Document_], "Vector<Document>"],
        ];
    }
    constructor(params) {
        super();
        /** Stickerset */
        Object.defineProperty(this, "set", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Emoji information about every sticker in the stickerset */
        Object.defineProperty(this, "packs", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Keywords for some or every sticker in the stickerset. */
        Object.defineProperty(this, "keywords", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Stickers */
        Object.defineProperty(this, "documents", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.set = params.set;
        this.packs = params.packs;
        this.keywords = params.keywords;
        this.documents = params.documents;
    }
}
/** Just the stickerset information, with no previews. */
export class StickerSetNoCovered_ extends _StickerSetCovered_ {
    get [id]() {
        return 0x77B15D1C;
    }
    static get [name]() {
        return "stickerSetNoCovered";
    }
    static get [paramDesc]() {
        return [
            ["set", _StickerSet_, "StickerSet"],
        ];
    }
    get [params]() {
        return [
            [this.set, _StickerSet_, "StickerSet"],
        ];
    }
    constructor(params) {
        super();
        /** Stickerset information. */
        Object.defineProperty(this, "set", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.set = params.set;
    }
}
/** Position on a photo where a mask should be placed when [attaching stickers to media »](https://core.telegram.org/api/stickers#attached-stickers) */
export class MaskCoords_ extends _MaskCoords_ {
    get [id]() {
        return 0xAED6DBB2;
    }
    static get [name]() {
        return "maskCoords";
    }
    static get [paramDesc]() {
        return [
            ["n", "number", "int"],
            ["x", "number", "double"],
            ["y", "number", "double"],
            ["zoom", "number", "double"],
        ];
    }
    get [params]() {
        return [
            [this.n, "number", "int"],
            [this.x, "number", "double"],
            [this.y, "number", "double"],
            [this.zoom, "number", "double"],
        ];
    }
    constructor(params) {
        super();
        /** Part of the face, relative to which the mask should be placed */
        Object.defineProperty(this, "n", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Shift by X-axis measured in widths of the mask scaled to the face size, from left to right. (For example, -1.0 will place the mask just to the left of the default mask position) */
        Object.defineProperty(this, "x", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Shift by Y-axis measured in widths of the mask scaled to the face size, from left to right. (For example, -1.0 will place the mask just below the default mask position) */
        Object.defineProperty(this, "y", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Mask scaling coefficient. (For example, 2.0 means a doubled size) */
        Object.defineProperty(this, "zoom", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.n = params.n;
        this.x = params.x;
        this.y = params.y;
        this.zoom = params.zoom;
    }
}
/** A photo with stickers attached */
export class InputStickeredMediaPhoto_ extends _InputStickeredMedia_ {
    get [id]() {
        return 0x4A992157;
    }
    static get [name]() {
        return "inputStickeredMediaPhoto";
    }
    static get [paramDesc]() {
        return [
            ["id", _InputPhoto_, "InputPhoto"],
        ];
    }
    get [params]() {
        return [
            [this.id, _InputPhoto_, "InputPhoto"],
        ];
    }
    constructor(params) {
        super();
        /** The photo */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
    }
}
/** A document with stickers attached */
export class InputStickeredMediaDocument_ extends _InputStickeredMedia_ {
    get [id]() {
        return 0x0438865B;
    }
    static get [name]() {
        return "inputStickeredMediaDocument";
    }
    static get [paramDesc]() {
        return [
            ["id", _InputDocument_, "InputDocument"],
        ];
    }
    get [params]() {
        return [
            [this.id, _InputDocument_, "InputDocument"],
        ];
    }
    constructor(params) {
        super();
        /** The document */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
    }
}
/** Indicates an already sent game */
export class Game_ extends _Game_ {
    get [id]() {
        return 0xBDF9653B;
    }
    static get [name]() {
        return "game";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["id", "bigint", "long"],
            ["access_hash", "bigint", "long"],
            ["short_name", "string", "string"],
            ["title", "string", "string"],
            ["description", "string", "string"],
            ["photo", _Photo_, "Photo"],
            ["document", _Document_, "flags.0?Document"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.id, "bigint", "long"],
            [this.access_hash, "bigint", "long"],
            [this.short_name, "string", "string"],
            [this.title, "string", "string"],
            [this.description, "string", "string"],
            [this.photo, _Photo_, "Photo"],
            [this.document ?? null, _Document_, "flags.0?Document"],
        ];
    }
    constructor(params) {
        super();
        /** ID of the game */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Access hash of the game */
        Object.defineProperty(this, "access_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Short name for the game */
        Object.defineProperty(this, "short_name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Title of the game */
        Object.defineProperty(this, "title", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Game description */
        Object.defineProperty(this, "description", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Game preview */
        Object.defineProperty(this, "photo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Optional attached document */
        Object.defineProperty(this, "document", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
        this.access_hash = params.access_hash;
        this.short_name = params.short_name;
        this.title = params.title;
        this.description = params.description;
        this.photo = params.photo;
        this.document = params.document;
    }
}
/** Indicates an already sent game */
export class InputGameID_ extends _InputGame_ {
    get [id]() {
        return 0x032C3E77;
    }
    static get [name]() {
        return "inputGameID";
    }
    static get [paramDesc]() {
        return [
            ["id", "bigint", "long"],
            ["access_hash", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.id, "bigint", "long"],
            [this.access_hash, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** game ID from [Game](https://core.telegram.org/type/Game) constructor */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** access hash from [Game](https://core.telegram.org/type/Game) constructor */
        Object.defineProperty(this, "access_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
        this.access_hash = params.access_hash;
    }
}
/** Game by short name */
export class InputGameShortName_ extends _InputGame_ {
    get [id]() {
        return 0xC331E80A;
    }
    static get [name]() {
        return "inputGameShortName";
    }
    static get [paramDesc]() {
        return [
            ["bot_id", _InputUser_, "InputUser"],
            ["short_name", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.bot_id, _InputUser_, "InputUser"],
            [this.short_name, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** The bot that provides the game */
        Object.defineProperty(this, "bot_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The game's short name, usually obtained from a [game link »](https://core.telegram.org/api/links#game-links) */
        Object.defineProperty(this, "short_name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.bot_id = params.bot_id;
        this.short_name = params.short_name;
    }
}
/** Game highscore */
export class HighScore_ extends _HighScore_ {
    get [id]() {
        return 0x73A379EB;
    }
    static get [name]() {
        return "highScore";
    }
    static get [paramDesc]() {
        return [
            ["pos", "number", "int"],
            ["user_id", "bigint", "long"],
            ["score", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.pos, "number", "int"],
            [this.user_id, "bigint", "long"],
            [this.score, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Position in highscore list */
        Object.defineProperty(this, "pos", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** User ID */
        Object.defineProperty(this, "user_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Score */
        Object.defineProperty(this, "score", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.pos = params.pos;
        this.user_id = params.user_id;
        this.score = params.score;
    }
}
/** Highscores in a game */
export class messages_HighScores_ extends _messages_HighScores_ {
    get [id]() {
        return 0x9A3BFD99;
    }
    static get [name]() {
        return "messages.highScores";
    }
    static get [paramDesc]() {
        return [
            ["scores", [_HighScore_], "Vector<HighScore>"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            [this.scores, [_HighScore_], "Vector<HighScore>"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** Highscores */
        Object.defineProperty(this, "scores", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Users, associated to the highscores */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.scores = params.scores;
        this.users = params.users;
    }
}
/** Empty rich text element */
export class TextEmpty_ extends _RichText_ {
    get [id]() {
        return 0xDC3D824F;
    }
    static get [name]() {
        return "textEmpty";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Plain text */
export class TextPlain_ extends _RichText_ {
    get [id]() {
        return 0x744694E0;
    }
    static get [name]() {
        return "textPlain";
    }
    static get [paramDesc]() {
        return [
            ["text", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.text, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Text */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.text = params.text;
    }
}
/** **Bold** text */
export class TextBold_ extends _RichText_ {
    get [id]() {
        return 0x6724ABC4;
    }
    static get [name]() {
        return "textBold";
    }
    static get [paramDesc]() {
        return [
            ["text", _RichText_, "RichText"],
        ];
    }
    get [params]() {
        return [
            [this.text, _RichText_, "RichText"],
        ];
    }
    constructor(params) {
        super();
        /** Text */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.text = params.text;
    }
}
/** _Italic_ text */
export class TextItalic_ extends _RichText_ {
    get [id]() {
        return 0xD912A59C;
    }
    static get [name]() {
        return "textItalic";
    }
    static get [paramDesc]() {
        return [
            ["text", _RichText_, "RichText"],
        ];
    }
    get [params]() {
        return [
            [this.text, _RichText_, "RichText"],
        ];
    }
    constructor(params) {
        super();
        /** Text */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.text = params.text;
    }
}
/** Underlined text */
export class TextUnderline_ extends _RichText_ {
    get [id]() {
        return 0xC12622C4;
    }
    static get [name]() {
        return "textUnderline";
    }
    static get [paramDesc]() {
        return [
            ["text", _RichText_, "RichText"],
        ];
    }
    get [params]() {
        return [
            [this.text, _RichText_, "RichText"],
        ];
    }
    constructor(params) {
        super();
        /** Text */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.text = params.text;
    }
}
/** Strikethrough text */
export class TextStrike_ extends _RichText_ {
    get [id]() {
        return 0x9BF8BB95;
    }
    static get [name]() {
        return "textStrike";
    }
    static get [paramDesc]() {
        return [
            ["text", _RichText_, "RichText"],
        ];
    }
    get [params]() {
        return [
            [this.text, _RichText_, "RichText"],
        ];
    }
    constructor(params) {
        super();
        /** Text */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.text = params.text;
    }
}
/** `fixed-width` rich text */
export class TextFixed_ extends _RichText_ {
    get [id]() {
        return 0x6C3F19B9;
    }
    static get [name]() {
        return "textFixed";
    }
    static get [paramDesc]() {
        return [
            ["text", _RichText_, "RichText"],
        ];
    }
    get [params]() {
        return [
            [this.text, _RichText_, "RichText"],
        ];
    }
    constructor(params) {
        super();
        /** Text */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.text = params.text;
    }
}
/** Link */
export class TextUrl_ extends _RichText_ {
    get [id]() {
        return 0x3C2884C1;
    }
    static get [name]() {
        return "textUrl";
    }
    static get [paramDesc]() {
        return [
            ["text", _RichText_, "RichText"],
            ["url", "string", "string"],
            ["webpage_id", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.text, _RichText_, "RichText"],
            [this.url, "string", "string"],
            [this.webpage_id, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** Text of link */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Webpage HTTP URL */
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If a preview was already generated for the page, the page ID */
        Object.defineProperty(this, "webpage_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.text = params.text;
        this.url = params.url;
        this.webpage_id = params.webpage_id;
    }
}
/** Rich text email link */
export class TextEmail_ extends _RichText_ {
    get [id]() {
        return 0xDE5A0DD6;
    }
    static get [name]() {
        return "textEmail";
    }
    static get [paramDesc]() {
        return [
            ["text", _RichText_, "RichText"],
            ["email", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.text, _RichText_, "RichText"],
            [this.email, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Link text */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Email address */
        Object.defineProperty(this, "email", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.text = params.text;
        this.email = params.email;
    }
}
/** Concatenation of rich texts */
export class TextConcat_ extends _RichText_ {
    get [id]() {
        return 0x7E6260D7;
    }
    static get [name]() {
        return "textConcat";
    }
    static get [paramDesc]() {
        return [
            ["texts", [_RichText_], "Vector<RichText>"],
        ];
    }
    get [params]() {
        return [
            [this.texts, [_RichText_], "Vector<RichText>"],
        ];
    }
    constructor(params) {
        super();
        /** Concatenated rich texts */
        Object.defineProperty(this, "texts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.texts = params.texts;
    }
}
/** Subscript text */
export class TextSubscript_ extends _RichText_ {
    get [id]() {
        return 0xED6A8504;
    }
    static get [name]() {
        return "textSubscript";
    }
    static get [paramDesc]() {
        return [
            ["text", _RichText_, "RichText"],
        ];
    }
    get [params]() {
        return [
            [this.text, _RichText_, "RichText"],
        ];
    }
    constructor(params) {
        super();
        /** Text */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.text = params.text;
    }
}
/** Superscript text */
export class TextSuperscript_ extends _RichText_ {
    get [id]() {
        return 0xC7FB5E01;
    }
    static get [name]() {
        return "textSuperscript";
    }
    static get [paramDesc]() {
        return [
            ["text", _RichText_, "RichText"],
        ];
    }
    get [params]() {
        return [
            [this.text, _RichText_, "RichText"],
        ];
    }
    constructor(params) {
        super();
        /** Text */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.text = params.text;
    }
}
/** Highlighted text */
export class TextMarked_ extends _RichText_ {
    get [id]() {
        return 0x034B8621;
    }
    static get [name]() {
        return "textMarked";
    }
    static get [paramDesc]() {
        return [
            ["text", _RichText_, "RichText"],
        ];
    }
    get [params]() {
        return [
            [this.text, _RichText_, "RichText"],
        ];
    }
    constructor(params) {
        super();
        /** Text */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.text = params.text;
    }
}
/** Rich text linked to a phone number */
export class TextPhone_ extends _RichText_ {
    get [id]() {
        return 0x1CCB966A;
    }
    static get [name]() {
        return "textPhone";
    }
    static get [paramDesc]() {
        return [
            ["text", _RichText_, "RichText"],
            ["phone", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.text, _RichText_, "RichText"],
            [this.phone, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Text */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Phone number */
        Object.defineProperty(this, "phone", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.text = params.text;
        this.phone = params.phone;
    }
}
/** Inline image */
export class TextImage_ extends _RichText_ {
    get [id]() {
        return 0x081CCF4F;
    }
    static get [name]() {
        return "textImage";
    }
    static get [paramDesc]() {
        return [
            ["document_id", "bigint", "long"],
            ["w", "number", "int"],
            ["h", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.document_id, "bigint", "long"],
            [this.w, "number", "int"],
            [this.h, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Document ID */
        Object.defineProperty(this, "document_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Width */
        Object.defineProperty(this, "w", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Height */
        Object.defineProperty(this, "h", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.document_id = params.document_id;
        this.w = params.w;
        this.h = params.h;
    }
}
/** Text linking to another section of the page */
export class TextAnchor_ extends _RichText_ {
    get [id]() {
        return 0x35553762;
    }
    static get [name]() {
        return "textAnchor";
    }
    static get [paramDesc]() {
        return [
            ["text", _RichText_, "RichText"],
            ["name", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.text, _RichText_, "RichText"],
            [this.name, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Text */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Section name */
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.text = params.text;
        this.name = params.name;
    }
}
/** Unsupported IV element */
export class PageBlockUnsupported_ extends _PageBlock_ {
    get [id]() {
        return 0x13567E8A;
    }
    static get [name]() {
        return "pageBlockUnsupported";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Title */
export class PageBlockTitle_ extends _PageBlock_ {
    get [id]() {
        return 0x70ABC3FD;
    }
    static get [name]() {
        return "pageBlockTitle";
    }
    static get [paramDesc]() {
        return [
            ["text", _RichText_, "RichText"],
        ];
    }
    get [params]() {
        return [
            [this.text, _RichText_, "RichText"],
        ];
    }
    constructor(params) {
        super();
        /** Title */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.text = params.text;
    }
}
/** Subtitle */
export class PageBlockSubtitle_ extends _PageBlock_ {
    get [id]() {
        return 0x8FFA9A1F;
    }
    static get [name]() {
        return "pageBlockSubtitle";
    }
    static get [paramDesc]() {
        return [
            ["text", _RichText_, "RichText"],
        ];
    }
    get [params]() {
        return [
            [this.text, _RichText_, "RichText"],
        ];
    }
    constructor(params) {
        super();
        /** Text */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.text = params.text;
    }
}
/** Author and date of creation of article */
export class PageBlockAuthorDate_ extends _PageBlock_ {
    get [id]() {
        return 0xBAAFE5E0;
    }
    static get [name]() {
        return "pageBlockAuthorDate";
    }
    static get [paramDesc]() {
        return [
            ["author", _RichText_, "RichText"],
            ["published_date", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.author, _RichText_, "RichText"],
            [this.published_date, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Author name */
        Object.defineProperty(this, "author", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Date of publication */
        Object.defineProperty(this, "published_date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.author = params.author;
        this.published_date = params.published_date;
    }
}
/** Page header */
export class PageBlockHeader_ extends _PageBlock_ {
    get [id]() {
        return 0xBFD064EC;
    }
    static get [name]() {
        return "pageBlockHeader";
    }
    static get [paramDesc]() {
        return [
            ["text", _RichText_, "RichText"],
        ];
    }
    get [params]() {
        return [
            [this.text, _RichText_, "RichText"],
        ];
    }
    constructor(params) {
        super();
        /** Contents */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.text = params.text;
    }
}
/** Subheader */
export class PageBlockSubheader_ extends _PageBlock_ {
    get [id]() {
        return 0xF12BB6E1;
    }
    static get [name]() {
        return "pageBlockSubheader";
    }
    static get [paramDesc]() {
        return [
            ["text", _RichText_, "RichText"],
        ];
    }
    get [params]() {
        return [
            [this.text, _RichText_, "RichText"],
        ];
    }
    constructor(params) {
        super();
        /** Subheader */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.text = params.text;
    }
}
/** A paragraph */
export class PageBlockParagraph_ extends _PageBlock_ {
    get [id]() {
        return 0x467A0766;
    }
    static get [name]() {
        return "pageBlockParagraph";
    }
    static get [paramDesc]() {
        return [
            ["text", _RichText_, "RichText"],
        ];
    }
    get [params]() {
        return [
            [this.text, _RichText_, "RichText"],
        ];
    }
    constructor(params) {
        super();
        /** Text */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.text = params.text;
    }
}
/** Preformatted (`<pre>` text) */
export class PageBlockPreformatted_ extends _PageBlock_ {
    get [id]() {
        return 0xC070D93E;
    }
    static get [name]() {
        return "pageBlockPreformatted";
    }
    static get [paramDesc]() {
        return [
            ["text", _RichText_, "RichText"],
            ["language", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.text, _RichText_, "RichText"],
            [this.language, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Text */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Programming language of preformatted text */
        Object.defineProperty(this, "language", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.text = params.text;
        this.language = params.language;
    }
}
/** Page footer */
export class PageBlockFooter_ extends _PageBlock_ {
    get [id]() {
        return 0x48870999;
    }
    static get [name]() {
        return "pageBlockFooter";
    }
    static get [paramDesc]() {
        return [
            ["text", _RichText_, "RichText"],
        ];
    }
    get [params]() {
        return [
            [this.text, _RichText_, "RichText"],
        ];
    }
    constructor(params) {
        super();
        /** Contents */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.text = params.text;
    }
}
/** An empty block separating a page */
export class PageBlockDivider_ extends _PageBlock_ {
    get [id]() {
        return 0xDB20B188;
    }
    static get [name]() {
        return "pageBlockDivider";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Link to section within the page itself (like `<a href="#target">anchor</a>`) */
export class PageBlockAnchor_ extends _PageBlock_ {
    get [id]() {
        return 0xCE0D37B0;
    }
    static get [name]() {
        return "pageBlockAnchor";
    }
    static get [paramDesc]() {
        return [
            ["name", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.name, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Name of target section */
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.name = params.name;
    }
}
/** Unordered list of IV blocks */
export class PageBlockList_ extends _PageBlock_ {
    get [id]() {
        return 0xE4E88011;
    }
    static get [name]() {
        return "pageBlockList";
    }
    static get [paramDesc]() {
        return [
            ["items", [_PageListItem_], "Vector<PageListItem>"],
        ];
    }
    get [params]() {
        return [
            [this.items, [_PageListItem_], "Vector<PageListItem>"],
        ];
    }
    constructor(params) {
        super();
        /** List of blocks in an IV page */
        Object.defineProperty(this, "items", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.items = params.items;
    }
}
/** Quote (equivalent to the HTML `<blockquote>`) */
export class PageBlockBlockquote_ extends _PageBlock_ {
    get [id]() {
        return 0x263D7C26;
    }
    static get [name]() {
        return "pageBlockBlockquote";
    }
    static get [paramDesc]() {
        return [
            ["text", _RichText_, "RichText"],
            ["caption", _RichText_, "RichText"],
        ];
    }
    get [params]() {
        return [
            [this.text, _RichText_, "RichText"],
            [this.caption, _RichText_, "RichText"],
        ];
    }
    constructor(params) {
        super();
        /** Quote contents */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Caption */
        Object.defineProperty(this, "caption", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.text = params.text;
        this.caption = params.caption;
    }
}
/** Pullquote */
export class PageBlockPullquote_ extends _PageBlock_ {
    get [id]() {
        return 0x4F4456D3;
    }
    static get [name]() {
        return "pageBlockPullquote";
    }
    static get [paramDesc]() {
        return [
            ["text", _RichText_, "RichText"],
            ["caption", _RichText_, "RichText"],
        ];
    }
    get [params]() {
        return [
            [this.text, _RichText_, "RichText"],
            [this.caption, _RichText_, "RichText"],
        ];
    }
    constructor(params) {
        super();
        /** Text */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Caption */
        Object.defineProperty(this, "caption", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.text = params.text;
        this.caption = params.caption;
    }
}
/** A photo */
export class PageBlockPhoto_ extends _PageBlock_ {
    get [id]() {
        return 0x1759C560;
    }
    static get [name]() {
        return "pageBlockPhoto";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["photo_id", "bigint", "long"],
            ["caption", _PageCaption_, "PageCaption"],
            ["url", "string", "flags.0?string"],
            ["webpage_id", "bigint", "flags.0?long"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.photo_id, "bigint", "long"],
            [this.caption, _PageCaption_, "PageCaption"],
            [this.url ?? null, "string", "flags.0?string"],
            [this.webpage_id ?? null, "bigint", "flags.0?long"],
        ];
    }
    constructor(params) {
        super();
        /** Photo ID */
        Object.defineProperty(this, "photo_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Caption */
        Object.defineProperty(this, "caption", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** HTTP URL of page the photo leads to when clicked */
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of preview of the page the photo leads to when clicked */
        Object.defineProperty(this, "webpage_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.photo_id = params.photo_id;
        this.caption = params.caption;
        this.url = params.url;
        this.webpage_id = params.webpage_id;
    }
}
/** Video */
export class PageBlockVideo_ extends _PageBlock_ {
    get [id]() {
        return 0x7C8FE7B6;
    }
    static get [name]() {
        return "pageBlockVideo";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["autoplay", "true", "flags.0?true"],
            ["loop", "true", "flags.1?true"],
            ["video_id", "bigint", "long"],
            ["caption", _PageCaption_, "PageCaption"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.autoplay ?? null, "true", "flags.0?true"],
            [this.loop ?? null, "true", "flags.1?true"],
            [this.video_id, "bigint", "long"],
            [this.caption, _PageCaption_, "PageCaption"],
        ];
    }
    constructor(params) {
        super();
        /** Whether the video is set to autoplay */
        Object.defineProperty(this, "autoplay", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether the video is set to loop */
        Object.defineProperty(this, "loop", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Video ID */
        Object.defineProperty(this, "video_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Caption */
        Object.defineProperty(this, "caption", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.autoplay = params.autoplay;
        this.loop = params.loop;
        this.video_id = params.video_id;
        this.caption = params.caption;
    }
}
/** A page cover */
export class PageBlockCover_ extends _PageBlock_ {
    get [id]() {
        return 0x39F23300;
    }
    static get [name]() {
        return "pageBlockCover";
    }
    static get [paramDesc]() {
        return [
            ["cover", _PageBlock_, "PageBlock"],
        ];
    }
    get [params]() {
        return [
            [this.cover, _PageBlock_, "PageBlock"],
        ];
    }
    constructor(params) {
        super();
        /** Cover */
        Object.defineProperty(this, "cover", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.cover = params.cover;
    }
}
/** An embedded webpage */
export class PageBlockEmbed_ extends _PageBlock_ {
    get [id]() {
        return 0xA8718DC5;
    }
    static get [name]() {
        return "pageBlockEmbed";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["full_width", "true", "flags.0?true"],
            ["allow_scrolling", "true", "flags.3?true"],
            ["url", "string", "flags.1?string"],
            ["html", "string", "flags.2?string"],
            ["poster_photo_id", "bigint", "flags.4?long"],
            ["w", "number", "flags.5?int"],
            ["h", "number", "flags.5?int"],
            ["caption", _PageCaption_, "PageCaption"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.full_width ?? null, "true", "flags.0?true"],
            [this.allow_scrolling ?? null, "true", "flags.3?true"],
            [this.url ?? null, "string", "flags.1?string"],
            [this.html ?? null, "string", "flags.2?string"],
            [this.poster_photo_id ?? null, "bigint", "flags.4?long"],
            [this.w ?? null, "number", "flags.5?int"],
            [this.h ?? null, "number", "flags.5?int"],
            [this.caption, _PageCaption_, "PageCaption"],
        ];
    }
    constructor(params) {
        super();
        /** Whether the block should be full width */
        Object.defineProperty(this, "full_width", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether scrolling should be allowed */
        Object.defineProperty(this, "allow_scrolling", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Web page URL, if available */
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** HTML-markup of the embedded page */
        Object.defineProperty(this, "html", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Poster photo, if available */
        Object.defineProperty(this, "poster_photo_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Block width, if known */
        Object.defineProperty(this, "w", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Block height, if known */
        Object.defineProperty(this, "h", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Caption */
        Object.defineProperty(this, "caption", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.full_width = params.full_width;
        this.allow_scrolling = params.allow_scrolling;
        this.url = params.url;
        this.html = params.html;
        this.poster_photo_id = params.poster_photo_id;
        this.w = params.w;
        this.h = params.h;
        this.caption = params.caption;
    }
}
/** An embedded post */
export class PageBlockEmbedPost_ extends _PageBlock_ {
    get [id]() {
        return 0xF259A80B;
    }
    static get [name]() {
        return "pageBlockEmbedPost";
    }
    static get [paramDesc]() {
        return [
            ["url", "string", "string"],
            ["webpage_id", "bigint", "long"],
            ["author_photo_id", "bigint", "long"],
            ["author", "string", "string"],
            ["date", "number", "int"],
            ["blocks", [_PageBlock_], "Vector<PageBlock>"],
            ["caption", _PageCaption_, "PageCaption"],
        ];
    }
    get [params]() {
        return [
            [this.url, "string", "string"],
            [this.webpage_id, "bigint", "long"],
            [this.author_photo_id, "bigint", "long"],
            [this.author, "string", "string"],
            [this.date, "number", "int"],
            [this.blocks, [_PageBlock_], "Vector<PageBlock>"],
            [this.caption, _PageCaption_, "PageCaption"],
        ];
    }
    constructor(params) {
        super();
        /** Web page URL */
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of generated webpage preview */
        Object.defineProperty(this, "webpage_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the author's photo */
        Object.defineProperty(this, "author_photo_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Author name */
        Object.defineProperty(this, "author", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Creation date */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Post contents */
        Object.defineProperty(this, "blocks", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Caption */
        Object.defineProperty(this, "caption", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.url = params.url;
        this.webpage_id = params.webpage_id;
        this.author_photo_id = params.author_photo_id;
        this.author = params.author;
        this.date = params.date;
        this.blocks = params.blocks;
        this.caption = params.caption;
    }
}
/** Collage of media */
export class PageBlockCollage_ extends _PageBlock_ {
    get [id]() {
        return 0x65A0FA4D;
    }
    static get [name]() {
        return "pageBlockCollage";
    }
    static get [paramDesc]() {
        return [
            ["items", [_PageBlock_], "Vector<PageBlock>"],
            ["caption", _PageCaption_, "PageCaption"],
        ];
    }
    get [params]() {
        return [
            [this.items, [_PageBlock_], "Vector<PageBlock>"],
            [this.caption, _PageCaption_, "PageCaption"],
        ];
    }
    constructor(params) {
        super();
        /** Media elements */
        Object.defineProperty(this, "items", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Caption */
        Object.defineProperty(this, "caption", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.items = params.items;
        this.caption = params.caption;
    }
}
/** Slideshow */
export class PageBlockSlideshow_ extends _PageBlock_ {
    get [id]() {
        return 0x031F9590;
    }
    static get [name]() {
        return "pageBlockSlideshow";
    }
    static get [paramDesc]() {
        return [
            ["items", [_PageBlock_], "Vector<PageBlock>"],
            ["caption", _PageCaption_, "PageCaption"],
        ];
    }
    get [params]() {
        return [
            [this.items, [_PageBlock_], "Vector<PageBlock>"],
            [this.caption, _PageCaption_, "PageCaption"],
        ];
    }
    constructor(params) {
        super();
        /** Slideshow items */
        Object.defineProperty(this, "items", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Caption */
        Object.defineProperty(this, "caption", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.items = params.items;
        this.caption = params.caption;
    }
}
/** Reference to a telegram channel */
export class PageBlockChannel_ extends _PageBlock_ {
    get [id]() {
        return 0xEF1751B5;
    }
    static get [name]() {
        return "pageBlockChannel";
    }
    static get [paramDesc]() {
        return [
            ["channel", _Chat_, "Chat"],
        ];
    }
    get [params]() {
        return [
            [this.channel, _Chat_, "Chat"],
        ];
    }
    constructor(params) {
        super();
        /** The channel/supergroup/chat */
        Object.defineProperty(this, "channel", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.channel = params.channel;
    }
}
/** Audio */
export class PageBlockAudio_ extends _PageBlock_ {
    get [id]() {
        return 0x804361EA;
    }
    static get [name]() {
        return "pageBlockAudio";
    }
    static get [paramDesc]() {
        return [
            ["audio_id", "bigint", "long"],
            ["caption", _PageCaption_, "PageCaption"],
        ];
    }
    get [params]() {
        return [
            [this.audio_id, "bigint", "long"],
            [this.caption, _PageCaption_, "PageCaption"],
        ];
    }
    constructor(params) {
        super();
        /** Audio ID (to be fetched from the container [page](https://core.telegram.org/constructor/page) constructor */
        Object.defineProperty(this, "audio_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Audio caption */
        Object.defineProperty(this, "caption", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.audio_id = params.audio_id;
        this.caption = params.caption;
    }
}
/** Kicker */
export class PageBlockKicker_ extends _PageBlock_ {
    get [id]() {
        return 0x1E148390;
    }
    static get [name]() {
        return "pageBlockKicker";
    }
    static get [paramDesc]() {
        return [
            ["text", _RichText_, "RichText"],
        ];
    }
    get [params]() {
        return [
            [this.text, _RichText_, "RichText"],
        ];
    }
    constructor(params) {
        super();
        /** Contents */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.text = params.text;
    }
}
/** Table */
export class PageBlockTable_ extends _PageBlock_ {
    get [id]() {
        return 0xBF4DEA82;
    }
    static get [name]() {
        return "pageBlockTable";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["bordered", "true", "flags.0?true"],
            ["striped", "true", "flags.1?true"],
            ["title", _RichText_, "RichText"],
            ["rows", [_PageTableRow_], "Vector<PageTableRow>"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.bordered ?? null, "true", "flags.0?true"],
            [this.striped ?? null, "true", "flags.1?true"],
            [this.title, _RichText_, "RichText"],
            [this.rows, [_PageTableRow_], "Vector<PageTableRow>"],
        ];
    }
    constructor(params) {
        super();
        /** Does the table have a visible border? */
        Object.defineProperty(this, "bordered", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Is the table striped? */
        Object.defineProperty(this, "striped", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Title */
        Object.defineProperty(this, "title", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Table rows */
        Object.defineProperty(this, "rows", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.bordered = params.bordered;
        this.striped = params.striped;
        this.title = params.title;
        this.rows = params.rows;
    }
}
/** Ordered list of IV blocks */
export class PageBlockOrderedList_ extends _PageBlock_ {
    get [id]() {
        return 0x9A8AE1E1;
    }
    static get [name]() {
        return "pageBlockOrderedList";
    }
    static get [paramDesc]() {
        return [
            ["items", [_PageListOrderedItem_], "Vector<PageListOrderedItem>"],
        ];
    }
    get [params]() {
        return [
            [this.items, [_PageListOrderedItem_], "Vector<PageListOrderedItem>"],
        ];
    }
    constructor(params) {
        super();
        /** List items */
        Object.defineProperty(this, "items", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.items = params.items;
    }
}
/** A collapsible details block */
export class PageBlockDetails_ extends _PageBlock_ {
    get [id]() {
        return 0x76768BED;
    }
    static get [name]() {
        return "pageBlockDetails";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["open", "true", "flags.0?true"],
            ["blocks", [_PageBlock_], "Vector<PageBlock>"],
            ["title", _RichText_, "RichText"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.open ?? null, "true", "flags.0?true"],
            [this.blocks, [_PageBlock_], "Vector<PageBlock>"],
            [this.title, _RichText_, "RichText"],
        ];
    }
    constructor(params) {
        super();
        /** Whether the block is open by default */
        Object.defineProperty(this, "open", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Block contents */
        Object.defineProperty(this, "blocks", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Always visible heading for the block */
        Object.defineProperty(this, "title", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.open = params.open;
        this.blocks = params.blocks;
        this.title = params.title;
    }
}
/** Related articles */
export class PageBlockRelatedArticles_ extends _PageBlock_ {
    get [id]() {
        return 0x16115A96;
    }
    static get [name]() {
        return "pageBlockRelatedArticles";
    }
    static get [paramDesc]() {
        return [
            ["title", _RichText_, "RichText"],
            ["articles", [_PageRelatedArticle_], "Vector<PageRelatedArticle>"],
        ];
    }
    get [params]() {
        return [
            [this.title, _RichText_, "RichText"],
            [this.articles, [_PageRelatedArticle_], "Vector<PageRelatedArticle>"],
        ];
    }
    constructor(params) {
        super();
        /** Title */
        Object.defineProperty(this, "title", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Related articles */
        Object.defineProperty(this, "articles", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.title = params.title;
        this.articles = params.articles;
    }
}
/** A map */
export class PageBlockMap_ extends _PageBlock_ {
    get [id]() {
        return 0xA44F3EF6;
    }
    static get [name]() {
        return "pageBlockMap";
    }
    static get [paramDesc]() {
        return [
            ["geo", _GeoPoint_, "GeoPoint"],
            ["zoom", "number", "int"],
            ["w", "number", "int"],
            ["h", "number", "int"],
            ["caption", _PageCaption_, "PageCaption"],
        ];
    }
    get [params]() {
        return [
            [this.geo, _GeoPoint_, "GeoPoint"],
            [this.zoom, "number", "int"],
            [this.w, "number", "int"],
            [this.h, "number", "int"],
            [this.caption, _PageCaption_, "PageCaption"],
        ];
    }
    constructor(params) {
        super();
        /** Location of the map center */
        Object.defineProperty(this, "geo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Map zoom level; 13-20 */
        Object.defineProperty(this, "zoom", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Map width in pixels before applying scale; 16-102 */
        Object.defineProperty(this, "w", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Map height in pixels before applying scale; 16-1024 */
        Object.defineProperty(this, "h", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Caption */
        Object.defineProperty(this, "caption", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.geo = params.geo;
        this.zoom = params.zoom;
        this.w = params.w;
        this.h = params.h;
        this.caption = params.caption;
    }
}
/** The phone call was missed */
export class PhoneCallDiscardReasonMissed_ extends _PhoneCallDiscardReason_ {
    get [id]() {
        return 0x85E42301;
    }
    static get [name]() {
        return "phoneCallDiscardReasonMissed";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** The phone call was disconnected */
export class PhoneCallDiscardReasonDisconnect_ extends _PhoneCallDiscardReason_ {
    get [id]() {
        return 0xE095C1A0;
    }
    static get [name]() {
        return "phoneCallDiscardReasonDisconnect";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** The phone call was ended normally */
export class PhoneCallDiscardReasonHangup_ extends _PhoneCallDiscardReason_ {
    get [id]() {
        return 0x57ADC690;
    }
    static get [name]() {
        return "phoneCallDiscardReasonHangup";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** The phone call was discarded because the user is busy in another call */
export class PhoneCallDiscardReasonBusy_ extends _PhoneCallDiscardReason_ {
    get [id]() {
        return 0xFAF7E8C9;
    }
    static get [name]() {
        return "phoneCallDiscardReasonBusy";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Represents a json-encoded object */
export class DataJSON_ extends _DataJSON_ {
    get [id]() {
        return 0x7D748D04;
    }
    static get [name]() {
        return "dataJSON";
    }
    static get [paramDesc]() {
        return [
            ["data", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.data, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** JSON-encoded object */
        Object.defineProperty(this, "data", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.data = params.data;
    }
}
/** This object represents a portion of the price for goods or services. */
export class LabeledPrice_ extends _LabeledPrice_ {
    get [id]() {
        return 0xCB296BF8;
    }
    static get [name]() {
        return "labeledPrice";
    }
    static get [paramDesc]() {
        return [
            ["label", "string", "string"],
            ["amount", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.label, "string", "string"],
            [this.amount, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** Portion label */
        Object.defineProperty(this, "label", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Price of the product in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). */
        Object.defineProperty(this, "amount", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.label = params.label;
        this.amount = params.amount;
    }
}
/** Invoice */
export class Invoice_ extends _Invoice_ {
    get [id]() {
        return 0x5DB95A15;
    }
    static get [name]() {
        return "invoice";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["test", "true", "flags.0?true"],
            ["name_requested", "true", "flags.1?true"],
            ["phone_requested", "true", "flags.2?true"],
            ["email_requested", "true", "flags.3?true"],
            ["shipping_address_requested", "true", "flags.4?true"],
            ["flexible", "true", "flags.5?true"],
            ["phone_to_provider", "true", "flags.6?true"],
            ["email_to_provider", "true", "flags.7?true"],
            ["recurring", "true", "flags.9?true"],
            ["currency", "string", "string"],
            ["prices", [_LabeledPrice_], "Vector<LabeledPrice>"],
            ["max_tip_amount", "bigint", "flags.8?long"],
            ["suggested_tip_amounts", ["bigint"], "flags.8?Vector<long>"],
            ["terms_url", "string", "flags.10?string"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.test ?? null, "true", "flags.0?true"],
            [this.name_requested ?? null, "true", "flags.1?true"],
            [this.phone_requested ?? null, "true", "flags.2?true"],
            [this.email_requested ?? null, "true", "flags.3?true"],
            [this.shipping_address_requested ?? null, "true", "flags.4?true"],
            [this.flexible ?? null, "true", "flags.5?true"],
            [this.phone_to_provider ?? null, "true", "flags.6?true"],
            [this.email_to_provider ?? null, "true", "flags.7?true"],
            [this.recurring ?? null, "true", "flags.9?true"],
            [this.currency, "string", "string"],
            [this.prices, [_LabeledPrice_], "Vector<LabeledPrice>"],
            [this.max_tip_amount ?? null, "bigint", "flags.8?long"],
            [this.suggested_tip_amounts ?? null, ["bigint"], "flags.8?Vector<long>"],
            [this.terms_url ?? null, "string", "flags.10?string"],
        ];
    }
    constructor(params) {
        super();
        /** Test invoice */
        Object.defineProperty(this, "test", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Set this flag if you require the user's full name to complete the order */
        Object.defineProperty(this, "name_requested", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Set this flag if you require the user's phone number to complete the order */
        Object.defineProperty(this, "phone_requested", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Set this flag if you require the user's email address to complete the order */
        Object.defineProperty(this, "email_requested", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Set this flag if you require the user's shipping address to complete the order */
        Object.defineProperty(this, "shipping_address_requested", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Set this flag if the final price depends on the shipping method */
        Object.defineProperty(this, "flexible", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Set this flag if user's phone number should be sent to provider */
        Object.defineProperty(this, "phone_to_provider", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Set this flag if user's email address should be sent to provider */
        Object.defineProperty(this, "email_to_provider", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this is a recurring payment */
        Object.defineProperty(this, "recurring", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code */
        Object.defineProperty(this, "currency", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Price breakdown, a list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.) */
        Object.defineProperty(this, "prices", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The maximum accepted amount for tips in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). */
        Object.defineProperty(this, "max_tip_amount", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** A vector of suggested amounts of tips in the _smallest units_ of the currency (integer, not float/double). At most 4 suggested tip amounts can be specified. The suggested tip amounts must be positive, passed in a strictly increased order and must not exceed `max_tip_amount`. */
        Object.defineProperty(this, "suggested_tip_amounts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Terms of service URL */
        Object.defineProperty(this, "terms_url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.test = params.test;
        this.name_requested = params.name_requested;
        this.phone_requested = params.phone_requested;
        this.email_requested = params.email_requested;
        this.shipping_address_requested = params.shipping_address_requested;
        this.flexible = params.flexible;
        this.phone_to_provider = params.phone_to_provider;
        this.email_to_provider = params.email_to_provider;
        this.recurring = params.recurring;
        this.currency = params.currency;
        this.prices = params.prices;
        this.max_tip_amount = params.max_tip_amount;
        this.suggested_tip_amounts = params.suggested_tip_amounts;
        this.terms_url = params.terms_url;
    }
}
/** Payment identifier */
export class PaymentCharge_ extends _PaymentCharge_ {
    get [id]() {
        return 0xEA02C27E;
    }
    static get [name]() {
        return "paymentCharge";
    }
    static get [paramDesc]() {
        return [
            ["id", "string", "string"],
            ["provider_charge_id", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.id, "string", "string"],
            [this.provider_charge_id, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Telegram payment identifier */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Provider payment identifier */
        Object.defineProperty(this, "provider_charge_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
        this.provider_charge_id = params.provider_charge_id;
    }
}
/** Shipping address */
export class PostAddress_ extends _PostAddress_ {
    get [id]() {
        return 0x1E8CAAEB;
    }
    static get [name]() {
        return "postAddress";
    }
    static get [paramDesc]() {
        return [
            ["street_line1", "string", "string"],
            ["street_line2", "string", "string"],
            ["city", "string", "string"],
            ["state", "string", "string"],
            ["country_iso2", "string", "string"],
            ["post_code", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.street_line1, "string", "string"],
            [this.street_line2, "string", "string"],
            [this.city, "string", "string"],
            [this.state, "string", "string"],
            [this.country_iso2, "string", "string"],
            [this.post_code, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** First line for the address */
        Object.defineProperty(this, "street_line1", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Second line for the address */
        Object.defineProperty(this, "street_line2", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** City */
        Object.defineProperty(this, "city", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** State, if applicable (empty otherwise) */
        Object.defineProperty(this, "state", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ISO 3166-1 alpha-2 country code */
        Object.defineProperty(this, "country_iso2", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Address post code */
        Object.defineProperty(this, "post_code", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.street_line1 = params.street_line1;
        this.street_line2 = params.street_line2;
        this.city = params.city;
        this.state = params.state;
        this.country_iso2 = params.country_iso2;
        this.post_code = params.post_code;
    }
}
/** Order info provided by the user */
export class PaymentRequestedInfo_ extends _PaymentRequestedInfo_ {
    get [id]() {
        return 0x909C3F94;
    }
    static get [name]() {
        return "paymentRequestedInfo";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["name", "string", "flags.0?string"],
            ["phone", "string", "flags.1?string"],
            ["email", "string", "flags.2?string"],
            ["shipping_address", _PostAddress_, "flags.3?PostAddress"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.name ?? null, "string", "flags.0?string"],
            [this.phone ?? null, "string", "flags.1?string"],
            [this.email ?? null, "string", "flags.2?string"],
            [this.shipping_address ?? null, _PostAddress_, "flags.3?PostAddress"],
        ];
    }
    constructor(params) {
        super();
        /** User's full name */
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** User's phone number */
        Object.defineProperty(this, "phone", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** User's email address */
        Object.defineProperty(this, "email", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** User's shipping address */
        Object.defineProperty(this, "shipping_address", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.name = params?.name;
        this.phone = params?.phone;
        this.email = params?.email;
        this.shipping_address = params?.shipping_address;
    }
}
/** Saved credit card */
export class PaymentSavedCredentialsCard_ extends _PaymentSavedCredentials_ {
    get [id]() {
        return 0xCDC27A1F;
    }
    static get [name]() {
        return "paymentSavedCredentialsCard";
    }
    static get [paramDesc]() {
        return [
            ["id", "string", "string"],
            ["title", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.id, "string", "string"],
            [this.title, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Card ID */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Title */
        Object.defineProperty(this, "title", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
        this.title = params.title;
    }
}
/** Remote document */
export class WebDocument_ extends _WebDocument_ {
    get [id]() {
        return 0x1C570ED1;
    }
    static get [name]() {
        return "webDocument";
    }
    static get [paramDesc]() {
        return [
            ["url", "string", "string"],
            ["access_hash", "bigint", "long"],
            ["size", "number", "int"],
            ["mime_type", "string", "string"],
            ["attributes", [_DocumentAttribute_], "Vector<DocumentAttribute>"],
        ];
    }
    get [params]() {
        return [
            [this.url, "string", "string"],
            [this.access_hash, "bigint", "long"],
            [this.size, "number", "int"],
            [this.mime_type, "string", "string"],
            [this.attributes, [_DocumentAttribute_], "Vector<DocumentAttribute>"],
        ];
    }
    constructor(params) {
        super();
        /** Document URL */
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Access hash */
        Object.defineProperty(this, "access_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** File size */
        Object.defineProperty(this, "size", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** MIME type */
        Object.defineProperty(this, "mime_type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Attributes for media types */
        Object.defineProperty(this, "attributes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.url = params.url;
        this.access_hash = params.access_hash;
        this.size = params.size;
        this.mime_type = params.mime_type;
        this.attributes = params.attributes;
    }
}
/** Remote document that can be downloaded without [proxying through telegram](https://core.telegram.org/api/files) */
export class WebDocumentNoProxy_ extends _WebDocument_ {
    get [id]() {
        return 0xF9C8BCC6;
    }
    static get [name]() {
        return "webDocumentNoProxy";
    }
    static get [paramDesc]() {
        return [
            ["url", "string", "string"],
            ["size", "number", "int"],
            ["mime_type", "string", "string"],
            ["attributes", [_DocumentAttribute_], "Vector<DocumentAttribute>"],
        ];
    }
    get [params]() {
        return [
            [this.url, "string", "string"],
            [this.size, "number", "int"],
            [this.mime_type, "string", "string"],
            [this.attributes, [_DocumentAttribute_], "Vector<DocumentAttribute>"],
        ];
    }
    constructor(params) {
        super();
        /** Document URL */
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** File size */
        Object.defineProperty(this, "size", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** MIME type */
        Object.defineProperty(this, "mime_type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Attributes for media types */
        Object.defineProperty(this, "attributes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.url = params.url;
        this.size = params.size;
        this.mime_type = params.mime_type;
        this.attributes = params.attributes;
    }
}
/** The document */
export class InputWebDocument_ extends _InputWebDocument_ {
    get [id]() {
        return 0x9BED434D;
    }
    static get [name]() {
        return "inputWebDocument";
    }
    static get [paramDesc]() {
        return [
            ["url", "string", "string"],
            ["size", "number", "int"],
            ["mime_type", "string", "string"],
            ["attributes", [_DocumentAttribute_], "Vector<DocumentAttribute>"],
        ];
    }
    get [params]() {
        return [
            [this.url, "string", "string"],
            [this.size, "number", "int"],
            [this.mime_type, "string", "string"],
            [this.attributes, [_DocumentAttribute_], "Vector<DocumentAttribute>"],
        ];
    }
    constructor(params) {
        super();
        /** Remote document URL to be downloaded using the appropriate [method](https://core.telegram.org/api/files) */
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Remote file size */
        Object.defineProperty(this, "size", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Mime type */
        Object.defineProperty(this, "mime_type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Attributes for media types */
        Object.defineProperty(this, "attributes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.url = params.url;
        this.size = params.size;
        this.mime_type = params.mime_type;
        this.attributes = params.attributes;
    }
}
/** Location of a remote HTTP(s) file */
export class InputWebFileLocation_ extends _InputWebFileLocation_ {
    get [id]() {
        return 0xC239D686;
    }
    static get [name]() {
        return "inputWebFileLocation";
    }
    static get [paramDesc]() {
        return [
            ["url", "string", "string"],
            ["access_hash", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.url, "string", "string"],
            [this.access_hash, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** HTTP URL of file */
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Access hash */
        Object.defineProperty(this, "access_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.url = params.url;
        this.access_hash = params.access_hash;
    }
}
/** Used to download a server-generated image with the map preview from a [geoPoint](https://core.telegram.org/constructor/geoPoint), see the [webfile docs for more info »](https://core.telegram.org/api/files#downloading-webfiles). */
export class InputWebFileGeoPointLocation_ extends _InputWebFileLocation_ {
    get [id]() {
        return 0x9F2221C9;
    }
    static get [name]() {
        return "inputWebFileGeoPointLocation";
    }
    static get [paramDesc]() {
        return [
            ["geo_point", _InputGeoPoint_, "InputGeoPoint"],
            ["access_hash", "bigint", "long"],
            ["w", "number", "int"],
            ["h", "number", "int"],
            ["zoom", "number", "int"],
            ["scale", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.geo_point, _InputGeoPoint_, "InputGeoPoint"],
            [this.access_hash, "bigint", "long"],
            [this.w, "number", "int"],
            [this.h, "number", "int"],
            [this.zoom, "number", "int"],
            [this.scale, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Generated from the `lat`, `long` and `accuracy_radius` parameters of the [geoPoint](https://core.telegram.org/constructor/geoPoint) */
        Object.defineProperty(this, "geo_point", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Access hash of the [geoPoint](https://core.telegram.org/constructor/geoPoint) */
        Object.defineProperty(this, "access_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Map width in pixels before applying scale; 16-1024 */
        Object.defineProperty(this, "w", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Map height in pixels before applying scale; 16-1024 */
        Object.defineProperty(this, "h", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Map zoom level; 13-20 */
        Object.defineProperty(this, "zoom", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Map scale; 1-3 */
        Object.defineProperty(this, "scale", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.geo_point = params.geo_point;
        this.access_hash = params.access_hash;
        this.w = params.w;
        this.h = params.h;
        this.zoom = params.zoom;
        this.scale = params.scale;
    }
}
/** Used to download an album cover for any music file using [upload.getWebFile](https://core.telegram.org/method/upload.getWebFile), see the [webfile docs for more info »](https://core.telegram.org/api/files#downloading-webfiles). */
export class InputWebFileAudioAlbumThumbLocation_ extends _InputWebFileLocation_ {
    get [id]() {
        return 0xF46FE924;
    }
    static get [name]() {
        return "inputWebFileAudioAlbumThumbLocation";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["small", "true", "flags.2?true"],
            ["document", _InputDocument_, "flags.0?InputDocument"],
            ["title", "string", "flags.1?string"],
            ["performer", "string", "flags.1?string"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.small ?? null, "true", "flags.2?true"],
            [this.document ?? null, _InputDocument_, "flags.0?InputDocument"],
            [this.title ?? null, "string", "flags.1?string"],
            [this.performer ?? null, "string", "flags.1?string"],
        ];
    }
    constructor(params) {
        super();
        /** Used to return a thumbnail with `100x100` resolution (instead of the default `600x600`) */
        Object.defineProperty(this, "small", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The audio file in question: must NOT be provided in secret chats, provide the `title` and `performer` fields instead. */
        Object.defineProperty(this, "document", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Song title: should only be used in secret chats, in normal chats provide `document` instead, as it has more lax rate limits. */
        Object.defineProperty(this, "title", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Song performer: should only be used in secret chats, in normal chats provide `document` instead, as it has more lax rate limits. */
        Object.defineProperty(this, "performer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.small = params?.small;
        this.document = params?.document;
        this.title = params?.title;
        this.performer = params?.performer;
    }
}
/** Represents a chunk of an [HTTP webfile](https://core.telegram.org/api/files) downloaded through telegram's secure MTProto servers */
export class upload_WebFile_ extends _upload_WebFile_ {
    get [id]() {
        return 0x21E753BC;
    }
    static get [name]() {
        return "upload.webFile";
    }
    static get [paramDesc]() {
        return [
            ["size", "number", "int"],
            ["mime_type", "string", "string"],
            ["file_type", _storage_FileType_, "storage.FileType"],
            ["mtime", "number", "int"],
            ["bytes", Uint8Array, "bytes"],
        ];
    }
    get [params]() {
        return [
            [this.size, "number", "int"],
            [this.mime_type, "string", "string"],
            [this.file_type, _storage_FileType_, "storage.FileType"],
            [this.mtime, "number", "int"],
            [this.bytes, Uint8Array, "bytes"],
        ];
    }
    constructor(params) {
        super();
        /** File size */
        Object.defineProperty(this, "size", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Mime type */
        Object.defineProperty(this, "mime_type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** File type */
        Object.defineProperty(this, "file_type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Modified time */
        Object.defineProperty(this, "mtime", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Data */
        Object.defineProperty(this, "bytes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.size = params.size;
        this.mime_type = params.mime_type;
        this.file_type = params.file_type;
        this.mtime = params.mtime;
        this.bytes = params.bytes;
    }
}
/** Payment form */
export class payments_PaymentForm_ extends _payments_PaymentForm_ {
    get [id]() {
        return 0xA0058751;
    }
    static get [name]() {
        return "payments.paymentForm";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["can_save_credentials", "true", "flags.2?true"],
            ["password_missing", "true", "flags.3?true"],
            ["form_id", "bigint", "long"],
            ["bot_id", "bigint", "long"],
            ["title", "string", "string"],
            ["description", "string", "string"],
            ["photo", _WebDocument_, "flags.5?WebDocument"],
            ["invoice", _Invoice_, "Invoice"],
            ["provider_id", "bigint", "long"],
            ["url", "string", "string"],
            ["native_provider", "string", "flags.4?string"],
            ["native_params", _DataJSON_, "flags.4?DataJSON"],
            ["additional_methods", [_PaymentFormMethod_], "flags.6?Vector<PaymentFormMethod>"],
            ["saved_info", _PaymentRequestedInfo_, "flags.0?PaymentRequestedInfo"],
            ["saved_credentials", [_PaymentSavedCredentials_], "flags.1?Vector<PaymentSavedCredentials>"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.can_save_credentials ?? null, "true", "flags.2?true"],
            [this.password_missing ?? null, "true", "flags.3?true"],
            [this.form_id, "bigint", "long"],
            [this.bot_id, "bigint", "long"],
            [this.title, "string", "string"],
            [this.description, "string", "string"],
            [this.photo ?? null, _WebDocument_, "flags.5?WebDocument"],
            [this.invoice, _Invoice_, "Invoice"],
            [this.provider_id, "bigint", "long"],
            [this.url, "string", "string"],
            [this.native_provider ?? null, "string", "flags.4?string"],
            [this.native_params ?? null, _DataJSON_, "flags.4?DataJSON"],
            [this.additional_methods ?? null, [_PaymentFormMethod_], "flags.6?Vector<PaymentFormMethod>"],
            [this.saved_info ?? null, _PaymentRequestedInfo_, "flags.0?PaymentRequestedInfo"],
            [this.saved_credentials ?? null, [_PaymentSavedCredentials_], "flags.1?Vector<PaymentSavedCredentials>"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** Whether the user can choose to save credentials. */
        Object.defineProperty(this, "can_save_credentials", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Indicates that the user can save payment credentials, but only after setting up a [2FA password](https://core.telegram.org/api/srp) (currently the account doesn't have a [2FA password](https://core.telegram.org/api/srp)) */
        Object.defineProperty(this, "password_missing", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Form ID */
        Object.defineProperty(this, "form_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Bot ID */
        Object.defineProperty(this, "bot_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Form title */
        Object.defineProperty(this, "title", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Description */
        Object.defineProperty(this, "description", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Product photo */
        Object.defineProperty(this, "photo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Invoice */
        Object.defineProperty(this, "invoice", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Payment provider ID. */
        Object.defineProperty(this, "provider_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Payment form URL */
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Payment provider name.
        One of the following:
        \- `stripe` */
        Object.defineProperty(this, "native_provider", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Contains information about the payment provider, if available, to support it natively without the need for opening the URL.
        A JSON object that can contain the following fields:
          
        \- `apple_pay_merchant_id`: Apple Pay merchant ID
        \- `google_pay_public_key`: Google Pay public key
        \- `need_country`: True, if the user country must be provided,
        \- `need_zip`: True, if the user ZIP/postal code must be provided,
        \- `need_cardholder_name`: True, if the cardholder name must be provided */
        Object.defineProperty(this, "native_params", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Additional payment methods */
        Object.defineProperty(this, "additional_methods", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Saved server-side order information */
        Object.defineProperty(this, "saved_info", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Contains information about saved card credentials */
        Object.defineProperty(this, "saved_credentials", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Users */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.can_save_credentials = params.can_save_credentials;
        this.password_missing = params.password_missing;
        this.form_id = params.form_id;
        this.bot_id = params.bot_id;
        this.title = params.title;
        this.description = params.description;
        this.photo = params.photo;
        this.invoice = params.invoice;
        this.provider_id = params.provider_id;
        this.url = params.url;
        this.native_provider = params.native_provider;
        this.native_params = params.native_params;
        this.additional_methods = params.additional_methods;
        this.saved_info = params.saved_info;
        this.saved_credentials = params.saved_credentials;
        this.users = params.users;
    }
}
/** Validated user-provided info */
export class payments_ValidatedRequestedInfo_ extends _payments_ValidatedRequestedInfo_ {
    get [id]() {
        return 0xD1451883;
    }
    static get [name]() {
        return "payments.validatedRequestedInfo";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["id", "string", "flags.0?string"],
            ["shipping_options", [_ShippingOption_], "flags.1?Vector<ShippingOption>"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.id ?? null, "string", "flags.0?string"],
            [this.shipping_options ?? null, [_ShippingOption_], "flags.1?Vector<ShippingOption>"],
        ];
    }
    constructor(params) {
        super();
        /** ID */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Shipping options */
        Object.defineProperty(this, "shipping_options", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params?.id;
        this.shipping_options = params?.shipping_options;
    }
}
/** Payment result */
export class payments_PaymentResult_ extends _payments_PaymentResult_ {
    get [id]() {
        return 0x4E5F810D;
    }
    static get [name]() {
        return "payments.paymentResult";
    }
    static get [paramDesc]() {
        return [
            ["updates", _Updates_, "Updates"],
        ];
    }
    get [params]() {
        return [
            [this.updates, _Updates_, "Updates"],
        ];
    }
    constructor(params) {
        super();
        /** Info about the payment */
        Object.defineProperty(this, "updates", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.updates = params.updates;
    }
}
/** Payment was not successful, additional verification is needed */
export class payments_PaymentVerificationNeeded_ extends _payments_PaymentResult_ {
    get [id]() {
        return 0xD8411139;
    }
    static get [name]() {
        return "payments.paymentVerificationNeeded";
    }
    static get [paramDesc]() {
        return [
            ["url", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.url, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** URL for additional payment credentials verification */
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.url = params.url;
    }
}
/** Receipt */
export class payments_PaymentReceipt_ extends _payments_PaymentReceipt_ {
    get [id]() {
        return 0x70C4FE03;
    }
    static get [name]() {
        return "payments.paymentReceipt";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["date", "number", "int"],
            ["bot_id", "bigint", "long"],
            ["provider_id", "bigint", "long"],
            ["title", "string", "string"],
            ["description", "string", "string"],
            ["photo", _WebDocument_, "flags.2?WebDocument"],
            ["invoice", _Invoice_, "Invoice"],
            ["info", _PaymentRequestedInfo_, "flags.0?PaymentRequestedInfo"],
            ["shipping", _ShippingOption_, "flags.1?ShippingOption"],
            ["tip_amount", "bigint", "flags.3?long"],
            ["currency", "string", "string"],
            ["total_amount", "bigint", "long"],
            ["credentials_title", "string", "string"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.date, "number", "int"],
            [this.bot_id, "bigint", "long"],
            [this.provider_id, "bigint", "long"],
            [this.title, "string", "string"],
            [this.description, "string", "string"],
            [this.photo ?? null, _WebDocument_, "flags.2?WebDocument"],
            [this.invoice, _Invoice_, "Invoice"],
            [this.info ?? null, _PaymentRequestedInfo_, "flags.0?PaymentRequestedInfo"],
            [this.shipping ?? null, _ShippingOption_, "flags.1?ShippingOption"],
            [this.tip_amount ?? null, "bigint", "flags.3?long"],
            [this.currency, "string", "string"],
            [this.total_amount, "bigint", "long"],
            [this.credentials_title, "string", "string"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** Date of generation */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Bot ID */
        Object.defineProperty(this, "bot_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Provider ID */
        Object.defineProperty(this, "provider_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Title */
        Object.defineProperty(this, "title", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Description */
        Object.defineProperty(this, "description", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Photo */
        Object.defineProperty(this, "photo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Invoice */
        Object.defineProperty(this, "invoice", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Info */
        Object.defineProperty(this, "info", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Selected shipping option */
        Object.defineProperty(this, "shipping", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Tipped amount */
        Object.defineProperty(this, "tip_amount", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code */
        Object.defineProperty(this, "currency", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Total amount in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). */
        Object.defineProperty(this, "total_amount", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Payment credential name */
        Object.defineProperty(this, "credentials_title", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Users */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.date = params.date;
        this.bot_id = params.bot_id;
        this.provider_id = params.provider_id;
        this.title = params.title;
        this.description = params.description;
        this.photo = params.photo;
        this.invoice = params.invoice;
        this.info = params.info;
        this.shipping = params.shipping;
        this.tip_amount = params.tip_amount;
        this.currency = params.currency;
        this.total_amount = params.total_amount;
        this.credentials_title = params.credentials_title;
        this.users = params.users;
    }
}
/** Saved server-side order information */
export class payments_SavedInfo_ extends _payments_SavedInfo_ {
    get [id]() {
        return 0xFB8FE43C;
    }
    static get [name]() {
        return "payments.savedInfo";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["has_saved_credentials", "true", "flags.1?true"],
            ["saved_info", _PaymentRequestedInfo_, "flags.0?PaymentRequestedInfo"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.has_saved_credentials ?? null, "true", "flags.1?true"],
            [this.saved_info ?? null, _PaymentRequestedInfo_, "flags.0?PaymentRequestedInfo"],
        ];
    }
    constructor(params) {
        super();
        /** Whether the user has some saved payment credentials */
        Object.defineProperty(this, "has_saved_credentials", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Saved server-side order information */
        Object.defineProperty(this, "saved_info", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.has_saved_credentials = params?.has_saved_credentials;
        this.saved_info = params?.saved_info;
    }
}
/** Saved payment credentials */
export class InputPaymentCredentialsSaved_ extends _InputPaymentCredentials_ {
    get [id]() {
        return 0xC10EB2CF;
    }
    static get [name]() {
        return "inputPaymentCredentialsSaved";
    }
    static get [paramDesc]() {
        return [
            ["id", "string", "string"],
            ["tmp_password", Uint8Array, "bytes"],
        ];
    }
    get [params]() {
        return [
            [this.id, "string", "string"],
            [this.tmp_password, Uint8Array, "bytes"],
        ];
    }
    constructor(params) {
        super();
        /** Credential ID */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Temporary password */
        Object.defineProperty(this, "tmp_password", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
        this.tmp_password = params.tmp_password;
    }
}
/** Payment credentials */
export class InputPaymentCredentials_ extends _InputPaymentCredentials_ {
    get [id]() {
        return 0x3417D728;
    }
    static get [name]() {
        return "inputPaymentCredentials";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["save", "true", "flags.0?true"],
            ["data", _DataJSON_, "DataJSON"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.save ?? null, "true", "flags.0?true"],
            [this.data, _DataJSON_, "DataJSON"],
        ];
    }
    constructor(params) {
        super();
        /** Save payment credential for future use */
        Object.defineProperty(this, "save", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Payment credentials */
        Object.defineProperty(this, "data", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.save = params.save;
        this.data = params.data;
    }
}
/** Apple pay payment credentials */
export class InputPaymentCredentialsApplePay_ extends _InputPaymentCredentials_ {
    get [id]() {
        return 0x0AA1C39F;
    }
    static get [name]() {
        return "inputPaymentCredentialsApplePay";
    }
    static get [paramDesc]() {
        return [
            ["payment_data", _DataJSON_, "DataJSON"],
        ];
    }
    get [params]() {
        return [
            [this.payment_data, _DataJSON_, "DataJSON"],
        ];
    }
    constructor(params) {
        super();
        /** Payment data */
        Object.defineProperty(this, "payment_data", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.payment_data = params.payment_data;
    }
}
/** Google Pay payment credentials */
export class InputPaymentCredentialsGooglePay_ extends _InputPaymentCredentials_ {
    get [id]() {
        return 0x8AC32801;
    }
    static get [name]() {
        return "inputPaymentCredentialsGooglePay";
    }
    static get [paramDesc]() {
        return [
            ["payment_token", _DataJSON_, "DataJSON"],
        ];
    }
    get [params]() {
        return [
            [this.payment_token, _DataJSON_, "DataJSON"],
        ];
    }
    constructor(params) {
        super();
        /** Payment token */
        Object.defineProperty(this, "payment_token", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.payment_token = params.payment_token;
    }
}
/** Temporary payment password */
export class account_TmpPassword_ extends _account_TmpPassword_ {
    get [id]() {
        return 0xDB64FD34;
    }
    static get [name]() {
        return "account.tmpPassword";
    }
    static get [paramDesc]() {
        return [
            ["tmp_password", Uint8Array, "bytes"],
            ["valid_until", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.tmp_password, Uint8Array, "bytes"],
            [this.valid_until, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Temporary password */
        Object.defineProperty(this, "tmp_password", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Validity period */
        Object.defineProperty(this, "valid_until", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.tmp_password = params.tmp_password;
        this.valid_until = params.valid_until;
    }
}
/** Shipping option */
export class ShippingOption_ extends _ShippingOption_ {
    get [id]() {
        return 0xB6213CDF;
    }
    static get [name]() {
        return "shippingOption";
    }
    static get [paramDesc]() {
        return [
            ["id", "string", "string"],
            ["title", "string", "string"],
            ["prices", [_LabeledPrice_], "Vector<LabeledPrice>"],
        ];
    }
    get [params]() {
        return [
            [this.id, "string", "string"],
            [this.title, "string", "string"],
            [this.prices, [_LabeledPrice_], "Vector<LabeledPrice>"],
        ];
    }
    constructor(params) {
        super();
        /** Option ID */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Title */
        Object.defineProperty(this, "title", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** List of price portions */
        Object.defineProperty(this, "prices", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
        this.title = params.title;
        this.prices = params.prices;
    }
}
/** Sticker in a stickerset */
export class InputStickerSetItem_ extends _InputStickerSetItem_ {
    get [id]() {
        return 0x32DA9E9C;
    }
    static get [name]() {
        return "inputStickerSetItem";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["document", _InputDocument_, "InputDocument"],
            ["emoji", "string", "string"],
            ["mask_coords", _MaskCoords_, "flags.0?MaskCoords"],
            ["keywords", "string", "flags.1?string"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.document, _InputDocument_, "InputDocument"],
            [this.emoji, "string", "string"],
            [this.mask_coords ?? null, _MaskCoords_, "flags.0?MaskCoords"],
            [this.keywords ?? null, "string", "flags.1?string"],
        ];
    }
    constructor(params) {
        super();
        /** The sticker */
        Object.defineProperty(this, "document", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Associated emoji */
        Object.defineProperty(this, "emoji", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Coordinates for mask sticker */
        Object.defineProperty(this, "mask_coords", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Set of keywords, separated by commas (can't be provided for mask stickers) */
        Object.defineProperty(this, "keywords", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.document = params.document;
        this.emoji = params.emoji;
        this.mask_coords = params.mask_coords;
        this.keywords = params.keywords;
    }
}
/** Phone call */
export class InputPhoneCall_ extends _InputPhoneCall_ {
    get [id]() {
        return 0x1E36FDED;
    }
    static get [name]() {
        return "inputPhoneCall";
    }
    static get [paramDesc]() {
        return [
            ["id", "bigint", "long"],
            ["access_hash", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.id, "bigint", "long"],
            [this.access_hash, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** Call ID */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Access hash */
        Object.defineProperty(this, "access_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
        this.access_hash = params.access_hash;
    }
}
/** Empty constructor */
export class PhoneCallEmpty_ extends _PhoneCall_ {
    get [id]() {
        return 0x5366C915;
    }
    static get [name]() {
        return "phoneCallEmpty";
    }
    static get [paramDesc]() {
        return [
            ["id", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.id, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** Call ID */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
    }
}
/** Incoming phone call */
export class PhoneCallWaiting_ extends _PhoneCall_ {
    get [id]() {
        return 0xC5226F17;
    }
    static get [name]() {
        return "phoneCallWaiting";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["video", "true", "flags.6?true"],
            ["id", "bigint", "long"],
            ["access_hash", "bigint", "long"],
            ["date", "number", "int"],
            ["admin_id", "bigint", "long"],
            ["participant_id", "bigint", "long"],
            ["protocol", _PhoneCallProtocol_, "PhoneCallProtocol"],
            ["receive_date", "number", "flags.0?int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.video ?? null, "true", "flags.6?true"],
            [this.id, "bigint", "long"],
            [this.access_hash, "bigint", "long"],
            [this.date, "number", "int"],
            [this.admin_id, "bigint", "long"],
            [this.participant_id, "bigint", "long"],
            [this.protocol, _PhoneCallProtocol_, "PhoneCallProtocol"],
            [this.receive_date ?? null, "number", "flags.0?int"],
        ];
    }
    constructor(params) {
        super();
        /** Is this a video call */
        Object.defineProperty(this, "video", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Call ID */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Access hash */
        Object.defineProperty(this, "access_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Date */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Admin ID */
        Object.defineProperty(this, "admin_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Participant ID */
        Object.defineProperty(this, "participant_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Phone call protocol info */
        Object.defineProperty(this, "protocol", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** When was the phone call received */
        Object.defineProperty(this, "receive_date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.video = params.video;
        this.id = params.id;
        this.access_hash = params.access_hash;
        this.date = params.date;
        this.admin_id = params.admin_id;
        this.participant_id = params.participant_id;
        this.protocol = params.protocol;
        this.receive_date = params.receive_date;
    }
}
/** Requested phone call */
export class PhoneCallRequested_ extends _PhoneCall_ {
    get [id]() {
        return 0x14B0ED0C;
    }
    static get [name]() {
        return "phoneCallRequested";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["video", "true", "flags.6?true"],
            ["id", "bigint", "long"],
            ["access_hash", "bigint", "long"],
            ["date", "number", "int"],
            ["admin_id", "bigint", "long"],
            ["participant_id", "bigint", "long"],
            ["g_a_hash", Uint8Array, "bytes"],
            ["protocol", _PhoneCallProtocol_, "PhoneCallProtocol"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.video ?? null, "true", "flags.6?true"],
            [this.id, "bigint", "long"],
            [this.access_hash, "bigint", "long"],
            [this.date, "number", "int"],
            [this.admin_id, "bigint", "long"],
            [this.participant_id, "bigint", "long"],
            [this.g_a_hash, Uint8Array, "bytes"],
            [this.protocol, _PhoneCallProtocol_, "PhoneCallProtocol"],
        ];
    }
    constructor(params) {
        super();
        /** Whether this is a video call */
        Object.defineProperty(this, "video", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Phone call ID */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Access hash */
        Object.defineProperty(this, "access_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** When was the phone call created */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the creator of the phone call */
        Object.defineProperty(this, "admin_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the other participant of the phone call */
        Object.defineProperty(this, "participant_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Parameter for key exchange](https://core.telegram.org/api/end-to-end/voice-calls) */
        Object.defineProperty(this, "g_a_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Call protocol info to be passed to libtgvoip */
        Object.defineProperty(this, "protocol", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.video = params.video;
        this.id = params.id;
        this.access_hash = params.access_hash;
        this.date = params.date;
        this.admin_id = params.admin_id;
        this.participant_id = params.participant_id;
        this.g_a_hash = params.g_a_hash;
        this.protocol = params.protocol;
    }
}
/** An accepted phone call */
export class PhoneCallAccepted_ extends _PhoneCall_ {
    get [id]() {
        return 0x3660C311;
    }
    static get [name]() {
        return "phoneCallAccepted";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["video", "true", "flags.6?true"],
            ["id", "bigint", "long"],
            ["access_hash", "bigint", "long"],
            ["date", "number", "int"],
            ["admin_id", "bigint", "long"],
            ["participant_id", "bigint", "long"],
            ["g_b", Uint8Array, "bytes"],
            ["protocol", _PhoneCallProtocol_, "PhoneCallProtocol"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.video ?? null, "true", "flags.6?true"],
            [this.id, "bigint", "long"],
            [this.access_hash, "bigint", "long"],
            [this.date, "number", "int"],
            [this.admin_id, "bigint", "long"],
            [this.participant_id, "bigint", "long"],
            [this.g_b, Uint8Array, "bytes"],
            [this.protocol, _PhoneCallProtocol_, "PhoneCallProtocol"],
        ];
    }
    constructor(params) {
        super();
        /** Whether this is a video call */
        Object.defineProperty(this, "video", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of accepted phone call */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Access hash of phone call */
        Object.defineProperty(this, "access_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** When was the call accepted */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the call creator */
        Object.defineProperty(this, "admin_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the other user in the call */
        Object.defineProperty(this, "participant_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** B parameter for [secure E2E phone call key exchange](https://core.telegram.org/api/end-to-end/voice-calls) */
        Object.defineProperty(this, "g_b", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Protocol to use for phone call */
        Object.defineProperty(this, "protocol", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.video = params.video;
        this.id = params.id;
        this.access_hash = params.access_hash;
        this.date = params.date;
        this.admin_id = params.admin_id;
        this.participant_id = params.participant_id;
        this.g_b = params.g_b;
        this.protocol = params.protocol;
    }
}
/** Phone call */
export class PhoneCall_ extends _PhoneCall_ {
    get [id]() {
        return 0x967F7C67;
    }
    static get [name]() {
        return "phoneCall";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["p2p_allowed", "true", "flags.5?true"],
            ["video", "true", "flags.6?true"],
            ["id", "bigint", "long"],
            ["access_hash", "bigint", "long"],
            ["date", "number", "int"],
            ["admin_id", "bigint", "long"],
            ["participant_id", "bigint", "long"],
            ["g_a_or_b", Uint8Array, "bytes"],
            ["key_fingerprint", "bigint", "long"],
            ["protocol", _PhoneCallProtocol_, "PhoneCallProtocol"],
            ["connections", [_PhoneConnection_], "Vector<PhoneConnection>"],
            ["start_date", "number", "int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.p2p_allowed ?? null, "true", "flags.5?true"],
            [this.video ?? null, "true", "flags.6?true"],
            [this.id, "bigint", "long"],
            [this.access_hash, "bigint", "long"],
            [this.date, "number", "int"],
            [this.admin_id, "bigint", "long"],
            [this.participant_id, "bigint", "long"],
            [this.g_a_or_b, Uint8Array, "bytes"],
            [this.key_fingerprint, "bigint", "long"],
            [this.protocol, _PhoneCallProtocol_, "PhoneCallProtocol"],
            [this.connections, [_PhoneConnection_], "Vector<PhoneConnection>"],
            [this.start_date, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Whether P2P connection to the other peer is allowed */
        Object.defineProperty(this, "p2p_allowed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this is a video call */
        Object.defineProperty(this, "video", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Call ID */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Access hash */
        Object.defineProperty(this, "access_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Date of creation of the call */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** User ID of the creator of the call */
        Object.defineProperty(this, "admin_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** User ID of the other participant in the call */
        Object.defineProperty(this, "participant_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Parameter for key exchange](https://core.telegram.org/api/end-to-end/voice-calls) */
        Object.defineProperty(this, "g_a_or_b", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Key fingerprint](https://core.telegram.org/api/end-to-end/voice-calls) */
        Object.defineProperty(this, "key_fingerprint", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Call protocol info to be passed to libtgvoip */
        Object.defineProperty(this, "protocol", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** List of endpoints the user can connect to to exchange call data */
        Object.defineProperty(this, "connections", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** When was the call actually started */
        Object.defineProperty(this, "start_date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.p2p_allowed = params.p2p_allowed;
        this.video = params.video;
        this.id = params.id;
        this.access_hash = params.access_hash;
        this.date = params.date;
        this.admin_id = params.admin_id;
        this.participant_id = params.participant_id;
        this.g_a_or_b = params.g_a_or_b;
        this.key_fingerprint = params.key_fingerprint;
        this.protocol = params.protocol;
        this.connections = params.connections;
        this.start_date = params.start_date;
    }
}
/** Indicates a discarded phone call */
export class PhoneCallDiscarded_ extends _PhoneCall_ {
    get [id]() {
        return 0x50CA4DE1;
    }
    static get [name]() {
        return "phoneCallDiscarded";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["need_rating", "true", "flags.2?true"],
            ["need_debug", "true", "flags.3?true"],
            ["video", "true", "flags.6?true"],
            ["id", "bigint", "long"],
            ["reason", _PhoneCallDiscardReason_, "flags.0?PhoneCallDiscardReason"],
            ["duration", "number", "flags.1?int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.need_rating ?? null, "true", "flags.2?true"],
            [this.need_debug ?? null, "true", "flags.3?true"],
            [this.video ?? null, "true", "flags.6?true"],
            [this.id, "bigint", "long"],
            [this.reason ?? null, _PhoneCallDiscardReason_, "flags.0?PhoneCallDiscardReason"],
            [this.duration ?? null, "number", "flags.1?int"],
        ];
    }
    constructor(params) {
        super();
        /** Whether the server required the user to [rate](https://core.telegram.org/method/phone.setCallRating) the call */
        Object.defineProperty(this, "need_rating", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether the server required the client to [send](https://core.telegram.org/method/phone.saveCallDebug) the libtgvoip call debug data */
        Object.defineProperty(this, "need_debug", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether the call was a video call */
        Object.defineProperty(this, "video", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Call ID */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Why was the phone call discarded */
        Object.defineProperty(this, "reason", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Duration of the phone call in seconds */
        Object.defineProperty(this, "duration", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.need_rating = params.need_rating;
        this.need_debug = params.need_debug;
        this.video = params.video;
        this.id = params.id;
        this.reason = params.reason;
        this.duration = params.duration;
    }
}
/** Identifies an endpoint that can be used to connect to the other user in a phone call */
export class PhoneConnection_ extends _PhoneConnection_ {
    get [id]() {
        return 0x9CC123C7;
    }
    static get [name]() {
        return "phoneConnection";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["tcp", "true", "flags.0?true"],
            ["id", "bigint", "long"],
            ["ip", "string", "string"],
            ["ipv6", "string", "string"],
            ["port", "number", "int"],
            ["peer_tag", Uint8Array, "bytes"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.tcp ?? null, "true", "flags.0?true"],
            [this.id, "bigint", "long"],
            [this.ip, "string", "string"],
            [this.ipv6, "string", "string"],
            [this.port, "number", "int"],
            [this.peer_tag, Uint8Array, "bytes"],
        ];
    }
    constructor(params) {
        super();
        /** Whether TCP should be used */
        Object.defineProperty(this, "tcp", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Endpoint ID */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** IP address of endpoint */
        Object.defineProperty(this, "ip", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** IPv6 address of endpoint */
        Object.defineProperty(this, "ipv6", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Port ID */
        Object.defineProperty(this, "port", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Our peer tag */
        Object.defineProperty(this, "peer_tag", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.tcp = params.tcp;
        this.id = params.id;
        this.ip = params.ip;
        this.ipv6 = params.ipv6;
        this.port = params.port;
        this.peer_tag = params.peer_tag;
    }
}
/** WebRTC connection parameters */
export class PhoneConnectionWebrtc_ extends _PhoneConnection_ {
    get [id]() {
        return 0x635FE375;
    }
    static get [name]() {
        return "phoneConnectionWebrtc";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["turn", "true", "flags.0?true"],
            ["stun", "true", "flags.1?true"],
            ["id", "bigint", "long"],
            ["ip", "string", "string"],
            ["ipv6", "string", "string"],
            ["port", "number", "int"],
            ["username", "string", "string"],
            ["password", "string", "string"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.turn ?? null, "true", "flags.0?true"],
            [this.stun ?? null, "true", "flags.1?true"],
            [this.id, "bigint", "long"],
            [this.ip, "string", "string"],
            [this.ipv6, "string", "string"],
            [this.port, "number", "int"],
            [this.username, "string", "string"],
            [this.password, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Whether this is a TURN endpoint */
        Object.defineProperty(this, "turn", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this is a STUN endpoint */
        Object.defineProperty(this, "stun", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Endpoint ID */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** IP address */
        Object.defineProperty(this, "ip", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** IPv6 address */
        Object.defineProperty(this, "ipv6", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Port */
        Object.defineProperty(this, "port", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Username */
        Object.defineProperty(this, "username", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Password */
        Object.defineProperty(this, "password", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.turn = params.turn;
        this.stun = params.stun;
        this.id = params.id;
        this.ip = params.ip;
        this.ipv6 = params.ipv6;
        this.port = params.port;
        this.username = params.username;
        this.password = params.password;
    }
}
/** Protocol info for libtgvoip */
export class PhoneCallProtocol_ extends _PhoneCallProtocol_ {
    get [id]() {
        return 0xFC878FC8;
    }
    static get [name]() {
        return "phoneCallProtocol";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["udp_p2p", "true", "flags.0?true"],
            ["udp_reflector", "true", "flags.1?true"],
            ["min_layer", "number", "int"],
            ["max_layer", "number", "int"],
            ["library_versions", ["string"], "Vector<string>"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.udp_p2p ?? null, "true", "flags.0?true"],
            [this.udp_reflector ?? null, "true", "flags.1?true"],
            [this.min_layer, "number", "int"],
            [this.max_layer, "number", "int"],
            [this.library_versions, ["string"], "Vector<string>"],
        ];
    }
    constructor(params) {
        super();
        /** Whether to allow P2P connection to the other participant */
        Object.defineProperty(this, "udp_p2p", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether to allow connection to the other participants through the reflector servers */
        Object.defineProperty(this, "udp_reflector", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Minimum layer for remote libtgvoip */
        Object.defineProperty(this, "min_layer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Maximum layer for remote libtgvoip */
        Object.defineProperty(this, "max_layer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** When using [phone.requestCall](https://core.telegram.org/method/phone.requestCall) and [phone.acceptCall](https://core.telegram.org/method/phone.acceptCall), specify all library versions supported by the client.
        The server will merge and choose the best library version supported by both peers, returning only the best value in the result of the callee's [phone.acceptCall](https://core.telegram.org/method/phone.acceptCall) and in the [phoneCallAccepted](https://core.telegram.org/constructor/phoneCallAccepted) update received by the caller. */
        Object.defineProperty(this, "library_versions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.udp_p2p = params.udp_p2p;
        this.udp_reflector = params.udp_reflector;
        this.min_layer = params.min_layer;
        this.max_layer = params.max_layer;
        this.library_versions = params.library_versions;
    }
}
/** A VoIP phone call */
export class phone_PhoneCall_ extends _phone_PhoneCall_ {
    get [id]() {
        return 0xEC82E140;
    }
    static get [name]() {
        return "phone.phoneCall";
    }
    static get [paramDesc]() {
        return [
            ["phone_call", _PhoneCall_, "PhoneCall"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            [this.phone_call, _PhoneCall_, "PhoneCall"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** The VoIP phone call */
        Object.defineProperty(this, "phone_call", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** VoIP phone call participants */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.phone_call = params.phone_call;
        this.users = params.users;
    }
}
/** The file was cleared from the temporary RAM cache of the [CDN](https://core.telegram.org/cdn) and has to be re-uploaded. */
export class upload_CdnFileReuploadNeeded_ extends _upload_CdnFile_ {
    get [id]() {
        return 0xEEA8E46E;
    }
    static get [name]() {
        return "upload.cdnFileReuploadNeeded";
    }
    static get [paramDesc]() {
        return [
            ["request_token", Uint8Array, "bytes"],
        ];
    }
    get [params]() {
        return [
            [this.request_token, Uint8Array, "bytes"],
        ];
    }
    constructor(params) {
        super();
        /** Request token (see [CDN](https://core.telegram.org/cdn)) */
        Object.defineProperty(this, "request_token", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.request_token = params.request_token;
    }
}
/** Represent a chunk of a [CDN](https://core.telegram.org/cdn) file. */
export class upload_CdnFile_ extends _upload_CdnFile_ {
    get [id]() {
        return 0xA99FCA4F;
    }
    static get [name]() {
        return "upload.cdnFile";
    }
    static get [paramDesc]() {
        return [
            ["bytes", Uint8Array, "bytes"],
        ];
    }
    get [params]() {
        return [
            [this.bytes, Uint8Array, "bytes"],
        ];
    }
    constructor(params) {
        super();
        /** The data */
        Object.defineProperty(this, "bytes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.bytes = params.bytes;
    }
}
/** Public key to use **only** during handshakes to [CDN](https://core.telegram.org/cdn) DCs. */
export class CdnPublicKey_ extends _CdnPublicKey_ {
    get [id]() {
        return 0xC982EABA;
    }
    static get [name]() {
        return "cdnPublicKey";
    }
    static get [paramDesc]() {
        return [
            ["dc_id", "number", "int"],
            ["public_key", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.dc_id, "number", "int"],
            [this.public_key, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** [CDN DC](https://core.telegram.org/cdn) ID */
        Object.defineProperty(this, "dc_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** RSA public key */
        Object.defineProperty(this, "public_key", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.dc_id = params.dc_id;
        this.public_key = params.public_key;
    }
}
/** Configuration for [CDN](https://core.telegram.org/cdn) file downloads. */
export class CdnConfig_ extends _CdnConfig_ {
    get [id]() {
        return 0x5725E40A;
    }
    static get [name]() {
        return "cdnConfig";
    }
    static get [paramDesc]() {
        return [
            ["public_keys", [_CdnPublicKey_], "Vector<CdnPublicKey>"],
        ];
    }
    get [params]() {
        return [
            [this.public_keys, [_CdnPublicKey_], "Vector<CdnPublicKey>"],
        ];
    }
    constructor(params) {
        super();
        /** Vector of public keys to use **only** during handshakes to [CDN](https://core.telegram.org/cdn) DCs. */
        Object.defineProperty(this, "public_keys", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.public_keys = params.public_keys;
    }
}
/** Translated localization string */
export class LangPackString_ extends _LangPackString_ {
    get [id]() {
        return 0xCAD181F6;
    }
    static get [name]() {
        return "langPackString";
    }
    static get [paramDesc]() {
        return [
            ["key", "string", "string"],
            ["value", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.key, "string", "string"],
            [this.value, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Language key */
        Object.defineProperty(this, "key", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Value */
        Object.defineProperty(this, "value", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.key = params.key;
        this.value = params.value;
    }
}
/** A language pack string which has different forms based on the number of some object it mentions. See [https://www.unicode.org/cldr/charts/latest/supplemental/language\_plural\_rules.html](https://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html) for more info */
export class LangPackStringPluralized_ extends _LangPackString_ {
    get [id]() {
        return 0x6C47AC9F;
    }
    static get [name]() {
        return "langPackStringPluralized";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["key", "string", "string"],
            ["zero_value", "string", "flags.0?string"],
            ["one_value", "string", "flags.1?string"],
            ["two_value", "string", "flags.2?string"],
            ["few_value", "string", "flags.3?string"],
            ["many_value", "string", "flags.4?string"],
            ["other_value", "string", "string"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.key, "string", "string"],
            [this.zero_value ?? null, "string", "flags.0?string"],
            [this.one_value ?? null, "string", "flags.1?string"],
            [this.two_value ?? null, "string", "flags.2?string"],
            [this.few_value ?? null, "string", "flags.3?string"],
            [this.many_value ?? null, "string", "flags.4?string"],
            [this.other_value, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Localization key */
        Object.defineProperty(this, "key", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Value for zero objects */
        Object.defineProperty(this, "zero_value", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Value for one object */
        Object.defineProperty(this, "one_value", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Value for two objects */
        Object.defineProperty(this, "two_value", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Value for a few objects */
        Object.defineProperty(this, "few_value", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Value for many objects */
        Object.defineProperty(this, "many_value", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Default value */
        Object.defineProperty(this, "other_value", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.key = params.key;
        this.zero_value = params.zero_value;
        this.one_value = params.one_value;
        this.two_value = params.two_value;
        this.few_value = params.few_value;
        this.many_value = params.many_value;
        this.other_value = params.other_value;
    }
}
/** Deleted localization string */
export class LangPackStringDeleted_ extends _LangPackString_ {
    get [id]() {
        return 0x2979EEB2;
    }
    static get [name]() {
        return "langPackStringDeleted";
    }
    static get [paramDesc]() {
        return [
            ["key", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.key, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Localization key */
        Object.defineProperty(this, "key", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.key = params.key;
    }
}
/** Changes to the app's localization pack */
export class LangPackDifference_ extends _LangPackDifference_ {
    get [id]() {
        return 0xF385C1F6;
    }
    static get [name]() {
        return "langPackDifference";
    }
    static get [paramDesc]() {
        return [
            ["lang_code", "string", "string"],
            ["from_version", "number", "int"],
            ["version", "number", "int"],
            ["strings", [_LangPackString_], "Vector<LangPackString>"],
        ];
    }
    get [params]() {
        return [
            [this.lang_code, "string", "string"],
            [this.from_version, "number", "int"],
            [this.version, "number", "int"],
            [this.strings, [_LangPackString_], "Vector<LangPackString>"],
        ];
    }
    constructor(params) {
        super();
        /** Language code */
        Object.defineProperty(this, "lang_code", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Previous version number */
        Object.defineProperty(this, "from_version", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New version number */
        Object.defineProperty(this, "version", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Localized strings */
        Object.defineProperty(this, "strings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.lang_code = params.lang_code;
        this.from_version = params.from_version;
        this.version = params.version;
        this.strings = params.strings;
    }
}
/** Identifies a localization pack */
export class LangPackLanguage_ extends _LangPackLanguage_ {
    get [id]() {
        return 0xEECA5CE3;
    }
    static get [name]() {
        return "langPackLanguage";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["official", "true", "flags.0?true"],
            ["rtl", "true", "flags.2?true"],
            ["beta", "true", "flags.3?true"],
            ["name", "string", "string"],
            ["native_name", "string", "string"],
            ["lang_code", "string", "string"],
            ["base_lang_code", "string", "flags.1?string"],
            ["plural_code", "string", "string"],
            ["strings_count", "number", "int"],
            ["translated_count", "number", "int"],
            ["translations_url", "string", "string"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.official ?? null, "true", "flags.0?true"],
            [this.rtl ?? null, "true", "flags.2?true"],
            [this.beta ?? null, "true", "flags.3?true"],
            [this.name, "string", "string"],
            [this.native_name, "string", "string"],
            [this.lang_code, "string", "string"],
            [this.base_lang_code ?? null, "string", "flags.1?string"],
            [this.plural_code, "string", "string"],
            [this.strings_count, "number", "int"],
            [this.translated_count, "number", "int"],
            [this.translations_url, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Whether the language pack is official */
        Object.defineProperty(this, "official", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Is this a localization pack for an RTL language */
        Object.defineProperty(this, "rtl", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Is this a beta localization pack? */
        Object.defineProperty(this, "beta", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Language name */
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Language name in the language itself */
        Object.defineProperty(this, "native_name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Language code (pack identifier) */
        Object.defineProperty(this, "lang_code", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Identifier of a base language pack; may be empty. If a string is missed in the language pack, then it should be fetched from base language pack. Unsupported in custom language packs */
        Object.defineProperty(this, "base_lang_code", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** A language code to be used to apply plural forms. See [https://www.unicode.org/cldr/charts/latest/supplemental/language\_plural\_rules.html](https://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html) for more info */
        Object.defineProperty(this, "plural_code", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Total number of non-deleted strings from the language pack */
        Object.defineProperty(this, "strings_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Total number of translated strings from the language pack */
        Object.defineProperty(this, "translated_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Link to language translation interface; empty for custom local language packs */
        Object.defineProperty(this, "translations_url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.official = params.official;
        this.rtl = params.rtl;
        this.beta = params.beta;
        this.name = params.name;
        this.native_name = params.native_name;
        this.lang_code = params.lang_code;
        this.base_lang_code = params.base_lang_code;
        this.plural_code = params.plural_code;
        this.strings_count = params.strings_count;
        this.translated_count = params.translated_count;
        this.translations_url = params.translations_url;
    }
}
/** Channel/supergroup title was changed */
export class ChannelAdminLogEventActionChangeTitle_ extends _ChannelAdminLogEventAction_ {
    get [id]() {
        return 0xE6DFB825;
    }
    static get [name]() {
        return "channelAdminLogEventActionChangeTitle";
    }
    static get [paramDesc]() {
        return [
            ["prev_value", "string", "string"],
            ["new_value", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.prev_value, "string", "string"],
            [this.new_value, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Previous title */
        Object.defineProperty(this, "prev_value", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New title */
        Object.defineProperty(this, "new_value", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.prev_value = params.prev_value;
        this.new_value = params.new_value;
    }
}
/** The description was changed */
export class ChannelAdminLogEventActionChangeAbout_ extends _ChannelAdminLogEventAction_ {
    get [id]() {
        return 0x55188A2E;
    }
    static get [name]() {
        return "channelAdminLogEventActionChangeAbout";
    }
    static get [paramDesc]() {
        return [
            ["prev_value", "string", "string"],
            ["new_value", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.prev_value, "string", "string"],
            [this.new_value, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Previous description */
        Object.defineProperty(this, "prev_value", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New description */
        Object.defineProperty(this, "new_value", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.prev_value = params.prev_value;
        this.new_value = params.new_value;
    }
}
/** Channel/supergroup username was changed */
export class ChannelAdminLogEventActionChangeUsername_ extends _ChannelAdminLogEventAction_ {
    get [id]() {
        return 0x6A4AFC38;
    }
    static get [name]() {
        return "channelAdminLogEventActionChangeUsername";
    }
    static get [paramDesc]() {
        return [
            ["prev_value", "string", "string"],
            ["new_value", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.prev_value, "string", "string"],
            [this.new_value, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Old username */
        Object.defineProperty(this, "prev_value", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New username */
        Object.defineProperty(this, "new_value", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.prev_value = params.prev_value;
        this.new_value = params.new_value;
    }
}
/** The channel/supergroup's picture was changed */
export class ChannelAdminLogEventActionChangePhoto_ extends _ChannelAdminLogEventAction_ {
    get [id]() {
        return 0x434BD2AF;
    }
    static get [name]() {
        return "channelAdminLogEventActionChangePhoto";
    }
    static get [paramDesc]() {
        return [
            ["prev_photo", _Photo_, "Photo"],
            ["new_photo", _Photo_, "Photo"],
        ];
    }
    get [params]() {
        return [
            [this.prev_photo, _Photo_, "Photo"],
            [this.new_photo, _Photo_, "Photo"],
        ];
    }
    constructor(params) {
        super();
        /** Previous picture */
        Object.defineProperty(this, "prev_photo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New picture */
        Object.defineProperty(this, "new_photo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.prev_photo = params.prev_photo;
        this.new_photo = params.new_photo;
    }
}
/** Invites were enabled/disabled */
export class ChannelAdminLogEventActionToggleInvites_ extends _ChannelAdminLogEventAction_ {
    get [id]() {
        return 0x1B7907AE;
    }
    static get [name]() {
        return "channelAdminLogEventActionToggleInvites";
    }
    static get [paramDesc]() {
        return [
            ["new_value", "boolean", "Bool"],
        ];
    }
    get [params]() {
        return [
            [this.new_value, "boolean", "Bool"],
        ];
    }
    constructor(params) {
        super();
        /** New value */
        Object.defineProperty(this, "new_value", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.new_value = params.new_value;
    }
}
/** Channel signatures were enabled/disabled */
export class ChannelAdminLogEventActionToggleSignatures_ extends _ChannelAdminLogEventAction_ {
    get [id]() {
        return 0x26AE0971;
    }
    static get [name]() {
        return "channelAdminLogEventActionToggleSignatures";
    }
    static get [paramDesc]() {
        return [
            ["new_value", "boolean", "Bool"],
        ];
    }
    get [params]() {
        return [
            [this.new_value, "boolean", "Bool"],
        ];
    }
    constructor(params) {
        super();
        /** New value */
        Object.defineProperty(this, "new_value", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.new_value = params.new_value;
    }
}
/** A message was pinned */
export class ChannelAdminLogEventActionUpdatePinned_ extends _ChannelAdminLogEventAction_ {
    get [id]() {
        return 0xE9E82C18;
    }
    static get [name]() {
        return "channelAdminLogEventActionUpdatePinned";
    }
    static get [paramDesc]() {
        return [
            ["message", _Message_, "Message"],
        ];
    }
    get [params]() {
        return [
            [this.message, _Message_, "Message"],
        ];
    }
    constructor(params) {
        super();
        /** The message that was pinned */
        Object.defineProperty(this, "message", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.message = params.message;
    }
}
/** A message was edited */
export class ChannelAdminLogEventActionEditMessage_ extends _ChannelAdminLogEventAction_ {
    get [id]() {
        return 0x709B2405;
    }
    static get [name]() {
        return "channelAdminLogEventActionEditMessage";
    }
    static get [paramDesc]() {
        return [
            ["prev_message", _Message_, "Message"],
            ["new_message", _Message_, "Message"],
        ];
    }
    get [params]() {
        return [
            [this.prev_message, _Message_, "Message"],
            [this.new_message, _Message_, "Message"],
        ];
    }
    constructor(params) {
        super();
        /** Old message */
        Object.defineProperty(this, "prev_message", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New message */
        Object.defineProperty(this, "new_message", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.prev_message = params.prev_message;
        this.new_message = params.new_message;
    }
}
/** A message was deleted */
export class ChannelAdminLogEventActionDeleteMessage_ extends _ChannelAdminLogEventAction_ {
    get [id]() {
        return 0x42E047BB;
    }
    static get [name]() {
        return "channelAdminLogEventActionDeleteMessage";
    }
    static get [paramDesc]() {
        return [
            ["message", _Message_, "Message"],
        ];
    }
    get [params]() {
        return [
            [this.message, _Message_, "Message"],
        ];
    }
    constructor(params) {
        super();
        /** The message that was deleted */
        Object.defineProperty(this, "message", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.message = params.message;
    }
}
/** A user has joined the group (in the case of big groups, info of the user that has joined isn't shown) */
export class ChannelAdminLogEventActionParticipantJoin_ extends _ChannelAdminLogEventAction_ {
    get [id]() {
        return 0x183040D3;
    }
    static get [name]() {
        return "channelAdminLogEventActionParticipantJoin";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** A user left the channel/supergroup (in the case of big groups, info of the user that has joined isn't shown) */
export class ChannelAdminLogEventActionParticipantLeave_ extends _ChannelAdminLogEventAction_ {
    get [id]() {
        return 0xF89777F2;
    }
    static get [name]() {
        return "channelAdminLogEventActionParticipantLeave";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** A user was invited to the group */
export class ChannelAdminLogEventActionParticipantInvite_ extends _ChannelAdminLogEventAction_ {
    get [id]() {
        return 0xE31C34D8;
    }
    static get [name]() {
        return "channelAdminLogEventActionParticipantInvite";
    }
    static get [paramDesc]() {
        return [
            ["participant", _ChannelParticipant_, "ChannelParticipant"],
        ];
    }
    get [params]() {
        return [
            [this.participant, _ChannelParticipant_, "ChannelParticipant"],
        ];
    }
    constructor(params) {
        super();
        /** The user that was invited */
        Object.defineProperty(this, "participant", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.participant = params.participant;
    }
}
/** The banned [rights](https://core.telegram.org/api/rights) of a user were changed */
export class ChannelAdminLogEventActionParticipantToggleBan_ extends _ChannelAdminLogEventAction_ {
    get [id]() {
        return 0xE6D83D7E;
    }
    static get [name]() {
        return "channelAdminLogEventActionParticipantToggleBan";
    }
    static get [paramDesc]() {
        return [
            ["prev_participant", _ChannelParticipant_, "ChannelParticipant"],
            ["new_participant", _ChannelParticipant_, "ChannelParticipant"],
        ];
    }
    get [params]() {
        return [
            [this.prev_participant, _ChannelParticipant_, "ChannelParticipant"],
            [this.new_participant, _ChannelParticipant_, "ChannelParticipant"],
        ];
    }
    constructor(params) {
        super();
        /** Old banned rights of user */
        Object.defineProperty(this, "prev_participant", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New banned rights of user */
        Object.defineProperty(this, "new_participant", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.prev_participant = params.prev_participant;
        this.new_participant = params.new_participant;
    }
}
/** The admin [rights](https://core.telegram.org/api/rights) of a user were changed */
export class ChannelAdminLogEventActionParticipantToggleAdmin_ extends _ChannelAdminLogEventAction_ {
    get [id]() {
        return 0xD5676710;
    }
    static get [name]() {
        return "channelAdminLogEventActionParticipantToggleAdmin";
    }
    static get [paramDesc]() {
        return [
            ["prev_participant", _ChannelParticipant_, "ChannelParticipant"],
            ["new_participant", _ChannelParticipant_, "ChannelParticipant"],
        ];
    }
    get [params]() {
        return [
            [this.prev_participant, _ChannelParticipant_, "ChannelParticipant"],
            [this.new_participant, _ChannelParticipant_, "ChannelParticipant"],
        ];
    }
    constructor(params) {
        super();
        /** Previous admin rights */
        Object.defineProperty(this, "prev_participant", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New admin rights */
        Object.defineProperty(this, "new_participant", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.prev_participant = params.prev_participant;
        this.new_participant = params.new_participant;
    }
}
/** The supergroup's stickerset was changed */
export class ChannelAdminLogEventActionChangeStickerSet_ extends _ChannelAdminLogEventAction_ {
    get [id]() {
        return 0xB1C3CAA7;
    }
    static get [name]() {
        return "channelAdminLogEventActionChangeStickerSet";
    }
    static get [paramDesc]() {
        return [
            ["prev_stickerset", _InputStickerSet_, "InputStickerSet"],
            ["new_stickerset", _InputStickerSet_, "InputStickerSet"],
        ];
    }
    get [params]() {
        return [
            [this.prev_stickerset, _InputStickerSet_, "InputStickerSet"],
            [this.new_stickerset, _InputStickerSet_, "InputStickerSet"],
        ];
    }
    constructor(params) {
        super();
        /** Previous stickerset */
        Object.defineProperty(this, "prev_stickerset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New stickerset */
        Object.defineProperty(this, "new_stickerset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.prev_stickerset = params.prev_stickerset;
        this.new_stickerset = params.new_stickerset;
    }
}
/** The hidden prehistory setting was [changed](https://core.telegram.org/method/channels.togglePreHistoryHidden) */
export class ChannelAdminLogEventActionTogglePreHistoryHidden_ extends _ChannelAdminLogEventAction_ {
    get [id]() {
        return 0x5F5C95F1;
    }
    static get [name]() {
        return "channelAdminLogEventActionTogglePreHistoryHidden";
    }
    static get [paramDesc]() {
        return [
            ["new_value", "boolean", "Bool"],
        ];
    }
    get [params]() {
        return [
            [this.new_value, "boolean", "Bool"],
        ];
    }
    constructor(params) {
        super();
        /** New value */
        Object.defineProperty(this, "new_value", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.new_value = params.new_value;
    }
}
/** The default banned rights were modified */
export class ChannelAdminLogEventActionDefaultBannedRights_ extends _ChannelAdminLogEventAction_ {
    get [id]() {
        return 0x2DF5FC0A;
    }
    static get [name]() {
        return "channelAdminLogEventActionDefaultBannedRights";
    }
    static get [paramDesc]() {
        return [
            ["prev_banned_rights", _ChatBannedRights_, "ChatBannedRights"],
            ["new_banned_rights", _ChatBannedRights_, "ChatBannedRights"],
        ];
    }
    get [params]() {
        return [
            [this.prev_banned_rights, _ChatBannedRights_, "ChatBannedRights"],
            [this.new_banned_rights, _ChatBannedRights_, "ChatBannedRights"],
        ];
    }
    constructor(params) {
        super();
        /** Previous global [banned rights](https://core.telegram.org/api/rights) */
        Object.defineProperty(this, "prev_banned_rights", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New global [banned rights](https://core.telegram.org/api/rights). */
        Object.defineProperty(this, "new_banned_rights", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.prev_banned_rights = params.prev_banned_rights;
        this.new_banned_rights = params.new_banned_rights;
    }
}
/** A poll was stopped */
export class ChannelAdminLogEventActionStopPoll_ extends _ChannelAdminLogEventAction_ {
    get [id]() {
        return 0x8F079643;
    }
    static get [name]() {
        return "channelAdminLogEventActionStopPoll";
    }
    static get [paramDesc]() {
        return [
            ["message", _Message_, "Message"],
        ];
    }
    get [params]() {
        return [
            [this.message, _Message_, "Message"],
        ];
    }
    constructor(params) {
        super();
        /** The poll that was stopped */
        Object.defineProperty(this, "message", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.message = params.message;
    }
}
/** The linked chat was changed */
export class ChannelAdminLogEventActionChangeLinkedChat_ extends _ChannelAdminLogEventAction_ {
    get [id]() {
        return 0x050C7AC8;
    }
    static get [name]() {
        return "channelAdminLogEventActionChangeLinkedChat";
    }
    static get [paramDesc]() {
        return [
            ["prev_value", "bigint", "long"],
            ["new_value", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.prev_value, "bigint", "long"],
            [this.new_value, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** Previous linked chat */
        Object.defineProperty(this, "prev_value", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New linked chat */
        Object.defineProperty(this, "new_value", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.prev_value = params.prev_value;
        this.new_value = params.new_value;
    }
}
/** The geogroup location was changed */
export class ChannelAdminLogEventActionChangeLocation_ extends _ChannelAdminLogEventAction_ {
    get [id]() {
        return 0x0E6B76AE;
    }
    static get [name]() {
        return "channelAdminLogEventActionChangeLocation";
    }
    static get [paramDesc]() {
        return [
            ["prev_value", _ChannelLocation_, "ChannelLocation"],
            ["new_value", _ChannelLocation_, "ChannelLocation"],
        ];
    }
    get [params]() {
        return [
            [this.prev_value, _ChannelLocation_, "ChannelLocation"],
            [this.new_value, _ChannelLocation_, "ChannelLocation"],
        ];
    }
    constructor(params) {
        super();
        /** Previous location */
        Object.defineProperty(this, "prev_value", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New location */
        Object.defineProperty(this, "new_value", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.prev_value = params.prev_value;
        this.new_value = params.new_value;
    }
}
/** [Slow mode setting for supergroups was changed](https://core.telegram.org/method/channels.toggleSlowMode) */
export class ChannelAdminLogEventActionToggleSlowMode_ extends _ChannelAdminLogEventAction_ {
    get [id]() {
        return 0x53909779;
    }
    static get [name]() {
        return "channelAdminLogEventActionToggleSlowMode";
    }
    static get [paramDesc]() {
        return [
            ["prev_value", "number", "int"],
            ["new_value", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.prev_value, "number", "int"],
            [this.new_value, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Previous slow mode value */
        Object.defineProperty(this, "prev_value", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New slow mode value */
        Object.defineProperty(this, "new_value", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.prev_value = params.prev_value;
        this.new_value = params.new_value;
    }
}
/** A group call was started */
export class ChannelAdminLogEventActionStartGroupCall_ extends _ChannelAdminLogEventAction_ {
    get [id]() {
        return 0x23209745;
    }
    static get [name]() {
        return "channelAdminLogEventActionStartGroupCall";
    }
    static get [paramDesc]() {
        return [
            ["call", _InputGroupCall_, "InputGroupCall"],
        ];
    }
    get [params]() {
        return [
            [this.call, _InputGroupCall_, "InputGroupCall"],
        ];
    }
    constructor(params) {
        super();
        /** Group call */
        Object.defineProperty(this, "call", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.call = params.call;
    }
}
/** A group call was terminated */
export class ChannelAdminLogEventActionDiscardGroupCall_ extends _ChannelAdminLogEventAction_ {
    get [id]() {
        return 0xDB9F9140;
    }
    static get [name]() {
        return "channelAdminLogEventActionDiscardGroupCall";
    }
    static get [paramDesc]() {
        return [
            ["call", _InputGroupCall_, "InputGroupCall"],
        ];
    }
    get [params]() {
        return [
            [this.call, _InputGroupCall_, "InputGroupCall"],
        ];
    }
    constructor(params) {
        super();
        /** The group call that was terminated */
        Object.defineProperty(this, "call", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.call = params.call;
    }
}
/** A group call participant was muted */
export class ChannelAdminLogEventActionParticipantMute_ extends _ChannelAdminLogEventAction_ {
    get [id]() {
        return 0xF92424D2;
    }
    static get [name]() {
        return "channelAdminLogEventActionParticipantMute";
    }
    static get [paramDesc]() {
        return [
            ["participant", _GroupCallParticipant_, "GroupCallParticipant"],
        ];
    }
    get [params]() {
        return [
            [this.participant, _GroupCallParticipant_, "GroupCallParticipant"],
        ];
    }
    constructor(params) {
        super();
        /** The participant that was muted */
        Object.defineProperty(this, "participant", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.participant = params.participant;
    }
}
/** A group call participant was unmuted */
export class ChannelAdminLogEventActionParticipantUnmute_ extends _ChannelAdminLogEventAction_ {
    get [id]() {
        return 0xE64429C0;
    }
    static get [name]() {
        return "channelAdminLogEventActionParticipantUnmute";
    }
    static get [paramDesc]() {
        return [
            ["participant", _GroupCallParticipant_, "GroupCallParticipant"],
        ];
    }
    get [params]() {
        return [
            [this.participant, _GroupCallParticipant_, "GroupCallParticipant"],
        ];
    }
    constructor(params) {
        super();
        /** The participant that was unmuted */
        Object.defineProperty(this, "participant", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.participant = params.participant;
    }
}
/** Group call settings were changed */
export class ChannelAdminLogEventActionToggleGroupCallSetting_ extends _ChannelAdminLogEventAction_ {
    get [id]() {
        return 0x56D6A247;
    }
    static get [name]() {
        return "channelAdminLogEventActionToggleGroupCallSetting";
    }
    static get [paramDesc]() {
        return [
            ["join_muted", "boolean", "Bool"],
        ];
    }
    get [params]() {
        return [
            [this.join_muted, "boolean", "Bool"],
        ];
    }
    constructor(params) {
        super();
        /** Whether all users are muted by default upon joining */
        Object.defineProperty(this, "join_muted", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.join_muted = params.join_muted;
    }
}
/** A user joined the [supergroup/channel](https://core.telegram.org/api/channel) using a specific invite link */
export class ChannelAdminLogEventActionParticipantJoinByInvite_ extends _ChannelAdminLogEventAction_ {
    get [id]() {
        return 0xFE9FC158;
    }
    static get [name]() {
        return "channelAdminLogEventActionParticipantJoinByInvite";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["via_chatlist", "true", "flags.0?true"],
            ["invite", _ExportedChatInvite_, "ExportedChatInvite"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.via_chatlist ?? null, "true", "flags.0?true"],
            [this.invite, _ExportedChatInvite_, "ExportedChatInvite"],
        ];
    }
    constructor(params) {
        super();
        /** The participant joined by importing a [chat folder deep link »](https://core.telegram.org/api/links#chat-folder-links). */
        Object.defineProperty(this, "via_chatlist", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The invite link used to join the [supergroup/channel](https://core.telegram.org/api/channel) */
        Object.defineProperty(this, "invite", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.via_chatlist = params.via_chatlist;
        this.invite = params.invite;
    }
}
/** A chat invite was deleted */
export class ChannelAdminLogEventActionExportedInviteDelete_ extends _ChannelAdminLogEventAction_ {
    get [id]() {
        return 0x5A50FCA4;
    }
    static get [name]() {
        return "channelAdminLogEventActionExportedInviteDelete";
    }
    static get [paramDesc]() {
        return [
            ["invite", _ExportedChatInvite_, "ExportedChatInvite"],
        ];
    }
    get [params]() {
        return [
            [this.invite, _ExportedChatInvite_, "ExportedChatInvite"],
        ];
    }
    constructor(params) {
        super();
        /** The deleted chat invite */
        Object.defineProperty(this, "invite", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.invite = params.invite;
    }
}
/** A specific invite link was revoked */
export class ChannelAdminLogEventActionExportedInviteRevoke_ extends _ChannelAdminLogEventAction_ {
    get [id]() {
        return 0x410A134E;
    }
    static get [name]() {
        return "channelAdminLogEventActionExportedInviteRevoke";
    }
    static get [paramDesc]() {
        return [
            ["invite", _ExportedChatInvite_, "ExportedChatInvite"],
        ];
    }
    get [params]() {
        return [
            [this.invite, _ExportedChatInvite_, "ExportedChatInvite"],
        ];
    }
    constructor(params) {
        super();
        /** The invite link that was revoked */
        Object.defineProperty(this, "invite", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.invite = params.invite;
    }
}
/** A chat invite was edited */
export class ChannelAdminLogEventActionExportedInviteEdit_ extends _ChannelAdminLogEventAction_ {
    get [id]() {
        return 0xE90EBB59;
    }
    static get [name]() {
        return "channelAdminLogEventActionExportedInviteEdit";
    }
    static get [paramDesc]() {
        return [
            ["prev_invite", _ExportedChatInvite_, "ExportedChatInvite"],
            ["new_invite", _ExportedChatInvite_, "ExportedChatInvite"],
        ];
    }
    get [params]() {
        return [
            [this.prev_invite, _ExportedChatInvite_, "ExportedChatInvite"],
            [this.new_invite, _ExportedChatInvite_, "ExportedChatInvite"],
        ];
    }
    constructor(params) {
        super();
        /** Previous chat invite information */
        Object.defineProperty(this, "prev_invite", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New chat invite information */
        Object.defineProperty(this, "new_invite", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.prev_invite = params.prev_invite;
        this.new_invite = params.new_invite;
    }
}
/** channelAdminLogEvent.user\_id has set the volume of participant.peer to participant.volume */
export class ChannelAdminLogEventActionParticipantVolume_ extends _ChannelAdminLogEventAction_ {
    get [id]() {
        return 0x3E7F6847;
    }
    static get [name]() {
        return "channelAdminLogEventActionParticipantVolume";
    }
    static get [paramDesc]() {
        return [
            ["participant", _GroupCallParticipant_, "GroupCallParticipant"],
        ];
    }
    get [params]() {
        return [
            [this.participant, _GroupCallParticipant_, "GroupCallParticipant"],
        ];
    }
    constructor(params) {
        super();
        /** The participant whose volume was changed */
        Object.defineProperty(this, "participant", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.participant = params.participant;
    }
}
/** The Time-To-Live of messages in this chat was changed */
export class ChannelAdminLogEventActionChangeHistoryTTL_ extends _ChannelAdminLogEventAction_ {
    get [id]() {
        return 0x6E941A38;
    }
    static get [name]() {
        return "channelAdminLogEventActionChangeHistoryTTL";
    }
    static get [paramDesc]() {
        return [
            ["prev_value", "number", "int"],
            ["new_value", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.prev_value, "number", "int"],
            [this.new_value, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Previous value */
        Object.defineProperty(this, "prev_value", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New value */
        Object.defineProperty(this, "new_value", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.prev_value = params.prev_value;
        this.new_value = params.new_value;
    }
}
/** A new member was accepted to the chat by an admin */
export class ChannelAdminLogEventActionParticipantJoinByRequest_ extends _ChannelAdminLogEventAction_ {
    get [id]() {
        return 0xAFB6144A;
    }
    static get [name]() {
        return "channelAdminLogEventActionParticipantJoinByRequest";
    }
    static get [paramDesc]() {
        return [
            ["invite", _ExportedChatInvite_, "ExportedChatInvite"],
            ["approved_by", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.invite, _ExportedChatInvite_, "ExportedChatInvite"],
            [this.approved_by, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** The invite link that was used to join the chat */
        Object.defineProperty(this, "invite", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the admin that approved the invite */
        Object.defineProperty(this, "approved_by", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.invite = params.invite;
        this.approved_by = params.approved_by;
    }
}
/** Forwards were enabled or disabled */
export class ChannelAdminLogEventActionToggleNoForwards_ extends _ChannelAdminLogEventAction_ {
    get [id]() {
        return 0xCB2AC766;
    }
    static get [name]() {
        return "channelAdminLogEventActionToggleNoForwards";
    }
    static get [paramDesc]() {
        return [
            ["new_value", "boolean", "Bool"],
        ];
    }
    get [params]() {
        return [
            [this.new_value, "boolean", "Bool"],
        ];
    }
    constructor(params) {
        super();
        /** Old value */
        Object.defineProperty(this, "new_value", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.new_value = params.new_value;
    }
}
/** A message was posted in a channel */
export class ChannelAdminLogEventActionSendMessage_ extends _ChannelAdminLogEventAction_ {
    get [id]() {
        return 0x278F2868;
    }
    static get [name]() {
        return "channelAdminLogEventActionSendMessage";
    }
    static get [paramDesc]() {
        return [
            ["message", _Message_, "Message"],
        ];
    }
    get [params]() {
        return [
            [this.message, _Message_, "Message"],
        ];
    }
    constructor(params) {
        super();
        /** The message that was sent */
        Object.defineProperty(this, "message", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.message = params.message;
    }
}
/** The set of allowed [message reactions »](https://core.telegram.org/api/reactions) for this channel has changed */
export class ChannelAdminLogEventActionChangeAvailableReactions_ extends _ChannelAdminLogEventAction_ {
    get [id]() {
        return 0xBE4E0EF8;
    }
    static get [name]() {
        return "channelAdminLogEventActionChangeAvailableReactions";
    }
    static get [paramDesc]() {
        return [
            ["prev_value", _ChatReactions_, "ChatReactions"],
            ["new_value", _ChatReactions_, "ChatReactions"],
        ];
    }
    get [params]() {
        return [
            [this.prev_value, _ChatReactions_, "ChatReactions"],
            [this.new_value, _ChatReactions_, "ChatReactions"],
        ];
    }
    constructor(params) {
        super();
        /** Previously allowed reaction emojis */
        Object.defineProperty(this, "prev_value", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New allowed reaction emojis */
        Object.defineProperty(this, "new_value", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.prev_value = params.prev_value;
        this.new_value = params.new_value;
    }
}
/** The list of usernames associated with the channel was changed */
export class ChannelAdminLogEventActionChangeUsernames_ extends _ChannelAdminLogEventAction_ {
    get [id]() {
        return 0xF04FB3A9;
    }
    static get [name]() {
        return "channelAdminLogEventActionChangeUsernames";
    }
    static get [paramDesc]() {
        return [
            ["prev_value", ["string"], "Vector<string>"],
            ["new_value", ["string"], "Vector<string>"],
        ];
    }
    get [params]() {
        return [
            [this.prev_value, ["string"], "Vector<string>"],
            [this.new_value, ["string"], "Vector<string>"],
        ];
    }
    constructor(params) {
        super();
        /** Previous set of usernames */
        Object.defineProperty(this, "prev_value", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New set of usernames */
        Object.defineProperty(this, "new_value", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.prev_value = params.prev_value;
        this.new_value = params.new_value;
    }
}
/** [Forum](https://core.telegram.org/api/forum) functionality was enabled or disabled. */
export class ChannelAdminLogEventActionToggleForum_ extends _ChannelAdminLogEventAction_ {
    get [id]() {
        return 0x02CC6383;
    }
    static get [name]() {
        return "channelAdminLogEventActionToggleForum";
    }
    static get [paramDesc]() {
        return [
            ["new_value", "boolean", "Bool"],
        ];
    }
    get [params]() {
        return [
            [this.new_value, "boolean", "Bool"],
        ];
    }
    constructor(params) {
        super();
        /** Whether [forum](https://core.telegram.org/api/forum) functionality was enabled or disabled. */
        Object.defineProperty(this, "new_value", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.new_value = params.new_value;
    }
}
/** A [forum topic](https://core.telegram.org/api/forum#forum-topics) was created */
export class ChannelAdminLogEventActionCreateTopic_ extends _ChannelAdminLogEventAction_ {
    get [id]() {
        return 0x58707D28;
    }
    static get [name]() {
        return "channelAdminLogEventActionCreateTopic";
    }
    static get [paramDesc]() {
        return [
            ["topic", _ForumTopic_, "ForumTopic"],
        ];
    }
    get [params]() {
        return [
            [this.topic, _ForumTopic_, "ForumTopic"],
        ];
    }
    constructor(params) {
        super();
        /** The [forum topic](https://core.telegram.org/api/forum#forum-topics) that was created */
        Object.defineProperty(this, "topic", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.topic = params.topic;
    }
}
/** A [forum topic](https://core.telegram.org/api/forum#forum-topics) was edited */
export class ChannelAdminLogEventActionEditTopic_ extends _ChannelAdminLogEventAction_ {
    get [id]() {
        return 0xF06FE208;
    }
    static get [name]() {
        return "channelAdminLogEventActionEditTopic";
    }
    static get [paramDesc]() {
        return [
            ["prev_topic", _ForumTopic_, "ForumTopic"],
            ["new_topic", _ForumTopic_, "ForumTopic"],
        ];
    }
    get [params]() {
        return [
            [this.prev_topic, _ForumTopic_, "ForumTopic"],
            [this.new_topic, _ForumTopic_, "ForumTopic"],
        ];
    }
    constructor(params) {
        super();
        /** Previous topic information */
        Object.defineProperty(this, "prev_topic", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New topic information */
        Object.defineProperty(this, "new_topic", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.prev_topic = params.prev_topic;
        this.new_topic = params.new_topic;
    }
}
/** A [forum topic](https://core.telegram.org/api/forum#forum-topics) was deleted */
export class ChannelAdminLogEventActionDeleteTopic_ extends _ChannelAdminLogEventAction_ {
    get [id]() {
        return 0xAE168909;
    }
    static get [name]() {
        return "channelAdminLogEventActionDeleteTopic";
    }
    static get [paramDesc]() {
        return [
            ["topic", _ForumTopic_, "ForumTopic"],
        ];
    }
    get [params]() {
        return [
            [this.topic, _ForumTopic_, "ForumTopic"],
        ];
    }
    constructor(params) {
        super();
        /** The [forum topic](https://core.telegram.org/api/forum#forum-topics) that was deleted */
        Object.defineProperty(this, "topic", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.topic = params.topic;
    }
}
/** A [forum topic](https://core.telegram.org/api/forum#forum-topics) was pinned or unpinned */
export class ChannelAdminLogEventActionPinTopic_ extends _ChannelAdminLogEventAction_ {
    get [id]() {
        return 0x5D8D353B;
    }
    static get [name]() {
        return "channelAdminLogEventActionPinTopic";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["prev_topic", _ForumTopic_, "flags.0?ForumTopic"],
            ["new_topic", _ForumTopic_, "flags.1?ForumTopic"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.prev_topic ?? null, _ForumTopic_, "flags.0?ForumTopic"],
            [this.new_topic ?? null, _ForumTopic_, "flags.1?ForumTopic"],
        ];
    }
    constructor(params) {
        super();
        /** Previous topic information */
        Object.defineProperty(this, "prev_topic", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New topic information */
        Object.defineProperty(this, "new_topic", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.prev_topic = params?.prev_topic;
        this.new_topic = params?.new_topic;
    }
}
/** [Native antispam](https://core.telegram.org/api/antispam) functionality was enabled or disabled. */
export class ChannelAdminLogEventActionToggleAntiSpam_ extends _ChannelAdminLogEventAction_ {
    get [id]() {
        return 0x64F36DFC;
    }
    static get [name]() {
        return "channelAdminLogEventActionToggleAntiSpam";
    }
    static get [paramDesc]() {
        return [
            ["new_value", "boolean", "Bool"],
        ];
    }
    get [params]() {
        return [
            [this.new_value, "boolean", "Bool"],
        ];
    }
    constructor(params) {
        super();
        /** Whether antispam functionality was enabled or disabled. */
        Object.defineProperty(this, "new_value", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.new_value = params.new_value;
    }
}
/** The [message accent color](https://core.telegram.org/api/colors) was changed */
export class ChannelAdminLogEventActionChangePeerColor_ extends _ChannelAdminLogEventAction_ {
    get [id]() {
        return 0x5796E780;
    }
    static get [name]() {
        return "channelAdminLogEventActionChangePeerColor";
    }
    static get [paramDesc]() {
        return [
            ["prev_value", _PeerColor_, "PeerColor"],
            ["new_value", _PeerColor_, "PeerColor"],
        ];
    }
    get [params]() {
        return [
            [this.prev_value, _PeerColor_, "PeerColor"],
            [this.new_value, _PeerColor_, "PeerColor"],
        ];
    }
    constructor(params) {
        super();
        /** Previous accent palette */
        Object.defineProperty(this, "prev_value", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New accent palette */
        Object.defineProperty(this, "new_value", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.prev_value = params.prev_value;
        this.new_value = params.new_value;
    }
}
/** The [profile accent color](https://core.telegram.org/api/colors) was changed */
export class ChannelAdminLogEventActionChangeProfilePeerColor_ extends _ChannelAdminLogEventAction_ {
    get [id]() {
        return 0x5E477B25;
    }
    static get [name]() {
        return "channelAdminLogEventActionChangeProfilePeerColor";
    }
    static get [paramDesc]() {
        return [
            ["prev_value", _PeerColor_, "PeerColor"],
            ["new_value", _PeerColor_, "PeerColor"],
        ];
    }
    get [params]() {
        return [
            [this.prev_value, _PeerColor_, "PeerColor"],
            [this.new_value, _PeerColor_, "PeerColor"],
        ];
    }
    constructor(params) {
        super();
        /** Previous accent palette */
        Object.defineProperty(this, "prev_value", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New accent palette */
        Object.defineProperty(this, "new_value", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.prev_value = params.prev_value;
        this.new_value = params.new_value;
    }
}
/** The [wallpaper](https://core.telegram.org/api/wallpapers) was changed */
export class ChannelAdminLogEventActionChangeWallpaper_ extends _ChannelAdminLogEventAction_ {
    get [id]() {
        return 0x31BB5D52;
    }
    static get [name]() {
        return "channelAdminLogEventActionChangeWallpaper";
    }
    static get [paramDesc]() {
        return [
            ["prev_value", _WallPaper_, "WallPaper"],
            ["new_value", _WallPaper_, "WallPaper"],
        ];
    }
    get [params]() {
        return [
            [this.prev_value, _WallPaper_, "WallPaper"],
            [this.new_value, _WallPaper_, "WallPaper"],
        ];
    }
    constructor(params) {
        super();
        /** Previous wallpaper */
        Object.defineProperty(this, "prev_value", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New wallpaper */
        Object.defineProperty(this, "new_value", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.prev_value = params.prev_value;
        this.new_value = params.new_value;
    }
}
/** The [emoji status](https://core.telegram.org/api/emoji-status) was changed */
export class ChannelAdminLogEventActionChangeEmojiStatus_ extends _ChannelAdminLogEventAction_ {
    get [id]() {
        return 0x3EA9FEB1;
    }
    static get [name]() {
        return "channelAdminLogEventActionChangeEmojiStatus";
    }
    static get [paramDesc]() {
        return [
            ["prev_value", _EmojiStatus_, "EmojiStatus"],
            ["new_value", _EmojiStatus_, "EmojiStatus"],
        ];
    }
    get [params]() {
        return [
            [this.prev_value, _EmojiStatus_, "EmojiStatus"],
            [this.new_value, _EmojiStatus_, "EmojiStatus"],
        ];
    }
    constructor(params) {
        super();
        /** Previous emoji status */
        Object.defineProperty(this, "prev_value", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New emoji status */
        Object.defineProperty(this, "new_value", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.prev_value = params.prev_value;
        this.new_value = params.new_value;
    }
}
export class ChannelAdminLogEventActionChangeEmojiStickerSet_ extends _ChannelAdminLogEventAction_ {
    get [id]() {
        return 0x46D840AB;
    }
    static get [name]() {
        return "channelAdminLogEventActionChangeEmojiStickerSet";
    }
    static get [paramDesc]() {
        return [
            ["prev_stickerset", _InputStickerSet_, "InputStickerSet"],
            ["new_stickerset", _InputStickerSet_, "InputStickerSet"],
        ];
    }
    get [params]() {
        return [
            [this.prev_stickerset, _InputStickerSet_, "InputStickerSet"],
            [this.new_stickerset, _InputStickerSet_, "InputStickerSet"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "prev_stickerset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "new_stickerset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.prev_stickerset = params.prev_stickerset;
        this.new_stickerset = params.new_stickerset;
    }
}
/** Admin log event */
export class ChannelAdminLogEvent_ extends _ChannelAdminLogEvent_ {
    get [id]() {
        return 0x1FAD68CD;
    }
    static get [name]() {
        return "channelAdminLogEvent";
    }
    static get [paramDesc]() {
        return [
            ["id", "bigint", "long"],
            ["date", "number", "int"],
            ["user_id", "bigint", "long"],
            ["action", _ChannelAdminLogEventAction_, "ChannelAdminLogEventAction"],
        ];
    }
    get [params]() {
        return [
            [this.id, "bigint", "long"],
            [this.date, "number", "int"],
            [this.user_id, "bigint", "long"],
            [this.action, _ChannelAdminLogEventAction_, "ChannelAdminLogEventAction"],
        ];
    }
    constructor(params) {
        super();
        /** Event ID */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Date */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** User ID */
        Object.defineProperty(this, "user_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Action */
        Object.defineProperty(this, "action", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
        this.date = params.date;
        this.user_id = params.user_id;
        this.action = params.action;
    }
}
/** Admin log events */
export class channels_AdminLogResults_ extends _channels_AdminLogResults_ {
    get [id]() {
        return 0xED8AF74D;
    }
    static get [name]() {
        return "channels.adminLogResults";
    }
    static get [paramDesc]() {
        return [
            ["events", [_ChannelAdminLogEvent_], "Vector<ChannelAdminLogEvent>"],
            ["chats", [_Chat_], "Vector<Chat>"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            [this.events, [_ChannelAdminLogEvent_], "Vector<ChannelAdminLogEvent>"],
            [this.chats, [_Chat_], "Vector<Chat>"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** Admin log events */
        Object.defineProperty(this, "events", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Chats mentioned in events */
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Users mentioned in events */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.events = params.events;
        this.chats = params.chats;
        this.users = params.users;
    }
}
/** Filter only certain admin log events */
export class ChannelAdminLogEventsFilter_ extends _ChannelAdminLogEventsFilter_ {
    get [id]() {
        return 0xEA107AE4;
    }
    static get [name]() {
        return "channelAdminLogEventsFilter";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["join", "true", "flags.0?true"],
            ["leave", "true", "flags.1?true"],
            ["invite", "true", "flags.2?true"],
            ["ban", "true", "flags.3?true"],
            ["unban", "true", "flags.4?true"],
            ["kick", "true", "flags.5?true"],
            ["unkick", "true", "flags.6?true"],
            ["promote", "true", "flags.7?true"],
            ["demote", "true", "flags.8?true"],
            ["info", "true", "flags.9?true"],
            ["settings", "true", "flags.10?true"],
            ["pinned", "true", "flags.11?true"],
            ["edit", "true", "flags.12?true"],
            ["delete", "true", "flags.13?true"],
            ["group_call", "true", "flags.14?true"],
            ["invites", "true", "flags.15?true"],
            ["send", "true", "flags.16?true"],
            ["forums", "true", "flags.17?true"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.join ?? null, "true", "flags.0?true"],
            [this.leave ?? null, "true", "flags.1?true"],
            [this.invite ?? null, "true", "flags.2?true"],
            [this.ban ?? null, "true", "flags.3?true"],
            [this.unban ?? null, "true", "flags.4?true"],
            [this.kick ?? null, "true", "flags.5?true"],
            [this.unkick ?? null, "true", "flags.6?true"],
            [this.promote ?? null, "true", "flags.7?true"],
            [this.demote ?? null, "true", "flags.8?true"],
            [this.info ?? null, "true", "flags.9?true"],
            [this.settings ?? null, "true", "flags.10?true"],
            [this.pinned ?? null, "true", "flags.11?true"],
            [this.edit ?? null, "true", "flags.12?true"],
            [this.delete ?? null, "true", "flags.13?true"],
            [this.group_call ?? null, "true", "flags.14?true"],
            [this.invites ?? null, "true", "flags.15?true"],
            [this.send ?? null, "true", "flags.16?true"],
            [this.forums ?? null, "true", "flags.17?true"],
        ];
    }
    constructor(params) {
        super();
        /** [Join events](https://core.telegram.org/constructor/channelAdminLogEventActionParticipantJoin), including [joins using invite links](https://core.telegram.org/constructor/channelAdminLogEventActionParticipantJoinByInvite) and [join requests](https://core.telegram.org/constructor/channelAdminLogEventActionParticipantJoinByRequest). */
        Object.defineProperty(this, "join", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Leave events](https://core.telegram.org/constructor/channelAdminLogEventActionParticipantLeave) */
        Object.defineProperty(this, "leave", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Invite events](https://core.telegram.org/constructor/channelAdminLogEventActionParticipantInvite) */
        Object.defineProperty(this, "invite", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Ban events](https://core.telegram.org/constructor/channelAdminLogEventActionParticipantToggleBan) */
        Object.defineProperty(this, "ban", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Unban events](https://core.telegram.org/constructor/channelAdminLogEventActionParticipantToggleBan) */
        Object.defineProperty(this, "unban", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Kick events](https://core.telegram.org/constructor/channelAdminLogEventActionParticipantToggleBan) */
        Object.defineProperty(this, "kick", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Unkick events](https://core.telegram.org/constructor/channelAdminLogEventActionParticipantToggleBan) */
        Object.defineProperty(this, "unkick", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Admin promotion events](https://core.telegram.org/constructor/channelAdminLogEventActionParticipantToggleAdmin) */
        Object.defineProperty(this, "promote", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Admin demotion events](https://core.telegram.org/constructor/channelAdminLogEventActionParticipantToggleAdmin) */
        Object.defineProperty(this, "demote", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Info change events (when [about](https://core.telegram.org/constructor/channelAdminLogEventActionChangeAbout), [linked chat](https://core.telegram.org/constructor/channelAdminLogEventActionChangeLinkedChat), [location](https://core.telegram.org/constructor/channelAdminLogEventActionChangeLocation), [photo](https://core.telegram.org/constructor/channelAdminLogEventActionChangePhoto), [stickerset](https://core.telegram.org/constructor/channelAdminLogEventActionChangeStickerSet), [title](https://core.telegram.org/constructor/channelAdminLogEventActionChangeTitle) or [username](https://core.telegram.org/constructor/channelAdminLogEventActionChangeUsername), [slowmode](https://core.telegram.org/constructor/channelAdminLogEventActionToggleSlowMode), [history TTL](https://core.telegram.org/constructor/channelAdminLogEventActionChangeHistoryTTL) settings of a channel gets modified) */
        Object.defineProperty(this, "info", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Settings change events ([invites](https://core.telegram.org/constructor/channelAdminLogEventActionToggleInvites), [hidden prehistory](https://core.telegram.org/constructor/channelAdminLogEventActionTogglePreHistoryHidden), [signatures](https://core.telegram.org/constructor/channelAdminLogEventActionToggleSignatures), [default banned rights](https://core.telegram.org/constructor/channelAdminLogEventActionDefaultBannedRights), [forum toggle events](https://core.telegram.org/constructor/channelAdminLogEventActionToggleForum)) */
        Object.defineProperty(this, "settings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Message pin events](https://core.telegram.org/constructor/channelAdminLogEventActionUpdatePinned) */
        Object.defineProperty(this, "pinned", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Message edit events](https://core.telegram.org/constructor/channelAdminLogEventActionEditMessage) */
        Object.defineProperty(this, "edit", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Message deletion events](https://core.telegram.org/constructor/channelAdminLogEventActionDeleteMessage) */
        Object.defineProperty(this, "delete", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Group call events */
        Object.defineProperty(this, "group_call", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Invite events */
        Object.defineProperty(this, "invites", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** A message was posted in a channel */
        Object.defineProperty(this, "send", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Forum](https://core.telegram.org/api/forum)\-related events */
        Object.defineProperty(this, "forums", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.join = params?.join;
        this.leave = params?.leave;
        this.invite = params?.invite;
        this.ban = params?.ban;
        this.unban = params?.unban;
        this.kick = params?.kick;
        this.unkick = params?.unkick;
        this.promote = params?.promote;
        this.demote = params?.demote;
        this.info = params?.info;
        this.settings = params?.settings;
        this.pinned = params?.pinned;
        this.edit = params?.edit;
        this.delete = params?.delete;
        this.group_call = params?.group_call;
        this.invites = params?.invites;
        this.send = params?.send;
        this.forums = params?.forums;
    }
}
/** Popular contact */
export class PopularContact_ extends _PopularContact_ {
    get [id]() {
        return 0x5CE14175;
    }
    static get [name]() {
        return "popularContact";
    }
    static get [paramDesc]() {
        return [
            ["client_id", "bigint", "long"],
            ["importers", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.client_id, "bigint", "long"],
            [this.importers, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Contact identifier */
        Object.defineProperty(this, "client_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** How many people imported this contact */
        Object.defineProperty(this, "importers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.client_id = params.client_id;
        this.importers = params.importers;
    }
}
/** No new favorited stickers were found */
export class messages_FavedStickersNotModified_ extends _messages_FavedStickers_ {
    get [id]() {
        return 0x9E8FA6D3;
    }
    static get [name]() {
        return "messages.favedStickersNotModified";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Favorited stickers */
export class messages_FavedStickers_ extends _messages_FavedStickers_ {
    get [id]() {
        return 0x2CB51097;
    }
    static get [name]() {
        return "messages.favedStickers";
    }
    static get [paramDesc]() {
        return [
            ["hash", "bigint", "long"],
            ["packs", [_StickerPack_], "Vector<StickerPack>"],
            ["stickers", [_Document_], "Vector<Document>"],
        ];
    }
    get [params]() {
        return [
            [this.hash, "bigint", "long"],
            [this.packs, [_StickerPack_], "Vector<StickerPack>"],
            [this.stickers, [_Document_], "Vector<Document>"],
        ];
    }
    constructor(params) {
        super();
        /** [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation) */
        Object.defineProperty(this, "hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Emojis associated to stickers */
        Object.defineProperty(this, "packs", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Favorited stickers */
        Object.defineProperty(this, "stickers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.hash = params.hash;
        this.packs = params.packs;
        this.stickers = params.stickers;
    }
}
/** Unknown t.me url */
export class RecentMeUrlUnknown_ extends _RecentMeUrl_ {
    get [id]() {
        return 0x46E1D13D;
    }
    static get [name]() {
        return "recentMeUrlUnknown";
    }
    static get [paramDesc]() {
        return [
            ["url", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.url, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** URL */
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.url = params.url;
    }
}
/** Recent t.me link to a user */
export class RecentMeUrlUser_ extends _RecentMeUrl_ {
    get [id]() {
        return 0xB92C09E2;
    }
    static get [name]() {
        return "recentMeUrlUser";
    }
    static get [paramDesc]() {
        return [
            ["url", "string", "string"],
            ["user_id", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.url, "string", "string"],
            [this.user_id, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** URL */
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** User ID */
        Object.defineProperty(this, "user_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.url = params.url;
        this.user_id = params.user_id;
    }
}
/** Recent t.me link to a chat */
export class RecentMeUrlChat_ extends _RecentMeUrl_ {
    get [id]() {
        return 0xB2DA71D2;
    }
    static get [name]() {
        return "recentMeUrlChat";
    }
    static get [paramDesc]() {
        return [
            ["url", "string", "string"],
            ["chat_id", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.url, "string", "string"],
            [this.chat_id, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** t.me URL */
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Chat ID */
        Object.defineProperty(this, "chat_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.url = params.url;
        this.chat_id = params.chat_id;
    }
}
/** Recent t.me invite link to a chat */
export class RecentMeUrlChatInvite_ extends _RecentMeUrl_ {
    get [id]() {
        return 0xEB49081D;
    }
    static get [name]() {
        return "recentMeUrlChatInvite";
    }
    static get [paramDesc]() {
        return [
            ["url", "string", "string"],
            ["chat_invite", _ChatInvite_, "ChatInvite"],
        ];
    }
    get [params]() {
        return [
            [this.url, "string", "string"],
            [this.chat_invite, _ChatInvite_, "ChatInvite"],
        ];
    }
    constructor(params) {
        super();
        /** t.me URL */
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Chat invitation */
        Object.defineProperty(this, "chat_invite", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.url = params.url;
        this.chat_invite = params.chat_invite;
    }
}
/** Recent t.me stickerset installation URL */
export class RecentMeUrlStickerSet_ extends _RecentMeUrl_ {
    get [id]() {
        return 0xBC0A57DC;
    }
    static get [name]() {
        return "recentMeUrlStickerSet";
    }
    static get [paramDesc]() {
        return [
            ["url", "string", "string"],
            ["set", _StickerSetCovered_, "StickerSetCovered"],
        ];
    }
    get [params]() {
        return [
            [this.url, "string", "string"],
            [this.set, _StickerSetCovered_, "StickerSetCovered"],
        ];
    }
    constructor(params) {
        super();
        /** t.me URL */
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Stickerset */
        Object.defineProperty(this, "set", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.url = params.url;
        this.set = params.set;
    }
}
/** Recent t.me URLs */
export class help_RecentMeUrls_ extends _help_RecentMeUrls_ {
    get [id]() {
        return 0x0E0310D7;
    }
    static get [name]() {
        return "help.recentMeUrls";
    }
    static get [paramDesc]() {
        return [
            ["urls", [_RecentMeUrl_], "Vector<RecentMeUrl>"],
            ["chats", [_Chat_], "Vector<Chat>"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            [this.urls, [_RecentMeUrl_], "Vector<RecentMeUrl>"],
            [this.chats, [_Chat_], "Vector<Chat>"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** URLs */
        Object.defineProperty(this, "urls", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Chats */
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Users */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.urls = params.urls;
        this.chats = params.chats;
        this.users = params.users;
    }
}
/** A single media in an [album or grouped media](https://core.telegram.org/api/files#albums-grouped-media) sent with [messages.sendMultiMedia](https://core.telegram.org/method/messages.sendMultiMedia). */
export class InputSingleMedia_ extends _InputSingleMedia_ {
    get [id]() {
        return 0x1CC6E91F;
    }
    static get [name]() {
        return "inputSingleMedia";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["media", _InputMedia_, "InputMedia"],
            ["random_id", "bigint", "long"],
            ["message", "string", "string"],
            ["entities", [_MessageEntity_], "flags.0?Vector<MessageEntity>"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.media, _InputMedia_, "InputMedia"],
            [this.random_id, "bigint", "long"],
            [this.message, "string", "string"],
            [this.entities ?? null, [_MessageEntity_], "flags.0?Vector<MessageEntity>"],
        ];
    }
    constructor(params) {
        super();
        /** The media */
        Object.defineProperty(this, "media", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Unique client media ID required to prevent message resending */
        Object.defineProperty(this, "random_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** A caption for the media */
        Object.defineProperty(this, "message", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Message [entities](https://core.telegram.org/api/entities) for styled text */
        Object.defineProperty(this, "entities", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.media = params.media;
        this.random_id = params.random_id;
        this.message = params.message;
        this.entities = params.entities;
    }
}
/** Represents a bot logged in using the [Telegram login widget](https://core.telegram.org/widgets/login) */
export class WebAuthorization_ extends _WebAuthorization_ {
    get [id]() {
        return 0xA6F8F452;
    }
    static get [name]() {
        return "webAuthorization";
    }
    static get [paramDesc]() {
        return [
            ["hash", "bigint", "long"],
            ["bot_id", "bigint", "long"],
            ["domain", "string", "string"],
            ["browser", "string", "string"],
            ["platform", "string", "string"],
            ["date_created", "number", "int"],
            ["date_active", "number", "int"],
            ["ip", "string", "string"],
            ["region", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.hash, "bigint", "long"],
            [this.bot_id, "bigint", "long"],
            [this.domain, "string", "string"],
            [this.browser, "string", "string"],
            [this.platform, "string", "string"],
            [this.date_created, "number", "int"],
            [this.date_active, "number", "int"],
            [this.ip, "string", "string"],
            [this.region, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Authorization hash */
        Object.defineProperty(this, "hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Bot ID */
        Object.defineProperty(this, "bot_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The domain name of the website on which the user has logged in. */
        Object.defineProperty(this, "domain", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Browser user-agent */
        Object.defineProperty(this, "browser", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Platform */
        Object.defineProperty(this, "platform", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** When was the web session created */
        Object.defineProperty(this, "date_created", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** When was the web session last active */
        Object.defineProperty(this, "date_active", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** IP address */
        Object.defineProperty(this, "ip", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Region, determined from IP address */
        Object.defineProperty(this, "region", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.hash = params.hash;
        this.bot_id = params.bot_id;
        this.domain = params.domain;
        this.browser = params.browser;
        this.platform = params.platform;
        this.date_created = params.date_created;
        this.date_active = params.date_active;
        this.ip = params.ip;
        this.region = params.region;
    }
}
/** Web authorizations */
export class account_WebAuthorizations_ extends _account_WebAuthorizations_ {
    get [id]() {
        return 0xED56C9FC;
    }
    static get [name]() {
        return "account.webAuthorizations";
    }
    static get [paramDesc]() {
        return [
            ["authorizations", [_WebAuthorization_], "Vector<WebAuthorization>"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            [this.authorizations, [_WebAuthorization_], "Vector<WebAuthorization>"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** Web authorization list */
        Object.defineProperty(this, "authorizations", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Users */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.authorizations = params.authorizations;
        this.users = params.users;
    }
}
/** Message by ID */
export class InputMessageID_ extends _InputMessage_ {
    get [id]() {
        return 0xA676A322;
    }
    static get [name]() {
        return "inputMessageID";
    }
    static get [paramDesc]() {
        return [
            ["id", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.id, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Message ID */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
    }
}
/** Message to which the specified message replies to */
export class InputMessageReplyTo_ extends _InputMessage_ {
    get [id]() {
        return 0xBAD88395;
    }
    static get [name]() {
        return "inputMessageReplyTo";
    }
    static get [paramDesc]() {
        return [
            ["id", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.id, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** ID of the message that replies to the message we need */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
    }
}
/** Pinned message */
export class InputMessagePinned_ extends _InputMessage_ {
    get [id]() {
        return 0x86872538;
    }
    static get [name]() {
        return "inputMessagePinned";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Used by bots for fetching information about the message that originated a callback query */
export class InputMessageCallbackQuery_ extends _InputMessage_ {
    get [id]() {
        return 0xACFA1A7E;
    }
    static get [name]() {
        return "inputMessageCallbackQuery";
    }
    static get [paramDesc]() {
        return [
            ["id", "number", "int"],
            ["query_id", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.id, "number", "int"],
            [this.query_id, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** Message ID */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Callback query ID */
        Object.defineProperty(this, "query_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
        this.query_id = params.query_id;
    }
}
/** A peer */
export class InputDialogPeer_ extends _InputDialogPeer_ {
    get [id]() {
        return 0xFCAAFEB7;
    }
    static get [name]() {
        return "inputDialogPeer";
    }
    static get [paramDesc]() {
        return [
            ["peer", _InputPeer_, "InputPeer"],
        ];
    }
    get [params]() {
        return [
            [this.peer, _InputPeer_, "InputPeer"],
        ];
    }
    constructor(params) {
        super();
        /** Peer */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.peer = params.peer;
    }
}
/** All peers in a [peer folder](https://core.telegram.org/api/folders#peer-folders) */
export class InputDialogPeerFolder_ extends _InputDialogPeer_ {
    get [id]() {
        return 0x64600527;
    }
    static get [name]() {
        return "inputDialogPeerFolder";
    }
    static get [paramDesc]() {
        return [
            ["folder_id", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.folder_id, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** [Peer folder ID, for more info click here](https://core.telegram.org/api/folders#peer-folders) */
        Object.defineProperty(this, "folder_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.folder_id = params.folder_id;
    }
}
/** Peer */
export class DialogPeer_ extends _DialogPeer_ {
    get [id]() {
        return 0xE56DBF05;
    }
    static get [name]() {
        return "dialogPeer";
    }
    static get [paramDesc]() {
        return [
            ["peer", _Peer_, "Peer"],
        ];
    }
    get [params]() {
        return [
            [this.peer, _Peer_, "Peer"],
        ];
    }
    constructor(params) {
        super();
        /** Peer */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.peer = params.peer;
    }
}
/** [Peer folder](https://core.telegram.org/api/folders#peer-folders) */
export class DialogPeerFolder_ extends _DialogPeer_ {
    get [id]() {
        return 0x514519E2;
    }
    static get [name]() {
        return "dialogPeerFolder";
    }
    static get [paramDesc]() {
        return [
            ["folder_id", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.folder_id, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** [Peer folder ID, for more info click here](https://core.telegram.org/api/folders#peer-folders) */
        Object.defineProperty(this, "folder_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.folder_id = params.folder_id;
    }
}
/** No further results were found */
export class messages_FoundStickerSetsNotModified_ extends _messages_FoundStickerSets_ {
    get [id]() {
        return 0x0D54B65D;
    }
    static get [name]() {
        return "messages.foundStickerSetsNotModified";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Found stickersets */
export class messages_FoundStickerSets_ extends _messages_FoundStickerSets_ {
    get [id]() {
        return 0x8AF09DD2;
    }
    static get [name]() {
        return "messages.foundStickerSets";
    }
    static get [paramDesc]() {
        return [
            ["hash", "bigint", "long"],
            ["sets", [_StickerSetCovered_], "Vector<StickerSetCovered>"],
        ];
    }
    get [params]() {
        return [
            [this.hash, "bigint", "long"],
            [this.sets, [_StickerSetCovered_], "Vector<StickerSetCovered>"],
        ];
    }
    constructor(params) {
        super();
        /** [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation) */
        Object.defineProperty(this, "hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Found stickersets */
        Object.defineProperty(this, "sets", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.hash = params.hash;
        this.sets = params.sets;
    }
}
/** SHA256 Hash of an uploaded file, to be checked for validity after download */
export class FileHash_ extends _FileHash_ {
    get [id]() {
        return 0xF39B035C;
    }
    static get [name]() {
        return "fileHash";
    }
    static get [paramDesc]() {
        return [
            ["offset", "bigint", "long"],
            ["limit", "number", "int"],
            ["hash", Uint8Array, "bytes"],
        ];
    }
    get [params]() {
        return [
            [this.offset, "bigint", "long"],
            [this.limit, "number", "int"],
            [this.hash, Uint8Array, "bytes"],
        ];
    }
    constructor(params) {
        super();
        /** Offset from where to start computing SHA-256 hash */
        Object.defineProperty(this, "offset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Length */
        Object.defineProperty(this, "limit", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** SHA-256 Hash of file chunk, to be checked for validity after download */
        Object.defineProperty(this, "hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.offset = params.offset;
        this.limit = params.limit;
        this.hash = params.hash;
    }
}
/** Info about an [MTProxy](https://core.telegram.org/mtproto/mtproto-transports#transport-obfuscation) used to connect. */
export class InputClientProxy_ extends _InputClientProxy_ {
    get [id]() {
        return 0x75588B3F;
    }
    static get [name]() {
        return "inputClientProxy";
    }
    static get [paramDesc]() {
        return [
            ["address", "string", "string"],
            ["port", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.address, "string", "string"],
            [this.port, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Proxy address */
        Object.defineProperty(this, "address", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Proxy port */
        Object.defineProperty(this, "port", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.address = params.address;
        this.port = params.port;
    }
}
/** No changes were made to telegram's terms of service */
export class help_TermsOfServiceUpdateEmpty_ extends _help_TermsOfServiceUpdate_ {
    get [id]() {
        return 0xE3309F7F;
    }
    static get [name]() {
        return "help.termsOfServiceUpdateEmpty";
    }
    static get [paramDesc]() {
        return [
            ["expires", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.expires, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** New TOS updates will have to be queried using [help.getTermsOfServiceUpdate](https://core.telegram.org/method/help.getTermsOfServiceUpdate) in `expires` seconds */
        Object.defineProperty(this, "expires", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.expires = params.expires;
    }
}
/** Info about an update of telegram's terms of service. If the terms of service are declined, then the [account.deleteAccount](https://core.telegram.org/method/account.deleteAccount) method should be called with the reason "Decline ToS update" */
export class help_TermsOfServiceUpdate_ extends _help_TermsOfServiceUpdate_ {
    get [id]() {
        return 0x28ECF961;
    }
    static get [name]() {
        return "help.termsOfServiceUpdate";
    }
    static get [paramDesc]() {
        return [
            ["expires", "number", "int"],
            ["terms_of_service", _help_TermsOfService_, "help.TermsOfService"],
        ];
    }
    get [params]() {
        return [
            [this.expires, "number", "int"],
            [this.terms_of_service, _help_TermsOfService_, "help.TermsOfService"],
        ];
    }
    constructor(params) {
        super();
        /** New TOS updates will have to be queried using [help.getTermsOfServiceUpdate](https://core.telegram.org/method/help.getTermsOfServiceUpdate) in `expires` seconds */
        Object.defineProperty(this, "expires", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New terms of service */
        Object.defineProperty(this, "terms_of_service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.expires = params.expires;
        this.terms_of_service = params.terms_of_service;
    }
}
/** Uploaded secure file, for more info [see the passport docs »](https://core.telegram.org/passport/encryption#inputsecurefile) */
export class InputSecureFileUploaded_ extends _InputSecureFile_ {
    get [id]() {
        return 0x3334B0F0;
    }
    static get [name]() {
        return "inputSecureFileUploaded";
    }
    static get [paramDesc]() {
        return [
            ["id", "bigint", "long"],
            ["parts", "number", "int"],
            ["md5_checksum", "string", "string"],
            ["file_hash", Uint8Array, "bytes"],
            ["secret", Uint8Array, "bytes"],
        ];
    }
    get [params]() {
        return [
            [this.id, "bigint", "long"],
            [this.parts, "number", "int"],
            [this.md5_checksum, "string", "string"],
            [this.file_hash, Uint8Array, "bytes"],
            [this.secret, Uint8Array, "bytes"],
        ];
    }
    constructor(params) {
        super();
        /** Secure file ID */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Secure file part count */
        Object.defineProperty(this, "parts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** MD5 hash of encrypted uploaded file, to be checked server-side */
        Object.defineProperty(this, "md5_checksum", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** File hash */
        Object.defineProperty(this, "file_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Secret */
        Object.defineProperty(this, "secret", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
        this.parts = params.parts;
        this.md5_checksum = params.md5_checksum;
        this.file_hash = params.file_hash;
        this.secret = params.secret;
    }
}
/** Pre-uploaded [passport](https://core.telegram.org/passport) file, for more info [see the passport docs »](https://core.telegram.org/passport/encryption#inputsecurefile) */
export class InputSecureFile_ extends _InputSecureFile_ {
    get [id]() {
        return 0x5367E5BE;
    }
    static get [name]() {
        return "inputSecureFile";
    }
    static get [paramDesc]() {
        return [
            ["id", "bigint", "long"],
            ["access_hash", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.id, "bigint", "long"],
            [this.access_hash, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** Secure file ID */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Secure file access hash */
        Object.defineProperty(this, "access_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
        this.access_hash = params.access_hash;
    }
}
/** Empty constructor */
export class SecureFileEmpty_ extends _SecureFile_ {
    get [id]() {
        return 0x64199744;
    }
    static get [name]() {
        return "secureFileEmpty";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Secure [passport](https://core.telegram.org/passport) file, for more info [see the passport docs »](https://core.telegram.org/passport/encryption#inputsecurefile) */
export class SecureFile_ extends _SecureFile_ {
    get [id]() {
        return 0x7D09C27E;
    }
    static get [name]() {
        return "secureFile";
    }
    static get [paramDesc]() {
        return [
            ["id", "bigint", "long"],
            ["access_hash", "bigint", "long"],
            ["size", "bigint", "long"],
            ["dc_id", "number", "int"],
            ["date", "number", "int"],
            ["file_hash", Uint8Array, "bytes"],
            ["secret", Uint8Array, "bytes"],
        ];
    }
    get [params]() {
        return [
            [this.id, "bigint", "long"],
            [this.access_hash, "bigint", "long"],
            [this.size, "bigint", "long"],
            [this.dc_id, "number", "int"],
            [this.date, "number", "int"],
            [this.file_hash, Uint8Array, "bytes"],
            [this.secret, Uint8Array, "bytes"],
        ];
    }
    constructor(params) {
        super();
        /** ID */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Access hash */
        Object.defineProperty(this, "access_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** File size */
        Object.defineProperty(this, "size", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** DC ID */
        Object.defineProperty(this, "dc_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Date of upload */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** File hash */
        Object.defineProperty(this, "file_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Secret */
        Object.defineProperty(this, "secret", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
        this.access_hash = params.access_hash;
        this.size = params.size;
        this.dc_id = params.dc_id;
        this.date = params.date;
        this.file_hash = params.file_hash;
        this.secret = params.secret;
    }
}
/** Secure [passport](https://core.telegram.org/passport) data, for more info [see the passport docs »](https://core.telegram.org/passport/encryption#securedata) */
export class SecureData_ extends _SecureData_ {
    get [id]() {
        return 0x8AEABEC3;
    }
    static get [name]() {
        return "secureData";
    }
    static get [paramDesc]() {
        return [
            ["data", Uint8Array, "bytes"],
            ["data_hash", Uint8Array, "bytes"],
            ["secret", Uint8Array, "bytes"],
        ];
    }
    get [params]() {
        return [
            [this.data, Uint8Array, "bytes"],
            [this.data_hash, Uint8Array, "bytes"],
            [this.secret, Uint8Array, "bytes"],
        ];
    }
    constructor(params) {
        super();
        /** Data */
        Object.defineProperty(this, "data", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Data hash */
        Object.defineProperty(this, "data_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Secret */
        Object.defineProperty(this, "secret", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.data = params.data;
        this.data_hash = params.data_hash;
        this.secret = params.secret;
    }
}
/** Phone number to use in [telegram passport](https://core.telegram.org/passport): [it must be verified, first »](https://core.telegram.org/passport/encryption#secureplaindata). */
export class SecurePlainPhone_ extends _SecurePlainData_ {
    get [id]() {
        return 0x7D6099DD;
    }
    static get [name]() {
        return "securePlainPhone";
    }
    static get [paramDesc]() {
        return [
            ["phone", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.phone, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Phone number */
        Object.defineProperty(this, "phone", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.phone = params.phone;
    }
}
/** Email address to use in [telegram passport](https://core.telegram.org/passport): [it must be verified, first »](https://core.telegram.org/passport/encryption#secureplaindata). */
export class SecurePlainEmail_ extends _SecurePlainData_ {
    get [id]() {
        return 0x21EC5A5F;
    }
    static get [name]() {
        return "securePlainEmail";
    }
    static get [paramDesc]() {
        return [
            ["email", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.email, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Email address */
        Object.defineProperty(this, "email", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.email = params.email;
    }
}
/** Personal details */
export class SecureValueTypePersonalDetails_ extends _SecureValueType_ {
    get [id]() {
        return 0x9D2A81E3;
    }
    static get [name]() {
        return "secureValueTypePersonalDetails";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Passport */
export class SecureValueTypePassport_ extends _SecureValueType_ {
    get [id]() {
        return 0x3DAC6A00;
    }
    static get [name]() {
        return "secureValueTypePassport";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Driver's license */
export class SecureValueTypeDriverLicense_ extends _SecureValueType_ {
    get [id]() {
        return 0x06E425C4;
    }
    static get [name]() {
        return "secureValueTypeDriverLicense";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Identity card */
export class SecureValueTypeIdentityCard_ extends _SecureValueType_ {
    get [id]() {
        return 0xA0D0744B;
    }
    static get [name]() {
        return "secureValueTypeIdentityCard";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Internal [passport](https://core.telegram.org/passport) */
export class SecureValueTypeInternalPassport_ extends _SecureValueType_ {
    get [id]() {
        return 0x99A48F23;
    }
    static get [name]() {
        return "secureValueTypeInternalPassport";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Address */
export class SecureValueTypeAddress_ extends _SecureValueType_ {
    get [id]() {
        return 0xCBE31E26;
    }
    static get [name]() {
        return "secureValueTypeAddress";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Utility bill */
export class SecureValueTypeUtilityBill_ extends _SecureValueType_ {
    get [id]() {
        return 0xFC36954E;
    }
    static get [name]() {
        return "secureValueTypeUtilityBill";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Bank statement */
export class SecureValueTypeBankStatement_ extends _SecureValueType_ {
    get [id]() {
        return 0x89137C0D;
    }
    static get [name]() {
        return "secureValueTypeBankStatement";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Rental agreement */
export class SecureValueTypeRentalAgreement_ extends _SecureValueType_ {
    get [id]() {
        return 0x8B883488;
    }
    static get [name]() {
        return "secureValueTypeRentalAgreement";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Internal registration [passport](https://core.telegram.org/passport) */
export class SecureValueTypePassportRegistration_ extends _SecureValueType_ {
    get [id]() {
        return 0x99E3806A;
    }
    static get [name]() {
        return "secureValueTypePassportRegistration";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Temporary registration */
export class SecureValueTypeTemporaryRegistration_ extends _SecureValueType_ {
    get [id]() {
        return 0xEA02EC33;
    }
    static get [name]() {
        return "secureValueTypeTemporaryRegistration";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Phone */
export class SecureValueTypePhone_ extends _SecureValueType_ {
    get [id]() {
        return 0xB320AADB;
    }
    static get [name]() {
        return "secureValueTypePhone";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Email */
export class SecureValueTypeEmail_ extends _SecureValueType_ {
    get [id]() {
        return 0x8E3CA7EE;
    }
    static get [name]() {
        return "secureValueTypeEmail";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Secure value */
export class SecureValue_ extends _SecureValue_ {
    get [id]() {
        return 0x187FA0CA;
    }
    static get [name]() {
        return "secureValue";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["type", _SecureValueType_, "SecureValueType"],
            ["data", _SecureData_, "flags.0?SecureData"],
            ["front_side", _SecureFile_, "flags.1?SecureFile"],
            ["reverse_side", _SecureFile_, "flags.2?SecureFile"],
            ["selfie", _SecureFile_, "flags.3?SecureFile"],
            ["translation", [_SecureFile_], "flags.6?Vector<SecureFile>"],
            ["files", [_SecureFile_], "flags.4?Vector<SecureFile>"],
            ["plain_data", _SecurePlainData_, "flags.5?SecurePlainData"],
            ["hash", Uint8Array, "bytes"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.type, _SecureValueType_, "SecureValueType"],
            [this.data ?? null, _SecureData_, "flags.0?SecureData"],
            [this.front_side ?? null, _SecureFile_, "flags.1?SecureFile"],
            [this.reverse_side ?? null, _SecureFile_, "flags.2?SecureFile"],
            [this.selfie ?? null, _SecureFile_, "flags.3?SecureFile"],
            [this.translation ?? null, [_SecureFile_], "flags.6?Vector<SecureFile>"],
            [this.files ?? null, [_SecureFile_], "flags.4?Vector<SecureFile>"],
            [this.plain_data ?? null, _SecurePlainData_, "flags.5?SecurePlainData"],
            [this.hash, Uint8Array, "bytes"],
        ];
    }
    constructor(params) {
        super();
        /** Secure [passport](https://core.telegram.org/passport) value type */
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Encrypted [Telegram Passport](https://core.telegram.org/passport) element data */
        Object.defineProperty(this, "data", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Encrypted [passport](https://core.telegram.org/passport) file with the front side of the document */
        Object.defineProperty(this, "front_side", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Encrypted [passport](https://core.telegram.org/passport) file with the reverse side of the document */
        Object.defineProperty(this, "reverse_side", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Encrypted [passport](https://core.telegram.org/passport) file with a selfie of the user holding the document */
        Object.defineProperty(this, "selfie", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Array of encrypted [passport](https://core.telegram.org/passport) files with translated versions of the provided documents */
        Object.defineProperty(this, "translation", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Array of encrypted [passport](https://core.telegram.org/passport) files with photos the of the documents */
        Object.defineProperty(this, "files", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Plaintext verified [passport](https://core.telegram.org/passport) data */
        Object.defineProperty(this, "plain_data", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Data hash */
        Object.defineProperty(this, "hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.type = params.type;
        this.data = params.data;
        this.front_side = params.front_side;
        this.reverse_side = params.reverse_side;
        this.selfie = params.selfie;
        this.translation = params.translation;
        this.files = params.files;
        this.plain_data = params.plain_data;
        this.hash = params.hash;
    }
}
/** Secure value, [for more info see the passport docs »](https://core.telegram.org/passport/encryption#encryption) */
export class InputSecureValue_ extends _InputSecureValue_ {
    get [id]() {
        return 0xDB21D0A7;
    }
    static get [name]() {
        return "inputSecureValue";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["type", _SecureValueType_, "SecureValueType"],
            ["data", _SecureData_, "flags.0?SecureData"],
            ["front_side", _InputSecureFile_, "flags.1?InputSecureFile"],
            ["reverse_side", _InputSecureFile_, "flags.2?InputSecureFile"],
            ["selfie", _InputSecureFile_, "flags.3?InputSecureFile"],
            ["translation", [_InputSecureFile_], "flags.6?Vector<InputSecureFile>"],
            ["files", [_InputSecureFile_], "flags.4?Vector<InputSecureFile>"],
            ["plain_data", _SecurePlainData_, "flags.5?SecurePlainData"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.type, _SecureValueType_, "SecureValueType"],
            [this.data ?? null, _SecureData_, "flags.0?SecureData"],
            [this.front_side ?? null, _InputSecureFile_, "flags.1?InputSecureFile"],
            [this.reverse_side ?? null, _InputSecureFile_, "flags.2?InputSecureFile"],
            [this.selfie ?? null, _InputSecureFile_, "flags.3?InputSecureFile"],
            [this.translation ?? null, [_InputSecureFile_], "flags.6?Vector<InputSecureFile>"],
            [this.files ?? null, [_InputSecureFile_], "flags.4?Vector<InputSecureFile>"],
            [this.plain_data ?? null, _SecurePlainData_, "flags.5?SecurePlainData"],
        ];
    }
    constructor(params) {
        super();
        /** Secure [passport](https://core.telegram.org/passport) value type */
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Encrypted [Telegram Passport](https://core.telegram.org/passport) element data */
        Object.defineProperty(this, "data", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Encrypted [passport](https://core.telegram.org/passport) file with the front side of the document */
        Object.defineProperty(this, "front_side", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Encrypted [passport](https://core.telegram.org/passport) file with the reverse side of the document */
        Object.defineProperty(this, "reverse_side", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Encrypted [passport](https://core.telegram.org/passport) file with a selfie of the user holding the document */
        Object.defineProperty(this, "selfie", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Array of encrypted [passport](https://core.telegram.org/passport) files with translated versions of the provided documents */
        Object.defineProperty(this, "translation", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Array of encrypted [passport](https://core.telegram.org/passport) files with photos the of the documents */
        Object.defineProperty(this, "files", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Plaintext verified [passport](https://core.telegram.org/passport) data */
        Object.defineProperty(this, "plain_data", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.type = params.type;
        this.data = params.data;
        this.front_side = params.front_side;
        this.reverse_side = params.reverse_side;
        this.selfie = params.selfie;
        this.translation = params.translation;
        this.files = params.files;
        this.plain_data = params.plain_data;
    }
}
/** Secure value hash */
export class SecureValueHash_ extends _SecureValueHash_ {
    get [id]() {
        return 0xED1ECDB0;
    }
    static get [name]() {
        return "secureValueHash";
    }
    static get [paramDesc]() {
        return [
            ["type", _SecureValueType_, "SecureValueType"],
            ["hash", Uint8Array, "bytes"],
        ];
    }
    get [params]() {
        return [
            [this.type, _SecureValueType_, "SecureValueType"],
            [this.hash, Uint8Array, "bytes"],
        ];
    }
    constructor(params) {
        super();
        /** Secure value type */
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Hash */
        Object.defineProperty(this, "hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.type = params.type;
        this.hash = params.hash;
    }
}
/** Represents an issue in one of the data fields that was provided by the user. The error is considered resolved when the field's value changes. */
export class SecureValueErrorData_ extends _SecureValueError_ {
    get [id]() {
        return 0xE8A40BD9;
    }
    static get [name]() {
        return "secureValueErrorData";
    }
    static get [paramDesc]() {
        return [
            ["type", _SecureValueType_, "SecureValueType"],
            ["data_hash", Uint8Array, "bytes"],
            ["field", "string", "string"],
            ["text", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.type, _SecureValueType_, "SecureValueType"],
            [this.data_hash, Uint8Array, "bytes"],
            [this.field, "string", "string"],
            [this.text, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** The section of the user's Telegram Passport which has the error, one of [secureValueTypePersonalDetails](https://core.telegram.org/constructor/secureValueTypePersonalDetails), [secureValueTypePassport](https://core.telegram.org/constructor/secureValueTypePassport), [secureValueTypeDriverLicense](https://core.telegram.org/constructor/secureValueTypeDriverLicense), [secureValueTypeIdentityCard](https://core.telegram.org/constructor/secureValueTypeIdentityCard), [secureValueTypeInternalPassport](https://core.telegram.org/constructor/secureValueTypeInternalPassport), [secureValueTypeAddress](https://core.telegram.org/constructor/secureValueTypeAddress) */
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Data hash */
        Object.defineProperty(this, "data_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Name of the data field which has the error */
        Object.defineProperty(this, "field", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Error message */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.type = params.type;
        this.data_hash = params.data_hash;
        this.field = params.field;
        this.text = params.text;
    }
}
/** Represents an issue with the front side of a document. The error is considered resolved when the file with the front side of the document changes. */
export class SecureValueErrorFrontSide_ extends _SecureValueError_ {
    get [id]() {
        return 0x00BE3DFA;
    }
    static get [name]() {
        return "secureValueErrorFrontSide";
    }
    static get [paramDesc]() {
        return [
            ["type", _SecureValueType_, "SecureValueType"],
            ["file_hash", Uint8Array, "bytes"],
            ["text", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.type, _SecureValueType_, "SecureValueType"],
            [this.file_hash, Uint8Array, "bytes"],
            [this.text, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** One of [secureValueTypePassport](https://core.telegram.org/constructor/secureValueTypePassport), [secureValueTypeDriverLicense](https://core.telegram.org/constructor/secureValueTypeDriverLicense), [secureValueTypeIdentityCard](https://core.telegram.org/constructor/secureValueTypeIdentityCard), [secureValueTypeInternalPassport](https://core.telegram.org/constructor/secureValueTypeInternalPassport) */
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** File hash */
        Object.defineProperty(this, "file_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Error message */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.type = params.type;
        this.file_hash = params.file_hash;
        this.text = params.text;
    }
}
/** Represents an issue with the reverse side of a document. The error is considered resolved when the file with reverse side of the document changes. */
export class SecureValueErrorReverseSide_ extends _SecureValueError_ {
    get [id]() {
        return 0x868A2AA5;
    }
    static get [name]() {
        return "secureValueErrorReverseSide";
    }
    static get [paramDesc]() {
        return [
            ["type", _SecureValueType_, "SecureValueType"],
            ["file_hash", Uint8Array, "bytes"],
            ["text", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.type, _SecureValueType_, "SecureValueType"],
            [this.file_hash, Uint8Array, "bytes"],
            [this.text, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** One of [secureValueTypeDriverLicense](https://core.telegram.org/constructor/secureValueTypeDriverLicense), [secureValueTypeIdentityCard](https://core.telegram.org/constructor/secureValueTypeIdentityCard) */
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** File hash */
        Object.defineProperty(this, "file_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Error message */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.type = params.type;
        this.file_hash = params.file_hash;
        this.text = params.text;
    }
}
/** Represents an issue with the selfie with a document. The error is considered resolved when the file with the selfie changes. */
export class SecureValueErrorSelfie_ extends _SecureValueError_ {
    get [id]() {
        return 0xE537CED6;
    }
    static get [name]() {
        return "secureValueErrorSelfie";
    }
    static get [paramDesc]() {
        return [
            ["type", _SecureValueType_, "SecureValueType"],
            ["file_hash", Uint8Array, "bytes"],
            ["text", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.type, _SecureValueType_, "SecureValueType"],
            [this.file_hash, Uint8Array, "bytes"],
            [this.text, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** One of [secureValueTypePassport](https://core.telegram.org/constructor/secureValueTypePassport), [secureValueTypeDriverLicense](https://core.telegram.org/constructor/secureValueTypeDriverLicense), [secureValueTypeIdentityCard](https://core.telegram.org/constructor/secureValueTypeIdentityCard), [secureValueTypeInternalPassport](https://core.telegram.org/constructor/secureValueTypeInternalPassport) */
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** File hash */
        Object.defineProperty(this, "file_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Error message */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.type = params.type;
        this.file_hash = params.file_hash;
        this.text = params.text;
    }
}
/** Represents an issue with a document scan. The error is considered resolved when the file with the document scan changes. */
export class SecureValueErrorFile_ extends _SecureValueError_ {
    get [id]() {
        return 0x7A700873;
    }
    static get [name]() {
        return "secureValueErrorFile";
    }
    static get [paramDesc]() {
        return [
            ["type", _SecureValueType_, "SecureValueType"],
            ["file_hash", Uint8Array, "bytes"],
            ["text", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.type, _SecureValueType_, "SecureValueType"],
            [this.file_hash, Uint8Array, "bytes"],
            [this.text, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** One of [secureValueTypeUtilityBill](https://core.telegram.org/constructor/secureValueTypeUtilityBill), [secureValueTypeBankStatement](https://core.telegram.org/constructor/secureValueTypeBankStatement), [secureValueTypeRentalAgreement](https://core.telegram.org/constructor/secureValueTypeRentalAgreement), [secureValueTypePassportRegistration](https://core.telegram.org/constructor/secureValueTypePassportRegistration), [secureValueTypeTemporaryRegistration](https://core.telegram.org/constructor/secureValueTypeTemporaryRegistration) */
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** File hash */
        Object.defineProperty(this, "file_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Error message */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.type = params.type;
        this.file_hash = params.file_hash;
        this.text = params.text;
    }
}
/** Represents an issue with a list of scans. The error is considered resolved when the list of files containing the scans changes. */
export class SecureValueErrorFiles_ extends _SecureValueError_ {
    get [id]() {
        return 0x666220E9;
    }
    static get [name]() {
        return "secureValueErrorFiles";
    }
    static get [paramDesc]() {
        return [
            ["type", _SecureValueType_, "SecureValueType"],
            ["file_hash", [Uint8Array], "Vector<bytes>"],
            ["text", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.type, _SecureValueType_, "SecureValueType"],
            [this.file_hash, [Uint8Array], "Vector<bytes>"],
            [this.text, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** One of [secureValueTypeUtilityBill](https://core.telegram.org/constructor/secureValueTypeUtilityBill), [secureValueTypeBankStatement](https://core.telegram.org/constructor/secureValueTypeBankStatement), [secureValueTypeRentalAgreement](https://core.telegram.org/constructor/secureValueTypeRentalAgreement), [secureValueTypePassportRegistration](https://core.telegram.org/constructor/secureValueTypePassportRegistration), [secureValueTypeTemporaryRegistration](https://core.telegram.org/constructor/secureValueTypeTemporaryRegistration) */
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** File hash */
        Object.defineProperty(this, "file_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Error message */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.type = params.type;
        this.file_hash = params.file_hash;
        this.text = params.text;
    }
}
/** Secure value error */
export class SecureValueError_ extends _SecureValueError_ {
    get [id]() {
        return 0x869D758F;
    }
    static get [name]() {
        return "secureValueError";
    }
    static get [paramDesc]() {
        return [
            ["type", _SecureValueType_, "SecureValueType"],
            ["hash", Uint8Array, "bytes"],
            ["text", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.type, _SecureValueType_, "SecureValueType"],
            [this.hash, Uint8Array, "bytes"],
            [this.text, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Type of element which has the issue */
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Hash */
        Object.defineProperty(this, "hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Error message */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.type = params.type;
        this.hash = params.hash;
        this.text = params.text;
    }
}
/** Represents an issue with one of the files that constitute the translation of a document. The error is considered resolved when the file changes. */
export class SecureValueErrorTranslationFile_ extends _SecureValueError_ {
    get [id]() {
        return 0xA1144770;
    }
    static get [name]() {
        return "secureValueErrorTranslationFile";
    }
    static get [paramDesc]() {
        return [
            ["type", _SecureValueType_, "SecureValueType"],
            ["file_hash", Uint8Array, "bytes"],
            ["text", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.type, _SecureValueType_, "SecureValueType"],
            [this.file_hash, Uint8Array, "bytes"],
            [this.text, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** One of [secureValueTypePersonalDetails](https://core.telegram.org/constructor/secureValueTypePersonalDetails), [secureValueTypePassport](https://core.telegram.org/constructor/secureValueTypePassport), [secureValueTypeDriverLicense](https://core.telegram.org/constructor/secureValueTypeDriverLicense), [secureValueTypeIdentityCard](https://core.telegram.org/constructor/secureValueTypeIdentityCard), [secureValueTypeInternalPassport](https://core.telegram.org/constructor/secureValueTypeInternalPassport), [secureValueTypeUtilityBill](https://core.telegram.org/constructor/secureValueTypeUtilityBill), [secureValueTypeBankStatement](https://core.telegram.org/constructor/secureValueTypeBankStatement), [secureValueTypeRentalAgreement](https://core.telegram.org/constructor/secureValueTypeRentalAgreement), [secureValueTypePassportRegistration](https://core.telegram.org/constructor/secureValueTypePassportRegistration), [secureValueTypeTemporaryRegistration](https://core.telegram.org/constructor/secureValueTypeTemporaryRegistration) */
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** File hash */
        Object.defineProperty(this, "file_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Error message */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.type = params.type;
        this.file_hash = params.file_hash;
        this.text = params.text;
    }
}
/** Represents an issue with the translated version of a document. The error is considered resolved when a file with the document translation changes. */
export class SecureValueErrorTranslationFiles_ extends _SecureValueError_ {
    get [id]() {
        return 0x34636DD8;
    }
    static get [name]() {
        return "secureValueErrorTranslationFiles";
    }
    static get [paramDesc]() {
        return [
            ["type", _SecureValueType_, "SecureValueType"],
            ["file_hash", [Uint8Array], "Vector<bytes>"],
            ["text", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.type, _SecureValueType_, "SecureValueType"],
            [this.file_hash, [Uint8Array], "Vector<bytes>"],
            [this.text, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** One of [secureValueTypePersonalDetails](https://core.telegram.org/constructor/secureValueTypePersonalDetails), [secureValueTypePassport](https://core.telegram.org/constructor/secureValueTypePassport), [secureValueTypeDriverLicense](https://core.telegram.org/constructor/secureValueTypeDriverLicense), [secureValueTypeIdentityCard](https://core.telegram.org/constructor/secureValueTypeIdentityCard), [secureValueTypeInternalPassport](https://core.telegram.org/constructor/secureValueTypeInternalPassport), [secureValueTypeUtilityBill](https://core.telegram.org/constructor/secureValueTypeUtilityBill), [secureValueTypeBankStatement](https://core.telegram.org/constructor/secureValueTypeBankStatement), [secureValueTypeRentalAgreement](https://core.telegram.org/constructor/secureValueTypeRentalAgreement), [secureValueTypePassportRegistration](https://core.telegram.org/constructor/secureValueTypePassportRegistration), [secureValueTypeTemporaryRegistration](https://core.telegram.org/constructor/secureValueTypeTemporaryRegistration) */
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Hash */
        Object.defineProperty(this, "file_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Error message */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.type = params.type;
        this.file_hash = params.file_hash;
        this.text = params.text;
    }
}
/** Encrypted credentials required to decrypt [telegram passport](https://core.telegram.org/passport) data. */
export class SecureCredentialsEncrypted_ extends _SecureCredentialsEncrypted_ {
    get [id]() {
        return 0x33F0EA47;
    }
    static get [name]() {
        return "secureCredentialsEncrypted";
    }
    static get [paramDesc]() {
        return [
            ["data", Uint8Array, "bytes"],
            ["hash", Uint8Array, "bytes"],
            ["secret", Uint8Array, "bytes"],
        ];
    }
    get [params]() {
        return [
            [this.data, Uint8Array, "bytes"],
            [this.hash, Uint8Array, "bytes"],
            [this.secret, Uint8Array, "bytes"],
        ];
    }
    constructor(params) {
        super();
        /** Encrypted JSON-serialized data with unique user's payload, data hashes and secrets required for EncryptedPassportElement decryption and authentication, as described in [decrypting data »](https://core.telegram.org/passport#decrypting-data) */
        Object.defineProperty(this, "data", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Data hash for data authentication as described in [decrypting data »](https://core.telegram.org/passport#decrypting-data) */
        Object.defineProperty(this, "hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Secret, encrypted with the bot's public RSA key, required for data decryption as described in [decrypting data »](https://core.telegram.org/passport#decrypting-data) */
        Object.defineProperty(this, "secret", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.data = params.data;
        this.hash = params.hash;
        this.secret = params.secret;
    }
}
/** [Telegram Passport](https://core.telegram.org/passport) authorization form */
export class account_AuthorizationForm_ extends _account_AuthorizationForm_ {
    get [id]() {
        return 0xAD2E1CD8;
    }
    static get [name]() {
        return "account.authorizationForm";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["required_types", [_SecureRequiredType_], "Vector<SecureRequiredType>"],
            ["values", [_SecureValue_], "Vector<SecureValue>"],
            ["errors", [_SecureValueError_], "Vector<SecureValueError>"],
            ["users", [_User_], "Vector<User>"],
            ["privacy_policy_url", "string", "flags.0?string"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.required_types, [_SecureRequiredType_], "Vector<SecureRequiredType>"],
            [this.values, [_SecureValue_], "Vector<SecureValue>"],
            [this.errors, [_SecureValueError_], "Vector<SecureValueError>"],
            [this.users, [_User_], "Vector<User>"],
            [this.privacy_policy_url ?? null, "string", "flags.0?string"],
        ];
    }
    constructor(params) {
        super();
        /** Required [Telegram Passport](https://core.telegram.org/passport) documents */
        Object.defineProperty(this, "required_types", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Already submitted [Telegram Passport](https://core.telegram.org/passport) documents */
        Object.defineProperty(this, "values", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Telegram Passport](https://core.telegram.org/passport) errors */
        Object.defineProperty(this, "errors", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Info about the bot to which the form will be submitted */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** URL of the service's privacy policy */
        Object.defineProperty(this, "privacy_policy_url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.required_types = params.required_types;
        this.values = params.values;
        this.errors = params.errors;
        this.users = params.users;
        this.privacy_policy_url = params.privacy_policy_url;
    }
}
/** The sent email code */
export class account_SentEmailCode_ extends _account_SentEmailCode_ {
    get [id]() {
        return 0x811F854F;
    }
    static get [name]() {
        return "account.sentEmailCode";
    }
    static get [paramDesc]() {
        return [
            ["email_pattern", "string", "string"],
            ["length", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.email_pattern, "string", "string"],
            [this.length, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** The email (to which the code was sent) must match this [pattern](https://core.telegram.org/api/pattern) */
        Object.defineProperty(this, "email_pattern", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The length of the verification code */
        Object.defineProperty(this, "length", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.email_pattern = params.email_pattern;
        this.length = params.length;
    }
}
/** Deep link info empty */
export class help_DeepLinkInfoEmpty_ extends _help_DeepLinkInfo_ {
    get [id]() {
        return 0x66AFA166;
    }
    static get [name]() {
        return "help.deepLinkInfoEmpty";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Deep link info, see [the here for more details](https://core.telegram.org/api/links#unsupported-links) */
export class help_DeepLinkInfo_ extends _help_DeepLinkInfo_ {
    get [id]() {
        return 0x6A4EE832;
    }
    static get [name]() {
        return "help.deepLinkInfo";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["update_app", "true", "flags.0?true"],
            ["message", "string", "string"],
            ["entities", [_MessageEntity_], "flags.1?Vector<MessageEntity>"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.update_app ?? null, "true", "flags.0?true"],
            [this.message, "string", "string"],
            [this.entities ?? null, [_MessageEntity_], "flags.1?Vector<MessageEntity>"],
        ];
    }
    constructor(params) {
        super();
        /** An update of the app is required to parse this link */
        Object.defineProperty(this, "update_app", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Message to show to the user */
        Object.defineProperty(this, "message", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Message entities for styled text](https://core.telegram.org/api/entities) */
        Object.defineProperty(this, "entities", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.update_app = params.update_app;
        this.message = params.message;
        this.entities = params.entities;
    }
}
/** Saved contact */
export class SavedPhoneContact_ extends _SavedContact_ {
    get [id]() {
        return 0x1142BD56;
    }
    static get [name]() {
        return "savedPhoneContact";
    }
    static get [paramDesc]() {
        return [
            ["phone", "string", "string"],
            ["first_name", "string", "string"],
            ["last_name", "string", "string"],
            ["date", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.phone, "string", "string"],
            [this.first_name, "string", "string"],
            [this.last_name, "string", "string"],
            [this.date, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Phone number */
        Object.defineProperty(this, "phone", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** First name */
        Object.defineProperty(this, "first_name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Last name */
        Object.defineProperty(this, "last_name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Date added */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.phone = params.phone;
        this.first_name = params.first_name;
        this.last_name = params.last_name;
        this.date = params.date;
    }
}
/** Takeout info */
export class account_Takeout_ extends _account_Takeout_ {
    get [id]() {
        return 0x4DBA4501;
    }
    static get [name]() {
        return "account.takeout";
    }
    static get [paramDesc]() {
        return [
            ["id", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.id, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** Takeout ID */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
    }
}
/** Unknown KDF (most likely, the client is outdated and does not support the specified KDF algorithm) */
export class PasswordKdfAlgoUnknown_ extends _PasswordKdfAlgo_ {
    get [id]() {
        return 0xD45AB096;
    }
    static get [name]() {
        return "passwordKdfAlgoUnknown";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** This key derivation algorithm defines that [SRP 2FA login](https://core.telegram.org/api/srp) must be used */
export class PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow_ extends _PasswordKdfAlgo_ {
    get [id]() {
        return 0x3A912D4A;
    }
    static get [name]() {
        return "passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow";
    }
    static get [paramDesc]() {
        return [
            ["salt1", Uint8Array, "bytes"],
            ["salt2", Uint8Array, "bytes"],
            ["g", "number", "int"],
            ["p", Uint8Array, "bytes"],
        ];
    }
    get [params]() {
        return [
            [this.salt1, Uint8Array, "bytes"],
            [this.salt2, Uint8Array, "bytes"],
            [this.g, "number", "int"],
            [this.p, Uint8Array, "bytes"],
        ];
    }
    constructor(params) {
        super();
        /** One of two salts used by the derivation function (see [SRP 2FA login](https://core.telegram.org/api/srp)) */
        Object.defineProperty(this, "salt1", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** One of two salts used by the derivation function (see [SRP 2FA login](https://core.telegram.org/api/srp)) */
        Object.defineProperty(this, "salt2", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Base (see [SRP 2FA login](https://core.telegram.org/api/srp)) */
        Object.defineProperty(this, "g", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** 2048-bit modulus (see [SRP 2FA login](https://core.telegram.org/api/srp)) */
        Object.defineProperty(this, "p", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.salt1 = params.salt1;
        this.salt2 = params.salt2;
        this.g = params.g;
        this.p = params.p;
    }
}
/** Unknown KDF algo (most likely the client has to be updated) */
export class SecurePasswordKdfAlgoUnknown_ extends _SecurePasswordKdfAlgo_ {
    get [id]() {
        return 0x004A8537;
    }
    static get [name]() {
        return "securePasswordKdfAlgoUnknown";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** PBKDF2 with SHA512 and 100000 iterations KDF algo */
export class SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000_ extends _SecurePasswordKdfAlgo_ {
    get [id]() {
        return 0xBBF2DDA0;
    }
    static get [name]() {
        return "securePasswordKdfAlgoPBKDF2HMACSHA512iter100000";
    }
    static get [paramDesc]() {
        return [
            ["salt", Uint8Array, "bytes"],
        ];
    }
    get [params]() {
        return [
            [this.salt, Uint8Array, "bytes"],
        ];
    }
    constructor(params) {
        super();
        /** Salt */
        Object.defineProperty(this, "salt", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.salt = params.salt;
    }
}
/** SHA512 KDF algo */
export class SecurePasswordKdfAlgoSHA512_ extends _SecurePasswordKdfAlgo_ {
    get [id]() {
        return 0x86471D92;
    }
    static get [name]() {
        return "securePasswordKdfAlgoSHA512";
    }
    static get [paramDesc]() {
        return [
            ["salt", Uint8Array, "bytes"],
        ];
    }
    get [params]() {
        return [
            [this.salt, Uint8Array, "bytes"],
        ];
    }
    constructor(params) {
        super();
        /** Salt */
        Object.defineProperty(this, "salt", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.salt = params.salt;
    }
}
/** Secure settings */
export class SecureSecretSettings_ extends _SecureSecretSettings_ {
    get [id]() {
        return 0x1527BCAC;
    }
    static get [name]() {
        return "secureSecretSettings";
    }
    static get [paramDesc]() {
        return [
            ["secure_algo", _SecurePasswordKdfAlgo_, "SecurePasswordKdfAlgo"],
            ["secure_secret", Uint8Array, "bytes"],
            ["secure_secret_id", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.secure_algo, _SecurePasswordKdfAlgo_, "SecurePasswordKdfAlgo"],
            [this.secure_secret, Uint8Array, "bytes"],
            [this.secure_secret_id, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** Secure KDF algo */
        Object.defineProperty(this, "secure_algo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Secure secret */
        Object.defineProperty(this, "secure_secret", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Secret ID */
        Object.defineProperty(this, "secure_secret_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.secure_algo = params.secure_algo;
        this.secure_secret = params.secure_secret;
        this.secure_secret_id = params.secure_secret_id;
    }
}
/** There is no password */
export class InputCheckPasswordEmpty_ extends _InputCheckPasswordSRP_ {
    get [id]() {
        return 0x9880F658;
    }
    static get [name]() {
        return "inputCheckPasswordEmpty";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Constructor for checking the validity of a 2FA SRP password (see [SRP](https://core.telegram.org/api/srp)) */
export class InputCheckPasswordSRP_ extends _InputCheckPasswordSRP_ {
    get [id]() {
        return 0xD27FF082;
    }
    static get [name]() {
        return "inputCheckPasswordSRP";
    }
    static get [paramDesc]() {
        return [
            ["srp_id", "bigint", "long"],
            ["A", Uint8Array, "bytes"],
            ["M1", Uint8Array, "bytes"],
        ];
    }
    get [params]() {
        return [
            [this.srp_id, "bigint", "long"],
            [this.A, Uint8Array, "bytes"],
            [this.M1, Uint8Array, "bytes"],
        ];
    }
    constructor(params) {
        super();
        /** [SRP ID](https://core.telegram.org/api/srp) */
        Object.defineProperty(this, "srp_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** `A` parameter (see [SRP](https://core.telegram.org/api/srp)) */
        Object.defineProperty(this, "A", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** `M1` parameter (see [SRP](https://core.telegram.org/api/srp)) */
        Object.defineProperty(this, "M1", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.srp_id = params.srp_id;
        this.A = params.A;
        this.M1 = params.M1;
    }
}
/** Required type */
export class SecureRequiredType_ extends _SecureRequiredType_ {
    get [id]() {
        return 0x829D99DA;
    }
    static get [name]() {
        return "secureRequiredType";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["native_names", "true", "flags.0?true"],
            ["selfie_required", "true", "flags.1?true"],
            ["translation_required", "true", "flags.2?true"],
            ["type", _SecureValueType_, "SecureValueType"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.native_names ?? null, "true", "flags.0?true"],
            [this.selfie_required ?? null, "true", "flags.1?true"],
            [this.translation_required ?? null, "true", "flags.2?true"],
            [this.type, _SecureValueType_, "SecureValueType"],
        ];
    }
    constructor(params) {
        super();
        /** Native names */
        Object.defineProperty(this, "native_names", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Is a selfie required */
        Object.defineProperty(this, "selfie_required", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Is a translation required */
        Object.defineProperty(this, "translation_required", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Secure value type */
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.native_names = params.native_names;
        this.selfie_required = params.selfie_required;
        this.translation_required = params.translation_required;
        this.type = params.type;
    }
}
/** One of */
export class SecureRequiredTypeOneOf_ extends _SecureRequiredType_ {
    get [id]() {
        return 0x027477B4;
    }
    static get [name]() {
        return "secureRequiredTypeOneOf";
    }
    static get [paramDesc]() {
        return [
            ["types", [_SecureRequiredType_], "Vector<SecureRequiredType>"],
        ];
    }
    get [params]() {
        return [
            [this.types, [_SecureRequiredType_], "Vector<SecureRequiredType>"],
        ];
    }
    constructor(params) {
        super();
        /** Secure required value types */
        Object.defineProperty(this, "types", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.types = params.types;
    }
}
/** Password configuration not modified */
export class help_PassportConfigNotModified_ extends _help_PassportConfig_ {
    get [id]() {
        return 0xBFB9F457;
    }
    static get [name]() {
        return "help.passportConfigNotModified";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Telegram [passport](https://core.telegram.org/passport) configuration */
export class help_PassportConfig_ extends _help_PassportConfig_ {
    get [id]() {
        return 0xA098D6AF;
    }
    static get [name]() {
        return "help.passportConfig";
    }
    static get [paramDesc]() {
        return [
            ["hash", "number", "int"],
            ["countries_langs", _DataJSON_, "DataJSON"],
        ];
    }
    get [params]() {
        return [
            [this.hash, "number", "int"],
            [this.countries_langs, _DataJSON_, "DataJSON"],
        ];
    }
    constructor(params) {
        super();
        /** [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation) */
        Object.defineProperty(this, "hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Localization */
        Object.defineProperty(this, "countries_langs", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.hash = params.hash;
        this.countries_langs = params.countries_langs;
    }
}
/** Event that occurred in the application. */
export class InputAppEvent_ extends _InputAppEvent_ {
    get [id]() {
        return 0x1D1B1245;
    }
    static get [name]() {
        return "inputAppEvent";
    }
    static get [paramDesc]() {
        return [
            ["time", "number", "double"],
            ["type", "string", "string"],
            ["peer", "bigint", "long"],
            ["data", _JSONValue_, "JSONValue"],
        ];
    }
    get [params]() {
        return [
            [this.time, "number", "double"],
            [this.type, "string", "string"],
            [this.peer, "bigint", "long"],
            [this.data, _JSONValue_, "JSONValue"],
        ];
    }
    constructor(params) {
        super();
        /** Client's exact timestamp for the event */
        Object.defineProperty(this, "time", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Type of event */
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Arbitrary numeric value for more convenient selection of certain event types, or events referring to a certain object */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Details of the event */
        Object.defineProperty(this, "data", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.time = params.time;
        this.type = params.type;
        this.peer = params.peer;
        this.data = params.data;
    }
}
/** JSON key: value pair */
export class JsonObjectValue_ extends _JSONObjectValue_ {
    get [id]() {
        return 0xC0DE1BD9;
    }
    static get [name]() {
        return "jsonObjectValue";
    }
    static get [paramDesc]() {
        return [
            ["key", "string", "string"],
            ["value", _JSONValue_, "JSONValue"],
        ];
    }
    get [params]() {
        return [
            [this.key, "string", "string"],
            [this.value, _JSONValue_, "JSONValue"],
        ];
    }
    constructor(params) {
        super();
        /** Key */
        Object.defineProperty(this, "key", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Value */
        Object.defineProperty(this, "value", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.key = params.key;
        this.value = params.value;
    }
}
/** null JSON value */
export class JsonNull_ extends _JSONValue_ {
    get [id]() {
        return 0x3F6D7B68;
    }
    static get [name]() {
        return "jsonNull";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** JSON boolean value */
export class JsonBool_ extends _JSONValue_ {
    get [id]() {
        return 0xC7345E6A;
    }
    static get [name]() {
        return "jsonBool";
    }
    static get [paramDesc]() {
        return [
            ["value", "boolean", "Bool"],
        ];
    }
    get [params]() {
        return [
            [this.value, "boolean", "Bool"],
        ];
    }
    constructor(params) {
        super();
        /** Value */
        Object.defineProperty(this, "value", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.value = params.value;
    }
}
/** JSON numeric value */
export class JsonNumber_ extends _JSONValue_ {
    get [id]() {
        return 0x2BE0DFA4;
    }
    static get [name]() {
        return "jsonNumber";
    }
    static get [paramDesc]() {
        return [
            ["value", "number", "double"],
        ];
    }
    get [params]() {
        return [
            [this.value, "number", "double"],
        ];
    }
    constructor(params) {
        super();
        /** Value */
        Object.defineProperty(this, "value", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.value = params.value;
    }
}
/** JSON string */
export class JsonString_ extends _JSONValue_ {
    get [id]() {
        return 0xB71E767A;
    }
    static get [name]() {
        return "jsonString";
    }
    static get [paramDesc]() {
        return [
            ["value", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.value, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Value */
        Object.defineProperty(this, "value", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.value = params.value;
    }
}
/** JSON array */
export class JsonArray_ extends _JSONValue_ {
    get [id]() {
        return 0xF7444763;
    }
    static get [name]() {
        return "jsonArray";
    }
    static get [paramDesc]() {
        return [
            ["value", [_JSONValue_], "Vector<JSONValue>"],
        ];
    }
    get [params]() {
        return [
            [this.value, [_JSONValue_], "Vector<JSONValue>"],
        ];
    }
    constructor(params) {
        super();
        /** JSON values */
        Object.defineProperty(this, "value", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.value = params.value;
    }
}
/** JSON object value */
export class JsonObject_ extends _JSONValue_ {
    get [id]() {
        return 0x99C1D49D;
    }
    static get [name]() {
        return "jsonObject";
    }
    static get [paramDesc]() {
        return [
            ["value", [_JSONObjectValue_], "Vector<JSONObjectValue>"],
        ];
    }
    get [params]() {
        return [
            [this.value, [_JSONObjectValue_], "Vector<JSONObjectValue>"],
        ];
    }
    constructor(params) {
        super();
        /** Values */
        Object.defineProperty(this, "value", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.value = params.value;
    }
}
/** Table cell */
export class PageTableCell_ extends _PageTableCell_ {
    get [id]() {
        return 0x34566B6A;
    }
    static get [name]() {
        return "pageTableCell";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["header", "true", "flags.0?true"],
            ["align_center", "true", "flags.3?true"],
            ["align_right", "true", "flags.4?true"],
            ["valign_middle", "true", "flags.5?true"],
            ["valign_bottom", "true", "flags.6?true"],
            ["text", _RichText_, "flags.7?RichText"],
            ["colspan", "number", "flags.1?int"],
            ["rowspan", "number", "flags.2?int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.header ?? null, "true", "flags.0?true"],
            [this.align_center ?? null, "true", "flags.3?true"],
            [this.align_right ?? null, "true", "flags.4?true"],
            [this.valign_middle ?? null, "true", "flags.5?true"],
            [this.valign_bottom ?? null, "true", "flags.6?true"],
            [this.text ?? null, _RichText_, "flags.7?RichText"],
            [this.colspan ?? null, "number", "flags.1?int"],
            [this.rowspan ?? null, "number", "flags.2?int"],
        ];
    }
    constructor(params) {
        super();
        /** Is this element part of the column header */
        Object.defineProperty(this, "header", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Horizontally centered block */
        Object.defineProperty(this, "align_center", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Right-aligned block */
        Object.defineProperty(this, "align_right", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Vertically centered block */
        Object.defineProperty(this, "valign_middle", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Block vertically-aligned to the bottom */
        Object.defineProperty(this, "valign_bottom", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Content */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** For how many columns should this cell extend */
        Object.defineProperty(this, "colspan", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** For how many rows should this cell extend */
        Object.defineProperty(this, "rowspan", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.header = params?.header;
        this.align_center = params?.align_center;
        this.align_right = params?.align_right;
        this.valign_middle = params?.valign_middle;
        this.valign_bottom = params?.valign_bottom;
        this.text = params?.text;
        this.colspan = params?.colspan;
        this.rowspan = params?.rowspan;
    }
}
/** Table row */
export class PageTableRow_ extends _PageTableRow_ {
    get [id]() {
        return 0xE0C0C5E5;
    }
    static get [name]() {
        return "pageTableRow";
    }
    static get [paramDesc]() {
        return [
            ["cells", [_PageTableCell_], "Vector<PageTableCell>"],
        ];
    }
    get [params]() {
        return [
            [this.cells, [_PageTableCell_], "Vector<PageTableCell>"],
        ];
    }
    constructor(params) {
        super();
        /** Table cells */
        Object.defineProperty(this, "cells", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.cells = params.cells;
    }
}
/** Page caption */
export class PageCaption_ extends _PageCaption_ {
    get [id]() {
        return 0x6F747657;
    }
    static get [name]() {
        return "pageCaption";
    }
    static get [paramDesc]() {
        return [
            ["text", _RichText_, "RichText"],
            ["credit", _RichText_, "RichText"],
        ];
    }
    get [params]() {
        return [
            [this.text, _RichText_, "RichText"],
            [this.credit, _RichText_, "RichText"],
        ];
    }
    constructor(params) {
        super();
        /** Caption */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Credits */
        Object.defineProperty(this, "credit", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.text = params.text;
        this.credit = params.credit;
    }
}
/** List item */
export class PageListItemText_ extends _PageListItem_ {
    get [id]() {
        return 0xB92FB6CD;
    }
    static get [name]() {
        return "pageListItemText";
    }
    static get [paramDesc]() {
        return [
            ["text", _RichText_, "RichText"],
        ];
    }
    get [params]() {
        return [
            [this.text, _RichText_, "RichText"],
        ];
    }
    constructor(params) {
        super();
        /** Text */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.text = params.text;
    }
}
/** List item */
export class PageListItemBlocks_ extends _PageListItem_ {
    get [id]() {
        return 0x25E073FC;
    }
    static get [name]() {
        return "pageListItemBlocks";
    }
    static get [paramDesc]() {
        return [
            ["blocks", [_PageBlock_], "Vector<PageBlock>"],
        ];
    }
    get [params]() {
        return [
            [this.blocks, [_PageBlock_], "Vector<PageBlock>"],
        ];
    }
    constructor(params) {
        super();
        /** Blocks */
        Object.defineProperty(this, "blocks", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.blocks = params.blocks;
    }
}
/** Ordered list of text items */
export class PageListOrderedItemText_ extends _PageListOrderedItem_ {
    get [id]() {
        return 0x5E068047;
    }
    static get [name]() {
        return "pageListOrderedItemText";
    }
    static get [paramDesc]() {
        return [
            ["num", "string", "string"],
            ["text", _RichText_, "RichText"],
        ];
    }
    get [params]() {
        return [
            [this.num, "string", "string"],
            [this.text, _RichText_, "RichText"],
        ];
    }
    constructor(params) {
        super();
        /** Number of element within ordered list */
        Object.defineProperty(this, "num", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Text */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.num = params.num;
        this.text = params.text;
    }
}
/** Ordered list of [IV](https://instantview.telegram.org) blocks */
export class PageListOrderedItemBlocks_ extends _PageListOrderedItem_ {
    get [id]() {
        return 0x98DD8936;
    }
    static get [name]() {
        return "pageListOrderedItemBlocks";
    }
    static get [paramDesc]() {
        return [
            ["num", "string", "string"],
            ["blocks", [_PageBlock_], "Vector<PageBlock>"],
        ];
    }
    get [params]() {
        return [
            [this.num, "string", "string"],
            [this.blocks, [_PageBlock_], "Vector<PageBlock>"],
        ];
    }
    constructor(params) {
        super();
        /** Number of element within ordered list */
        Object.defineProperty(this, "num", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Item contents */
        Object.defineProperty(this, "blocks", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.num = params.num;
        this.blocks = params.blocks;
    }
}
/** Related article */
export class PageRelatedArticle_ extends _PageRelatedArticle_ {
    get [id]() {
        return 0xB390DC08;
    }
    static get [name]() {
        return "pageRelatedArticle";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["url", "string", "string"],
            ["webpage_id", "bigint", "long"],
            ["title", "string", "flags.0?string"],
            ["description", "string", "flags.1?string"],
            ["photo_id", "bigint", "flags.2?long"],
            ["author", "string", "flags.3?string"],
            ["published_date", "number", "flags.4?int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.url, "string", "string"],
            [this.webpage_id, "bigint", "long"],
            [this.title ?? null, "string", "flags.0?string"],
            [this.description ?? null, "string", "flags.1?string"],
            [this.photo_id ?? null, "bigint", "flags.2?long"],
            [this.author ?? null, "string", "flags.3?string"],
            [this.published_date ?? null, "number", "flags.4?int"],
        ];
    }
    constructor(params) {
        super();
        /** URL of article */
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Webpage ID of generated IV preview */
        Object.defineProperty(this, "webpage_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Title */
        Object.defineProperty(this, "title", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Description */
        Object.defineProperty(this, "description", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of preview photo */
        Object.defineProperty(this, "photo_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Author name */
        Object.defineProperty(this, "author", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Date of publication */
        Object.defineProperty(this, "published_date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.url = params.url;
        this.webpage_id = params.webpage_id;
        this.title = params.title;
        this.description = params.description;
        this.photo_id = params.photo_id;
        this.author = params.author;
        this.published_date = params.published_date;
    }
}
/** [Instant view](https://instantview.telegram.org) page */
export class Page_ extends _Page_ {
    get [id]() {
        return 0x98657F0D;
    }
    static get [name]() {
        return "page";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["part", "true", "flags.0?true"],
            ["rtl", "true", "flags.1?true"],
            ["v2", "true", "flags.2?true"],
            ["url", "string", "string"],
            ["blocks", [_PageBlock_], "Vector<PageBlock>"],
            ["photos", [_Photo_], "Vector<Photo>"],
            ["documents", [_Document_], "Vector<Document>"],
            ["views", "number", "flags.3?int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.part ?? null, "true", "flags.0?true"],
            [this.rtl ?? null, "true", "flags.1?true"],
            [this.v2 ?? null, "true", "flags.2?true"],
            [this.url, "string", "string"],
            [this.blocks, [_PageBlock_], "Vector<PageBlock>"],
            [this.photos, [_Photo_], "Vector<Photo>"],
            [this.documents, [_Document_], "Vector<Document>"],
            [this.views ?? null, "number", "flags.3?int"],
        ];
    }
    constructor(params) {
        super();
        /** Indicates that not full page preview is available to the client and it will need to fetch full Instant View from the server using [messages.getWebPagePreview](https://core.telegram.org/method/messages.getWebPagePreview). */
        Object.defineProperty(this, "part", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether the page contains RTL text */
        Object.defineProperty(this, "rtl", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this is an [IV v2](https://instantview.telegram.org/docs#what-39s-new-in-2-0) page */
        Object.defineProperty(this, "v2", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Original page HTTP URL */
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Page elements (like with HTML elements, only as TL constructors) */
        Object.defineProperty(this, "blocks", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Photos in page */
        Object.defineProperty(this, "photos", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Media in page */
        Object.defineProperty(this, "documents", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** View count */
        Object.defineProperty(this, "views", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.part = params.part;
        this.rtl = params.rtl;
        this.v2 = params.v2;
        this.url = params.url;
        this.blocks = params.blocks;
        this.photos = params.photos;
        this.documents = params.documents;
        this.views = params.views;
    }
}
/** Localized name for telegram support */
export class help_SupportName_ extends _help_SupportName_ {
    get [id]() {
        return 0x8C05F1C9;
    }
    static get [name]() {
        return "help.supportName";
    }
    static get [paramDesc]() {
        return [
            ["name", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.name, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Localized name */
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.name = params.name;
    }
}
/** Internal use */
export class help_UserInfoEmpty_ extends _help_UserInfo_ {
    get [id]() {
        return 0xF3AE2EED;
    }
    static get [name]() {
        return "help.userInfoEmpty";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Internal use */
export class help_UserInfo_ extends _help_UserInfo_ {
    get [id]() {
        return 0x01EB3758;
    }
    static get [name]() {
        return "help.userInfo";
    }
    static get [paramDesc]() {
        return [
            ["message", "string", "string"],
            ["entities", [_MessageEntity_], "Vector<MessageEntity>"],
            ["author", "string", "string"],
            ["date", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.message, "string", "string"],
            [this.entities, [_MessageEntity_], "Vector<MessageEntity>"],
            [this.author, "string", "string"],
            [this.date, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Info */
        Object.defineProperty(this, "message", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Message entities for styled text](https://core.telegram.org/api/entities) */
        Object.defineProperty(this, "entities", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Author */
        Object.defineProperty(this, "author", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Date */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.message = params.message;
        this.entities = params.entities;
        this.author = params.author;
        this.date = params.date;
    }
}
/** A possible answer of a poll */
export class PollAnswer_ extends _PollAnswer_ {
    get [id]() {
        return 0x6CA9C2E9;
    }
    static get [name]() {
        return "pollAnswer";
    }
    static get [paramDesc]() {
        return [
            ["text", "string", "string"],
            ["option", Uint8Array, "bytes"],
        ];
    }
    get [params]() {
        return [
            [this.text, "string", "string"],
            [this.option, Uint8Array, "bytes"],
        ];
    }
    constructor(params) {
        super();
        /** Textual representation of the answer */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The param that has to be passed to [messages.sendVote](https://core.telegram.org/method/messages.sendVote). */
        Object.defineProperty(this, "option", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.text = params.text;
        this.option = params.option;
    }
}
/** Poll */
export class Poll_ extends _Poll_ {
    get [id]() {
        return 0x86E18161;
    }
    static get [name]() {
        return "poll";
    }
    static get [paramDesc]() {
        return [
            ["id", "bigint", "long"],
            ["flags", flags, "#"],
            ["closed", "true", "flags.0?true"],
            ["public_voters", "true", "flags.1?true"],
            ["multiple_choice", "true", "flags.2?true"],
            ["quiz", "true", "flags.3?true"],
            ["question", "string", "string"],
            ["answers", [_PollAnswer_], "Vector<PollAnswer>"],
            ["close_period", "number", "flags.4?int"],
            ["close_date", "number", "flags.5?int"],
        ];
    }
    get [params]() {
        return [
            [this.id, "bigint", "long"],
            ["flags", flags, "#"],
            [this.closed ?? null, "true", "flags.0?true"],
            [this.public_voters ?? null, "true", "flags.1?true"],
            [this.multiple_choice ?? null, "true", "flags.2?true"],
            [this.quiz ?? null, "true", "flags.3?true"],
            [this.question, "string", "string"],
            [this.answers, [_PollAnswer_], "Vector<PollAnswer>"],
            [this.close_period ?? null, "number", "flags.4?int"],
            [this.close_date ?? null, "number", "flags.5?int"],
        ];
    }
    constructor(params) {
        super();
        /** ID of the poll */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether the poll is closed and doesn't accept any more answers */
        Object.defineProperty(this, "closed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether cast votes are publicly visible to all users (non-anonymous poll) */
        Object.defineProperty(this, "public_voters", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether multiple options can be chosen as answer */
        Object.defineProperty(this, "multiple_choice", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this is a quiz (with wrong and correct answers, results shown in the return type) */
        Object.defineProperty(this, "quiz", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The question of the poll */
        Object.defineProperty(this, "question", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The possible answers, vote using [messages.sendVote](https://core.telegram.org/method/messages.sendVote). */
        Object.defineProperty(this, "answers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Amount of time in seconds the poll will be active after creation, 5-600. Can't be used together with close\_date. */
        Object.defineProperty(this, "close_period", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Point in time (Unix timestamp) when the poll will be automatically closed. Must be at least 5 and no more than 600 seconds in the future; can't be used together with close\_period. */
        Object.defineProperty(this, "close_date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
        this.closed = params.closed;
        this.public_voters = params.public_voters;
        this.multiple_choice = params.multiple_choice;
        this.quiz = params.quiz;
        this.question = params.question;
        this.answers = params.answers;
        this.close_period = params.close_period;
        this.close_date = params.close_date;
    }
}
/** A poll answer, and how users voted on it */
export class PollAnswerVoters_ extends _PollAnswerVoters_ {
    get [id]() {
        return 0x3B6DDAD2;
    }
    static get [name]() {
        return "pollAnswerVoters";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["chosen", "true", "flags.0?true"],
            ["correct", "true", "flags.1?true"],
            ["option", Uint8Array, "bytes"],
            ["voters", "number", "int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.chosen ?? null, "true", "flags.0?true"],
            [this.correct ?? null, "true", "flags.1?true"],
            [this.option, Uint8Array, "bytes"],
            [this.voters, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Whether we have chosen this answer */
        Object.defineProperty(this, "chosen", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** For quizzes, whether the option we have chosen is correct */
        Object.defineProperty(this, "correct", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The param that has to be passed to [messages.sendVote](https://core.telegram.org/method/messages.sendVote). */
        Object.defineProperty(this, "option", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** How many users voted for this option */
        Object.defineProperty(this, "voters", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.chosen = params.chosen;
        this.correct = params.correct;
        this.option = params.option;
        this.voters = params.voters;
    }
}
/** Results of poll */
export class PollResults_ extends _PollResults_ {
    get [id]() {
        return 0x7ADF2420;
    }
    static get [name]() {
        return "pollResults";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["min", "true", "flags.0?true"],
            ["results", [_PollAnswerVoters_], "flags.1?Vector<PollAnswerVoters>"],
            ["total_voters", "number", "flags.2?int"],
            ["recent_voters", [_Peer_], "flags.3?Vector<Peer>"],
            ["solution", "string", "flags.4?string"],
            ["solution_entities", [_MessageEntity_], "flags.4?Vector<MessageEntity>"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.min ?? null, "true", "flags.0?true"],
            [this.results ?? null, [_PollAnswerVoters_], "flags.1?Vector<PollAnswerVoters>"],
            [this.total_voters ?? null, "number", "flags.2?int"],
            [this.recent_voters ?? null, [_Peer_], "flags.3?Vector<Peer>"],
            [this.solution ?? null, "string", "flags.4?string"],
            [this.solution_entities ?? null, [_MessageEntity_], "flags.4?Vector<MessageEntity>"],
        ];
    }
    constructor(params) {
        super();
        /** Similar to [min](https://core.telegram.org/api/min) objects, used for poll constructors that are the same for all users so they don't have the option chosen by the current user (you can use [messages.getPollResults](https://core.telegram.org/method/messages.getPollResults) to get the full poll results). */
        Object.defineProperty(this, "min", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Poll results */
        Object.defineProperty(this, "results", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Total number of people that voted in the poll */
        Object.defineProperty(this, "total_voters", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** IDs of the last users that recently voted in the poll */
        Object.defineProperty(this, "recent_voters", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Explanation of quiz solution */
        Object.defineProperty(this, "solution", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Message entities for styled text in quiz solution](https://core.telegram.org/api/entities) */
        Object.defineProperty(this, "solution_entities", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.min = params?.min;
        this.results = params?.results;
        this.total_voters = params?.total_voters;
        this.recent_voters = params?.recent_voters;
        this.solution = params?.solution;
        this.solution_entities = params?.solution_entities;
    }
}
/** Number of online users in a chat */
export class ChatOnlines_ extends _ChatOnlines_ {
    get [id]() {
        return 0xF041E250;
    }
    static get [name]() {
        return "chatOnlines";
    }
    static get [paramDesc]() {
        return [
            ["onlines", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.onlines, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Number of online users */
        Object.defineProperty(this, "onlines", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.onlines = params.onlines;
    }
}
/** URL with chat statistics */
export class StatsURL_ extends _StatsURL_ {
    get [id]() {
        return 0x47A971E0;
    }
    static get [name]() {
        return "statsURL";
    }
    static get [paramDesc]() {
        return [
            ["url", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.url, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Chat statistics */
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.url = params.url;
    }
}
/** Represents the rights of an admin in a [channel/supergroup](https://core.telegram.org/api/channel). */
export class ChatAdminRights_ extends _ChatAdminRights_ {
    get [id]() {
        return 0x5FB224D5;
    }
    static get [name]() {
        return "chatAdminRights";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["change_info", "true", "flags.0?true"],
            ["post_messages", "true", "flags.1?true"],
            ["edit_messages", "true", "flags.2?true"],
            ["delete_messages", "true", "flags.3?true"],
            ["ban_users", "true", "flags.4?true"],
            ["invite_users", "true", "flags.5?true"],
            ["pin_messages", "true", "flags.7?true"],
            ["add_admins", "true", "flags.9?true"],
            ["anonymous", "true", "flags.10?true"],
            ["manage_call", "true", "flags.11?true"],
            ["other", "true", "flags.12?true"],
            ["manage_topics", "true", "flags.13?true"],
            ["post_stories", "true", "flags.14?true"],
            ["edit_stories", "true", "flags.15?true"],
            ["delete_stories", "true", "flags.16?true"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.change_info ?? null, "true", "flags.0?true"],
            [this.post_messages ?? null, "true", "flags.1?true"],
            [this.edit_messages ?? null, "true", "flags.2?true"],
            [this.delete_messages ?? null, "true", "flags.3?true"],
            [this.ban_users ?? null, "true", "flags.4?true"],
            [this.invite_users ?? null, "true", "flags.5?true"],
            [this.pin_messages ?? null, "true", "flags.7?true"],
            [this.add_admins ?? null, "true", "flags.9?true"],
            [this.anonymous ?? null, "true", "flags.10?true"],
            [this.manage_call ?? null, "true", "flags.11?true"],
            [this.other ?? null, "true", "flags.12?true"],
            [this.manage_topics ?? null, "true", "flags.13?true"],
            [this.post_stories ?? null, "true", "flags.14?true"],
            [this.edit_stories ?? null, "true", "flags.15?true"],
            [this.delete_stories ?? null, "true", "flags.16?true"],
        ];
    }
    constructor(params) {
        super();
        /** If set, allows the admin to modify the description of the [channel/supergroup](https://core.telegram.org/api/channel) */
        Object.defineProperty(this, "change_info", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, allows the admin to post messages in the [channel](https://core.telegram.org/api/channel) */
        Object.defineProperty(this, "post_messages", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, allows the admin to also edit messages from other admins in the [channel](https://core.telegram.org/api/channel) */
        Object.defineProperty(this, "edit_messages", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, allows the admin to also delete messages from other admins in the [channel](https://core.telegram.org/api/channel) */
        Object.defineProperty(this, "delete_messages", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, allows the admin to ban users from the [channel/supergroup](https://core.telegram.org/api/channel) */
        Object.defineProperty(this, "ban_users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, allows the admin to invite users in the [channel/supergroup](https://core.telegram.org/api/channel) */
        Object.defineProperty(this, "invite_users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, allows the admin to pin messages in the [channel/supergroup](https://core.telegram.org/api/channel) */
        Object.defineProperty(this, "pin_messages", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, allows the admin to add other admins with the same (or more limited) permissions in the [channel/supergroup](https://core.telegram.org/api/channel) */
        Object.defineProperty(this, "add_admins", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this admin is anonymous */
        Object.defineProperty(this, "anonymous", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, allows the admin to change group call/livestream settings */
        Object.defineProperty(this, "manage_call", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Set this flag if none of the other flags are set, but you still want the user to be an admin: if this or any of the other flags are set, the admin can get the chat [admin log](https://core.telegram.org/api/recent-actions), get [chat statistics](https://core.telegram.org/api/stats), get [message statistics in channels](https://core.telegram.org/api/stats), get channel members, see anonymous administrators in supergroups and ignore slow mode. */
        Object.defineProperty(this, "other", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, allows the admin to create, delete or modify [forum topics »](https://core.telegram.org/api/forum#forum-topics). */
        Object.defineProperty(this, "manage_topics", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, allows the admin to post [stories](https://core.telegram.org/api/stories) as the [channel](https://core.telegram.org/api/channel). */
        Object.defineProperty(this, "post_stories", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, allows the admin to edit [stories](https://core.telegram.org/api/stories) posted by the other admins of the [channel](https://core.telegram.org/api/channel). */
        Object.defineProperty(this, "edit_stories", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, allows the admin to delete [stories](https://core.telegram.org/api/stories) posted by the other admins of the [channel](https://core.telegram.org/api/channel). */
        Object.defineProperty(this, "delete_stories", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.change_info = params?.change_info;
        this.post_messages = params?.post_messages;
        this.edit_messages = params?.edit_messages;
        this.delete_messages = params?.delete_messages;
        this.ban_users = params?.ban_users;
        this.invite_users = params?.invite_users;
        this.pin_messages = params?.pin_messages;
        this.add_admins = params?.add_admins;
        this.anonymous = params?.anonymous;
        this.manage_call = params?.manage_call;
        this.other = params?.other;
        this.manage_topics = params?.manage_topics;
        this.post_stories = params?.post_stories;
        this.edit_stories = params?.edit_stories;
        this.delete_stories = params?.delete_stories;
    }
}
/** Represents the rights of a normal user in a [supergroup/channel/chat](https://core.telegram.org/api/channel). In this case, the flags are inverted: if set, a flag **does not allow** a user to do X. */
export class ChatBannedRights_ extends _ChatBannedRights_ {
    get [id]() {
        return 0x9F120418;
    }
    static get [name]() {
        return "chatBannedRights";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["view_messages", "true", "flags.0?true"],
            ["send_messages", "true", "flags.1?true"],
            ["send_media", "true", "flags.2?true"],
            ["send_stickers", "true", "flags.3?true"],
            ["send_gifs", "true", "flags.4?true"],
            ["send_games", "true", "flags.5?true"],
            ["send_inline", "true", "flags.6?true"],
            ["embed_links", "true", "flags.7?true"],
            ["send_polls", "true", "flags.8?true"],
            ["change_info", "true", "flags.10?true"],
            ["invite_users", "true", "flags.15?true"],
            ["pin_messages", "true", "flags.17?true"],
            ["manage_topics", "true", "flags.18?true"],
            ["send_photos", "true", "flags.19?true"],
            ["send_videos", "true", "flags.20?true"],
            ["send_roundvideos", "true", "flags.21?true"],
            ["send_audios", "true", "flags.22?true"],
            ["send_voices", "true", "flags.23?true"],
            ["send_docs", "true", "flags.24?true"],
            ["send_plain", "true", "flags.25?true"],
            ["until_date", "number", "int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.view_messages ?? null, "true", "flags.0?true"],
            [this.send_messages ?? null, "true", "flags.1?true"],
            [this.send_media ?? null, "true", "flags.2?true"],
            [this.send_stickers ?? null, "true", "flags.3?true"],
            [this.send_gifs ?? null, "true", "flags.4?true"],
            [this.send_games ?? null, "true", "flags.5?true"],
            [this.send_inline ?? null, "true", "flags.6?true"],
            [this.embed_links ?? null, "true", "flags.7?true"],
            [this.send_polls ?? null, "true", "flags.8?true"],
            [this.change_info ?? null, "true", "flags.10?true"],
            [this.invite_users ?? null, "true", "flags.15?true"],
            [this.pin_messages ?? null, "true", "flags.17?true"],
            [this.manage_topics ?? null, "true", "flags.18?true"],
            [this.send_photos ?? null, "true", "flags.19?true"],
            [this.send_videos ?? null, "true", "flags.20?true"],
            [this.send_roundvideos ?? null, "true", "flags.21?true"],
            [this.send_audios ?? null, "true", "flags.22?true"],
            [this.send_voices ?? null, "true", "flags.23?true"],
            [this.send_docs ?? null, "true", "flags.24?true"],
            [this.send_plain ?? null, "true", "flags.25?true"],
            [this.until_date, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** If set, does not allow a user to view messages in a [supergroup/channel/chat](https://core.telegram.org/api/channel) */
        Object.defineProperty(this, "view_messages", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, does not allow a user to send messages in a [supergroup/chat](https://core.telegram.org/api/channel) */
        Object.defineProperty(this, "send_messages", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, does not allow a user to send any media in a [supergroup/chat](https://core.telegram.org/api/channel) */
        Object.defineProperty(this, "send_media", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, does not allow a user to send stickers in a [supergroup/chat](https://core.telegram.org/api/channel) */
        Object.defineProperty(this, "send_stickers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, does not allow a user to send gifs in a [supergroup/chat](https://core.telegram.org/api/channel) */
        Object.defineProperty(this, "send_gifs", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, does not allow a user to send games in a [supergroup/chat](https://core.telegram.org/api/channel) */
        Object.defineProperty(this, "send_games", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, does not allow a user to use inline bots in a [supergroup/chat](https://core.telegram.org/api/channel). */
        Object.defineProperty(this, "send_inline", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, does not allow a user to embed links in the messages of a [supergroup/chat](https://core.telegram.org/api/channel) */
        Object.defineProperty(this, "embed_links", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, does not allow a user to send polls in a [supergroup/chat](https://core.telegram.org/api/channel) */
        Object.defineProperty(this, "send_polls", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, does not allow any user to change the description of a [supergroup/chat](https://core.telegram.org/api/channel) */
        Object.defineProperty(this, "change_info", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, does not allow any user to invite users in a [supergroup/chat](https://core.telegram.org/api/channel) */
        Object.defineProperty(this, "invite_users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, does not allow any user to pin messages in a [supergroup/chat](https://core.telegram.org/api/channel) */
        Object.defineProperty(this, "pin_messages", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, does not allow any user to create, delete or modify [forum topics »](https://core.telegram.org/api/forum#forum-topics). */
        Object.defineProperty(this, "manage_topics", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, does not allow a user to send photos in a [supergroup/chat](https://core.telegram.org/api/channel). */
        Object.defineProperty(this, "send_photos", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, does not allow a user to send videos in a [supergroup/chat](https://core.telegram.org/api/channel). */
        Object.defineProperty(this, "send_videos", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, does not allow a user to send round videos in a [supergroup/chat](https://core.telegram.org/api/channel). */
        Object.defineProperty(this, "send_roundvideos", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, does not allow a user to send audio files in a [supergroup/chat](https://core.telegram.org/api/channel). */
        Object.defineProperty(this, "send_audios", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, does not allow a user to send voice messages in a [supergroup/chat](https://core.telegram.org/api/channel). */
        Object.defineProperty(this, "send_voices", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, does not allow a user to send documents in a [supergroup/chat](https://core.telegram.org/api/channel). */
        Object.defineProperty(this, "send_docs", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, does not allow a user to send text messages in a [supergroup/chat](https://core.telegram.org/api/channel). */
        Object.defineProperty(this, "send_plain", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Validity of said permissions (it is considered forever any value less then 30 seconds or more then 366 days). */
        Object.defineProperty(this, "until_date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.view_messages = params.view_messages;
        this.send_messages = params.send_messages;
        this.send_media = params.send_media;
        this.send_stickers = params.send_stickers;
        this.send_gifs = params.send_gifs;
        this.send_games = params.send_games;
        this.send_inline = params.send_inline;
        this.embed_links = params.embed_links;
        this.send_polls = params.send_polls;
        this.change_info = params.change_info;
        this.invite_users = params.invite_users;
        this.pin_messages = params.pin_messages;
        this.manage_topics = params.manage_topics;
        this.send_photos = params.send_photos;
        this.send_videos = params.send_videos;
        this.send_roundvideos = params.send_roundvideos;
        this.send_audios = params.send_audios;
        this.send_voices = params.send_voices;
        this.send_docs = params.send_docs;
        this.send_plain = params.send_plain;
        this.until_date = params.until_date;
    }
}
/** [Wallpaper](https://core.telegram.org/api/wallpapers) */
export class InputWallPaper_ extends _InputWallPaper_ {
    get [id]() {
        return 0xE630B979;
    }
    static get [name]() {
        return "inputWallPaper";
    }
    static get [paramDesc]() {
        return [
            ["id", "bigint", "long"],
            ["access_hash", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.id, "bigint", "long"],
            [this.access_hash, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** [Wallpaper](https://core.telegram.org/api/wallpapers) ID */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Access hash */
        Object.defineProperty(this, "access_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
        this.access_hash = params.access_hash;
    }
}
/** [Wallpaper](https://core.telegram.org/api/wallpapers) by slug (a unique ID, obtained from a [wallpaper link »](https://core.telegram.org/api/links#wallpaper-links)) */
export class InputWallPaperSlug_ extends _InputWallPaper_ {
    get [id]() {
        return 0x72091C80;
    }
    static get [name]() {
        return "inputWallPaperSlug";
    }
    static get [paramDesc]() {
        return [
            ["slug", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.slug, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Unique wallpaper ID */
        Object.defineProperty(this, "slug", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.slug = params.slug;
    }
}
/** [Wallpaper](https://core.telegram.org/api/wallpapers) with no file access hash, used for example when deleting (`unsave=true`) wallpapers using [account.saveWallPaper](https://core.telegram.org/method/account.saveWallPaper), specifying just the wallpaper ID. */
export class InputWallPaperNoFile_ extends _InputWallPaper_ {
    get [id]() {
        return 0x967A462E;
    }
    static get [name]() {
        return "inputWallPaperNoFile";
    }
    static get [paramDesc]() {
        return [
            ["id", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.id, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** Wallpaper ID */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
    }
}
/** No new [wallpapers](https://core.telegram.org/api/wallpapers) were found */
export class account_WallPapersNotModified_ extends _account_WallPapers_ {
    get [id]() {
        return 0x1C199183;
    }
    static get [name]() {
        return "account.wallPapersNotModified";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Installed [wallpapers](https://core.telegram.org/api/wallpapers) */
export class account_WallPapers_ extends _account_WallPapers_ {
    get [id]() {
        return 0xCDC3858C;
    }
    static get [name]() {
        return "account.wallPapers";
    }
    static get [paramDesc]() {
        return [
            ["hash", "bigint", "long"],
            ["wallpapers", [_WallPaper_], "Vector<WallPaper>"],
        ];
    }
    get [params]() {
        return [
            [this.hash, "bigint", "long"],
            [this.wallpapers, [_WallPaper_], "Vector<WallPaper>"],
        ];
    }
    constructor(params) {
        super();
        /** [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation) */
        Object.defineProperty(this, "hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Wallpapers](https://core.telegram.org/api/wallpapers) */
        Object.defineProperty(this, "wallpapers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.hash = params.hash;
        this.wallpapers = params.wallpapers;
    }
}
/** Settings used by telegram servers for sending the confirm code. */
export class CodeSettings_ extends _CodeSettings_ {
    get [id]() {
        return 0xAD253D78;
    }
    static get [name]() {
        return "codeSettings";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["allow_flashcall", "true", "flags.0?true"],
            ["current_number", "true", "flags.1?true"],
            ["allow_app_hash", "true", "flags.4?true"],
            ["allow_missed_call", "true", "flags.5?true"],
            ["allow_firebase", "true", "flags.7?true"],
            ["logout_tokens", [Uint8Array], "flags.6?Vector<bytes>"],
            ["token", "string", "flags.8?string"],
            ["app_sandbox", "boolean", "flags.8?Bool"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.allow_flashcall ?? null, "true", "flags.0?true"],
            [this.current_number ?? null, "true", "flags.1?true"],
            [this.allow_app_hash ?? null, "true", "flags.4?true"],
            [this.allow_missed_call ?? null, "true", "flags.5?true"],
            [this.allow_firebase ?? null, "true", "flags.7?true"],
            [this.logout_tokens ?? null, [Uint8Array], "flags.6?Vector<bytes>"],
            [this.token ?? null, "string", "flags.8?string"],
            [this.app_sandbox ?? null, "boolean", "flags.8?Bool"],
        ];
    }
    constructor(params) {
        super();
        /** Whether to allow phone verification via [phone calls](https://core.telegram.org/api/auth). */
        Object.defineProperty(this, "allow_flashcall", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Pass true if the phone number is used on the current device. Ignored if allow\_flashcall is not set. */
        Object.defineProperty(this, "current_number", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If a token that will be included in eventually sent SMSs is required: required in newer versions of android, to use the [android SMS receiver APIs](https://developers.google.com/identity/sms-retriever/overview) */
        Object.defineProperty(this, "allow_app_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this device supports receiving the code using the [auth.codeTypeMissedCall](https://core.telegram.org/constructor/auth.codeTypeMissedCall) method */
        Object.defineProperty(this, "allow_missed_call", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether Firebase auth is supported */
        Object.defineProperty(this, "allow_firebase", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Previously stored future auth tokens, see [the documentation for more info »](https://core.telegram.org/api/auth#future-auth-tokens) */
        Object.defineProperty(this, "logout_tokens", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Used only by official iOS apps for Firebase auth: device token for apple push. */
        Object.defineProperty(this, "token", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Used only by official iOS apps for firebase auth: whether a sandbox-certificate will be used during transmission of the push notification. */
        Object.defineProperty(this, "app_sandbox", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.allow_flashcall = params?.allow_flashcall;
        this.current_number = params?.current_number;
        this.allow_app_hash = params?.allow_app_hash;
        this.allow_missed_call = params?.allow_missed_call;
        this.allow_firebase = params?.allow_firebase;
        this.logout_tokens = params?.logout_tokens;
        this.token = params?.token;
        this.app_sandbox = params?.app_sandbox;
    }
}
/** [Wallpaper](https://core.telegram.org/api/wallpapers) rendering information. */
export class WallPaperSettings_ extends _WallPaperSettings_ {
    get [id]() {
        return 0x372EFCD0;
    }
    static get [name]() {
        return "wallPaperSettings";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["blur", "true", "flags.1?true"],
            ["motion", "true", "flags.2?true"],
            ["background_color", "number", "flags.0?int"],
            ["second_background_color", "number", "flags.4?int"],
            ["third_background_color", "number", "flags.5?int"],
            ["fourth_background_color", "number", "flags.6?int"],
            ["intensity", "number", "flags.3?int"],
            ["rotation", "number", "flags.4?int"],
            ["emoticon", "string", "flags.7?string"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.blur ?? null, "true", "flags.1?true"],
            [this.motion ?? null, "true", "flags.2?true"],
            [this.background_color ?? null, "number", "flags.0?int"],
            [this.second_background_color ?? null, "number", "flags.4?int"],
            [this.third_background_color ?? null, "number", "flags.5?int"],
            [this.fourth_background_color ?? null, "number", "flags.6?int"],
            [this.intensity ?? null, "number", "flags.3?int"],
            [this.rotation ?? null, "number", "flags.4?int"],
            [this.emoticon ?? null, "string", "flags.7?string"],
        ];
    }
    constructor(params) {
        super();
        /** For [image wallpapers »](https://core.telegram.org/api/wallpapers#image-wallpapers): if set, the JPEG must be downscaled to fit in 450x450 square and then box-blurred with radius 12. */
        Object.defineProperty(this, "blur", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, the background needs to be slightly moved when the device is rotated. */
        Object.defineProperty(this, "motion", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Used for [solid »](https://core.telegram.org/api/wallpapers#solid-fill), [gradient »](https://core.telegram.org/api/wallpapers#gradient-fill) and [freeform gradient »](https://core.telegram.org/api/wallpapers#freeform-gradient-fill) fills. */
        Object.defineProperty(this, "background_color", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Used for [gradient »](https://core.telegram.org/api/wallpapers#gradient-fill) and [freeform gradient »](https://core.telegram.org/api/wallpapers#freeform-gradient-fill) fills. */
        Object.defineProperty(this, "second_background_color", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Used for [freeform gradient »](https://core.telegram.org/api/wallpapers#freeform-gradient-fill) fills. */
        Object.defineProperty(this, "third_background_color", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Used for [freeform gradient »](https://core.telegram.org/api/wallpapers#freeform-gradient-fill) fills. */
        Object.defineProperty(this, "fourth_background_color", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Used for [pattern wallpapers »](https://core.telegram.org/api/wallpapers#pattern-wallpapers). */
        Object.defineProperty(this, "intensity", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Clockwise rotation angle of the gradient, in degrees; 0-359. Should be always divisible by 45. */
        Object.defineProperty(this, "rotation", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, this wallpaper can be used as a channel wallpaper and is represented by the specified UTF-8 emoji. */
        Object.defineProperty(this, "emoticon", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.blur = params?.blur;
        this.motion = params?.motion;
        this.background_color = params?.background_color;
        this.second_background_color = params?.second_background_color;
        this.third_background_color = params?.third_background_color;
        this.fourth_background_color = params?.fourth_background_color;
        this.intensity = params?.intensity;
        this.rotation = params?.rotation;
        this.emoticon = params?.emoticon;
    }
}
/** Autodownload settings */
export class AutoDownloadSettings_ extends _AutoDownloadSettings_ {
    get [id]() {
        return 0xBAA57628;
    }
    static get [name]() {
        return "autoDownloadSettings";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["disabled", "true", "flags.0?true"],
            ["video_preload_large", "true", "flags.1?true"],
            ["audio_preload_next", "true", "flags.2?true"],
            ["phonecalls_less_data", "true", "flags.3?true"],
            ["stories_preload", "true", "flags.4?true"],
            ["photo_size_max", "number", "int"],
            ["video_size_max", "bigint", "long"],
            ["file_size_max", "bigint", "long"],
            ["video_upload_maxbitrate", "number", "int"],
            ["small_queue_active_operations_max", "number", "int"],
            ["large_queue_active_operations_max", "number", "int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.disabled ?? null, "true", "flags.0?true"],
            [this.video_preload_large ?? null, "true", "flags.1?true"],
            [this.audio_preload_next ?? null, "true", "flags.2?true"],
            [this.phonecalls_less_data ?? null, "true", "flags.3?true"],
            [this.stories_preload ?? null, "true", "flags.4?true"],
            [this.photo_size_max, "number", "int"],
            [this.video_size_max, "bigint", "long"],
            [this.file_size_max, "bigint", "long"],
            [this.video_upload_maxbitrate, "number", "int"],
            [this.small_queue_active_operations_max, "number", "int"],
            [this.large_queue_active_operations_max, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Disable automatic media downloads? */
        Object.defineProperty(this, "disabled", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether to preload the first seconds of videos larger than the specified limit */
        Object.defineProperty(this, "video_preload_large", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether to preload the next audio track when you're listening to music */
        Object.defineProperty(this, "audio_preload_next", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether to enable data saving mode in phone calls */
        Object.defineProperty(this, "phonecalls_less_data", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether to preload [stories](https://core.telegram.org/api/stories); in particular, the first [documentAttributeVideo](https://core.telegram.org/constructor/documentAttributeVideo).`preload_prefix_size` bytes of story videos should be preloaded. */
        Object.defineProperty(this, "stories_preload", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Maximum size of photos to preload */
        Object.defineProperty(this, "photo_size_max", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Maximum size of videos to preload */
        Object.defineProperty(this, "video_size_max", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Maximum size of other files to preload */
        Object.defineProperty(this, "file_size_max", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Maximum suggested bitrate for **uploading** videos */
        Object.defineProperty(this, "video_upload_maxbitrate", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** A limit, specifying the maximum number of files that should be downloaded in parallel from the same DC, for files smaller than 20MB. */
        Object.defineProperty(this, "small_queue_active_operations_max", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** A limit, specifying the maximum number of files that should be downloaded in parallel from the same DC, for files bigger than 20MB. */
        Object.defineProperty(this, "large_queue_active_operations_max", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.disabled = params.disabled;
        this.video_preload_large = params.video_preload_large;
        this.audio_preload_next = params.audio_preload_next;
        this.phonecalls_less_data = params.phonecalls_less_data;
        this.stories_preload = params.stories_preload;
        this.photo_size_max = params.photo_size_max;
        this.video_size_max = params.video_size_max;
        this.file_size_max = params.file_size_max;
        this.video_upload_maxbitrate = params.video_upload_maxbitrate;
        this.small_queue_active_operations_max = params.small_queue_active_operations_max;
        this.large_queue_active_operations_max = params.large_queue_active_operations_max;
    }
}
/** Media autodownload settings */
export class account_AutoDownloadSettings_ extends _account_AutoDownloadSettings_ {
    get [id]() {
        return 0x63CACF26;
    }
    static get [name]() {
        return "account.autoDownloadSettings";
    }
    static get [paramDesc]() {
        return [
            ["low", _AutoDownloadSettings_, "AutoDownloadSettings"],
            ["medium", _AutoDownloadSettings_, "AutoDownloadSettings"],
            ["high", _AutoDownloadSettings_, "AutoDownloadSettings"],
        ];
    }
    get [params]() {
        return [
            [this.low, _AutoDownloadSettings_, "AutoDownloadSettings"],
            [this.medium, _AutoDownloadSettings_, "AutoDownloadSettings"],
            [this.high, _AutoDownloadSettings_, "AutoDownloadSettings"],
        ];
    }
    constructor(params) {
        super();
        /** Low data usage preset */
        Object.defineProperty(this, "low", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Medium data usage preset */
        Object.defineProperty(this, "medium", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** High data usage preset */
        Object.defineProperty(this, "high", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.low = params.low;
        this.medium = params.medium;
        this.high = params.high;
    }
}
/** Emoji keyword */
export class EmojiKeyword_ extends _EmojiKeyword_ {
    get [id]() {
        return 0xD5B3B9F9;
    }
    static get [name]() {
        return "emojiKeyword";
    }
    static get [paramDesc]() {
        return [
            ["keyword", "string", "string"],
            ["emoticons", ["string"], "Vector<string>"],
        ];
    }
    get [params]() {
        return [
            [this.keyword, "string", "string"],
            [this.emoticons, ["string"], "Vector<string>"],
        ];
    }
    constructor(params) {
        super();
        /** Keyword */
        Object.defineProperty(this, "keyword", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Emojis associated to keyword */
        Object.defineProperty(this, "emoticons", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.keyword = params.keyword;
        this.emoticons = params.emoticons;
    }
}
/** Deleted emoji keyword */
export class EmojiKeywordDeleted_ extends _EmojiKeyword_ {
    get [id]() {
        return 0x236DF622;
    }
    static get [name]() {
        return "emojiKeywordDeleted";
    }
    static get [paramDesc]() {
        return [
            ["keyword", "string", "string"],
            ["emoticons", ["string"], "Vector<string>"],
        ];
    }
    get [params]() {
        return [
            [this.keyword, "string", "string"],
            [this.emoticons, ["string"], "Vector<string>"],
        ];
    }
    constructor(params) {
        super();
        /** Keyword */
        Object.defineProperty(this, "keyword", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Emojis that were associated to keyword */
        Object.defineProperty(this, "emoticons", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.keyword = params.keyword;
        this.emoticons = params.emoticons;
    }
}
/** Changes to emoji keywords */
export class EmojiKeywordsDifference_ extends _EmojiKeywordsDifference_ {
    get [id]() {
        return 0x5CC761BD;
    }
    static get [name]() {
        return "emojiKeywordsDifference";
    }
    static get [paramDesc]() {
        return [
            ["lang_code", "string", "string"],
            ["from_version", "number", "int"],
            ["version", "number", "int"],
            ["keywords", [_EmojiKeyword_], "Vector<EmojiKeyword>"],
        ];
    }
    get [params]() {
        return [
            [this.lang_code, "string", "string"],
            [this.from_version, "number", "int"],
            [this.version, "number", "int"],
            [this.keywords, [_EmojiKeyword_], "Vector<EmojiKeyword>"],
        ];
    }
    constructor(params) {
        super();
        /** Language code for keywords */
        Object.defineProperty(this, "lang_code", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Previous emoji keyword list version */
        Object.defineProperty(this, "from_version", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Current version of emoji keyword list */
        Object.defineProperty(this, "version", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Emojis associated to keywords */
        Object.defineProperty(this, "keywords", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.lang_code = params.lang_code;
        this.from_version = params.from_version;
        this.version = params.version;
        this.keywords = params.keywords;
    }
}
/** An HTTP URL which can be used to automatically log in into translation platform and suggest new emoji replacements. The URL will be valid for 30 seconds after generation */
export class EmojiURL_ extends _EmojiURL_ {
    get [id]() {
        return 0xA575739D;
    }
    static get [name]() {
        return "emojiURL";
    }
    static get [paramDesc]() {
        return [
            ["url", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.url, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** An HTTP URL which can be used to automatically log in into translation platform and suggest new emoji replacements. The URL will be valid for 30 seconds after generation */
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.url = params.url;
    }
}
/** Emoji language */
export class EmojiLanguage_ extends _EmojiLanguage_ {
    get [id]() {
        return 0xB3FB5361;
    }
    static get [name]() {
        return "emojiLanguage";
    }
    static get [paramDesc]() {
        return [
            ["lang_code", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.lang_code, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Language code */
        Object.defineProperty(this, "lang_code", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.lang_code = params.lang_code;
    }
}
/** Folder */
export class Folder_ extends _Folder_ {
    get [id]() {
        return 0xFF544E65;
    }
    static get [name]() {
        return "folder";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["autofill_new_broadcasts", "true", "flags.0?true"],
            ["autofill_public_groups", "true", "flags.1?true"],
            ["autofill_new_correspondents", "true", "flags.2?true"],
            ["id", "number", "int"],
            ["title", "string", "string"],
            ["photo", _ChatPhoto_, "flags.3?ChatPhoto"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.autofill_new_broadcasts ?? null, "true", "flags.0?true"],
            [this.autofill_public_groups ?? null, "true", "flags.1?true"],
            [this.autofill_new_correspondents ?? null, "true", "flags.2?true"],
            [this.id, "number", "int"],
            [this.title, "string", "string"],
            [this.photo ?? null, _ChatPhoto_, "flags.3?ChatPhoto"],
        ];
    }
    constructor(params) {
        super();
        /** Automatically add new channels to this folder */
        Object.defineProperty(this, "autofill_new_broadcasts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Automatically add joined new public supergroups to this folder */
        Object.defineProperty(this, "autofill_public_groups", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Automatically add new private chats to this folder */
        Object.defineProperty(this, "autofill_new_correspondents", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Folder ID */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Folder title */
        Object.defineProperty(this, "title", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Folder picture */
        Object.defineProperty(this, "photo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.autofill_new_broadcasts = params.autofill_new_broadcasts;
        this.autofill_public_groups = params.autofill_public_groups;
        this.autofill_new_correspondents = params.autofill_new_correspondents;
        this.id = params.id;
        this.title = params.title;
        this.photo = params.photo;
    }
}
/** Peer in a folder */
export class InputFolderPeer_ extends _InputFolderPeer_ {
    get [id]() {
        return 0xFBD2C296;
    }
    static get [name]() {
        return "inputFolderPeer";
    }
    static get [paramDesc]() {
        return [
            ["peer", _InputPeer_, "InputPeer"],
            ["folder_id", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.peer, _InputPeer_, "InputPeer"],
            [this.folder_id, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Peer */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Peer folder ID, for more info click here](https://core.telegram.org/api/folders#peer-folders) */
        Object.defineProperty(this, "folder_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.peer = params.peer;
        this.folder_id = params.folder_id;
    }
}
/** Peer in a folder */
export class FolderPeer_ extends _FolderPeer_ {
    get [id]() {
        return 0xE9BAA668;
    }
    static get [name]() {
        return "folderPeer";
    }
    static get [paramDesc]() {
        return [
            ["peer", _Peer_, "Peer"],
            ["folder_id", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.peer, _Peer_, "Peer"],
            [this.folder_id, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Folder peer info */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Peer folder ID, for more info click here](https://core.telegram.org/api/folders#peer-folders) */
        Object.defineProperty(this, "folder_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.peer = params.peer;
        this.folder_id = params.folder_id;
    }
}
/** Indicates how many results would be found by a [messages.search](https://core.telegram.org/method/messages.search) call with the same parameters */
export class messages_SearchCounter_ extends _messages_SearchCounter_ {
    get [id]() {
        return 0xE844EBFF;
    }
    static get [name]() {
        return "messages.searchCounter";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["inexact", "true", "flags.1?true"],
            ["filter", _MessagesFilter_, "MessagesFilter"],
            ["count", "number", "int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.inexact ?? null, "true", "flags.1?true"],
            [this.filter, _MessagesFilter_, "MessagesFilter"],
            [this.count, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** If set, the results may be inexact */
        Object.defineProperty(this, "inexact", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Provided message filter */
        Object.defineProperty(this, "filter", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of results that were found server-side */
        Object.defineProperty(this, "count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.inexact = params.inexact;
        this.filter = params.filter;
        this.count = params.count;
    }
}
/** Details about the authorization request, for more info [click here »](https://core.telegram.org/api/url-authorization) */
export class UrlAuthResultRequest_ extends _UrlAuthResult_ {
    get [id]() {
        return 0x92D33A0E;
    }
    static get [name]() {
        return "urlAuthResultRequest";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["request_write_access", "true", "flags.0?true"],
            ["bot", _User_, "User"],
            ["domain", "string", "string"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.request_write_access ?? null, "true", "flags.0?true"],
            [this.bot, _User_, "User"],
            [this.domain, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Whether the bot would like to send messages to the user */
        Object.defineProperty(this, "request_write_access", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Username of a bot, which will be used for user authorization. If not specified, the current bot's username will be assumed. The url's domain must be the same as the domain linked with the bot. See [Linking your domain to the bot](https://core.telegram.org/widgets/login#linking-your-domain-to-the-bot) for more details. */
        Object.defineProperty(this, "bot", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The domain name of the website on which the user will log in. */
        Object.defineProperty(this, "domain", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.request_write_access = params.request_write_access;
        this.bot = params.bot;
        this.domain = params.domain;
    }
}
/** Details about an accepted authorization request, for more info [click here »](https://core.telegram.org/api/url-authorization) */
export class UrlAuthResultAccepted_ extends _UrlAuthResult_ {
    get [id]() {
        return 0x8F8C0E4E;
    }
    static get [name]() {
        return "urlAuthResultAccepted";
    }
    static get [paramDesc]() {
        return [
            ["url", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.url, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** The URL name of the website on which the user has logged in. */
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.url = params.url;
    }
}
/** Details about an accepted authorization request, for more info [click here »](https://core.telegram.org/api/url-authorization) */
export class UrlAuthResultDefault_ extends _UrlAuthResult_ {
    get [id]() {
        return 0xA9D6DB1F;
    }
    static get [name]() {
        return "urlAuthResultDefault";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** No location (normal supergroup) */
export class ChannelLocationEmpty_ extends _ChannelLocation_ {
    get [id]() {
        return 0xBFB5AD8B;
    }
    static get [name]() {
        return "channelLocationEmpty";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Geographical location of supergroup (geogroups) */
export class ChannelLocation_ extends _ChannelLocation_ {
    get [id]() {
        return 0x209B82DB;
    }
    static get [name]() {
        return "channelLocation";
    }
    static get [paramDesc]() {
        return [
            ["geo_point", _GeoPoint_, "GeoPoint"],
            ["address", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.geo_point, _GeoPoint_, "GeoPoint"],
            [this.address, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Geographical location of supergroup */
        Object.defineProperty(this, "geo_point", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Textual description of the address */
        Object.defineProperty(this, "address", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.geo_point = params.geo_point;
        this.address = params.address;
    }
}
/** Peer geolocated nearby */
export class PeerLocated_ extends _PeerLocated_ {
    get [id]() {
        return 0xCA461B5D;
    }
    static get [name]() {
        return "peerLocated";
    }
    static get [paramDesc]() {
        return [
            ["peer", _Peer_, "Peer"],
            ["expires", "number", "int"],
            ["distance", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.peer, _Peer_, "Peer"],
            [this.expires, "number", "int"],
            [this.distance, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Peer */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Validity period of current data */
        Object.defineProperty(this, "expires", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Distance from the peer in meters */
        Object.defineProperty(this, "distance", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.peer = params.peer;
        this.expires = params.expires;
        this.distance = params.distance;
    }
}
/** Current peer */
export class PeerSelfLocated_ extends _PeerLocated_ {
    get [id]() {
        return 0xF8EC284B;
    }
    static get [name]() {
        return "peerSelfLocated";
    }
    static get [paramDesc]() {
        return [
            ["expires", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.expires, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Expiry of geolocation info for current peer */
        Object.defineProperty(this, "expires", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.expires = params.expires;
    }
}
/** Restriction reason. */
export class RestrictionReason_ extends _RestrictionReason_ {
    get [id]() {
        return 0xD072ACB4;
    }
    static get [name]() {
        return "restrictionReason";
    }
    static get [paramDesc]() {
        return [
            ["platform", "string", "string"],
            ["reason", "string", "string"],
            ["text", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.platform, "string", "string"],
            [this.reason, "string", "string"],
            [this.text, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Platform identifier (ios, android, wp, all, etc.), can be concatenated with a dash as separator (`android-ios`, `ios-wp`, etc) */
        Object.defineProperty(this, "platform", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Restriction reason (`porno`, `terms`, etc.) */
        Object.defineProperty(this, "reason", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Error message to be shown to the user */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.platform = params.platform;
        this.reason = params.reason;
        this.text = params.text;
    }
}
/** Theme */
export class InputTheme_ extends _InputTheme_ {
    get [id]() {
        return 0x3C5693E9;
    }
    static get [name]() {
        return "inputTheme";
    }
    static get [paramDesc]() {
        return [
            ["id", "bigint", "long"],
            ["access_hash", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.id, "bigint", "long"],
            [this.access_hash, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** ID */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Access hash */
        Object.defineProperty(this, "access_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
        this.access_hash = params.access_hash;
    }
}
/** Theme by theme ID */
export class InputThemeSlug_ extends _InputTheme_ {
    get [id]() {
        return 0xF5890DF1;
    }
    static get [name]() {
        return "inputThemeSlug";
    }
    static get [paramDesc]() {
        return [
            ["slug", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.slug, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Unique theme ID obtained from a [theme deep link »](https://core.telegram.org/api/links#theme-links) */
        Object.defineProperty(this, "slug", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.slug = params.slug;
    }
}
/** Theme */
export class Theme_ extends _Theme_ {
    get [id]() {
        return 0xA00E67D6;
    }
    static get [name]() {
        return "theme";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["creator", "true", "flags.0?true"],
            ["default", "true", "flags.1?true"],
            ["for_chat", "true", "flags.5?true"],
            ["id", "bigint", "long"],
            ["access_hash", "bigint", "long"],
            ["slug", "string", "string"],
            ["title", "string", "string"],
            ["document", _Document_, "flags.2?Document"],
            ["settings", [_ThemeSettings_], "flags.3?Vector<ThemeSettings>"],
            ["emoticon", "string", "flags.6?string"],
            ["installs_count", "number", "flags.4?int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.creator ?? null, "true", "flags.0?true"],
            [this.default ?? null, "true", "flags.1?true"],
            [this.for_chat ?? null, "true", "flags.5?true"],
            [this.id, "bigint", "long"],
            [this.access_hash, "bigint", "long"],
            [this.slug, "string", "string"],
            [this.title, "string", "string"],
            [this.document ?? null, _Document_, "flags.2?Document"],
            [this.settings ?? null, [_ThemeSettings_], "flags.3?Vector<ThemeSettings>"],
            [this.emoticon ?? null, "string", "flags.6?string"],
            [this.installs_count ?? null, "number", "flags.4?int"],
        ];
    }
    constructor(params) {
        super();
        /** Whether the current user is the creator of this theme */
        Object.defineProperty(this, "creator", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this is the default theme */
        Object.defineProperty(this, "default", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this theme is meant to be used as a [chat theme](https://telegram.org/blog/chat-themes-interactive-emoji-read-receipts) */
        Object.defineProperty(this, "for_chat", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Theme ID */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Theme access hash */
        Object.defineProperty(this, "access_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Unique theme ID */
        Object.defineProperty(this, "slug", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Theme name */
        Object.defineProperty(this, "title", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Theme */
        Object.defineProperty(this, "document", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Theme settings */
        Object.defineProperty(this, "settings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Theme emoji */
        Object.defineProperty(this, "emoticon", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Installation count */
        Object.defineProperty(this, "installs_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.creator = params.creator;
        this.default = params.default;
        this.for_chat = params.for_chat;
        this.id = params.id;
        this.access_hash = params.access_hash;
        this.slug = params.slug;
        this.title = params.title;
        this.document = params.document;
        this.settings = params.settings;
        this.emoticon = params.emoticon;
        this.installs_count = params.installs_count;
    }
}
/** No new themes were installed */
export class account_ThemesNotModified_ extends _account_Themes_ {
    get [id]() {
        return 0xF41EB622;
    }
    static get [name]() {
        return "account.themesNotModified";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Installed themes */
export class account_Themes_ extends _account_Themes_ {
    get [id]() {
        return 0x9A3D8C6D;
    }
    static get [name]() {
        return "account.themes";
    }
    static get [paramDesc]() {
        return [
            ["hash", "bigint", "long"],
            ["themes", [_Theme_], "Vector<Theme>"],
        ];
    }
    get [params]() {
        return [
            [this.hash, "bigint", "long"],
            [this.themes, [_Theme_], "Vector<Theme>"],
        ];
    }
    constructor(params) {
        super();
        /** [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation) */
        Object.defineProperty(this, "hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Themes */
        Object.defineProperty(this, "themes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.hash = params.hash;
        this.themes = params.themes;
    }
}
/** Login token (for [QR code login](https://core.telegram.org/api/qr-login)) */
export class auth_LoginToken_ extends _auth_LoginToken_ {
    get [id]() {
        return 0x629F1980;
    }
    static get [name]() {
        return "auth.loginToken";
    }
    static get [paramDesc]() {
        return [
            ["expires", "number", "int"],
            ["token", Uint8Array, "bytes"],
        ];
    }
    get [params]() {
        return [
            [this.expires, "number", "int"],
            [this.token, Uint8Array, "bytes"],
        ];
    }
    constructor(params) {
        super();
        /** Expiration date of QR code */
        Object.defineProperty(this, "expires", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Token to render in QR code */
        Object.defineProperty(this, "token", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.expires = params.expires;
        this.token = params.token;
    }
}
/** Repeat the query to the specified DC */
export class auth_LoginTokenMigrateTo_ extends _auth_LoginToken_ {
    get [id]() {
        return 0x068E9916;
    }
    static get [name]() {
        return "auth.loginTokenMigrateTo";
    }
    static get [paramDesc]() {
        return [
            ["dc_id", "number", "int"],
            ["token", Uint8Array, "bytes"],
        ];
    }
    get [params]() {
        return [
            [this.dc_id, "number", "int"],
            [this.token, Uint8Array, "bytes"],
        ];
    }
    constructor(params) {
        super();
        /** DC ID */
        Object.defineProperty(this, "dc_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Token to use for login */
        Object.defineProperty(this, "token", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.dc_id = params.dc_id;
        this.token = params.token;
    }
}
/** Login via token (QR code) succeeded! */
export class auth_LoginTokenSuccess_ extends _auth_LoginToken_ {
    get [id]() {
        return 0x390D5C5E;
    }
    static get [name]() {
        return "auth.loginTokenSuccess";
    }
    static get [paramDesc]() {
        return [
            ["authorization", _auth_Authorization_, "auth.Authorization"],
        ];
    }
    get [params]() {
        return [
            [this.authorization, _auth_Authorization_, "auth.Authorization"],
        ];
    }
    constructor(params) {
        super();
        /** Authorization info */
        Object.defineProperty(this, "authorization", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.authorization = params.authorization;
    }
}
/** Sensitive content settings */
export class account_ContentSettings_ extends _account_ContentSettings_ {
    get [id]() {
        return 0x57E28221;
    }
    static get [name]() {
        return "account.contentSettings";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["sensitive_enabled", "true", "flags.0?true"],
            ["sensitive_can_change", "true", "flags.1?true"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.sensitive_enabled ?? null, "true", "flags.0?true"],
            [this.sensitive_can_change ?? null, "true", "flags.1?true"],
        ];
    }
    constructor(params) {
        super();
        /** Whether viewing of sensitive (NSFW) content is enabled */
        Object.defineProperty(this, "sensitive_enabled", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether the current client can change the sensitive content settings to view NSFW content */
        Object.defineProperty(this, "sensitive_can_change", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.sensitive_enabled = params?.sensitive_enabled;
        this.sensitive_can_change = params?.sensitive_can_change;
    }
}
/** Inactive chat list */
export class messages_InactiveChats_ extends _messages_InactiveChats_ {
    get [id]() {
        return 0xA927FEC5;
    }
    static get [name]() {
        return "messages.inactiveChats";
    }
    static get [paramDesc]() {
        return [
            ["dates", ["number"], "Vector<int>"],
            ["chats", [_Chat_], "Vector<Chat>"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            [this.dates, ["number"], "Vector<int>"],
            [this.chats, [_Chat_], "Vector<Chat>"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** When was the chat last active */
        Object.defineProperty(this, "dates", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Chat list */
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Users mentioned in the chat list */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.dates = params.dates;
        this.chats = params.chats;
        this.users = params.users;
    }
}
/** Classic theme */
export class BaseThemeClassic_ extends _BaseTheme_ {
    get [id]() {
        return 0xC3A12462;
    }
    static get [name]() {
        return "baseThemeClassic";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Day theme */
export class BaseThemeDay_ extends _BaseTheme_ {
    get [id]() {
        return 0xFBD81688;
    }
    static get [name]() {
        return "baseThemeDay";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Night theme */
export class BaseThemeNight_ extends _BaseTheme_ {
    get [id]() {
        return 0xB7B31EA8;
    }
    static get [name]() {
        return "baseThemeNight";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Tinted theme */
export class BaseThemeTinted_ extends _BaseTheme_ {
    get [id]() {
        return 0x6D5F77EE;
    }
    static get [name]() {
        return "baseThemeTinted";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Arctic theme */
export class BaseThemeArctic_ extends _BaseTheme_ {
    get [id]() {
        return 0x5B11125A;
    }
    static get [name]() {
        return "baseThemeArctic";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Theme settings */
export class InputThemeSettings_ extends _InputThemeSettings_ {
    get [id]() {
        return 0x8FDE504F;
    }
    static get [name]() {
        return "inputThemeSettings";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["message_colors_animated", "true", "flags.2?true"],
            ["base_theme", _BaseTheme_, "BaseTheme"],
            ["accent_color", "number", "int"],
            ["outbox_accent_color", "number", "flags.3?int"],
            ["message_colors", ["number"], "flags.0?Vector<int>"],
            ["wallpaper", _InputWallPaper_, "flags.1?InputWallPaper"],
            ["wallpaper_settings", _WallPaperSettings_, "flags.1?WallPaperSettings"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.message_colors_animated ?? null, "true", "flags.2?true"],
            [this.base_theme, _BaseTheme_, "BaseTheme"],
            [this.accent_color, "number", "int"],
            [this.outbox_accent_color ?? null, "number", "flags.3?int"],
            [this.message_colors ?? null, ["number"], "flags.0?Vector<int>"],
            [this.wallpaper ?? null, _InputWallPaper_, "flags.1?InputWallPaper"],
            [this.wallpaper_settings ?? null, _WallPaperSettings_, "flags.1?WallPaperSettings"],
        ];
    }
    constructor(params) {
        super();
        /** If set, the freeform gradient fill needs to be animated on every sent message */
        Object.defineProperty(this, "message_colors_animated", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Default theme on which this theme is based */
        Object.defineProperty(this, "base_theme", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Accent color, ARGB format */
        Object.defineProperty(this, "accent_color", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Accent color of outgoing messages in ARGB format */
        Object.defineProperty(this, "outbox_accent_color", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The fill to be used as a background for outgoing messages, in RGB24 format.
        If just one or two equal colors are provided, describes a solid fill of a background.
        If two different colors are provided, describes the top and bottom colors of a 0-degree gradient.
        If three or four colors are provided, describes a freeform gradient fill of a background. */
        Object.defineProperty(this, "message_colors", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [inputWallPaper](https://core.telegram.org/constructor/inputWallPaper) or [inputWallPaperSlug](https://core.telegram.org/constructor/inputWallPaper) when passing wallpaper files for [image](https://core.telegram.org/api/wallpapers#image-wallpapers) or [pattern](https://core.telegram.org/api/wallpapers#pattern-wallpapers) wallpapers, [inputWallPaperNoFile](https://core.telegram.org/constructor/inputWallPaperNoFile) with `id=0` otherwise. */
        Object.defineProperty(this, "wallpaper", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Wallpaper](https://core.telegram.org/api/wallpapers) settings. */
        Object.defineProperty(this, "wallpaper_settings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.message_colors_animated = params.message_colors_animated;
        this.base_theme = params.base_theme;
        this.accent_color = params.accent_color;
        this.outbox_accent_color = params.outbox_accent_color;
        this.message_colors = params.message_colors;
        this.wallpaper = params.wallpaper;
        this.wallpaper_settings = params.wallpaper_settings;
    }
}
/** Theme settings */
export class ThemeSettings_ extends _ThemeSettings_ {
    get [id]() {
        return 0xFA58B6D4;
    }
    static get [name]() {
        return "themeSettings";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["message_colors_animated", "true", "flags.2?true"],
            ["base_theme", _BaseTheme_, "BaseTheme"],
            ["accent_color", "number", "int"],
            ["outbox_accent_color", "number", "flags.3?int"],
            ["message_colors", ["number"], "flags.0?Vector<int>"],
            ["wallpaper", _WallPaper_, "flags.1?WallPaper"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.message_colors_animated ?? null, "true", "flags.2?true"],
            [this.base_theme, _BaseTheme_, "BaseTheme"],
            [this.accent_color, "number", "int"],
            [this.outbox_accent_color ?? null, "number", "flags.3?int"],
            [this.message_colors ?? null, ["number"], "flags.0?Vector<int>"],
            [this.wallpaper ?? null, _WallPaper_, "flags.1?WallPaper"],
        ];
    }
    constructor(params) {
        super();
        /** If set, the freeform gradient fill needs to be animated on every sent message. */
        Object.defineProperty(this, "message_colors_animated", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Base theme */
        Object.defineProperty(this, "base_theme", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Accent color, ARGB format */
        Object.defineProperty(this, "accent_color", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Accent color of outgoing messages in ARGB format */
        Object.defineProperty(this, "outbox_accent_color", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The fill to be used as a background for outgoing messages, in RGB24 format.
        If just one or two equal colors are provided, describes a solid fill of a background.
        If two different colors are provided, describes the top and bottom colors of a 0-degree gradient.
        If three or four colors are provided, describes a freeform gradient fill of a background. */
        Object.defineProperty(this, "message_colors", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Wallpaper](https://core.telegram.org/api/wallpapers) */
        Object.defineProperty(this, "wallpaper", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.message_colors_animated = params.message_colors_animated;
        this.base_theme = params.base_theme;
        this.accent_color = params.accent_color;
        this.outbox_accent_color = params.outbox_accent_color;
        this.message_colors = params.message_colors;
        this.wallpaper = params.wallpaper;
    }
}
/** Page theme */
export class WebPageAttributeTheme_ extends _WebPageAttribute_ {
    get [id]() {
        return 0x54B56617;
    }
    static get [name]() {
        return "webPageAttributeTheme";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["documents", [_Document_], "flags.0?Vector<Document>"],
            ["settings", _ThemeSettings_, "flags.1?ThemeSettings"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.documents ?? null, [_Document_], "flags.0?Vector<Document>"],
            [this.settings ?? null, _ThemeSettings_, "flags.1?ThemeSettings"],
        ];
    }
    constructor(params) {
        super();
        /** Theme files */
        Object.defineProperty(this, "documents", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Theme settings */
        Object.defineProperty(this, "settings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.documents = params?.documents;
        this.settings = params?.settings;
    }
}
/** Webpage preview of a Telegram story */
export class WebPageAttributeStory_ extends _WebPageAttribute_ {
    get [id]() {
        return 0x2E94C3E7;
    }
    static get [name]() {
        return "webPageAttributeStory";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["peer", _Peer_, "Peer"],
            ["id", "number", "int"],
            ["story", _StoryItem_, "flags.0?StoryItem"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.peer, _Peer_, "Peer"],
            [this.id, "number", "int"],
            [this.story ?? null, _StoryItem_, "flags.0?StoryItem"],
        ];
    }
    constructor(params) {
        super();
        /** Peer that posted the story */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Story ID](https://core.telegram.org/api/stories#watching-stories) */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** May contain the story, if not the story should be fetched when and if needed using [stories.getStoriesByID](https://core.telegram.org/method/stories.getStoriesByID) with the above `id` and `peer`. */
        Object.defineProperty(this, "story", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.peer = params.peer;
        this.id = params.id;
        this.story = params.story;
    }
}
/** How users voted in a poll */
export class messages_VotesList_ extends _messages_VotesList_ {
    get [id]() {
        return 0x4899484E;
    }
    static get [name]() {
        return "messages.votesList";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["count", "number", "int"],
            ["votes", [_MessagePeerVote_], "Vector<MessagePeerVote>"],
            ["chats", [_Chat_], "Vector<Chat>"],
            ["users", [_User_], "Vector<User>"],
            ["next_offset", "string", "flags.0?string"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.count, "number", "int"],
            [this.votes, [_MessagePeerVote_], "Vector<MessagePeerVote>"],
            [this.chats, [_Chat_], "Vector<Chat>"],
            [this.users, [_User_], "Vector<User>"],
            [this.next_offset ?? null, "string", "flags.0?string"],
        ];
    }
    constructor(params) {
        super();
        /** Total number of votes for all options (or only for the chosen `option`, if provided to [messages.getPollVotes](https://core.telegram.org/method/messages.getPollVotes)) */
        Object.defineProperty(this, "count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Vote info for each user */
        Object.defineProperty(this, "votes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Mentioned chats */
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Info about users that voted in the poll */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Offset to use with the next [messages.getPollVotes](https://core.telegram.org/method/messages.getPollVotes) request, empty string if no more results are available. */
        Object.defineProperty(this, "next_offset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.count = params.count;
        this.votes = params.votes;
        this.chats = params.chats;
        this.users = params.users;
        this.next_offset = params.next_offset;
    }
}
/** Credit card info URL provided by the bank */
export class BankCardOpenUrl_ extends _BankCardOpenUrl_ {
    get [id]() {
        return 0xF568028A;
    }
    static get [name]() {
        return "bankCardOpenUrl";
    }
    static get [paramDesc]() {
        return [
            ["url", "string", "string"],
            ["name", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.url, "string", "string"],
            [this.name, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Info URL */
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Bank name */
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.url = params.url;
        this.name = params.name;
    }
}
/** Credit card info, provided by the card's bank(s) */
export class payments_BankCardData_ extends _payments_BankCardData_ {
    get [id]() {
        return 0x3E24E573;
    }
    static get [name]() {
        return "payments.bankCardData";
    }
    static get [paramDesc]() {
        return [
            ["title", "string", "string"],
            ["open_urls", [_BankCardOpenUrl_], "Vector<BankCardOpenUrl>"],
        ];
    }
    get [params]() {
        return [
            [this.title, "string", "string"],
            [this.open_urls, [_BankCardOpenUrl_], "Vector<BankCardOpenUrl>"],
        ];
    }
    constructor(params) {
        super();
        /** Credit card title */
        Object.defineProperty(this, "title", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Info URL(s) provided by the card's bank(s) */
        Object.defineProperty(this, "open_urls", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.title = params.title;
        this.open_urls = params.open_urls;
    }
}
/** Dialog filter AKA [folder](https://core.telegram.org/api/folders) */
export class DialogFilter_ extends _DialogFilter_ {
    get [id]() {
        return 0x5FB5523B;
    }
    static get [name]() {
        return "dialogFilter";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["contacts", "true", "flags.0?true"],
            ["non_contacts", "true", "flags.1?true"],
            ["groups", "true", "flags.2?true"],
            ["broadcasts", "true", "flags.3?true"],
            ["bots", "true", "flags.4?true"],
            ["exclude_muted", "true", "flags.11?true"],
            ["exclude_read", "true", "flags.12?true"],
            ["exclude_archived", "true", "flags.13?true"],
            ["id", "number", "int"],
            ["title", "string", "string"],
            ["emoticon", "string", "flags.25?string"],
            ["color", "number", "flags.27?int"],
            ["pinned_peers", [_InputPeer_], "Vector<InputPeer>"],
            ["include_peers", [_InputPeer_], "Vector<InputPeer>"],
            ["exclude_peers", [_InputPeer_], "Vector<InputPeer>"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.contacts ?? null, "true", "flags.0?true"],
            [this.non_contacts ?? null, "true", "flags.1?true"],
            [this.groups ?? null, "true", "flags.2?true"],
            [this.broadcasts ?? null, "true", "flags.3?true"],
            [this.bots ?? null, "true", "flags.4?true"],
            [this.exclude_muted ?? null, "true", "flags.11?true"],
            [this.exclude_read ?? null, "true", "flags.12?true"],
            [this.exclude_archived ?? null, "true", "flags.13?true"],
            [this.id, "number", "int"],
            [this.title, "string", "string"],
            [this.emoticon ?? null, "string", "flags.25?string"],
            [this.color ?? null, "number", "flags.27?int"],
            [this.pinned_peers, [_InputPeer_], "Vector<InputPeer>"],
            [this.include_peers, [_InputPeer_], "Vector<InputPeer>"],
            [this.exclude_peers, [_InputPeer_], "Vector<InputPeer>"],
        ];
    }
    constructor(params) {
        super();
        /** Whether to include all contacts in this [folder](https://core.telegram.org/api/folders) */
        Object.defineProperty(this, "contacts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether to include all non-contacts in this [folder](https://core.telegram.org/api/folders) */
        Object.defineProperty(this, "non_contacts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether to include all groups in this [folder](https://core.telegram.org/api/folders) */
        Object.defineProperty(this, "groups", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether to include all channels in this [folder](https://core.telegram.org/api/folders) */
        Object.defineProperty(this, "broadcasts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether to include all bots in this [folder](https://core.telegram.org/api/folders) */
        Object.defineProperty(this, "bots", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether to exclude muted chats from this [folder](https://core.telegram.org/api/folders) */
        Object.defineProperty(this, "exclude_muted", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether to exclude read chats from this [folder](https://core.telegram.org/api/folders) */
        Object.defineProperty(this, "exclude_read", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether to exclude archived chats from this [folder](https://core.telegram.org/api/folders) */
        Object.defineProperty(this, "exclude_archived", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Folder](https://core.telegram.org/api/folders) ID */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Folder](https://core.telegram.org/api/folders) name */
        Object.defineProperty(this, "title", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Emoji to use as icon for the folder. */
        Object.defineProperty(this, "emoticon", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "color", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Pinned chats, [folders](https://core.telegram.org/api/folders) can have unlimited pinned chats */
        Object.defineProperty(this, "pinned_peers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Include the following chats in this [folder](https://core.telegram.org/api/folders) */
        Object.defineProperty(this, "include_peers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Exclude the following chats from this [folder](https://core.telegram.org/api/folders) */
        Object.defineProperty(this, "exclude_peers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.contacts = params.contacts;
        this.non_contacts = params.non_contacts;
        this.groups = params.groups;
        this.broadcasts = params.broadcasts;
        this.bots = params.bots;
        this.exclude_muted = params.exclude_muted;
        this.exclude_read = params.exclude_read;
        this.exclude_archived = params.exclude_archived;
        this.id = params.id;
        this.title = params.title;
        this.emoticon = params.emoticon;
        this.color = params.color;
        this.pinned_peers = params.pinned_peers;
        this.include_peers = params.include_peers;
        this.exclude_peers = params.exclude_peers;
    }
}
/** Used only when reordering folders to indicate the default (all chats) folder. */
export class DialogFilterDefault_ extends _DialogFilter_ {
    get [id]() {
        return 0x363293AE;
    }
    static get [name]() {
        return "dialogFilterDefault";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** A folder imported using a [chat folder deep link »](https://core.telegram.org/api/links#chat-folder-links). */
export class DialogFilterChatlist_ extends _DialogFilter_ {
    get [id]() {
        return 0x9FE28EA4;
    }
    static get [name]() {
        return "dialogFilterChatlist";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["has_my_invites", "true", "flags.26?true"],
            ["id", "number", "int"],
            ["title", "string", "string"],
            ["emoticon", "string", "flags.25?string"],
            ["color", "number", "flags.27?int"],
            ["pinned_peers", [_InputPeer_], "Vector<InputPeer>"],
            ["include_peers", [_InputPeer_], "Vector<InputPeer>"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.has_my_invites ?? null, "true", "flags.26?true"],
            [this.id, "number", "int"],
            [this.title, "string", "string"],
            [this.emoticon ?? null, "string", "flags.25?string"],
            [this.color ?? null, "number", "flags.27?int"],
            [this.pinned_peers, [_InputPeer_], "Vector<InputPeer>"],
            [this.include_peers, [_InputPeer_], "Vector<InputPeer>"],
        ];
    }
    constructor(params) {
        super();
        /** Whether the current user has created some [chat folder deep links »](https://core.telegram.org/api/links#chat-folder-links) to share the folder as well. */
        Object.defineProperty(this, "has_my_invites", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the folder */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Name of the folder */
        Object.defineProperty(this, "title", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Emoji to use as icon for the folder. */
        Object.defineProperty(this, "emoticon", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "color", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Pinned chats, [folders](https://core.telegram.org/api/folders) can have unlimited pinned chats */
        Object.defineProperty(this, "pinned_peers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Chats to include in the folder */
        Object.defineProperty(this, "include_peers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.has_my_invites = params.has_my_invites;
        this.id = params.id;
        this.title = params.title;
        this.emoticon = params.emoticon;
        this.color = params.color;
        this.pinned_peers = params.pinned_peers;
        this.include_peers = params.include_peers;
    }
}
/** Suggested [folders](https://core.telegram.org/api/folders) */
export class DialogFilterSuggested_ extends _DialogFilterSuggested_ {
    get [id]() {
        return 0x77744D4A;
    }
    static get [name]() {
        return "dialogFilterSuggested";
    }
    static get [paramDesc]() {
        return [
            ["filter", _DialogFilter_, "DialogFilter"],
            ["description", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.filter, _DialogFilter_, "DialogFilter"],
            [this.description, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** [Folder info](https://core.telegram.org/api/folders) */
        Object.defineProperty(this, "filter", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Folder](https://core.telegram.org/api/folders) description */
        Object.defineProperty(this, "description", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.filter = params.filter;
        this.description = params.description;
    }
}
/** [Channel statistics](https://core.telegram.org/api/stats) date range */
export class StatsDateRangeDays_ extends _StatsDateRangeDays_ {
    get [id]() {
        return 0xB637EDAF;
    }
    static get [name]() {
        return "statsDateRangeDays";
    }
    static get [paramDesc]() {
        return [
            ["min_date", "number", "int"],
            ["max_date", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.min_date, "number", "int"],
            [this.max_date, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Initial date */
        Object.defineProperty(this, "min_date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Final date */
        Object.defineProperty(this, "max_date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.min_date = params.min_date;
        this.max_date = params.max_date;
    }
}
/** Statistics value couple; initial and final value for period of time currently in consideration */
export class StatsAbsValueAndPrev_ extends _StatsAbsValueAndPrev_ {
    get [id]() {
        return 0xCB43ACDE;
    }
    static get [name]() {
        return "statsAbsValueAndPrev";
    }
    static get [paramDesc]() {
        return [
            ["current", "number", "double"],
            ["previous", "number", "double"],
        ];
    }
    get [params]() {
        return [
            [this.current, "number", "double"],
            [this.previous, "number", "double"],
        ];
    }
    constructor(params) {
        super();
        /** Current value */
        Object.defineProperty(this, "current", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Previous value */
        Object.defineProperty(this, "previous", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.current = params.current;
        this.previous = params.previous;
    }
}
/** [Channel statistics percentage](https://core.telegram.org/api/stats).
Compute the percentage simply by doing `part * total / 100` */
export class StatsPercentValue_ extends _StatsPercentValue_ {
    get [id]() {
        return 0xCBCE2FE0;
    }
    static get [name]() {
        return "statsPercentValue";
    }
    static get [paramDesc]() {
        return [
            ["part", "number", "double"],
            ["total", "number", "double"],
        ];
    }
    get [params]() {
        return [
            [this.part, "number", "double"],
            [this.total, "number", "double"],
        ];
    }
    constructor(params) {
        super();
        /** Partial value */
        Object.defineProperty(this, "part", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Total value */
        Object.defineProperty(this, "total", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.part = params.part;
        this.total = params.total;
    }
}
/** This [channel statistics graph](https://core.telegram.org/api/stats) must be generated asynchronously using [stats.loadAsyncGraph](https://core.telegram.org/method/stats.loadAsyncGraph) to reduce server load */
export class StatsGraphAsync_ extends _StatsGraph_ {
    get [id]() {
        return 0x4A27EB2D;
    }
    static get [name]() {
        return "statsGraphAsync";
    }
    static get [paramDesc]() {
        return [
            ["token", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.token, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Token to use for fetching the async graph */
        Object.defineProperty(this, "token", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.token = params.token;
    }
}
/** An error occurred while generating the [statistics graph](https://core.telegram.org/api/stats) */
export class StatsGraphError_ extends _StatsGraph_ {
    get [id]() {
        return 0xBEDC9822;
    }
    static get [name]() {
        return "statsGraphError";
    }
    static get [paramDesc]() {
        return [
            ["error", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.error, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** The error */
        Object.defineProperty(this, "error", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.error = params.error;
    }
}
/** [Channel statistics graph](https://core.telegram.org/api/stats) */
export class StatsGraph_ extends _StatsGraph_ {
    get [id]() {
        return 0x8EA464B6;
    }
    static get [name]() {
        return "statsGraph";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["json", _DataJSON_, "DataJSON"],
            ["zoom_token", "string", "flags.0?string"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.json, _DataJSON_, "DataJSON"],
            [this.zoom_token ?? null, "string", "flags.0?string"],
        ];
    }
    constructor(params) {
        super();
        /** Statistics data */
        Object.defineProperty(this, "json", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Zoom token */
        Object.defineProperty(this, "zoom_token", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.json = params.json;
        this.zoom_token = params.zoom_token;
    }
}
/** [Channel statistics](https://core.telegram.org/api/stats). */
export class stats_BroadcastStats_ extends _stats_BroadcastStats_ {
    get [id]() {
        return 0x396CA5FC;
    }
    static get [name]() {
        return "stats.broadcastStats";
    }
    static get [paramDesc]() {
        return [
            ["period", _StatsDateRangeDays_, "StatsDateRangeDays"],
            ["followers", _StatsAbsValueAndPrev_, "StatsAbsValueAndPrev"],
            ["views_per_post", _StatsAbsValueAndPrev_, "StatsAbsValueAndPrev"],
            ["shares_per_post", _StatsAbsValueAndPrev_, "StatsAbsValueAndPrev"],
            ["reactions_per_post", _StatsAbsValueAndPrev_, "StatsAbsValueAndPrev"],
            ["views_per_story", _StatsAbsValueAndPrev_, "StatsAbsValueAndPrev"],
            ["shares_per_story", _StatsAbsValueAndPrev_, "StatsAbsValueAndPrev"],
            ["reactions_per_story", _StatsAbsValueAndPrev_, "StatsAbsValueAndPrev"],
            ["enabled_notifications", _StatsPercentValue_, "StatsPercentValue"],
            ["growth_graph", _StatsGraph_, "StatsGraph"],
            ["followers_graph", _StatsGraph_, "StatsGraph"],
            ["mute_graph", _StatsGraph_, "StatsGraph"],
            ["top_hours_graph", _StatsGraph_, "StatsGraph"],
            ["interactions_graph", _StatsGraph_, "StatsGraph"],
            ["iv_interactions_graph", _StatsGraph_, "StatsGraph"],
            ["views_by_source_graph", _StatsGraph_, "StatsGraph"],
            ["new_followers_by_source_graph", _StatsGraph_, "StatsGraph"],
            ["languages_graph", _StatsGraph_, "StatsGraph"],
            ["reactions_by_emotion_graph", _StatsGraph_, "StatsGraph"],
            ["story_interactions_graph", _StatsGraph_, "StatsGraph"],
            ["story_reactions_by_emotion_graph", _StatsGraph_, "StatsGraph"],
            ["recent_posts_interactions", [_PostInteractionCounters_], "Vector<PostInteractionCounters>"],
        ];
    }
    get [params]() {
        return [
            [this.period, _StatsDateRangeDays_, "StatsDateRangeDays"],
            [this.followers, _StatsAbsValueAndPrev_, "StatsAbsValueAndPrev"],
            [this.views_per_post, _StatsAbsValueAndPrev_, "StatsAbsValueAndPrev"],
            [this.shares_per_post, _StatsAbsValueAndPrev_, "StatsAbsValueAndPrev"],
            [this.reactions_per_post, _StatsAbsValueAndPrev_, "StatsAbsValueAndPrev"],
            [this.views_per_story, _StatsAbsValueAndPrev_, "StatsAbsValueAndPrev"],
            [this.shares_per_story, _StatsAbsValueAndPrev_, "StatsAbsValueAndPrev"],
            [this.reactions_per_story, _StatsAbsValueAndPrev_, "StatsAbsValueAndPrev"],
            [this.enabled_notifications, _StatsPercentValue_, "StatsPercentValue"],
            [this.growth_graph, _StatsGraph_, "StatsGraph"],
            [this.followers_graph, _StatsGraph_, "StatsGraph"],
            [this.mute_graph, _StatsGraph_, "StatsGraph"],
            [this.top_hours_graph, _StatsGraph_, "StatsGraph"],
            [this.interactions_graph, _StatsGraph_, "StatsGraph"],
            [this.iv_interactions_graph, _StatsGraph_, "StatsGraph"],
            [this.views_by_source_graph, _StatsGraph_, "StatsGraph"],
            [this.new_followers_by_source_graph, _StatsGraph_, "StatsGraph"],
            [this.languages_graph, _StatsGraph_, "StatsGraph"],
            [this.reactions_by_emotion_graph, _StatsGraph_, "StatsGraph"],
            [this.story_interactions_graph, _StatsGraph_, "StatsGraph"],
            [this.story_reactions_by_emotion_graph, _StatsGraph_, "StatsGraph"],
            [this.recent_posts_interactions, [_PostInteractionCounters_], "Vector<PostInteractionCounters>"],
        ];
    }
    constructor(params) {
        super();
        /** Period in consideration */
        Object.defineProperty(this, "period", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Follower count change for period in consideration */
        Object.defineProperty(this, "followers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** `total_viewcount/postcount`, for posts posted during the period in consideration.
        Note that in this case, `current` refers to the `period` in consideration (`min_date` till `max_date`), and `prev` refers to the previous period (`(min_date - (max_date - min_date))` till `min_date`). */
        Object.defineProperty(this, "views_per_post", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** `total_sharecount/postcount`, for posts posted during the period in consideration.
        Note that in this case, `current` refers to the `period` in consideration (`min_date` till `max_date`), and `prev` refers to the previous period (`(min_date - (max_date - min_date))` till `min_date`) */
        Object.defineProperty(this, "shares_per_post", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** `total_reactions/postcount`, for posts posted during the period in consideration.
        Note that in this case, `current` refers to the `period` in consideration (`min_date` till `max_date`), and `prev` refers to the previous period (`(min_date - (max_date - min_date))` till `min_date`) */
        Object.defineProperty(this, "reactions_per_post", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** `total_views/storycount`, for posts posted during the period in consideration.
        Note that in this case, `current` refers to the `period` in consideration (`min_date` till `max_date`), and `prev` refers to the previous period (`(min_date - (max_date - min_date))` till `min_date`) */
        Object.defineProperty(this, "views_per_story", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** `total_shares/storycount`, for posts posted during the period in consideration.
        Note that in this case, `current` refers to the `period` in consideration (`min_date` till `max_date`), and `prev` refers to the previous period (`(min_date - (max_date - min_date))` till `min_date`) */
        Object.defineProperty(this, "shares_per_story", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** `total_reactions/storycount`, for posts posted during the period in consideration.
        Note that in this case, `current` refers to the `period` in consideration (`min_date` till `max_date`), and `prev` refers to the previous period (`(min_date - (max_date - min_date))` till `min_date`) */
        Object.defineProperty(this, "reactions_per_story", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Percentage of subscribers with enabled notifications */
        Object.defineProperty(this, "enabled_notifications", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Channel growth graph (absolute subscriber count) */
        Object.defineProperty(this, "growth_graph", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Followers growth graph (relative subscriber count) */
        Object.defineProperty(this, "followers_graph", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Muted users graph (relative) */
        Object.defineProperty(this, "mute_graph", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Views per hour graph (absolute) */
        Object.defineProperty(this, "top_hours_graph", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Interactions graph (absolute) */
        Object.defineProperty(this, "interactions_graph", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** IV interactions graph (absolute) */
        Object.defineProperty(this, "iv_interactions_graph", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Views by source graph (absolute) */
        Object.defineProperty(this, "views_by_source_graph", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New followers by source graph (absolute) */
        Object.defineProperty(this, "new_followers_by_source_graph", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Subscriber language graph (pie chart) */
        Object.defineProperty(this, "languages_graph", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** A graph containing the number of reactions on posts categorized by emotion */
        Object.defineProperty(this, "reactions_by_emotion_graph", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** A graph containing the number of story views and shares */
        Object.defineProperty(this, "story_interactions_graph", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** A graph containing the number of reactions on stories categorized by emotion */
        Object.defineProperty(this, "story_reactions_by_emotion_graph", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Detailed statistics about number of views and shares of recently sent messages and stories */
        Object.defineProperty(this, "recent_posts_interactions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.period = params.period;
        this.followers = params.followers;
        this.views_per_post = params.views_per_post;
        this.shares_per_post = params.shares_per_post;
        this.reactions_per_post = params.reactions_per_post;
        this.views_per_story = params.views_per_story;
        this.shares_per_story = params.shares_per_story;
        this.reactions_per_story = params.reactions_per_story;
        this.enabled_notifications = params.enabled_notifications;
        this.growth_graph = params.growth_graph;
        this.followers_graph = params.followers_graph;
        this.mute_graph = params.mute_graph;
        this.top_hours_graph = params.top_hours_graph;
        this.interactions_graph = params.interactions_graph;
        this.iv_interactions_graph = params.iv_interactions_graph;
        this.views_by_source_graph = params.views_by_source_graph;
        this.new_followers_by_source_graph = params.new_followers_by_source_graph;
        this.languages_graph = params.languages_graph;
        this.reactions_by_emotion_graph = params.reactions_by_emotion_graph;
        this.story_interactions_graph = params.story_interactions_graph;
        this.story_reactions_by_emotion_graph = params.story_reactions_by_emotion_graph;
        this.recent_posts_interactions = params.recent_posts_interactions;
    }
}
/** No PSA/MTProxy info is available */
export class help_PromoDataEmpty_ extends _help_PromoData_ {
    get [id]() {
        return 0x98F6AC75;
    }
    static get [name]() {
        return "help.promoDataEmpty";
    }
    static get [paramDesc]() {
        return [
            ["expires", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.expires, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Re-fetch PSA/MTProxy info after the specified number of seconds */
        Object.defineProperty(this, "expires", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.expires = params.expires;
    }
}
/** MTProxy/Public Service Announcement information */
export class help_PromoData_ extends _help_PromoData_ {
    get [id]() {
        return 0x8C39793F;
    }
    static get [name]() {
        return "help.promoData";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["proxy", "true", "flags.0?true"],
            ["expires", "number", "int"],
            ["peer", _Peer_, "Peer"],
            ["chats", [_Chat_], "Vector<Chat>"],
            ["users", [_User_], "Vector<User>"],
            ["psa_type", "string", "flags.1?string"],
            ["psa_message", "string", "flags.2?string"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.proxy ?? null, "true", "flags.0?true"],
            [this.expires, "number", "int"],
            [this.peer, _Peer_, "Peer"],
            [this.chats, [_Chat_], "Vector<Chat>"],
            [this.users, [_User_], "Vector<User>"],
            [this.psa_type ?? null, "string", "flags.1?string"],
            [this.psa_message ?? null, "string", "flags.2?string"],
        ];
    }
    constructor(params) {
        super();
        /** MTProxy-related channel */
        Object.defineProperty(this, "proxy", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Expiry of PSA/MTProxy info */
        Object.defineProperty(this, "expires", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** MTProxy/PSA peer */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Chat info */
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** User info */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** PSA type */
        Object.defineProperty(this, "psa_type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** PSA message */
        Object.defineProperty(this, "psa_message", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.proxy = params.proxy;
        this.expires = params.expires;
        this.peer = params.peer;
        this.chats = params.chats;
        this.users = params.users;
        this.psa_type = params.psa_type;
        this.psa_message = params.psa_message;
    }
}
/** An [animated profile picture](https://core.telegram.org/api/files#animated-profile-pictures) in MPEG4 format */
export class VideoSize_ extends _VideoSize_ {
    get [id]() {
        return 0xDE33B094;
    }
    static get [name]() {
        return "videoSize";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["type", "string", "string"],
            ["w", "number", "int"],
            ["h", "number", "int"],
            ["size", "number", "int"],
            ["video_start_ts", "number", "flags.0?double"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.type, "string", "string"],
            [this.w, "number", "int"],
            [this.h, "number", "int"],
            [this.size, "number", "int"],
            [this.video_start_ts ?? null, "number", "flags.0?double"],
        ];
    }
    constructor(params) {
        super();
        /** `u` for animated profile pictures, and `v` for trimmed and downscaled video previews */
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Video width */
        Object.defineProperty(this, "w", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Video height */
        Object.defineProperty(this, "h", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** File size */
        Object.defineProperty(this, "size", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Timestamp that should be shown as static preview to the user (seconds) */
        Object.defineProperty(this, "video_start_ts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.type = params.type;
        this.w = params.w;
        this.h = params.h;
        this.size = params.size;
        this.video_start_ts = params.video_start_ts;
    }
}
/** An [animated profile picture](https://core.telegram.org/api/files#animated-profile-pictures) based on a [custom emoji sticker](https://core.telegram.org/api/custom-emoji). */
export class VideoSizeEmojiMarkup_ extends _VideoSize_ {
    get [id]() {
        return 0xF85C413C;
    }
    static get [name]() {
        return "videoSizeEmojiMarkup";
    }
    static get [paramDesc]() {
        return [
            ["emoji_id", "bigint", "long"],
            ["background_colors", ["number"], "Vector<int>"],
        ];
    }
    get [params]() {
        return [
            [this.emoji_id, "bigint", "long"],
            [this.background_colors, ["number"], "Vector<int>"],
        ];
    }
    constructor(params) {
        super();
        /** [Custom emoji ID](https://core.telegram.org/api/custom-emoji): the custom emoji sticker is shown at the center of the profile picture and occupies at most 67% of it. */
        Object.defineProperty(this, "emoji_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** 1, 2, 3 or 4 RBG-24 colors used to generate a solid (1), gradient (2) or freeform gradient (3, 4) background, similar to how [fill wallpapers](https://core.telegram.org/api/wallpapers#fill-types) are generated. The rotation angle for gradient backgrounds is 0. */
        Object.defineProperty(this, "background_colors", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.emoji_id = params.emoji_id;
        this.background_colors = params.background_colors;
    }
}
/** An [animated profile picture](https://core.telegram.org/api/files#animated-profile-pictures) based on a [sticker](https://core.telegram.org/api/stickers). */
export class VideoSizeStickerMarkup_ extends _VideoSize_ {
    get [id]() {
        return 0x0DA082FE;
    }
    static get [name]() {
        return "videoSizeStickerMarkup";
    }
    static get [paramDesc]() {
        return [
            ["stickerset", _InputStickerSet_, "InputStickerSet"],
            ["sticker_id", "bigint", "long"],
            ["background_colors", ["number"], "Vector<int>"],
        ];
    }
    get [params]() {
        return [
            [this.stickerset, _InputStickerSet_, "InputStickerSet"],
            [this.sticker_id, "bigint", "long"],
            [this.background_colors, ["number"], "Vector<int>"],
        ];
    }
    constructor(params) {
        super();
        /** Stickerset */
        Object.defineProperty(this, "stickerset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Sticker ID */
        Object.defineProperty(this, "sticker_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** 1, 2, 3 or 4 RBG-24 colors used to generate a solid (1), gradient (2) or freeform gradient (3, 4) background, similar to how [fill wallpapers](https://core.telegram.org/api/wallpapers#fill-types) are generated. The rotation angle for gradient backgrounds is 0. */
        Object.defineProperty(this, "background_colors", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.stickerset = params.stickerset;
        this.sticker_id = params.sticker_id;
        this.background_colors = params.background_colors;
    }
}
/** Information about an active user in a supergroup */
export class StatsGroupTopPoster_ extends _StatsGroupTopPoster_ {
    get [id]() {
        return 0x9D04AF9B;
    }
    static get [name]() {
        return "statsGroupTopPoster";
    }
    static get [paramDesc]() {
        return [
            ["user_id", "bigint", "long"],
            ["messages", "number", "int"],
            ["avg_chars", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.user_id, "bigint", "long"],
            [this.messages, "number", "int"],
            [this.avg_chars, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** User ID */
        Object.defineProperty(this, "user_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of messages for [statistics](https://core.telegram.org/api/stats) period in consideration */
        Object.defineProperty(this, "messages", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Average number of characters per message */
        Object.defineProperty(this, "avg_chars", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.user_id = params.user_id;
        this.messages = params.messages;
        this.avg_chars = params.avg_chars;
    }
}
/** Information about an active admin in a supergroup */
export class StatsGroupTopAdmin_ extends _StatsGroupTopAdmin_ {
    get [id]() {
        return 0xD7584C87;
    }
    static get [name]() {
        return "statsGroupTopAdmin";
    }
    static get [paramDesc]() {
        return [
            ["user_id", "bigint", "long"],
            ["deleted", "number", "int"],
            ["kicked", "number", "int"],
            ["banned", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.user_id, "bigint", "long"],
            [this.deleted, "number", "int"],
            [this.kicked, "number", "int"],
            [this.banned, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** User ID */
        Object.defineProperty(this, "user_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of deleted messages for [statistics](https://core.telegram.org/api/stats) period in consideration */
        Object.defineProperty(this, "deleted", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of kicked users for [statistics](https://core.telegram.org/api/stats) period in consideration */
        Object.defineProperty(this, "kicked", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of banned users for [statistics](https://core.telegram.org/api/stats) period in consideration */
        Object.defineProperty(this, "banned", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.user_id = params.user_id;
        this.deleted = params.deleted;
        this.kicked = params.kicked;
        this.banned = params.banned;
    }
}
/** Information about an active supergroup inviter */
export class StatsGroupTopInviter_ extends _StatsGroupTopInviter_ {
    get [id]() {
        return 0x535F779D;
    }
    static get [name]() {
        return "statsGroupTopInviter";
    }
    static get [paramDesc]() {
        return [
            ["user_id", "bigint", "long"],
            ["invitations", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.user_id, "bigint", "long"],
            [this.invitations, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** User ID */
        Object.defineProperty(this, "user_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of invitations for [statistics](https://core.telegram.org/api/stats) period in consideration */
        Object.defineProperty(this, "invitations", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.user_id = params.user_id;
        this.invitations = params.invitations;
    }
}
/** Supergroup [statistics](https://core.telegram.org/api/stats) */
export class stats_MegagroupStats_ extends _stats_MegagroupStats_ {
    get [id]() {
        return 0xEF7FF916;
    }
    static get [name]() {
        return "stats.megagroupStats";
    }
    static get [paramDesc]() {
        return [
            ["period", _StatsDateRangeDays_, "StatsDateRangeDays"],
            ["members", _StatsAbsValueAndPrev_, "StatsAbsValueAndPrev"],
            ["messages", _StatsAbsValueAndPrev_, "StatsAbsValueAndPrev"],
            ["viewers", _StatsAbsValueAndPrev_, "StatsAbsValueAndPrev"],
            ["posters", _StatsAbsValueAndPrev_, "StatsAbsValueAndPrev"],
            ["growth_graph", _StatsGraph_, "StatsGraph"],
            ["members_graph", _StatsGraph_, "StatsGraph"],
            ["new_members_by_source_graph", _StatsGraph_, "StatsGraph"],
            ["languages_graph", _StatsGraph_, "StatsGraph"],
            ["messages_graph", _StatsGraph_, "StatsGraph"],
            ["actions_graph", _StatsGraph_, "StatsGraph"],
            ["top_hours_graph", _StatsGraph_, "StatsGraph"],
            ["weekdays_graph", _StatsGraph_, "StatsGraph"],
            ["top_posters", [_StatsGroupTopPoster_], "Vector<StatsGroupTopPoster>"],
            ["top_admins", [_StatsGroupTopAdmin_], "Vector<StatsGroupTopAdmin>"],
            ["top_inviters", [_StatsGroupTopInviter_], "Vector<StatsGroupTopInviter>"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            [this.period, _StatsDateRangeDays_, "StatsDateRangeDays"],
            [this.members, _StatsAbsValueAndPrev_, "StatsAbsValueAndPrev"],
            [this.messages, _StatsAbsValueAndPrev_, "StatsAbsValueAndPrev"],
            [this.viewers, _StatsAbsValueAndPrev_, "StatsAbsValueAndPrev"],
            [this.posters, _StatsAbsValueAndPrev_, "StatsAbsValueAndPrev"],
            [this.growth_graph, _StatsGraph_, "StatsGraph"],
            [this.members_graph, _StatsGraph_, "StatsGraph"],
            [this.new_members_by_source_graph, _StatsGraph_, "StatsGraph"],
            [this.languages_graph, _StatsGraph_, "StatsGraph"],
            [this.messages_graph, _StatsGraph_, "StatsGraph"],
            [this.actions_graph, _StatsGraph_, "StatsGraph"],
            [this.top_hours_graph, _StatsGraph_, "StatsGraph"],
            [this.weekdays_graph, _StatsGraph_, "StatsGraph"],
            [this.top_posters, [_StatsGroupTopPoster_], "Vector<StatsGroupTopPoster>"],
            [this.top_admins, [_StatsGroupTopAdmin_], "Vector<StatsGroupTopAdmin>"],
            [this.top_inviters, [_StatsGroupTopInviter_], "Vector<StatsGroupTopInviter>"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** Period in consideration */
        Object.defineProperty(this, "period", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Member count change for period in consideration */
        Object.defineProperty(this, "members", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Message number change for period in consideration */
        Object.defineProperty(this, "messages", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of users that viewed messages, for range in consideration */
        Object.defineProperty(this, "viewers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of users that posted messages, for range in consideration */
        Object.defineProperty(this, "posters", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Supergroup growth graph (absolute subscriber count) */
        Object.defineProperty(this, "growth_graph", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Members growth (relative subscriber count) */
        Object.defineProperty(this, "members_graph", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New members by source graph */
        Object.defineProperty(this, "new_members_by_source_graph", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Subscriber language graph (pie chart) */
        Object.defineProperty(this, "languages_graph", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Message activity graph (stacked bar graph, message type) */
        Object.defineProperty(this, "messages_graph", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Group activity graph (deleted, modified messages, blocked users) */
        Object.defineProperty(this, "actions_graph", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Activity per hour graph (absolute) */
        Object.defineProperty(this, "top_hours_graph", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Activity per day of week graph (absolute) */
        Object.defineProperty(this, "weekdays_graph", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Info about most active group members */
        Object.defineProperty(this, "top_posters", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Info about most active group admins */
        Object.defineProperty(this, "top_admins", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Info about most active group inviters */
        Object.defineProperty(this, "top_inviters", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Info about users mentioned in statistics */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.period = params.period;
        this.members = params.members;
        this.messages = params.messages;
        this.viewers = params.viewers;
        this.posters = params.posters;
        this.growth_graph = params.growth_graph;
        this.members_graph = params.members_graph;
        this.new_members_by_source_graph = params.new_members_by_source_graph;
        this.languages_graph = params.languages_graph;
        this.messages_graph = params.messages_graph;
        this.actions_graph = params.actions_graph;
        this.top_hours_graph = params.top_hours_graph;
        this.weekdays_graph = params.weekdays_graph;
        this.top_posters = params.top_posters;
        this.top_admins = params.top_admins;
        this.top_inviters = params.top_inviters;
        this.users = params.users;
    }
}
/** Global privacy settings */
export class GlobalPrivacySettings_ extends _GlobalPrivacySettings_ {
    get [id]() {
        return 0x734C4CCB;
    }
    static get [name]() {
        return "globalPrivacySettings";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["archive_and_mute_new_noncontact_peers", "true", "flags.0?true"],
            ["keep_archived_unmuted", "true", "flags.1?true"],
            ["keep_archived_folders", "true", "flags.2?true"],
            ["hide_read_marks", "true", "flags.3?true"],
            ["new_noncontact_peers_require_premium", "true", "flags.4?true"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.archive_and_mute_new_noncontact_peers ?? null, "true", "flags.0?true"],
            [this.keep_archived_unmuted ?? null, "true", "flags.1?true"],
            [this.keep_archived_folders ?? null, "true", "flags.2?true"],
            [this.hide_read_marks ?? null, "true", "flags.3?true"],
            [this.new_noncontact_peers_require_premium ?? null, "true", "flags.4?true"],
        ];
    }
    constructor(params) {
        super();
        /** Whether to archive and mute new chats from non-contacts */
        Object.defineProperty(this, "archive_and_mute_new_noncontact_peers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether unmuted chats will be kept in the Archive chat list when they get a new message. */
        Object.defineProperty(this, "keep_archived_unmuted", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether unmuted chats that are always included or pinned in a [folder](https://core.telegram.org/api/folders), will be kept in the Archive chat list when they get a new message. Ignored if `keep_archived_unmuted` is set. */
        Object.defineProperty(this, "keep_archived_folders", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "hide_read_marks", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "new_noncontact_peers_require_premium", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.archive_and_mute_new_noncontact_peers = params?.archive_and_mute_new_noncontact_peers;
        this.keep_archived_unmuted = params?.keep_archived_unmuted;
        this.keep_archived_folders = params?.keep_archived_folders;
        this.hide_read_marks = params?.hide_read_marks;
        this.new_noncontact_peers_require_premium = params?.new_noncontact_peers_require_premium;
    }
}
/** Country code and phone number pattern of a specific country */
export class help_CountryCode_ extends _help_CountryCode_ {
    get [id]() {
        return 0x4203C5EF;
    }
    static get [name]() {
        return "help.countryCode";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["country_code", "string", "string"],
            ["prefixes", ["string"], "flags.0?Vector<string>"],
            ["patterns", ["string"], "flags.1?Vector<string>"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.country_code, "string", "string"],
            [this.prefixes ?? null, ["string"], "flags.0?Vector<string>"],
            [this.patterns ?? null, ["string"], "flags.1?Vector<string>"],
        ];
    }
    constructor(params) {
        super();
        /** ISO country code */
        Object.defineProperty(this, "country_code", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Possible phone prefixes */
        Object.defineProperty(this, "prefixes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Phone patterns: for example, `XXX XXX XXX` */
        Object.defineProperty(this, "patterns", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.country_code = params.country_code;
        this.prefixes = params.prefixes;
        this.patterns = params.patterns;
    }
}
/** Name, ISO code, localized name and phone codes/patterns of a specific country */
export class help_Country_ extends _help_Country_ {
    get [id]() {
        return 0xC3878E23;
    }
    static get [name]() {
        return "help.country";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["hidden", "true", "flags.0?true"],
            ["iso2", "string", "string"],
            ["default_name", "string", "string"],
            ["name", "string", "flags.1?string"],
            ["country_codes", [_help_CountryCode_], "Vector<help.CountryCode>"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.hidden ?? null, "true", "flags.0?true"],
            [this.iso2, "string", "string"],
            [this.default_name, "string", "string"],
            [this.name ?? null, "string", "flags.1?string"],
            [this.country_codes, [_help_CountryCode_], "Vector<help.CountryCode>"],
        ];
    }
    constructor(params) {
        super();
        /** Whether this country should not be shown in the list */
        Object.defineProperty(this, "hidden", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ISO code of country */
        Object.defineProperty(this, "iso2", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Name of the country in the country's language */
        Object.defineProperty(this, "default_name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Name of the country in the user's language, if different from the original name */
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Phone codes/patterns */
        Object.defineProperty(this, "country_codes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.hidden = params.hidden;
        this.iso2 = params.iso2;
        this.default_name = params.default_name;
        this.name = params.name;
        this.country_codes = params.country_codes;
    }
}
/** The country list has not changed */
export class help_CountriesListNotModified_ extends _help_CountriesList_ {
    get [id]() {
        return 0x93CC1F32;
    }
    static get [name]() {
        return "help.countriesListNotModified";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Name, ISO code, localized name and phone codes/patterns of all available countries */
export class help_CountriesList_ extends _help_CountriesList_ {
    get [id]() {
        return 0x87D0759E;
    }
    static get [name]() {
        return "help.countriesList";
    }
    static get [paramDesc]() {
        return [
            ["countries", [_help_Country_], "Vector<help.Country>"],
            ["hash", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.countries, [_help_Country_], "Vector<help.Country>"],
            [this.hash, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Name, ISO code, localized name and phone codes/patterns of all available countries */
        Object.defineProperty(this, "countries", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation) */
        Object.defineProperty(this, "hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.countries = params.countries;
        this.hash = params.hash;
    }
}
/** View, forward counter + info about replies of a specific message */
export class MessageViews_ extends _MessageViews_ {
    get [id]() {
        return 0x455B853D;
    }
    static get [name]() {
        return "messageViews";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["views", "number", "flags.0?int"],
            ["forwards", "number", "flags.1?int"],
            ["replies", _MessageReplies_, "flags.2?MessageReplies"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.views ?? null, "number", "flags.0?int"],
            [this.forwards ?? null, "number", "flags.1?int"],
            [this.replies ?? null, _MessageReplies_, "flags.2?MessageReplies"],
        ];
    }
    constructor(params) {
        super();
        /** View count of message */
        Object.defineProperty(this, "views", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Forward count of message */
        Object.defineProperty(this, "forwards", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Reply and [thread](https://core.telegram.org/api/threads) information of message */
        Object.defineProperty(this, "replies", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.views = params?.views;
        this.forwards = params?.forwards;
        this.replies = params?.replies;
    }
}
/** View, forward counter + info about replies */
export class messages_MessageViews_ extends _messages_MessageViews_ {
    get [id]() {
        return 0xB6C4F543;
    }
    static get [name]() {
        return "messages.messageViews";
    }
    static get [paramDesc]() {
        return [
            ["views", [_MessageViews_], "Vector<MessageViews>"],
            ["chats", [_Chat_], "Vector<Chat>"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            [this.views, [_MessageViews_], "Vector<MessageViews>"],
            [this.chats, [_Chat_], "Vector<Chat>"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** View, forward counter + info about replies */
        Object.defineProperty(this, "views", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Chats mentioned in constructor */
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Users mentioned in constructor */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.views = params.views;
        this.chats = params.chats;
        this.users = params.users;
    }
}
/** Information about a [message thread](https://core.telegram.org/api/threads) */
export class messages_DiscussionMessage_ extends _messages_DiscussionMessage_ {
    get [id]() {
        return 0xA6341782;
    }
    static get [name]() {
        return "messages.discussionMessage";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["messages", [_Message_], "Vector<Message>"],
            ["max_id", "number", "flags.0?int"],
            ["read_inbox_max_id", "number", "flags.1?int"],
            ["read_outbox_max_id", "number", "flags.2?int"],
            ["unread_count", "number", "int"],
            ["chats", [_Chat_], "Vector<Chat>"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.messages, [_Message_], "Vector<Message>"],
            [this.max_id ?? null, "number", "flags.0?int"],
            [this.read_inbox_max_id ?? null, "number", "flags.1?int"],
            [this.read_outbox_max_id ?? null, "number", "flags.2?int"],
            [this.unread_count, "number", "int"],
            [this.chats, [_Chat_], "Vector<Chat>"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** The messages from which the thread starts. The messages are returned in reverse chronological order (i.e., in order of decreasing message ID). */
        Object.defineProperty(this, "messages", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Message ID of latest reply in this [thread](https://core.telegram.org/api/threads) */
        Object.defineProperty(this, "max_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Message ID of latest read incoming message in this [thread](https://core.telegram.org/api/threads) */
        Object.defineProperty(this, "read_inbox_max_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Message ID of latest read outgoing message in this [thread](https://core.telegram.org/api/threads) */
        Object.defineProperty(this, "read_outbox_max_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of unread messages */
        Object.defineProperty(this, "unread_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Chats mentioned in constructor */
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Users mentioned in constructor */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.messages = params.messages;
        this.max_id = params.max_id;
        this.read_inbox_max_id = params.read_inbox_max_id;
        this.read_outbox_max_id = params.read_outbox_max_id;
        this.unread_count = params.unread_count;
        this.chats = params.chats;
        this.users = params.users;
    }
}
/** Message replies and [thread](https://core.telegram.org/api/threads) information */
export class MessageReplyHeader_ extends _MessageReplyHeader_ {
    get [id]() {
        return 0xAFBC09DB;
    }
    static get [name]() {
        return "messageReplyHeader";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["reply_to_scheduled", "true", "flags.2?true"],
            ["forum_topic", "true", "flags.3?true"],
            ["quote", "true", "flags.9?true"],
            ["reply_to_msg_id", "number", "flags.4?int"],
            ["reply_to_peer_id", _Peer_, "flags.0?Peer"],
            ["reply_from", _MessageFwdHeader_, "flags.5?MessageFwdHeader"],
            ["reply_media", _MessageMedia_, "flags.8?MessageMedia"],
            ["reply_to_top_id", "number", "flags.1?int"],
            ["quote_text", "string", "flags.6?string"],
            ["quote_entities", [_MessageEntity_], "flags.7?Vector<MessageEntity>"],
            ["quote_offset", "number", "flags.10?int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.reply_to_scheduled ?? null, "true", "flags.2?true"],
            [this.forum_topic ?? null, "true", "flags.3?true"],
            [this.quote ?? null, "true", "flags.9?true"],
            [this.reply_to_msg_id ?? null, "number", "flags.4?int"],
            [this.reply_to_peer_id ?? null, _Peer_, "flags.0?Peer"],
            [this.reply_from ?? null, _MessageFwdHeader_, "flags.5?MessageFwdHeader"],
            [this.reply_media ?? null, _MessageMedia_, "flags.8?MessageMedia"],
            [this.reply_to_top_id ?? null, "number", "flags.1?int"],
            [this.quote_text ?? null, "string", "flags.6?string"],
            [this.quote_entities ?? null, [_MessageEntity_], "flags.7?Vector<MessageEntity>"],
            [this.quote_offset ?? null, "number", "flags.10?int"],
        ];
    }
    constructor(params) {
        super();
        /** This is a reply to a scheduled message. */
        Object.defineProperty(this, "reply_to_scheduled", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this message was sent in a [forum topic](https://core.telegram.org/api/forum#forum-topics) (except for the General topic). */
        Object.defineProperty(this, "forum_topic", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this message is quoting a part of another message. */
        Object.defineProperty(this, "quote", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of message to which this message is replying */
        Object.defineProperty(this, "reply_to_msg_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** For replies sent in [channel discussion threads](https://core.telegram.org/api/threads) of which the current user is not a member, the discussion group ID */
        Object.defineProperty(this, "reply_to_peer_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** When replying to a message sent by a certain peer to another chat, contains info about the peer that originally sent the message to that other chat. */
        Object.defineProperty(this, "reply_from", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** When replying to a media sent by a certain peer to another chat, contains the media of the replied-to message. */
        Object.defineProperty(this, "reply_media", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the message that started this [message thread](https://core.telegram.org/api/threads) */
        Object.defineProperty(this, "reply_to_top_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Used to quote-reply to only a certain section (specified here) of the original message. */
        Object.defineProperty(this, "quote_text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Message entities for styled text](https://core.telegram.org/api/entities) from the `quote_text` field. */
        Object.defineProperty(this, "quote_entities", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Offset of the message `quote_text` within the original message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)). */
        Object.defineProperty(this, "quote_offset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.reply_to_scheduled = params?.reply_to_scheduled;
        this.forum_topic = params?.forum_topic;
        this.quote = params?.quote;
        this.reply_to_msg_id = params?.reply_to_msg_id;
        this.reply_to_peer_id = params?.reply_to_peer_id;
        this.reply_from = params?.reply_from;
        this.reply_media = params?.reply_media;
        this.reply_to_top_id = params?.reply_to_top_id;
        this.quote_text = params?.quote_text;
        this.quote_entities = params?.quote_entities;
        this.quote_offset = params?.quote_offset;
    }
}
/** Represents a reply to a [story](https://core.telegram.org/api/stories) */
export class MessageReplyStoryHeader_ extends _MessageReplyHeader_ {
    get [id]() {
        return 0x0E5AF939;
    }
    static get [name]() {
        return "messageReplyStoryHeader";
    }
    static get [paramDesc]() {
        return [
            ["peer", _Peer_, "Peer"],
            ["story_id", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.peer, _Peer_, "Peer"],
            [this.story_id, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Story ID */
        Object.defineProperty(this, "story_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.peer = params.peer;
        this.story_id = params.story_id;
    }
}
/** Info about [the comment section of a channel post, or a simple message thread](https://core.telegram.org/api/threads) */
export class MessageReplies_ extends _MessageReplies_ {
    get [id]() {
        return 0x83D60FC2;
    }
    static get [name]() {
        return "messageReplies";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["comments", "true", "flags.0?true"],
            ["replies", "number", "int"],
            ["replies_pts", "number", "int"],
            ["recent_repliers", [_Peer_], "flags.1?Vector<Peer>"],
            ["channel_id", "bigint", "flags.0?long"],
            ["max_id", "number", "flags.2?int"],
            ["read_max_id", "number", "flags.3?int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.comments ?? null, "true", "flags.0?true"],
            [this.replies, "number", "int"],
            [this.replies_pts, "number", "int"],
            [this.recent_repliers ?? null, [_Peer_], "flags.1?Vector<Peer>"],
            [this.channel_id ?? null, "bigint", "flags.0?long"],
            [this.max_id ?? null, "number", "flags.2?int"],
            [this.read_max_id ?? null, "number", "flags.3?int"],
        ];
    }
    constructor(params) {
        super();
        /** Whether this constructor contains information about the [comment section of a channel post, or a simple message thread](https://core.telegram.org/api/threads) */
        Object.defineProperty(this, "comments", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Contains the total number of replies in this thread or comment section. */
        Object.defineProperty(this, "replies", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [PTS](https://core.telegram.org/api/updates) of the message that started this thread. */
        Object.defineProperty(this, "replies_pts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** For channel post comments, contains information about the last few comment posters for a specific thread, to show a small list of commenter profile pictures in client previews. */
        Object.defineProperty(this, "recent_repliers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** For channel post comments, contains the ID of the associated [discussion supergroup](https://core.telegram.org/api/discussion) */
        Object.defineProperty(this, "channel_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the latest message in this thread or comment section. */
        Object.defineProperty(this, "max_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Contains the ID of the latest read message in this thread or comment section. */
        Object.defineProperty(this, "read_max_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.comments = params.comments;
        this.replies = params.replies;
        this.replies_pts = params.replies_pts;
        this.recent_repliers = params.recent_repliers;
        this.channel_id = params.channel_id;
        this.max_id = params.max_id;
        this.read_max_id = params.read_max_id;
    }
}
/** Information about a blocked peer */
export class PeerBlocked_ extends _PeerBlocked_ {
    get [id]() {
        return 0xE8FD8014;
    }
    static get [name]() {
        return "peerBlocked";
    }
    static get [paramDesc]() {
        return [
            ["peer_id", _Peer_, "Peer"],
            ["date", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.peer_id, _Peer_, "Peer"],
            [this.date, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Peer ID */
        Object.defineProperty(this, "peer_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** When was the peer blocked */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.peer_id = params.peer_id;
        this.date = params.date;
    }
}
/** Message statistics */
export class stats_MessageStats_ extends _stats_MessageStats_ {
    get [id]() {
        return 0x7FE91C14;
    }
    static get [name]() {
        return "stats.messageStats";
    }
    static get [paramDesc]() {
        return [
            ["views_graph", _StatsGraph_, "StatsGraph"],
            ["reactions_by_emotion_graph", _StatsGraph_, "StatsGraph"],
        ];
    }
    get [params]() {
        return [
            [this.views_graph, _StatsGraph_, "StatsGraph"],
            [this.reactions_by_emotion_graph, _StatsGraph_, "StatsGraph"],
        ];
    }
    constructor(params) {
        super();
        /** Message view graph */
        Object.defineProperty(this, "views_graph", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** A graph containing the number of reactions on stories categorized by emotion */
        Object.defineProperty(this, "reactions_by_emotion_graph", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.views_graph = params.views_graph;
        this.reactions_by_emotion_graph = params.reactions_by_emotion_graph;
    }
}
/** An ended group call */
export class GroupCallDiscarded_ extends _GroupCall_ {
    get [id]() {
        return 0x7780BCB4;
    }
    static get [name]() {
        return "groupCallDiscarded";
    }
    static get [paramDesc]() {
        return [
            ["id", "bigint", "long"],
            ["access_hash", "bigint", "long"],
            ["duration", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.id, "bigint", "long"],
            [this.access_hash, "bigint", "long"],
            [this.duration, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Group call ID */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Group call access hash */
        Object.defineProperty(this, "access_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Group call duration */
        Object.defineProperty(this, "duration", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
        this.access_hash = params.access_hash;
        this.duration = params.duration;
    }
}
/** Info about a group call or livestream */
export class GroupCall_ extends _GroupCall_ {
    get [id]() {
        return 0xD597650C;
    }
    static get [name]() {
        return "groupCall";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["join_muted", "true", "flags.1?true"],
            ["can_change_join_muted", "true", "flags.2?true"],
            ["join_date_asc", "true", "flags.6?true"],
            ["schedule_start_subscribed", "true", "flags.8?true"],
            ["can_start_video", "true", "flags.9?true"],
            ["record_video_active", "true", "flags.11?true"],
            ["rtmp_stream", "true", "flags.12?true"],
            ["listeners_hidden", "true", "flags.13?true"],
            ["id", "bigint", "long"],
            ["access_hash", "bigint", "long"],
            ["participants_count", "number", "int"],
            ["title", "string", "flags.3?string"],
            ["stream_dc_id", "number", "flags.4?int"],
            ["record_start_date", "number", "flags.5?int"],
            ["schedule_date", "number", "flags.7?int"],
            ["unmuted_video_count", "number", "flags.10?int"],
            ["unmuted_video_limit", "number", "int"],
            ["version", "number", "int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.join_muted ?? null, "true", "flags.1?true"],
            [this.can_change_join_muted ?? null, "true", "flags.2?true"],
            [this.join_date_asc ?? null, "true", "flags.6?true"],
            [this.schedule_start_subscribed ?? null, "true", "flags.8?true"],
            [this.can_start_video ?? null, "true", "flags.9?true"],
            [this.record_video_active ?? null, "true", "flags.11?true"],
            [this.rtmp_stream ?? null, "true", "flags.12?true"],
            [this.listeners_hidden ?? null, "true", "flags.13?true"],
            [this.id, "bigint", "long"],
            [this.access_hash, "bigint", "long"],
            [this.participants_count, "number", "int"],
            [this.title ?? null, "string", "flags.3?string"],
            [this.stream_dc_id ?? null, "number", "flags.4?int"],
            [this.record_start_date ?? null, "number", "flags.5?int"],
            [this.schedule_date ?? null, "number", "flags.7?int"],
            [this.unmuted_video_count ?? null, "number", "flags.10?int"],
            [this.unmuted_video_limit, "number", "int"],
            [this.version, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Whether the user should be muted upon joining the call */
        Object.defineProperty(this, "join_muted", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether the current user can change the value of the `join_muted` flag using [phone.toggleGroupCallSettings](https://core.telegram.org/method/phone.toggleGroupCallSettings) */
        Object.defineProperty(this, "can_change_join_muted", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Specifies the ordering to use when locally sorting by date and displaying in the UI group call participants. */
        Object.defineProperty(this, "join_date_asc", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether we subscribed to the scheduled call */
        Object.defineProperty(this, "schedule_start_subscribed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether you can start streaming video into the call */
        Object.defineProperty(this, "can_start_video", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether the group call is currently being recorded */
        Object.defineProperty(this, "record_video_active", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether RTMP streams are allowed */
        Object.defineProperty(this, "rtmp_stream", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether the listeners list is hidden and cannot be fetched using [phone.getGroupParticipants](https://core.telegram.org/method/phone.getGroupParticipants). The `phone.groupParticipants.count` and `groupCall.participants_count` counters will still include listeners. */
        Object.defineProperty(this, "listeners_hidden", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Group call ID */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Group call access hash */
        Object.defineProperty(this, "access_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Participant count */
        Object.defineProperty(this, "participants_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Group call title */
        Object.defineProperty(this, "title", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** DC ID to be used for livestream chunks */
        Object.defineProperty(this, "stream_dc_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** When was the recording started */
        Object.defineProperty(this, "record_start_date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** When is the call scheduled to start */
        Object.defineProperty(this, "schedule_date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of people currently streaming video into the call */
        Object.defineProperty(this, "unmuted_video_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Maximum number of people allowed to stream video into the call */
        Object.defineProperty(this, "unmuted_video_limit", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Version */
        Object.defineProperty(this, "version", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.join_muted = params.join_muted;
        this.can_change_join_muted = params.can_change_join_muted;
        this.join_date_asc = params.join_date_asc;
        this.schedule_start_subscribed = params.schedule_start_subscribed;
        this.can_start_video = params.can_start_video;
        this.record_video_active = params.record_video_active;
        this.rtmp_stream = params.rtmp_stream;
        this.listeners_hidden = params.listeners_hidden;
        this.id = params.id;
        this.access_hash = params.access_hash;
        this.participants_count = params.participants_count;
        this.title = params.title;
        this.stream_dc_id = params.stream_dc_id;
        this.record_start_date = params.record_start_date;
        this.schedule_date = params.schedule_date;
        this.unmuted_video_count = params.unmuted_video_count;
        this.unmuted_video_limit = params.unmuted_video_limit;
        this.version = params.version;
    }
}
/** Points to a specific group call */
export class InputGroupCall_ extends _InputGroupCall_ {
    get [id]() {
        return 0xD8AA840F;
    }
    static get [name]() {
        return "inputGroupCall";
    }
    static get [paramDesc]() {
        return [
            ["id", "bigint", "long"],
            ["access_hash", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.id, "bigint", "long"],
            [this.access_hash, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** Group call ID */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Group call access hash */
        Object.defineProperty(this, "access_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
        this.access_hash = params.access_hash;
    }
}
/** Info about a group call participant */
export class GroupCallParticipant_ extends _GroupCallParticipant_ {
    get [id]() {
        return 0xEBA636FE;
    }
    static get [name]() {
        return "groupCallParticipant";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["muted", "true", "flags.0?true"],
            ["left", "true", "flags.1?true"],
            ["can_self_unmute", "true", "flags.2?true"],
            ["just_joined", "true", "flags.4?true"],
            ["versioned", "true", "flags.5?true"],
            ["min", "true", "flags.8?true"],
            ["muted_by_you", "true", "flags.9?true"],
            ["volume_by_admin", "true", "flags.10?true"],
            ["self", "true", "flags.12?true"],
            ["video_joined", "true", "flags.15?true"],
            ["peer", _Peer_, "Peer"],
            ["date", "number", "int"],
            ["active_date", "number", "flags.3?int"],
            ["source", "number", "int"],
            ["volume", "number", "flags.7?int"],
            ["about", "string", "flags.11?string"],
            ["raise_hand_rating", "bigint", "flags.13?long"],
            ["video", _GroupCallParticipantVideo_, "flags.6?GroupCallParticipantVideo"],
            ["presentation", _GroupCallParticipantVideo_, "flags.14?GroupCallParticipantVideo"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.muted ?? null, "true", "flags.0?true"],
            [this.left ?? null, "true", "flags.1?true"],
            [this.can_self_unmute ?? null, "true", "flags.2?true"],
            [this.just_joined ?? null, "true", "flags.4?true"],
            [this.versioned ?? null, "true", "flags.5?true"],
            [this.min ?? null, "true", "flags.8?true"],
            [this.muted_by_you ?? null, "true", "flags.9?true"],
            [this.volume_by_admin ?? null, "true", "flags.10?true"],
            [this.self ?? null, "true", "flags.12?true"],
            [this.video_joined ?? null, "true", "flags.15?true"],
            [this.peer, _Peer_, "Peer"],
            [this.date, "number", "int"],
            [this.active_date ?? null, "number", "flags.3?int"],
            [this.source, "number", "int"],
            [this.volume ?? null, "number", "flags.7?int"],
            [this.about ?? null, "string", "flags.11?string"],
            [this.raise_hand_rating ?? null, "bigint", "flags.13?long"],
            [this.video ?? null, _GroupCallParticipantVideo_, "flags.6?GroupCallParticipantVideo"],
            [this.presentation ?? null, _GroupCallParticipantVideo_, "flags.14?GroupCallParticipantVideo"],
        ];
    }
    constructor(params) {
        super();
        /** Whether the participant is muted */
        Object.defineProperty(this, "muted", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether the participant has left */
        Object.defineProperty(this, "left", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether the participant can unmute themselves */
        Object.defineProperty(this, "can_self_unmute", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether the participant has just joined */
        Object.defineProperty(this, "just_joined", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, and [updateGroupCallParticipants](https://core.telegram.org/constructor/updateGroupCallParticipants).version < locally stored call.version, info about this participant should be ignored. If (...), and [updateGroupCallParticipants](https://core.telegram.org/constructor/updateGroupCallParticipants).version > call.version+1, the participant list should be refetched using [phone.getGroupParticipants](https://core.telegram.org/method/phone.getGroupParticipants). */
        Object.defineProperty(this, "versioned", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If not set, the `volume` and `muted_by_you` fields can be safely used to overwrite locally cached information; otherwise, `volume` will contain valid information only if `volume_by_admin` is set both in the cache and in the received constructor. */
        Object.defineProperty(this, "min", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this participant was muted by the current user */
        Object.defineProperty(this, "muted_by_you", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether our volume can only changed by an admin */
        Object.defineProperty(this, "volume_by_admin", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this participant is the current user */
        Object.defineProperty(this, "self", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this participant is currently broadcasting video */
        Object.defineProperty(this, "video_joined", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Peer information */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** When did this participant join the group call */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** When was this participant last active in the group call */
        Object.defineProperty(this, "active_date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Source ID */
        Object.defineProperty(this, "source", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Volume, if not set the volume is set to 100%. */
        Object.defineProperty(this, "volume", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Info about this participant */
        Object.defineProperty(this, "about", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Specifies the UI visualization order of peers with raised hands: peers with a higher rating should be showed first in the list. */
        Object.defineProperty(this, "raise_hand_rating", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Info about the video stream the participant is currently broadcasting */
        Object.defineProperty(this, "video", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Info about the screen sharing stream the participant is currently broadcasting */
        Object.defineProperty(this, "presentation", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.muted = params.muted;
        this.left = params.left;
        this.can_self_unmute = params.can_self_unmute;
        this.just_joined = params.just_joined;
        this.versioned = params.versioned;
        this.min = params.min;
        this.muted_by_you = params.muted_by_you;
        this.volume_by_admin = params.volume_by_admin;
        this.self = params.self;
        this.video_joined = params.video_joined;
        this.peer = params.peer;
        this.date = params.date;
        this.active_date = params.active_date;
        this.source = params.source;
        this.volume = params.volume;
        this.about = params.about;
        this.raise_hand_rating = params.raise_hand_rating;
        this.video = params.video;
        this.presentation = params.presentation;
    }
}
/** Contains info about a group call, and partial info about its participants. */
export class phone_GroupCall_ extends _phone_GroupCall_ {
    get [id]() {
        return 0x9E727AAD;
    }
    static get [name]() {
        return "phone.groupCall";
    }
    static get [paramDesc]() {
        return [
            ["call", _GroupCall_, "GroupCall"],
            ["participants", [_GroupCallParticipant_], "Vector<GroupCallParticipant>"],
            ["participants_next_offset", "string", "string"],
            ["chats", [_Chat_], "Vector<Chat>"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            [this.call, _GroupCall_, "GroupCall"],
            [this.participants, [_GroupCallParticipant_], "Vector<GroupCallParticipant>"],
            [this.participants_next_offset, "string", "string"],
            [this.chats, [_Chat_], "Vector<Chat>"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** Info about the group call */
        Object.defineProperty(this, "call", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** A partial list of participants. */
        Object.defineProperty(this, "participants", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Next offset to use when fetching the remaining participants using [phone.getGroupParticipants](https://core.telegram.org/method/phone.getGroupParticipants) */
        Object.defineProperty(this, "participants_next_offset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Chats mentioned in the participants vector */
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Users mentioned in the participants vector */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.call = params.call;
        this.participants = params.participants;
        this.participants_next_offset = params.participants_next_offset;
        this.chats = params.chats;
        this.users = params.users;
    }
}
/** Info about the participants of a group call or livestream */
export class phone_GroupParticipants_ extends _phone_GroupParticipants_ {
    get [id]() {
        return 0xF47751B6;
    }
    static get [name]() {
        return "phone.groupParticipants";
    }
    static get [paramDesc]() {
        return [
            ["count", "number", "int"],
            ["participants", [_GroupCallParticipant_], "Vector<GroupCallParticipant>"],
            ["next_offset", "string", "string"],
            ["chats", [_Chat_], "Vector<Chat>"],
            ["users", [_User_], "Vector<User>"],
            ["version", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.count, "number", "int"],
            [this.participants, [_GroupCallParticipant_], "Vector<GroupCallParticipant>"],
            [this.next_offset, "string", "string"],
            [this.chats, [_Chat_], "Vector<Chat>"],
            [this.users, [_User_], "Vector<User>"],
            [this.version, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Number of participants */
        Object.defineProperty(this, "count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** List of participants */
        Object.defineProperty(this, "participants", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If not empty, the specified list of participants is partial, and more participants can be fetched specifying this parameter as `offset` in [phone.getGroupParticipants](https://core.telegram.org/method/phone.getGroupParticipants). */
        Object.defineProperty(this, "next_offset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Mentioned chats */
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Mentioned users */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Version info */
        Object.defineProperty(this, "version", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.count = params.count;
        this.participants = params.participants;
        this.next_offset = params.next_offset;
        this.chats = params.chats;
        this.users = params.users;
        this.version = params.version;
    }
}
/** Peer type: private chat with the bot itself */
export class InlineQueryPeerTypeSameBotPM_ extends _InlineQueryPeerType_ {
    get [id]() {
        return 0x3081ED9D;
    }
    static get [name]() {
        return "inlineQueryPeerTypeSameBotPM";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Peer type: private chat */
export class InlineQueryPeerTypePM_ extends _InlineQueryPeerType_ {
    get [id]() {
        return 0x833C0FAC;
    }
    static get [name]() {
        return "inlineQueryPeerTypePM";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Peer type: [chat](https://core.telegram.org/api/channel) */
export class InlineQueryPeerTypeChat_ extends _InlineQueryPeerType_ {
    get [id]() {
        return 0xD766C50A;
    }
    static get [name]() {
        return "inlineQueryPeerTypeChat";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Peer type: [supergroup](https://core.telegram.org/api/channel) */
export class InlineQueryPeerTypeMegagroup_ extends _InlineQueryPeerType_ {
    get [id]() {
        return 0x5EC4BE43;
    }
    static get [name]() {
        return "inlineQueryPeerTypeMegagroup";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Peer type: [channel](https://core.telegram.org/api/channel) */
export class InlineQueryPeerTypeBroadcast_ extends _InlineQueryPeerType_ {
    get [id]() {
        return 0x6334EE9A;
    }
    static get [name]() {
        return "inlineQueryPeerTypeBroadcast";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Peer type: private chat with a bot. */
export class InlineQueryPeerTypeBotPM_ extends _InlineQueryPeerType_ {
    get [id]() {
        return 0x0E3B2D0C;
    }
    static get [name]() {
        return "inlineQueryPeerTypeBotPM";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** ID of a specific [chat import session, click here for more info »](https://core.telegram.org/api/import). */
export class messages_HistoryImport_ extends _messages_HistoryImport_ {
    get [id]() {
        return 0x1662AF0B;
    }
    static get [name]() {
        return "messages.historyImport";
    }
    static get [paramDesc]() {
        return [
            ["id", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.id, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** [History import ID](https://core.telegram.org/api/import) */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
    }
}
/** Contains information about a chat export file [generated by a foreign chat app, click here for more info](https://core.telegram.org/api/import).
If neither the `pm` or `group` flags are set, the specified chat export was generated from a chat of unknown type. */
export class messages_HistoryImportParsed_ extends _messages_HistoryImportParsed_ {
    get [id]() {
        return 0x5E0FB7B9;
    }
    static get [name]() {
        return "messages.historyImportParsed";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["pm", "true", "flags.0?true"],
            ["group", "true", "flags.1?true"],
            ["title", "string", "flags.2?string"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.pm ?? null, "true", "flags.0?true"],
            [this.group ?? null, "true", "flags.1?true"],
            [this.title ?? null, "string", "flags.2?string"],
        ];
    }
    constructor(params) {
        super();
        /** The chat export file was generated from a private chat. */
        Object.defineProperty(this, "pm", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The chat export file was generated from a group chat. */
        Object.defineProperty(this, "group", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Title of the chat. */
        Object.defineProperty(this, "title", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.pm = params?.pm;
        this.group = params?.group;
        this.title = params?.title;
    }
}
/** Messages found and affected by changes */
export class messages_AffectedFoundMessages_ extends _messages_AffectedFoundMessages_ {
    get [id]() {
        return 0xEF8D3E6C;
    }
    static get [name]() {
        return "messages.affectedFoundMessages";
    }
    static get [paramDesc]() {
        return [
            ["pts", "number", "int"],
            ["pts_count", "number", "int"],
            ["offset", "number", "int"],
            ["messages", ["number"], "Vector<int>"],
        ];
    }
    get [params]() {
        return [
            [this.pts, "number", "int"],
            [this.pts_count, "number", "int"],
            [this.offset, "number", "int"],
            [this.messages, ["number"], "Vector<int>"],
        ];
    }
    constructor(params) {
        super();
        /** [Event count after generation](https://core.telegram.org/api/updates) */
        Object.defineProperty(this, "pts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Number of events that were generated](https://core.telegram.org/api/updates) */
        Object.defineProperty(this, "pts_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If bigger than zero, the request must be repeated to remove more messages */
        Object.defineProperty(this, "offset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Affected message IDs */
        Object.defineProperty(this, "messages", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.pts = params.pts;
        this.pts_count = params.pts_count;
        this.offset = params.offset;
        this.messages = params.messages;
    }
}
/** When and which user joined the chat using a chat invite */
export class ChatInviteImporter_ extends _ChatInviteImporter_ {
    get [id]() {
        return 0x8C5ADFD9;
    }
    static get [name]() {
        return "chatInviteImporter";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["requested", "true", "flags.0?true"],
            ["via_chatlist", "true", "flags.3?true"],
            ["user_id", "bigint", "long"],
            ["date", "number", "int"],
            ["about", "string", "flags.2?string"],
            ["approved_by", "bigint", "flags.1?long"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.requested ?? null, "true", "flags.0?true"],
            [this.via_chatlist ?? null, "true", "flags.3?true"],
            [this.user_id, "bigint", "long"],
            [this.date, "number", "int"],
            [this.about ?? null, "string", "flags.2?string"],
            [this.approved_by ?? null, "bigint", "flags.1?long"],
        ];
    }
    constructor(params) {
        super();
        /** Whether this user currently has a pending [join request »](https://core.telegram.org/api/invites#join-requests) */
        Object.defineProperty(this, "requested", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The participant joined by importing a [chat folder deep link »](https://core.telegram.org/api/links#chat-folder-links). */
        Object.defineProperty(this, "via_chatlist", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The user */
        Object.defineProperty(this, "user_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** When did the user join */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** For users with pending requests, contains bio of the user that requested to join */
        Object.defineProperty(this, "about", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The administrator that approved the [join request »](https://core.telegram.org/api/invites#join-requests) of the user */
        Object.defineProperty(this, "approved_by", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.requested = params.requested;
        this.via_chatlist = params.via_chatlist;
        this.user_id = params.user_id;
        this.date = params.date;
        this.about = params.about;
        this.approved_by = params.approved_by;
    }
}
/** Info about chat invites exported by a certain admin. */
export class messages_ExportedChatInvites_ extends _messages_ExportedChatInvites_ {
    get [id]() {
        return 0xBDC62DCC;
    }
    static get [name]() {
        return "messages.exportedChatInvites";
    }
    static get [paramDesc]() {
        return [
            ["count", "number", "int"],
            ["invites", [_ExportedChatInvite_], "Vector<ExportedChatInvite>"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            [this.count, "number", "int"],
            [this.invites, [_ExportedChatInvite_], "Vector<ExportedChatInvite>"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** Number of invites exported by the admin */
        Object.defineProperty(this, "count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Exported invites */
        Object.defineProperty(this, "invites", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Info about the admin */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.count = params.count;
        this.invites = params.invites;
        this.users = params.users;
    }
}
/** Info about a chat invite */
export class messages_ExportedChatInvite_ extends _messages_ExportedChatInvite_ {
    get [id]() {
        return 0x1871BE50;
    }
    static get [name]() {
        return "messages.exportedChatInvite";
    }
    static get [paramDesc]() {
        return [
            ["invite", _ExportedChatInvite_, "ExportedChatInvite"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            [this.invite, _ExportedChatInvite_, "ExportedChatInvite"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** Info about the chat invite */
        Object.defineProperty(this, "invite", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Mentioned users */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.invite = params.invite;
        this.users = params.users;
    }
}
/** The specified chat invite was replaced with another one */
export class messages_ExportedChatInviteReplaced_ extends _messages_ExportedChatInvite_ {
    get [id]() {
        return 0x222600EF;
    }
    static get [name]() {
        return "messages.exportedChatInviteReplaced";
    }
    static get [paramDesc]() {
        return [
            ["invite", _ExportedChatInvite_, "ExportedChatInvite"],
            ["new_invite", _ExportedChatInvite_, "ExportedChatInvite"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            [this.invite, _ExportedChatInvite_, "ExportedChatInvite"],
            [this.new_invite, _ExportedChatInvite_, "ExportedChatInvite"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** The replaced chat invite */
        Object.defineProperty(this, "invite", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The invite that replaces the previous invite */
        Object.defineProperty(this, "new_invite", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Mentioned users */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.invite = params.invite;
        this.new_invite = params.new_invite;
        this.users = params.users;
    }
}
/** Info about the users that joined the chat using a specific chat invite */
export class messages_ChatInviteImporters_ extends _messages_ChatInviteImporters_ {
    get [id]() {
        return 0x81B6B00A;
    }
    static get [name]() {
        return "messages.chatInviteImporters";
    }
    static get [paramDesc]() {
        return [
            ["count", "number", "int"],
            ["importers", [_ChatInviteImporter_], "Vector<ChatInviteImporter>"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            [this.count, "number", "int"],
            [this.importers, [_ChatInviteImporter_], "Vector<ChatInviteImporter>"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** Number of users that joined */
        Object.defineProperty(this, "count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The users that joined */
        Object.defineProperty(this, "importers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The users that joined */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.count = params.count;
        this.importers = params.importers;
        this.users = params.users;
    }
}
/** Info about chat invites generated by admins. */
export class ChatAdminWithInvites_ extends _ChatAdminWithInvites_ {
    get [id]() {
        return 0xF2ECEF23;
    }
    static get [name]() {
        return "chatAdminWithInvites";
    }
    static get [paramDesc]() {
        return [
            ["admin_id", "bigint", "long"],
            ["invites_count", "number", "int"],
            ["revoked_invites_count", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.admin_id, "bigint", "long"],
            [this.invites_count, "number", "int"],
            [this.revoked_invites_count, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** The admin */
        Object.defineProperty(this, "admin_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of invites generated by the admin */
        Object.defineProperty(this, "invites_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of revoked invites */
        Object.defineProperty(this, "revoked_invites_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.admin_id = params.admin_id;
        this.invites_count = params.invites_count;
        this.revoked_invites_count = params.revoked_invites_count;
    }
}
/** Info about chat invites generated by admins. */
export class messages_ChatAdminsWithInvites_ extends _messages_ChatAdminsWithInvites_ {
    get [id]() {
        return 0xB69B72D7;
    }
    static get [name]() {
        return "messages.chatAdminsWithInvites";
    }
    static get [paramDesc]() {
        return [
            ["admins", [_ChatAdminWithInvites_], "Vector<ChatAdminWithInvites>"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            [this.admins, [_ChatAdminWithInvites_], "Vector<ChatAdminWithInvites>"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** Info about chat invites generated by admins. */
        Object.defineProperty(this, "admins", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Mentioned users */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.admins = params.admins;
        this.users = params.users;
    }
}
/** Contains a confirmation text to be shown to the user, upon [importing chat history, click here for more info »](https://core.telegram.org/api/import). */
export class messages_CheckedHistoryImportPeer_ extends _messages_CheckedHistoryImportPeer_ {
    get [id]() {
        return 0xA24DE717;
    }
    static get [name]() {
        return "messages.checkedHistoryImportPeer";
    }
    static get [paramDesc]() {
        return [
            ["confirm_text", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.confirm_text, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** A confirmation text to be shown to the user, upon [importing chat history »](https://core.telegram.org/api/import). */
        Object.defineProperty(this, "confirm_text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.confirm_text = params.confirm_text;
    }
}
/** A list of peers that can be used to join a group call, presenting yourself as a specific user/channel. */
export class phone_JoinAsPeers_ extends _phone_JoinAsPeers_ {
    get [id]() {
        return 0xAFE5623F;
    }
    static get [name]() {
        return "phone.joinAsPeers";
    }
    static get [paramDesc]() {
        return [
            ["peers", [_Peer_], "Vector<Peer>"],
            ["chats", [_Chat_], "Vector<Chat>"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            [this.peers, [_Peer_], "Vector<Peer>"],
            [this.chats, [_Chat_], "Vector<Chat>"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** Peers */
        Object.defineProperty(this, "peers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Chats mentioned in the peers vector */
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Users mentioned in the peers vector */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.peers = params.peers;
        this.chats = params.chats;
        this.users = params.users;
    }
}
/** An invite to a group call or livestream */
export class phone_ExportedGroupCallInvite_ extends _phone_ExportedGroupCallInvite_ {
    get [id]() {
        return 0x204BD158;
    }
    static get [name]() {
        return "phone.exportedGroupCallInvite";
    }
    static get [paramDesc]() {
        return [
            ["link", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.link, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Invite link */
        Object.defineProperty(this, "link", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.link = params.link;
    }
}
/** Describes a group of video synchronization source identifiers */
export class GroupCallParticipantVideoSourceGroup_ extends _GroupCallParticipantVideoSourceGroup_ {
    get [id]() {
        return 0xDCB118B7;
    }
    static get [name]() {
        return "groupCallParticipantVideoSourceGroup";
    }
    static get [paramDesc]() {
        return [
            ["semantics", "string", "string"],
            ["sources", ["number"], "Vector<int>"],
        ];
    }
    get [params]() {
        return [
            [this.semantics, "string", "string"],
            [this.sources, ["number"], "Vector<int>"],
        ];
    }
    constructor(params) {
        super();
        /** SDP semantics */
        Object.defineProperty(this, "semantics", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Source IDs */
        Object.defineProperty(this, "sources", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.semantics = params.semantics;
        this.sources = params.sources;
    }
}
/** Info about a video stream */
export class GroupCallParticipantVideo_ extends _GroupCallParticipantVideo_ {
    get [id]() {
        return 0x67753AC8;
    }
    static get [name]() {
        return "groupCallParticipantVideo";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["paused", "true", "flags.0?true"],
            ["endpoint", "string", "string"],
            ["source_groups", [_GroupCallParticipantVideoSourceGroup_], "Vector<GroupCallParticipantVideoSourceGroup>"],
            ["audio_source", "number", "flags.1?int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.paused ?? null, "true", "flags.0?true"],
            [this.endpoint, "string", "string"],
            [this.source_groups, [_GroupCallParticipantVideoSourceGroup_], "Vector<GroupCallParticipantVideoSourceGroup>"],
            [this.audio_source ?? null, "number", "flags.1?int"],
        ];
    }
    constructor(params) {
        super();
        /** Whether the stream is currently paused */
        Object.defineProperty(this, "paused", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Endpoint */
        Object.defineProperty(this, "endpoint", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Source groups */
        Object.defineProperty(this, "source_groups", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Audio source ID */
        Object.defineProperty(this, "audio_source", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.paused = params.paused;
        this.endpoint = params.endpoint;
        this.source_groups = params.source_groups;
        this.audio_source = params.audio_source;
    }
}
/** A suggested short name for a stickerpack */
export class stickers_SuggestedShortName_ extends _stickers_SuggestedShortName_ {
    get [id]() {
        return 0x85FEA03F;
    }
    static get [name]() {
        return "stickers.suggestedShortName";
    }
    static get [paramDesc]() {
        return [
            ["short_name", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.short_name, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Suggested short name */
        Object.defineProperty(this, "short_name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.short_name = params.short_name;
    }
}
/** The commands will be valid in all dialogs */
export class BotCommandScopeDefault_ extends _BotCommandScope_ {
    get [id]() {
        return 0x2F6CB2AB;
    }
    static get [name]() {
        return "botCommandScopeDefault";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** The specified bot commands will only be valid in all private chats with users. */
export class BotCommandScopeUsers_ extends _BotCommandScope_ {
    get [id]() {
        return 0x3C4F04D8;
    }
    static get [name]() {
        return "botCommandScopeUsers";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** The specified bot commands will be valid in all [groups and supergroups](https://core.telegram.org/api/channel). */
export class BotCommandScopeChats_ extends _BotCommandScope_ {
    get [id]() {
        return 0x6FE1A881;
    }
    static get [name]() {
        return "botCommandScopeChats";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** The specified bot commands will be valid only for chat administrators, in all [groups and supergroups](https://core.telegram.org/api/channel). */
export class BotCommandScopeChatAdmins_ extends _BotCommandScope_ {
    get [id]() {
        return 0xB9AA606A;
    }
    static get [name]() {
        return "botCommandScopeChatAdmins";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** The specified bot commands will be valid only in a specific dialog. */
export class BotCommandScopePeer_ extends _BotCommandScope_ {
    get [id]() {
        return 0xDB9D897D;
    }
    static get [name]() {
        return "botCommandScopePeer";
    }
    static get [paramDesc]() {
        return [
            ["peer", _InputPeer_, "InputPeer"],
        ];
    }
    get [params]() {
        return [
            [this.peer, _InputPeer_, "InputPeer"],
        ];
    }
    constructor(params) {
        super();
        /** The dialog */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.peer = params.peer;
    }
}
/** The specified bot commands will be valid for all admins of the specified [group or supergroup](https://core.telegram.org/api/channel). */
export class BotCommandScopePeerAdmins_ extends _BotCommandScope_ {
    get [id]() {
        return 0x3FD863D1;
    }
    static get [name]() {
        return "botCommandScopePeerAdmins";
    }
    static get [paramDesc]() {
        return [
            ["peer", _InputPeer_, "InputPeer"],
        ];
    }
    get [params]() {
        return [
            [this.peer, _InputPeer_, "InputPeer"],
        ];
    }
    constructor(params) {
        super();
        /** The chat */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.peer = params.peer;
    }
}
/** The specified bot commands will be valid only for a specific user in the specified [group or supergroup](https://core.telegram.org/api/channel). */
export class BotCommandScopePeerUser_ extends _BotCommandScope_ {
    get [id]() {
        return 0x0A1321F3;
    }
    static get [name]() {
        return "botCommandScopePeerUser";
    }
    static get [paramDesc]() {
        return [
            ["peer", _InputPeer_, "InputPeer"],
            ["user_id", _InputUser_, "InputUser"],
        ];
    }
    get [params]() {
        return [
            [this.peer, _InputPeer_, "InputPeer"],
            [this.user_id, _InputUser_, "InputUser"],
        ];
    }
    constructor(params) {
        super();
        /** The chat */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The user */
        Object.defineProperty(this, "user_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.peer = params.peer;
        this.user_id = params.user_id;
    }
}
/** You recently requested a password reset that was canceled, please wait until the specified date before requesting another reset. */
export class account_ResetPasswordFailedWait_ extends _account_ResetPasswordResult_ {
    get [id]() {
        return 0xE3779861;
    }
    static get [name]() {
        return "account.resetPasswordFailedWait";
    }
    static get [paramDesc]() {
        return [
            ["retry_date", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.retry_date, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Wait until this date before requesting another reset. */
        Object.defineProperty(this, "retry_date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.retry_date = params.retry_date;
    }
}
/** You successfully requested a password reset, please wait until the specified date before finalizing the reset. */
export class account_ResetPasswordRequestedWait_ extends _account_ResetPasswordResult_ {
    get [id]() {
        return 0xE9EFFC7D;
    }
    static get [name]() {
        return "account.resetPasswordRequestedWait";
    }
    static get [paramDesc]() {
        return [
            ["until_date", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.until_date, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Wait until this date before finalizing the reset. */
        Object.defineProperty(this, "until_date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.until_date = params.until_date;
    }
}
/** The 2FA password was reset successfully. */
export class account_ResetPasswordOk_ extends _account_ResetPasswordResult_ {
    get [id]() {
        return 0xE926D63E;
    }
    static get [name]() {
        return "account.resetPasswordOk";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** A [sponsored message](https://core.telegram.org/api/sponsored-messages). */
export class SponsoredMessage_ extends _SponsoredMessage_ {
    get [id]() {
        return 0xED5383F7;
    }
    static get [name]() {
        return "sponsoredMessage";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["recommended", "true", "flags.5?true"],
            ["show_peer_photo", "true", "flags.6?true"],
            ["random_id", Uint8Array, "bytes"],
            ["from_id", _Peer_, "flags.3?Peer"],
            ["chat_invite", _ChatInvite_, "flags.4?ChatInvite"],
            ["chat_invite_hash", "string", "flags.4?string"],
            ["channel_post", "number", "flags.2?int"],
            ["start_param", "string", "flags.0?string"],
            ["webpage", _SponsoredWebPage_, "flags.9?SponsoredWebPage"],
            ["app", _BotApp_, "flags.10?BotApp"],
            ["message", "string", "string"],
            ["entities", [_MessageEntity_], "flags.1?Vector<MessageEntity>"],
            ["button_text", "string", "flags.11?string"],
            ["sponsor_info", "string", "flags.7?string"],
            ["additional_info", "string", "flags.8?string"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.recommended ?? null, "true", "flags.5?true"],
            [this.show_peer_photo ?? null, "true", "flags.6?true"],
            [this.random_id, Uint8Array, "bytes"],
            [this.from_id ?? null, _Peer_, "flags.3?Peer"],
            [this.chat_invite ?? null, _ChatInvite_, "flags.4?ChatInvite"],
            [this.chat_invite_hash ?? null, "string", "flags.4?string"],
            [this.channel_post ?? null, "number", "flags.2?int"],
            [this.start_param ?? null, "string", "flags.0?string"],
            [this.webpage ?? null, _SponsoredWebPage_, "flags.9?SponsoredWebPage"],
            [this.app ?? null, _BotApp_, "flags.10?BotApp"],
            [this.message, "string", "string"],
            [this.entities ?? null, [_MessageEntity_], "flags.1?Vector<MessageEntity>"],
            [this.button_text ?? null, "string", "flags.11?string"],
            [this.sponsor_info ?? null, "string", "flags.7?string"],
            [this.additional_info ?? null, "string", "flags.8?string"],
        ];
    }
    constructor(params) {
        super();
        /** Whether the message needs to be labeled as "recommended" instead of "sponsored" */
        Object.defineProperty(this, "recommended", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether a profile photo bubble should be displayed for this message, like for messages sent in groups. The photo shown in the bubble is obtained either from the peer contained in `from_id`, or from `chat_invite`. */
        Object.defineProperty(this, "show_peer_photo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Message ID */
        Object.defineProperty(this, "random_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the sender of the message */
        Object.defineProperty(this, "from_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Information about the chat invite hash specified in `chat_invite_hash` */
        Object.defineProperty(this, "chat_invite", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Chat invite */
        Object.defineProperty(this, "chat_invite_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Optional link to a channel post if `from_id` points to a channel */
        Object.defineProperty(this, "channel_post", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Parameter for the bot start message if the sponsored chat is a chat with a bot. */
        Object.defineProperty(this, "start_param", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Sponsored website */
        Object.defineProperty(this, "webpage", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Mini App »](https://core.telegram.org/api/bots/webapps) to open when the sponsored message is clicked. */
        Object.defineProperty(this, "app", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Sponsored message */
        Object.defineProperty(this, "message", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Message entities for styled text](https://core.telegram.org/api/entities) */
        Object.defineProperty(this, "entities", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Text of the sponsored message button. */
        Object.defineProperty(this, "button_text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, contains additional information about the sponsor to be shown along with the message. */
        Object.defineProperty(this, "sponsor_info", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, contains additional information about the sponsored message to be shown along with the message. */
        Object.defineProperty(this, "additional_info", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.recommended = params.recommended;
        this.show_peer_photo = params.show_peer_photo;
        this.random_id = params.random_id;
        this.from_id = params.from_id;
        this.chat_invite = params.chat_invite;
        this.chat_invite_hash = params.chat_invite_hash;
        this.channel_post = params.channel_post;
        this.start_param = params.start_param;
        this.webpage = params.webpage;
        this.app = params.app;
        this.message = params.message;
        this.entities = params.entities;
        this.button_text = params.button_text;
        this.sponsor_info = params.sponsor_info;
        this.additional_info = params.additional_info;
    }
}
/** A set of sponsored messages associated to a channel */
export class messages_SponsoredMessages_ extends _messages_SponsoredMessages_ {
    get [id]() {
        return 0xC9EE1D87;
    }
    static get [name]() {
        return "messages.sponsoredMessages";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["posts_between", "number", "flags.0?int"],
            ["messages", [_SponsoredMessage_], "Vector<SponsoredMessage>"],
            ["chats", [_Chat_], "Vector<Chat>"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.posts_between ?? null, "number", "flags.0?int"],
            [this.messages, [_SponsoredMessage_], "Vector<SponsoredMessage>"],
            [this.chats, [_Chat_], "Vector<Chat>"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** If set, specifies the minimum number of messages between shown sponsored messages; otherwise, only one sponsored message must be shown after all ordinary messages. */
        Object.defineProperty(this, "posts_between", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Sponsored messages */
        Object.defineProperty(this, "messages", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Chats mentioned in the sponsored messages */
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Users mentioned in the sponsored messages */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.posts_between = params.posts_between;
        this.messages = params.messages;
        this.chats = params.chats;
        this.users = params.users;
    }
}
/** No sponsored messages are available. */
export class messages_SponsoredMessagesEmpty_ extends _messages_SponsoredMessages_ {
    get [id]() {
        return 0x1839490F;
    }
    static get [name]() {
        return "messages.sponsoredMessagesEmpty";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Information about found messages sent on a specific day, used to split the `messages` in [messages.searchResultsCalendar](https://core.telegram.org/constructor/messages.searchResultsCalendar) constructors by days. */
export class SearchResultsCalendarPeriod_ extends _SearchResultsCalendarPeriod_ {
    get [id]() {
        return 0xC9B0539F;
    }
    static get [name]() {
        return "searchResultsCalendarPeriod";
    }
    static get [paramDesc]() {
        return [
            ["date", "number", "int"],
            ["min_msg_id", "number", "int"],
            ["max_msg_id", "number", "int"],
            ["count", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.date, "number", "int"],
            [this.min_msg_id, "number", "int"],
            [this.max_msg_id, "number", "int"],
            [this.count, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** The day this object is referring to. */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** First message ID that was sent on this day. */
        Object.defineProperty(this, "min_msg_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Last message ID that was sent on this day. */
        Object.defineProperty(this, "max_msg_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** All messages that were sent on this day. */
        Object.defineProperty(this, "count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.date = params.date;
        this.min_msg_id = params.min_msg_id;
        this.max_msg_id = params.max_msg_id;
        this.count = params.count;
    }
}
/** Information about found messages sent on a specific day */
export class messages_SearchResultsCalendar_ extends _messages_SearchResultsCalendar_ {
    get [id]() {
        return 0x147EE23C;
    }
    static get [name]() {
        return "messages.searchResultsCalendar";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["inexact", "true", "flags.0?true"],
            ["count", "number", "int"],
            ["min_date", "number", "int"],
            ["min_msg_id", "number", "int"],
            ["offset_id_offset", "number", "flags.1?int"],
            ["periods", [_SearchResultsCalendarPeriod_], "Vector<SearchResultsCalendarPeriod>"],
            ["messages", [_Message_], "Vector<Message>"],
            ["chats", [_Chat_], "Vector<Chat>"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.inexact ?? null, "true", "flags.0?true"],
            [this.count, "number", "int"],
            [this.min_date, "number", "int"],
            [this.min_msg_id, "number", "int"],
            [this.offset_id_offset ?? null, "number", "flags.1?int"],
            [this.periods, [_SearchResultsCalendarPeriod_], "Vector<SearchResultsCalendarPeriod>"],
            [this.messages, [_Message_], "Vector<Message>"],
            [this.chats, [_Chat_], "Vector<Chat>"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** If set, indicates that the results may be inexact */
        Object.defineProperty(this, "inexact", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Total number of results matching query */
        Object.defineProperty(this, "count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Starting timestamp of attached messages */
        Object.defineProperty(this, "min_date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Ending timestamp of attached messages */
        Object.defineProperty(this, "min_msg_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Indicates the absolute position of `messages[0]` within the total result set with count `count`.
        This is useful, for example, if we need to display a `progress/total` counter (like `photo 134 of 200`, for all media in a chat, we could simply use `photo ${offset_id_offset} of ${count}`. */
        Object.defineProperty(this, "offset_id_offset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Used to split the `messages` by days: multiple [SearchResultsCalendarPeriod](https://core.telegram.org/type/SearchResultsCalendarPeriod) constructors are returned, each containing information about the first, last and total number of messages matching the filter that were sent on a specific day.
        This information can be easily used to split the returned `messages` by day. */
        Object.defineProperty(this, "periods", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Messages */
        Object.defineProperty(this, "messages", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Mentioned chats */
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Mentioned users */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.inexact = params.inexact;
        this.count = params.count;
        this.min_date = params.min_date;
        this.min_msg_id = params.min_msg_id;
        this.offset_id_offset = params.offset_id_offset;
        this.periods = params.periods;
        this.messages = params.messages;
        this.chats = params.chats;
        this.users = params.users;
    }
}
/** Information about a message in a specific position */
export class SearchResultPosition_ extends _SearchResultsPosition_ {
    get [id]() {
        return 0x7F648B67;
    }
    static get [name]() {
        return "searchResultPosition";
    }
    static get [paramDesc]() {
        return [
            ["msg_id", "number", "int"],
            ["date", "number", "int"],
            ["offset", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.msg_id, "number", "int"],
            [this.date, "number", "int"],
            [this.offset, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Message ID */
        Object.defineProperty(this, "msg_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** When was the message sent */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** 0-based message position in the full list of suitable messages */
        Object.defineProperty(this, "offset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.msg_id = params.msg_id;
        this.date = params.date;
        this.offset = params.offset;
    }
}
/** Information about sparse positions of messages */
export class messages_SearchResultsPositions_ extends _messages_SearchResultsPositions_ {
    get [id]() {
        return 0x53B22BAF;
    }
    static get [name]() {
        return "messages.searchResultsPositions";
    }
    static get [paramDesc]() {
        return [
            ["count", "number", "int"],
            ["positions", [_SearchResultsPosition_], "Vector<SearchResultsPosition>"],
        ];
    }
    get [params]() {
        return [
            [this.count, "number", "int"],
            [this.positions, [_SearchResultsPosition_], "Vector<SearchResultsPosition>"],
        ];
    }
    constructor(params) {
        super();
        /** Total number of found messages */
        Object.defineProperty(this, "count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** List of message positions */
        Object.defineProperty(this, "positions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.count = params.count;
        this.positions = params.positions;
    }
}
/** A list of peers that can be used to send messages in a specific group */
export class channels_SendAsPeers_ extends _channels_SendAsPeers_ {
    get [id]() {
        return 0xF496B0C6;
    }
    static get [name]() {
        return "channels.sendAsPeers";
    }
    static get [paramDesc]() {
        return [
            ["peers", [_SendAsPeer_], "Vector<SendAsPeer>"],
            ["chats", [_Chat_], "Vector<Chat>"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            [this.peers, [_SendAsPeer_], "Vector<SendAsPeer>"],
            [this.chats, [_Chat_], "Vector<Chat>"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** Peers that can be used to send messages to the group */
        Object.defineProperty(this, "peers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Mentioned chats */
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Mentioned users */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.peers = params.peers;
        this.chats = params.chats;
        this.users = params.users;
    }
}
/** Full user information */
export class users_UserFull_ extends _users_UserFull_ {
    get [id]() {
        return 0x3B6D152E;
    }
    static get [name]() {
        return "users.userFull";
    }
    static get [paramDesc]() {
        return [
            ["full_user", _UserFull_, "UserFull"],
            ["chats", [_Chat_], "Vector<Chat>"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            [this.full_user, _UserFull_, "UserFull"],
            [this.chats, [_Chat_], "Vector<Chat>"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** Full user information */
        Object.defineProperty(this, "full_user", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Mentioned chats */
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Mentioned users */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.full_user = params.full_user;
        this.chats = params.chats;
        this.users = params.users;
    }
}
/** Peer settings */
export class messages_PeerSettings_ extends _messages_PeerSettings_ {
    get [id]() {
        return 0x6880B94D;
    }
    static get [name]() {
        return "messages.peerSettings";
    }
    static get [paramDesc]() {
        return [
            ["settings", _PeerSettings_, "PeerSettings"],
            ["chats", [_Chat_], "Vector<Chat>"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            [this.settings, _PeerSettings_, "PeerSettings"],
            [this.chats, [_Chat_], "Vector<Chat>"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** Peer settings */
        Object.defineProperty(this, "settings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Mentioned chats */
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Mentioned users */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.settings = params.settings;
        this.chats = params.chats;
        this.users = params.users;
    }
}
/** [Future auth token »](https://core.telegram.org/api/auth#future-auth-tokens) to be used on subsequent authorizations */
export class auth_LoggedOut_ extends _auth_LoggedOut_ {
    get [id]() {
        return 0xC3A2835F;
    }
    static get [name]() {
        return "auth.loggedOut";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["future_auth_token", Uint8Array, "flags.0?bytes"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.future_auth_token ?? null, Uint8Array, "flags.0?bytes"],
        ];
    }
    constructor(params) {
        super();
        /** [Future auth token »](https://core.telegram.org/api/auth#future-auth-tokens) to be used on subsequent authorizations */
        Object.defineProperty(this, "future_auth_token", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.future_auth_token = params?.future_auth_token;
    }
}
/** Reactions */
export class ReactionCount_ extends _ReactionCount_ {
    get [id]() {
        return 0xA3D1CB80;
    }
    static get [name]() {
        return "reactionCount";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["chosen_order", "number", "flags.0?int"],
            ["reaction", _Reaction_, "Reaction"],
            ["count", "number", "int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.chosen_order ?? null, "number", "flags.0?int"],
            [this.reaction, _Reaction_, "Reaction"],
            [this.count, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** If set, indicates that the current user also sent this reaction.
        The integer value indicates when was the reaction added: the bigger the value, the newer the reaction. */
        Object.defineProperty(this, "chosen_order", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The reaction. */
        Object.defineProperty(this, "reaction", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of users that reacted with this emoji. */
        Object.defineProperty(this, "count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.chosen_order = params.chosen_order;
        this.reaction = params.reaction;
        this.count = params.count;
    }
}
/** [Message reactions »](https://core.telegram.org/api/reactions) */
export class MessageReactions_ extends _MessageReactions_ {
    get [id]() {
        return 0x4F2B9479;
    }
    static get [name]() {
        return "messageReactions";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["min", "true", "flags.0?true"],
            ["can_see_list", "true", "flags.2?true"],
            ["reactions_as_tags", "true", "flags.3?true"],
            ["results", [_ReactionCount_], "Vector<ReactionCount>"],
            ["recent_reactions", [_MessagePeerReaction_], "flags.1?Vector<MessagePeerReaction>"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.min ?? null, "true", "flags.0?true"],
            [this.can_see_list ?? null, "true", "flags.2?true"],
            [this.reactions_as_tags ?? null, "true", "flags.3?true"],
            [this.results, [_ReactionCount_], "Vector<ReactionCount>"],
            [this.recent_reactions ?? null, [_MessagePeerReaction_], "flags.1?Vector<MessagePeerReaction>"],
        ];
    }
    constructor(params) {
        super();
        /** Similar to [min](https://core.telegram.org/api/min) objects, used for [message reaction »](https://core.telegram.org/api/reactions) constructors that are the same for all users so they don't have the reactions sent by the current user (you can use [messages.getMessagesReactions](https://core.telegram.org/method/messages.getMessagesReactions) to get the full reaction info). */
        Object.defineProperty(this, "min", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether [messages.getMessageReactionsList](https://core.telegram.org/method/messages.getMessageReactionsList) can be used to see how each specific peer reacted to the message */
        Object.defineProperty(this, "can_see_list", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "reactions_as_tags", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Reactions */
        Object.defineProperty(this, "results", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** List of recent peers and their reactions */
        Object.defineProperty(this, "recent_reactions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.min = params.min;
        this.can_see_list = params.can_see_list;
        this.reactions_as_tags = params.reactions_as_tags;
        this.results = params.results;
        this.recent_reactions = params.recent_reactions;
    }
}
/** List of peers that reacted to a specific message */
export class messages_MessageReactionsList_ extends _messages_MessageReactionsList_ {
    get [id]() {
        return 0x31BD492D;
    }
    static get [name]() {
        return "messages.messageReactionsList";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["count", "number", "int"],
            ["reactions", [_MessagePeerReaction_], "Vector<MessagePeerReaction>"],
            ["chats", [_Chat_], "Vector<Chat>"],
            ["users", [_User_], "Vector<User>"],
            ["next_offset", "string", "flags.0?string"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.count, "number", "int"],
            [this.reactions, [_MessagePeerReaction_], "Vector<MessagePeerReaction>"],
            [this.chats, [_Chat_], "Vector<Chat>"],
            [this.users, [_User_], "Vector<User>"],
            [this.next_offset ?? null, "string", "flags.0?string"],
        ];
    }
    constructor(params) {
        super();
        /** Total number of reactions matching query */
        Object.defineProperty(this, "count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** List of peers that reacted to a specific message */
        Object.defineProperty(this, "reactions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Mentioned chats */
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Mentioned users */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, indicates the next offset to use to load more results by invoking [messages.getMessageReactionsList](https://core.telegram.org/method/messages.getMessageReactionsList). */
        Object.defineProperty(this, "next_offset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.count = params.count;
        this.reactions = params.reactions;
        this.chats = params.chats;
        this.users = params.users;
        this.next_offset = params.next_offset;
    }
}
/** Animations associated with a message reaction */
export class AvailableReaction_ extends _AvailableReaction_ {
    get [id]() {
        return 0xC077EC01;
    }
    static get [name]() {
        return "availableReaction";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["inactive", "true", "flags.0?true"],
            ["premium", "true", "flags.2?true"],
            ["reaction", "string", "string"],
            ["title", "string", "string"],
            ["static_icon", _Document_, "Document"],
            ["appear_animation", _Document_, "Document"],
            ["select_animation", _Document_, "Document"],
            ["activate_animation", _Document_, "Document"],
            ["effect_animation", _Document_, "Document"],
            ["around_animation", _Document_, "flags.1?Document"],
            ["center_icon", _Document_, "flags.1?Document"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.inactive ?? null, "true", "flags.0?true"],
            [this.premium ?? null, "true", "flags.2?true"],
            [this.reaction, "string", "string"],
            [this.title, "string", "string"],
            [this.static_icon, _Document_, "Document"],
            [this.appear_animation, _Document_, "Document"],
            [this.select_animation, _Document_, "Document"],
            [this.activate_animation, _Document_, "Document"],
            [this.effect_animation, _Document_, "Document"],
            [this.around_animation ?? null, _Document_, "flags.1?Document"],
            [this.center_icon ?? null, _Document_, "flags.1?Document"],
        ];
    }
    constructor(params) {
        super();
        /** If not set, the reaction can be added to new messages and enabled in chats. */
        Object.defineProperty(this, "inactive", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this reaction can only be used by Telegram Premium users */
        Object.defineProperty(this, "premium", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Reaction emoji */
        Object.defineProperty(this, "reaction", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Reaction description */
        Object.defineProperty(this, "title", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Static icon for the reaction */
        Object.defineProperty(this, "static_icon", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The animated sticker to show when the user opens the reaction dropdown */
        Object.defineProperty(this, "appear_animation", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The animated sticker to show when the user hovers over the reaction */
        Object.defineProperty(this, "select_animation", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The animated sticker to show when the reaction is chosen and activated */
        Object.defineProperty(this, "activate_animation", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The background effect (still an animated sticker) to play under the `activate_animation`, when the reaction is chosen and activated */
        Object.defineProperty(this, "effect_animation", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The animation that plays around the button when you press an existing reaction (played together with `center_icon`). */
        Object.defineProperty(this, "around_animation", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The animation of the emoji inside the button when you press an existing reaction (played together with `around_animation`). */
        Object.defineProperty(this, "center_icon", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.inactive = params.inactive;
        this.premium = params.premium;
        this.reaction = params.reaction;
        this.title = params.title;
        this.static_icon = params.static_icon;
        this.appear_animation = params.appear_animation;
        this.select_animation = params.select_animation;
        this.activate_animation = params.activate_animation;
        this.effect_animation = params.effect_animation;
        this.around_animation = params.around_animation;
        this.center_icon = params.center_icon;
    }
}
/** No new reactions are available */
export class messages_AvailableReactionsNotModified_ extends _messages_AvailableReactions_ {
    get [id]() {
        return 0x9F071957;
    }
    static get [name]() {
        return "messages.availableReactionsNotModified";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Animations and metadata associated with [message reactions »](https://core.telegram.org/api/reactions) */
export class messages_AvailableReactions_ extends _messages_AvailableReactions_ {
    get [id]() {
        return 0x768E3AAD;
    }
    static get [name]() {
        return "messages.availableReactions";
    }
    static get [paramDesc]() {
        return [
            ["hash", "number", "int"],
            ["reactions", [_AvailableReaction_], "Vector<AvailableReaction>"],
        ];
    }
    get [params]() {
        return [
            [this.hash, "number", "int"],
            [this.reactions, [_AvailableReaction_], "Vector<AvailableReaction>"],
        ];
    }
    constructor(params) {
        super();
        /** [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation) */
        Object.defineProperty(this, "hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Animations and metadata associated with [message reactions »](https://core.telegram.org/api/reactions) */
        Object.defineProperty(this, "reactions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.hash = params.hash;
        this.reactions = params.reactions;
    }
}
/** How a certain peer reacted to the message */
export class MessagePeerReaction_ extends _MessagePeerReaction_ {
    get [id]() {
        return 0x8C79B63C;
    }
    static get [name]() {
        return "messagePeerReaction";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["big", "true", "flags.0?true"],
            ["unread", "true", "flags.1?true"],
            ["my", "true", "flags.2?true"],
            ["peer_id", _Peer_, "Peer"],
            ["date", "number", "int"],
            ["reaction", _Reaction_, "Reaction"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.big ?? null, "true", "flags.0?true"],
            [this.unread ?? null, "true", "flags.1?true"],
            [this.my ?? null, "true", "flags.2?true"],
            [this.peer_id, _Peer_, "Peer"],
            [this.date, "number", "int"],
            [this.reaction, _Reaction_, "Reaction"],
        ];
    }
    constructor(params) {
        super();
        /** Whether the specified [message reaction »](https://core.telegram.org/api/reactions) should elicit a bigger and longer reaction */
        Object.defineProperty(this, "big", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether the reaction wasn't yet marked as read by the current user */
        Object.defineProperty(this, "unread", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Starting from layer 159, [messages.sendReaction](https://core.telegram.org/method/messages.sendReaction) will send reactions from the peer (user or channel) specified using [messages.saveDefaultSendAs](https://core.telegram.org/method/messages.saveDefaultSendAs).
        If set, this flag indicates that this reaction was sent by us, even if the `peer` doesn't point to the current account. */
        Object.defineProperty(this, "my", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Peer that reacted to the message */
        Object.defineProperty(this, "peer_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** When was this reaction added */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Reaction emoji */
        Object.defineProperty(this, "reaction", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.big = params.big;
        this.unread = params.unread;
        this.my = params.my;
        this.peer_id = params.peer_id;
        this.date = params.date;
        this.reaction = params.reaction;
    }
}
/** Info about an RTMP stream in a group call or livestream */
export class GroupCallStreamChannel_ extends _GroupCallStreamChannel_ {
    get [id]() {
        return 0x80EB48AF;
    }
    static get [name]() {
        return "groupCallStreamChannel";
    }
    static get [paramDesc]() {
        return [
            ["channel", "number", "int"],
            ["scale", "number", "int"],
            ["last_timestamp_ms", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.channel, "number", "int"],
            [this.scale, "number", "int"],
            [this.last_timestamp_ms, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** Channel ID */
        Object.defineProperty(this, "channel", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Specifies the duration of the video segment to fetch in milliseconds, by bitshifting `1000` to the right `scale` times: `duration_ms := 1000 >> scale`. */
        Object.defineProperty(this, "scale", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Last seen timestamp to easily start fetching livestream chunks using [inputGroupCallStream](https://core.telegram.org/constructor/inputGroupCallStream) */
        Object.defineProperty(this, "last_timestamp_ms", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.channel = params.channel;
        this.scale = params.scale;
        this.last_timestamp_ms = params.last_timestamp_ms;
    }
}
/** Info about RTMP streams in a group call or livestream */
export class phone_GroupCallStreamChannels_ extends _phone_GroupCallStreamChannels_ {
    get [id]() {
        return 0xD0E482B2;
    }
    static get [name]() {
        return "phone.groupCallStreamChannels";
    }
    static get [paramDesc]() {
        return [
            ["channels", [_GroupCallStreamChannel_], "Vector<GroupCallStreamChannel>"],
        ];
    }
    get [params]() {
        return [
            [this.channels, [_GroupCallStreamChannel_], "Vector<GroupCallStreamChannel>"],
        ];
    }
    constructor(params) {
        super();
        /** RTMP streams */
        Object.defineProperty(this, "channels", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.channels = params.channels;
    }
}
/** RTMP URL and stream key to be used in streaming software */
export class phone_GroupCallStreamRtmpUrl_ extends _phone_GroupCallStreamRtmpUrl_ {
    get [id]() {
        return 0x2DBF3432;
    }
    static get [name]() {
        return "phone.groupCallStreamRtmpUrl";
    }
    static get [paramDesc]() {
        return [
            ["url", "string", "string"],
            ["key", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.url, "string", "string"],
            [this.key, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** RTMP URL */
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Stream key */
        Object.defineProperty(this, "key", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.url = params.url;
        this.key = params.key;
    }
}
/** Represents an attachment menu icon color for [bot mini apps »](https://core.telegram.org/api/bots/attach) */
export class AttachMenuBotIconColor_ extends _AttachMenuBotIconColor_ {
    get [id]() {
        return 0x4576F3F0;
    }
    static get [name]() {
        return "attachMenuBotIconColor";
    }
    static get [paramDesc]() {
        return [
            ["name", "string", "string"],
            ["color", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.name, "string", "string"],
            [this.color, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** One of the following values:
        `light_icon` - Color of the attachment menu icon (light mode)
        `light_text` - Color of the attachment menu label, once selected (light mode)
        `dark_icon` - Color of the attachment menu icon (dark mode)
        `dark_text` - Color of the attachment menu label, once selected (dark mode) */
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Color in RGB24 format */
        Object.defineProperty(this, "color", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.name = params.name;
        this.color = params.color;
    }
}
/** Represents an attachment menu icon for [bot mini apps »](https://core.telegram.org/api/bots/attach) */
export class AttachMenuBotIcon_ extends _AttachMenuBotIcon_ {
    get [id]() {
        return 0xB2A7386B;
    }
    static get [name]() {
        return "attachMenuBotIcon";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["name", "string", "string"],
            ["icon", _Document_, "Document"],
            ["colors", [_AttachMenuBotIconColor_], "flags.0?Vector<AttachMenuBotIconColor>"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.name, "string", "string"],
            [this.icon, _Document_, "Document"],
            [this.colors ?? null, [_AttachMenuBotIconColor_], "flags.0?Vector<AttachMenuBotIconColor>"],
        ];
    }
    constructor(params) {
        super();
        /** One of the following values: note that animated icons must be played when the user clicks on the button, activating the bot mini app.
          
        `default_static` - Default attachment menu icon in SVG format
        `placeholder_static` - Default placeholder for opened Web Apps in SVG format
        `ios_static` - Attachment menu icon in SVG format for the official iOS app
        `ios_animated` - Animated attachment menu icon in TGS format for the official iOS app
        `android_animated` - Animated attachment menu icon in TGS format for the official Android app
        `macos_animated` - Animated attachment menu icon in TGS format for the official native Mac OS app
        `ios_side_menu_static` - Side menu icon in PNG format for the official iOS app
        `android_side_menu_static` - Side menu icon in SVG format for the official android app
        `macos_side_menu_static` - Side menu icon in PNG format for the official native Mac OS app */
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The actual icon file. */
        Object.defineProperty(this, "icon", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Attachment menu icon colors. */
        Object.defineProperty(this, "colors", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.name = params.name;
        this.icon = params.icon;
        this.colors = params.colors;
    }
}
/** Represents a [bot mini app that can be launched from the attachment/side menu »](https://core.telegram.org/api/bots/attach) */
export class AttachMenuBot_ extends _AttachMenuBot_ {
    get [id]() {
        return 0xD90D8DFE;
    }
    static get [name]() {
        return "attachMenuBot";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["inactive", "true", "flags.0?true"],
            ["has_settings", "true", "flags.1?true"],
            ["request_write_access", "true", "flags.2?true"],
            ["show_in_attach_menu", "true", "flags.3?true"],
            ["show_in_side_menu", "true", "flags.4?true"],
            ["side_menu_disclaimer_needed", "true", "flags.5?true"],
            ["bot_id", "bigint", "long"],
            ["short_name", "string", "string"],
            ["peer_types", [_AttachMenuPeerType_], "flags.3?Vector<AttachMenuPeerType>"],
            ["icons", [_AttachMenuBotIcon_], "Vector<AttachMenuBotIcon>"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.inactive ?? null, "true", "flags.0?true"],
            [this.has_settings ?? null, "true", "flags.1?true"],
            [this.request_write_access ?? null, "true", "flags.2?true"],
            [this.show_in_attach_menu ?? null, "true", "flags.3?true"],
            [this.show_in_side_menu ?? null, "true", "flags.4?true"],
            [this.side_menu_disclaimer_needed ?? null, "true", "flags.5?true"],
            [this.bot_id, "bigint", "long"],
            [this.short_name, "string", "string"],
            [this.peer_types ?? null, [_AttachMenuPeerType_], "flags.3?Vector<AttachMenuPeerType>"],
            [this.icons, [_AttachMenuBotIcon_], "Vector<AttachMenuBotIcon>"],
        ];
    }
    constructor(params) {
        super();
        /** If set, before launching the mini app the client should ask the user to add the mini app to the attachment/side menu, and only if the user accepts, after invoking [messages.toggleBotInAttachMenu](https://core.telegram.org/method/messages.toggleBotInAttachMenu) the app should be opened. */
        Object.defineProperty(this, "inactive", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Deprecated flag, can be ignored. */
        Object.defineProperty(this, "has_settings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether the bot would like to send messages to the user. */
        Object.defineProperty(this, "request_write_access", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether, when installed, an attachment menu entry should be shown for the Mini App. */
        Object.defineProperty(this, "show_in_attach_menu", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether, when installed, an entry in the main view side menu should be shown for the Mini App. */
        Object.defineProperty(this, "show_in_side_menu", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If `inactive` if set and the user hasn't previously accepted the third-party mini apps [Terms of Service](https://telegram.org/tos/mini-apps) for this bot, when showing the mini app installation prompt, an additional mandatory checkbox to accept the [mini apps TOS](https://telegram.org/tos/mini-apps) and a disclaimer indicating that this Mini App is not affiliated to Telegram should be shown. */
        Object.defineProperty(this, "side_menu_disclaimer_needed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Bot ID */
        Object.defineProperty(this, "bot_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Attachment menu item name */
        Object.defineProperty(this, "short_name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** List of dialog types where this attachment menu entry should be shown */
        Object.defineProperty(this, "peer_types", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** List of platform-specific static icons and animations to use for the attachment menu button */
        Object.defineProperty(this, "icons", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.inactive = params.inactive;
        this.has_settings = params.has_settings;
        this.request_write_access = params.request_write_access;
        this.show_in_attach_menu = params.show_in_attach_menu;
        this.show_in_side_menu = params.show_in_side_menu;
        this.side_menu_disclaimer_needed = params.side_menu_disclaimer_needed;
        this.bot_id = params.bot_id;
        this.short_name = params.short_name;
        this.peer_types = params.peer_types;
        this.icons = params.icons;
    }
}
/** The list of bot mini apps hasn't changed */
export class AttachMenuBotsNotModified_ extends _AttachMenuBots_ {
    get [id]() {
        return 0xF1D88A5C;
    }
    static get [name]() {
        return "attachMenuBotsNotModified";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Represents a list of [bot mini apps that can be launched from the attachment menu »](https://core.telegram.org/api/bots/attach) */
export class AttachMenuBots_ extends _AttachMenuBots_ {
    get [id]() {
        return 0x3C4301C0;
    }
    static get [name]() {
        return "attachMenuBots";
    }
    static get [paramDesc]() {
        return [
            ["hash", "bigint", "long"],
            ["bots", [_AttachMenuBot_], "Vector<AttachMenuBot>"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            [this.hash, "bigint", "long"],
            [this.bots, [_AttachMenuBot_], "Vector<AttachMenuBot>"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation) */
        Object.defineProperty(this, "hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** List of [bot mini apps that can be launched from the attachment menu »](https://core.telegram.org/api/bots/attach) */
        Object.defineProperty(this, "bots", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Info about related users/bots */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.hash = params.hash;
        this.bots = params.bots;
        this.users = params.users;
    }
}
/** Represents a [bot mini app that can be launched from the attachment menu »](https://core.telegram.org/api/bots/attach) */
export class AttachMenuBotsBot_ extends _AttachMenuBotsBot_ {
    get [id]() {
        return 0x93BF667F;
    }
    static get [name]() {
        return "attachMenuBotsBot";
    }
    static get [paramDesc]() {
        return [
            ["bot", _AttachMenuBot_, "AttachMenuBot"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            [this.bot, _AttachMenuBot_, "AttachMenuBot"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** Represents a [bot mini app that can be launched from the attachment menu »](https://core.telegram.org/api/bots/attach) */
        Object.defineProperty(this, "bot", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Info about related users and bots */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.bot = params.bot;
        this.users = params.users;
    }
}
/** Contains the webview URL with appropriate theme and user info parameters added */
export class WebViewResultUrl_ extends _WebViewResult_ {
    get [id]() {
        return 0x0C14557C;
    }
    static get [name]() {
        return "webViewResultUrl";
    }
    static get [paramDesc]() {
        return [
            ["query_id", "bigint", "long"],
            ["url", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.query_id, "bigint", "long"],
            [this.url, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Webview session ID */
        Object.defineProperty(this, "query_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Webview URL to open */
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.query_id = params.query_id;
        this.url = params.url;
    }
}
/** Contains the webview URL with appropriate theme parameters added */
export class SimpleWebViewResultUrl_ extends _SimpleWebViewResult_ {
    get [id]() {
        return 0x882F76BB;
    }
    static get [name]() {
        return "simpleWebViewResultUrl";
    }
    static get [paramDesc]() {
        return [
            ["url", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.url, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** URL */
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.url = params.url;
    }
}
/** Info about a sent inline webview message */
export class WebViewMessageSent_ extends _WebViewMessageSent_ {
    get [id]() {
        return 0x0C94511C;
    }
    static get [name]() {
        return "webViewMessageSent";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["msg_id", _InputBotInlineMessageID_, "flags.0?InputBotInlineMessageID"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.msg_id ?? null, _InputBotInlineMessageID_, "flags.0?InputBotInlineMessageID"],
        ];
    }
    constructor(params) {
        super();
        /** Message ID */
        Object.defineProperty(this, "msg_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.msg_id = params?.msg_id;
    }
}
/** Placeholder [bot menu button](https://core.telegram.org/api/bots/menu) never returned to users: see [the docs for more info](https://core.telegram.org/api/bots/menu). */
export class BotMenuButtonDefault_ extends _BotMenuButton_ {
    get [id]() {
        return 0x7533A588;
    }
    static get [name]() {
        return "botMenuButtonDefault";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** [Bot menu button](https://core.telegram.org/api/bots/menu) that opens the bot command list when clicked. */
export class BotMenuButtonCommands_ extends _BotMenuButton_ {
    get [id]() {
        return 0x4258C205;
    }
    static get [name]() {
        return "botMenuButtonCommands";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** [Bot menu button](https://core.telegram.org/api/bots/menu) that opens a [web app](https://core.telegram.org/api/bots/webapps) when clicked. */
export class BotMenuButton_ extends _BotMenuButton_ {
    get [id]() {
        return 0xC7B57CE6;
    }
    static get [name]() {
        return "botMenuButton";
    }
    static get [paramDesc]() {
        return [
            ["text", "string", "string"],
            ["url", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.text, "string", "string"],
            [this.url, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Title to be displayed on the menu button instead of 'Menu' */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** URL of a [web app](https://core.telegram.org/api/bots/webapps) to open when the user clicks on the button */
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.text = params.text;
        this.url = params.url;
    }
}
/** The notification sound list hasn't changed. */
export class account_SavedRingtonesNotModified_ extends _account_SavedRingtones_ {
    get [id]() {
        return 0xFBF6E8B1;
    }
    static get [name]() {
        return "account.savedRingtonesNotModified";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** A list of saved notification sounds */
export class account_SavedRingtones_ extends _account_SavedRingtones_ {
    get [id]() {
        return 0xC1E92CC5;
    }
    static get [name]() {
        return "account.savedRingtones";
    }
    static get [paramDesc]() {
        return [
            ["hash", "bigint", "long"],
            ["ringtones", [_Document_], "Vector<Document>"],
        ];
    }
    get [params]() {
        return [
            [this.hash, "bigint", "long"],
            [this.ringtones, [_Document_], "Vector<Document>"],
        ];
    }
    constructor(params) {
        super();
        /** [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation) */
        Object.defineProperty(this, "hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Saved notification sounds */
        Object.defineProperty(this, "ringtones", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.hash = params.hash;
        this.ringtones = params.ringtones;
    }
}
/** Indicates the default notification sound should be used */
export class NotificationSoundDefault_ extends _NotificationSound_ {
    get [id]() {
        return 0x97E8BEBE;
    }
    static get [name]() {
        return "notificationSoundDefault";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** No notification sound should be used */
export class NotificationSoundNone_ extends _NotificationSound_ {
    get [id]() {
        return 0x6F0C34DF;
    }
    static get [name]() {
        return "notificationSoundNone";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Indicates a specific local notification sound should be used */
export class NotificationSoundLocal_ extends _NotificationSound_ {
    get [id]() {
        return 0x830B9AE4;
    }
    static get [name]() {
        return "notificationSoundLocal";
    }
    static get [paramDesc]() {
        return [
            ["title", "string", "string"],
            ["data", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.title, "string", "string"],
            [this.data, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Notification sound title */
        Object.defineProperty(this, "title", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Notification sound identifier (arbitrary data used by the client to identify a specific local notification sound) */
        Object.defineProperty(this, "data", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.title = params.title;
        this.data = params.data;
    }
}
/** A specific previously uploaded notification sound should be used */
export class NotificationSoundRingtone_ extends _NotificationSound_ {
    get [id]() {
        return 0xFF6C8049;
    }
    static get [name]() {
        return "notificationSoundRingtone";
    }
    static get [paramDesc]() {
        return [
            ["id", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.id, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** Document ID of notification sound uploaded using [account.uploadRingtone](https://core.telegram.org/method/account.uploadRingtone) */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
    }
}
/** The notification sound was already in MP3 format and was saved without any modification */
export class account_SavedRingtone_ extends _account_SavedRingtone_ {
    get [id]() {
        return 0xB7263F6D;
    }
    static get [name]() {
        return "account.savedRingtone";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** The notification sound was not in MP3 format and was successfully converted and saved, use the returned [Document](https://core.telegram.org/type/Document) to refer to the notification sound from now on */
export class account_SavedRingtoneConverted_ extends _account_SavedRingtone_ {
    get [id]() {
        return 0x1F307EB7;
    }
    static get [name]() {
        return "account.savedRingtoneConverted";
    }
    static get [paramDesc]() {
        return [
            ["document", _Document_, "Document"],
        ];
    }
    get [params]() {
        return [
            [this.document, _Document_, "Document"],
        ];
    }
    constructor(params) {
        super();
        /** The converted notification sound */
        Object.defineProperty(this, "document", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.document = params.document;
    }
}
/** The bot attachment menu entry is available in the chat with the bot that offers it */
export class AttachMenuPeerTypeSameBotPM_ extends _AttachMenuPeerType_ {
    get [id]() {
        return 0x7D6BE90E;
    }
    static get [name]() {
        return "attachMenuPeerTypeSameBotPM";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** The bot attachment menu entry is available in private chats with other bots (excluding the bot that offers the current attachment menu) */
export class AttachMenuPeerTypeBotPM_ extends _AttachMenuPeerType_ {
    get [id]() {
        return 0xC32BFA1A;
    }
    static get [name]() {
        return "attachMenuPeerTypeBotPM";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** The bot attachment menu entry is available in private chats with other users (not bots) */
export class AttachMenuPeerTypePM_ extends _AttachMenuPeerType_ {
    get [id]() {
        return 0xF146D31F;
    }
    static get [name]() {
        return "attachMenuPeerTypePM";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** The bot attachment menu entry is available in [groups and supergroups](https://core.telegram.org/api/channel) */
export class AttachMenuPeerTypeChat_ extends _AttachMenuPeerType_ {
    get [id]() {
        return 0x0509113F;
    }
    static get [name]() {
        return "attachMenuPeerTypeChat";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** The bot attachment menu entry is available in channels */
export class AttachMenuPeerTypeBroadcast_ extends _AttachMenuPeerType_ {
    get [id]() {
        return 0x7BFBDEFC;
    }
    static get [name]() {
        return "attachMenuPeerTypeBroadcast";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** An invoice contained in a [messageMediaInvoice](https://core.telegram.org/constructor/messageMediaInvoice) message. */
export class InputInvoiceMessage_ extends _InputInvoice_ {
    get [id]() {
        return 0xC5B56859;
    }
    static get [name]() {
        return "inputInvoiceMessage";
    }
    static get [paramDesc]() {
        return [
            ["peer", _InputPeer_, "InputPeer"],
            ["msg_id", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.peer, _InputPeer_, "InputPeer"],
            [this.msg_id, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Chat where the invoice was sent */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Message ID */
        Object.defineProperty(this, "msg_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.peer = params.peer;
        this.msg_id = params.msg_id;
    }
}
/** An invoice slug taken from an [invoice deep link](https://core.telegram.org/api/links#invoice-links) or from the [`premium_invoice_slug` app config parameter »](https://core.telegram.org/api/config#premium-invoice-slug) */
export class InputInvoiceSlug_ extends _InputInvoice_ {
    get [id]() {
        return 0xC326CAEF;
    }
    static get [name]() {
        return "inputInvoiceSlug";
    }
    static get [paramDesc]() {
        return [
            ["slug", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.slug, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** The invoice slug */
        Object.defineProperty(this, "slug", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.slug = params.slug;
    }
}
/** Used if the user wishes to start a channel [giveaway](https://core.telegram.org/api/giveaways) or send some [giftcodes](https://core.telegram.org/api/giveaways) to members of a channel, in exchange for [boosts](https://core.telegram.org/api/boost). */
export class InputInvoicePremiumGiftCode_ extends _InputInvoice_ {
    get [id]() {
        return 0x98986C0D;
    }
    static get [name]() {
        return "inputInvoicePremiumGiftCode";
    }
    static get [paramDesc]() {
        return [
            ["purpose", _InputStorePaymentPurpose_, "InputStorePaymentPurpose"],
            ["option", _PremiumGiftCodeOption_, "PremiumGiftCodeOption"],
        ];
    }
    get [params]() {
        return [
            [this.purpose, _InputStorePaymentPurpose_, "InputStorePaymentPurpose"],
            [this.option, _PremiumGiftCodeOption_, "PremiumGiftCodeOption"],
        ];
    }
    constructor(params) {
        super();
        /** Should be populated with [inputStorePaymentPremiumGiveaway](https://core.telegram.org/constructor/inputStorePaymentPremiumGiveaway) for [giveaways](https://core.telegram.org/api/giveaways) and [inputStorePaymentPremiumGiftCode](https://core.telegram.org/constructor/inputStorePaymentPremiumGiftCode) for [gifts](https://core.telegram.org/api/giveaways). */
        Object.defineProperty(this, "purpose", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Should be populated with one of the giveaway options returned by [payments.getPremiumGiftCodeOptions](https://core.telegram.org/method/payments.getPremiumGiftCodeOptions), see the [giveaways »](https://core.telegram.org/api/giveaways) documentation for more info. */
        Object.defineProperty(this, "option", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.purpose = params.purpose;
        this.option = params.option;
    }
}
/** Exported [invoice deep link](https://core.telegram.org/api/links#invoice-links) */
export class payments_ExportedInvoice_ extends _payments_ExportedInvoice_ {
    get [id]() {
        return 0xAED0CBD9;
    }
    static get [name]() {
        return "payments.exportedInvoice";
    }
    static get [paramDesc]() {
        return [
            ["url", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.url, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Exported [invoice deep link](https://core.telegram.org/api/links#invoice-links) */
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.url = params.url;
    }
}
/** [Transcribed text from a voice message »](https://core.telegram.org/api/transcribe) */
export class messages_TranscribedAudio_ extends _messages_TranscribedAudio_ {
    get [id]() {
        return 0xCFB9D957;
    }
    static get [name]() {
        return "messages.transcribedAudio";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["pending", "true", "flags.0?true"],
            ["transcription_id", "bigint", "long"],
            ["text", "string", "string"],
            ["trial_remains_num", "number", "flags.1?int"],
            ["trial_remains_until_date", "number", "flags.1?int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.pending ?? null, "true", "flags.0?true"],
            [this.transcription_id, "bigint", "long"],
            [this.text, "string", "string"],
            [this.trial_remains_num ?? null, "number", "flags.1?int"],
            [this.trial_remains_until_date ?? null, "number", "flags.1?int"],
        ];
    }
    constructor(params) {
        super();
        /** Whether the transcription is partial because audio transcription is still in progress, if set the user may receive further [updateTranscribedAudio](https://core.telegram.org/constructor/updateTranscribedAudio) updates with the updated transcription. */
        Object.defineProperty(this, "pending", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Transcription ID */
        Object.defineProperty(this, "transcription_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Transcripted text */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** For non-[Premium](https://core.telegram.org/api/premium) users, this flag will be set, indicating the remaining transcriptions in the free trial period. */
        Object.defineProperty(this, "trial_remains_num", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** For non-[Premium](https://core.telegram.org/api/premium) users, this flag will be set, indicating the date when the `trial_remains_num` counter will be reset to the maximum value of [transcribe\_audio\_trial\_weekly\_number](https://core.telegram.org/api/config#transcribe-audio-trial-weekly-number). */
        Object.defineProperty(this, "trial_remains_until_date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.pending = params.pending;
        this.transcription_id = params.transcription_id;
        this.text = params.text;
        this.trial_remains_num = params.trial_remains_num;
        this.trial_remains_until_date = params.trial_remains_until_date;
    }
}
/** Telegram Premium promotion information */
export class help_PremiumPromo_ extends _help_PremiumPromo_ {
    get [id]() {
        return 0x5334759C;
    }
    static get [name]() {
        return "help.premiumPromo";
    }
    static get [paramDesc]() {
        return [
            ["status_text", "string", "string"],
            ["status_entities", [_MessageEntity_], "Vector<MessageEntity>"],
            ["video_sections", ["string"], "Vector<string>"],
            ["videos", [_Document_], "Vector<Document>"],
            ["period_options", [_PremiumSubscriptionOption_], "Vector<PremiumSubscriptionOption>"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            [this.status_text, "string", "string"],
            [this.status_entities, [_MessageEntity_], "Vector<MessageEntity>"],
            [this.video_sections, ["string"], "Vector<string>"],
            [this.videos, [_Document_], "Vector<Document>"],
            [this.period_options, [_PremiumSubscriptionOption_], "Vector<PremiumSubscriptionOption>"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** Description of the current state of the user's Telegram Premium subscription */
        Object.defineProperty(this, "status_text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Message entities for styled text](https://core.telegram.org/api/entities) */
        Object.defineProperty(this, "status_entities", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** A list of [premium feature identifiers »](https://core.telegram.org/api/premium), associated to each video */
        Object.defineProperty(this, "video_sections", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** A list of videos */
        Object.defineProperty(this, "videos", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Telegram Premium subscription options */
        Object.defineProperty(this, "period_options", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Related user information */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.status_text = params.status_text;
        this.status_entities = params.status_entities;
        this.video_sections = params.video_sections;
        this.videos = params.videos;
        this.period_options = params.period_options;
        this.users = params.users;
    }
}
/** Info about a Telegram Premium purchase */
export class InputStorePaymentPremiumSubscription_ extends _InputStorePaymentPurpose_ {
    get [id]() {
        return 0xA6751E66;
    }
    static get [name]() {
        return "inputStorePaymentPremiumSubscription";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["restore", "true", "flags.0?true"],
            ["upgrade", "true", "flags.1?true"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.restore ?? null, "true", "flags.0?true"],
            [this.upgrade ?? null, "true", "flags.1?true"],
        ];
    }
    constructor(params) {
        super();
        /** Pass true if this is a restore of a Telegram Premium purchase; only for the App Store */
        Object.defineProperty(this, "restore", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Pass true if this is an upgrade from a monthly subscription to a yearly subscription; only for App Store */
        Object.defineProperty(this, "upgrade", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.restore = params?.restore;
        this.upgrade = params?.upgrade;
    }
}
/** Info about a gifted Telegram Premium purchase */
export class InputStorePaymentGiftPremium_ extends _InputStorePaymentPurpose_ {
    get [id]() {
        return 0x616F7FE8;
    }
    static get [name]() {
        return "inputStorePaymentGiftPremium";
    }
    static get [paramDesc]() {
        return [
            ["user_id", _InputUser_, "InputUser"],
            ["currency", "string", "string"],
            ["amount", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.user_id, _InputUser_, "InputUser"],
            [this.currency, "string", "string"],
            [this.amount, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** The user to which the Telegram Premium subscription was gifted */
        Object.defineProperty(this, "user_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code */
        Object.defineProperty(this, "currency", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Price of the product in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). */
        Object.defineProperty(this, "amount", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.user_id = params.user_id;
        this.currency = params.currency;
        this.amount = params.amount;
    }
}
/** Used to gift [Telegram Premium](https://core.telegram.org/api/premium) subscriptions only to some specific subscribers of a channel or to some of our contacts, see [here »](https://core.telegram.org/api/giveaways) for more info on giveaways and gifts. */
export class InputStorePaymentPremiumGiftCode_ extends _InputStorePaymentPurpose_ {
    get [id]() {
        return 0xA3805F3F;
    }
    static get [name]() {
        return "inputStorePaymentPremiumGiftCode";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["users", [_InputUser_], "Vector<InputUser>"],
            ["boost_peer", _InputPeer_, "flags.0?InputPeer"],
            ["currency", "string", "string"],
            ["amount", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.users, [_InputUser_], "Vector<InputUser>"],
            [this.boost_peer ?? null, _InputPeer_, "flags.0?InputPeer"],
            [this.currency, "string", "string"],
            [this.amount, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** The users that will receive the [Telegram Premium](https://core.telegram.org/api/premium) subscriptions. */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, the gifts will be sent on behalf of a channel we are an admin of, which will also assign some [boosts](https://core.telegram.org/api/boost) to it. Otherwise, the gift will be sent directly from the currently logged in users, and we will gain some extra [boost slots](https://core.telegram.org/api/boost). See [here »](https://core.telegram.org/api/giveaways) for more info on giveaways and gifts. */
        Object.defineProperty(this, "boost_peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code */
        Object.defineProperty(this, "currency", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Total price in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). */
        Object.defineProperty(this, "amount", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.users = params.users;
        this.boost_peer = params.boost_peer;
        this.currency = params.currency;
        this.amount = params.amount;
    }
}
/** Used to pay for a [giveaway, see here »](https://core.telegram.org/api/giveaways) for more info. */
export class InputStorePaymentPremiumGiveaway_ extends _InputStorePaymentPurpose_ {
    get [id]() {
        return 0x160544CA;
    }
    static get [name]() {
        return "inputStorePaymentPremiumGiveaway";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["only_new_subscribers", "true", "flags.0?true"],
            ["winners_are_visible", "true", "flags.3?true"],
            ["boost_peer", _InputPeer_, "InputPeer"],
            ["additional_peers", [_InputPeer_], "flags.1?Vector<InputPeer>"],
            ["countries_iso2", ["string"], "flags.2?Vector<string>"],
            ["prize_description", "string", "flags.4?string"],
            ["random_id", "bigint", "long"],
            ["until_date", "number", "int"],
            ["currency", "string", "string"],
            ["amount", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.only_new_subscribers ?? null, "true", "flags.0?true"],
            [this.winners_are_visible ?? null, "true", "flags.3?true"],
            [this.boost_peer, _InputPeer_, "InputPeer"],
            [this.additional_peers ?? null, [_InputPeer_], "flags.1?Vector<InputPeer>"],
            [this.countries_iso2 ?? null, ["string"], "flags.2?Vector<string>"],
            [this.prize_description ?? null, "string", "flags.4?string"],
            [this.random_id, "bigint", "long"],
            [this.until_date, "number", "int"],
            [this.currency, "string", "string"],
            [this.amount, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** If set, only new subscribers starting from the giveaway creation date will be able to participate to the giveaway. */
        Object.defineProperty(this, "only_new_subscribers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, giveaway winners are public and will be listed in a [messageMediaGiveawayResults](https://core.telegram.org/constructor/messageMediaGiveawayResults) message that will be automatically sent to the channel once the giveaway ends. */
        Object.defineProperty(this, "winners_are_visible", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The channel starting the giveaway, that the user must join to participate, that will receive the giveaway [boosts](https://core.telegram.org/api/boost); see [here »](https://core.telegram.org/api/giveaways) for more info on giveaways. */
        Object.defineProperty(this, "boost_peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Additional channels that the user must join to participate to the giveaway can be specified here. */
        Object.defineProperty(this, "additional_peers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The set of users that can participate to the giveaway can be restricted by passing here an explicit whitelist of up to [giveaway\_countries\_max](https://core.telegram.org/api/config#giveaway-countries-max) countries, specified as two-letter ISO 3166-1 alpha-2 country codes. */
        Object.defineProperty(this, "countries_iso2", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Can contain a textual description of additional giveaway prizes. */
        Object.defineProperty(this, "prize_description", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Random ID to avoid resending the giveaway */
        Object.defineProperty(this, "random_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The end date of the giveaway, must be at most [giveaway\_period\_max](https://core.telegram.org/api/config#giveaway-period-max) seconds in the future; see [here »](https://core.telegram.org/api/giveaways) for more info on giveaways. */
        Object.defineProperty(this, "until_date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code */
        Object.defineProperty(this, "currency", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Total price in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). */
        Object.defineProperty(this, "amount", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.only_new_subscribers = params.only_new_subscribers;
        this.winners_are_visible = params.winners_are_visible;
        this.boost_peer = params.boost_peer;
        this.additional_peers = params.additional_peers;
        this.countries_iso2 = params.countries_iso2;
        this.prize_description = params.prize_description;
        this.random_id = params.random_id;
        this.until_date = params.until_date;
        this.currency = params.currency;
        this.amount = params.amount;
    }
}
/** Telegram Premium gift option */
export class PremiumGiftOption_ extends _PremiumGiftOption_ {
    get [id]() {
        return 0x74C34319;
    }
    static get [name]() {
        return "premiumGiftOption";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["months", "number", "int"],
            ["currency", "string", "string"],
            ["amount", "bigint", "long"],
            ["bot_url", "string", "string"],
            ["store_product", "string", "flags.0?string"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.months, "number", "int"],
            [this.currency, "string", "string"],
            [this.amount, "bigint", "long"],
            [this.bot_url, "string", "string"],
            [this.store_product ?? null, "string", "flags.0?string"],
        ];
    }
    constructor(params) {
        super();
        /** Duration of gifted Telegram Premium subscription */
        Object.defineProperty(this, "months", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code */
        Object.defineProperty(this, "currency", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Price of the product in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). */
        Object.defineProperty(this, "amount", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** An [invoice deep link »](https://core.telegram.org/api/links#invoice-links) to an invoice for in-app payment, using the official Premium bot; may be empty if direct payment isn't available. */
        Object.defineProperty(this, "bot_url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** An identifier for the App Store/Play Store product associated with the Premium gift. */
        Object.defineProperty(this, "store_product", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.months = params.months;
        this.currency = params.currency;
        this.amount = params.amount;
        this.bot_url = params.bot_url;
        this.store_product = params.store_product;
    }
}
/** Represents an additional payment method */
export class PaymentFormMethod_ extends _PaymentFormMethod_ {
    get [id]() {
        return 0x88F8F21B;
    }
    static get [name]() {
        return "paymentFormMethod";
    }
    static get [paramDesc]() {
        return [
            ["url", "string", "string"],
            ["title", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.url, "string", "string"],
            [this.title, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** URL to open in a webview to process the payment */
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Payment method description */
        Object.defineProperty(this, "title", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.url = params.url;
        this.title = params.title;
    }
}
/** No emoji status is set */
export class EmojiStatusEmpty_ extends _EmojiStatus_ {
    get [id]() {
        return 0x2DE11AAE;
    }
    static get [name]() {
        return "emojiStatusEmpty";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** An [emoji status](https://core.telegram.org/api/emoji-status) */
export class EmojiStatus_ extends _EmojiStatus_ {
    get [id]() {
        return 0x929B619D;
    }
    static get [name]() {
        return "emojiStatus";
    }
    static get [paramDesc]() {
        return [
            ["document_id", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.document_id, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** [Custom emoji document ID](https://core.telegram.org/api/custom-emoji) */
        Object.defineProperty(this, "document_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.document_id = params.document_id;
    }
}
/** An [emoji status](https://core.telegram.org/api/emoji-status) valid until the specified date */
export class EmojiStatusUntil_ extends _EmojiStatus_ {
    get [id]() {
        return 0xFA30A8C7;
    }
    static get [name]() {
        return "emojiStatusUntil";
    }
    static get [paramDesc]() {
        return [
            ["document_id", "bigint", "long"],
            ["until", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.document_id, "bigint", "long"],
            [this.until, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** [Custom emoji document ID](https://core.telegram.org/api/custom-emoji) */
        Object.defineProperty(this, "document_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** This status is valid until this date */
        Object.defineProperty(this, "until", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.document_id = params.document_id;
        this.until = params.until;
    }
}
/** The server-side list of [emoji statuses](https://core.telegram.org/api/emoji-status) hasn't changed */
export class account_EmojiStatusesNotModified_ extends _account_EmojiStatuses_ {
    get [id]() {
        return 0xD08CE645;
    }
    static get [name]() {
        return "account.emojiStatusesNotModified";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** A list of [emoji statuses](https://core.telegram.org/api/emoji-status) */
export class account_EmojiStatuses_ extends _account_EmojiStatuses_ {
    get [id]() {
        return 0x90C467D1;
    }
    static get [name]() {
        return "account.emojiStatuses";
    }
    static get [paramDesc]() {
        return [
            ["hash", "bigint", "long"],
            ["statuses", [_EmojiStatus_], "Vector<EmojiStatus>"],
        ];
    }
    get [params]() {
        return [
            [this.hash, "bigint", "long"],
            [this.statuses, [_EmojiStatus_], "Vector<EmojiStatus>"],
        ];
    }
    constructor(params) {
        super();
        /** [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation) */
        Object.defineProperty(this, "hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Emoji statuses](https://core.telegram.org/api/emoji-status) */
        Object.defineProperty(this, "statuses", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.hash = params.hash;
        this.statuses = params.statuses;
    }
}
/** No reaction */
export class ReactionEmpty_ extends _Reaction_ {
    get [id]() {
        return 0x79F5D419;
    }
    static get [name]() {
        return "reactionEmpty";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Normal emoji message reaction */
export class ReactionEmoji_ extends _Reaction_ {
    get [id]() {
        return 0x1B2286B8;
    }
    static get [name]() {
        return "reactionEmoji";
    }
    static get [paramDesc]() {
        return [
            ["emoticon", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.emoticon, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Emoji */
        Object.defineProperty(this, "emoticon", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.emoticon = params.emoticon;
    }
}
/** [Custom emoji](https://core.telegram.org/api/custom-emoji) message reaction */
export class ReactionCustomEmoji_ extends _Reaction_ {
    get [id]() {
        return 0x8935FC73;
    }
    static get [name]() {
        return "reactionCustomEmoji";
    }
    static get [paramDesc]() {
        return [
            ["document_id", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.document_id, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** [Custom emoji document ID](https://core.telegram.org/api/custom-emoji) */
        Object.defineProperty(this, "document_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.document_id = params.document_id;
    }
}
/** No reactions are allowed */
export class ChatReactionsNone_ extends _ChatReactions_ {
    get [id]() {
        return 0xEAFC32BC;
    }
    static get [name]() {
        return "chatReactionsNone";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** All reactions or all non-custom reactions are allowed */
export class ChatReactionsAll_ extends _ChatReactions_ {
    get [id]() {
        return 0x52928BCA;
    }
    static get [name]() {
        return "chatReactionsAll";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["allow_custom", "true", "flags.0?true"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.allow_custom ?? null, "true", "flags.0?true"],
        ];
    }
    constructor(params) {
        super();
        /** Whether to allow custom reactions */
        Object.defineProperty(this, "allow_custom", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.allow_custom = params?.allow_custom;
    }
}
/** Some reactions are allowed */
export class ChatReactionsSome_ extends _ChatReactions_ {
    get [id]() {
        return 0x661D4037;
    }
    static get [name]() {
        return "chatReactionsSome";
    }
    static get [paramDesc]() {
        return [
            ["reactions", [_Reaction_], "Vector<Reaction>"],
        ];
    }
    get [params]() {
        return [
            [this.reactions, [_Reaction_], "Vector<Reaction>"],
        ];
    }
    constructor(params) {
        super();
        /** Allowed set of reactions: the [reactions\_in\_chat\_max](https://core.telegram.org/api/config#reactions-in-chat-max) configuration field indicates the maximum number of reactions that can be specified in this field. */
        Object.defineProperty(this, "reactions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.reactions = params.reactions;
    }
}
/** The server-side list of [message reactions](https://core.telegram.org/api/reactions) hasn't changed */
export class messages_ReactionsNotModified_ extends _messages_Reactions_ {
    get [id]() {
        return 0xB06FDBDF;
    }
    static get [name]() {
        return "messages.reactionsNotModified";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** List of [message reactions](https://core.telegram.org/api/reactions) */
export class messages_Reactions_ extends _messages_Reactions_ {
    get [id]() {
        return 0xEAFDF716;
    }
    static get [name]() {
        return "messages.reactions";
    }
    static get [paramDesc]() {
        return [
            ["hash", "bigint", "long"],
            ["reactions", [_Reaction_], "Vector<Reaction>"],
        ];
    }
    get [params]() {
        return [
            [this.hash, "bigint", "long"],
            [this.reactions, [_Reaction_], "Vector<Reaction>"],
        ];
    }
    constructor(params) {
        super();
        /** [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation) */
        Object.defineProperty(this, "hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Reactions */
        Object.defineProperty(this, "reactions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.hash = params.hash;
        this.reactions = params.reactions;
    }
}
/** Email verification purpose: setup login email */
export class EmailVerifyPurposeLoginSetup_ extends _EmailVerifyPurpose_ {
    get [id]() {
        return 0x4345BE73;
    }
    static get [name]() {
        return "emailVerifyPurposeLoginSetup";
    }
    static get [paramDesc]() {
        return [
            ["phone_number", "string", "string"],
            ["phone_code_hash", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.phone_number, "string", "string"],
            [this.phone_code_hash, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Phone number */
        Object.defineProperty(this, "phone_number", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Phone code hash as specified by the [documentation](https://core.telegram.org/api/auth#email-verification) */
        Object.defineProperty(this, "phone_code_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.phone_number = params.phone_number;
        this.phone_code_hash = params.phone_code_hash;
    }
}
/** Email verification purpose: change login email */
export class EmailVerifyPurposeLoginChange_ extends _EmailVerifyPurpose_ {
    get [id]() {
        return 0x527D22EB;
    }
    static get [name]() {
        return "emailVerifyPurposeLoginChange";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Verify an email for use in [telegram passport](https://core.telegram.org/api/passport) */
export class EmailVerifyPurposePassport_ extends _EmailVerifyPurpose_ {
    get [id]() {
        return 0xBBF51685;
    }
    static get [name]() {
        return "emailVerifyPurposePassport";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Email verification code */
export class EmailVerificationCode_ extends _EmailVerification_ {
    get [id]() {
        return 0x922E55A9;
    }
    static get [name]() {
        return "emailVerificationCode";
    }
    static get [paramDesc]() {
        return [
            ["code", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.code, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Received verification code */
        Object.defineProperty(this, "code", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.code = params.code;
    }
}
/** Google ID email verification token */
export class EmailVerificationGoogle_ extends _EmailVerification_ {
    get [id]() {
        return 0xDB909EC2;
    }
    static get [name]() {
        return "emailVerificationGoogle";
    }
    static get [paramDesc]() {
        return [
            ["token", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.token, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Token */
        Object.defineProperty(this, "token", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.token = params.token;
    }
}
/** Apple ID email verification token */
export class EmailVerificationApple_ extends _EmailVerification_ {
    get [id]() {
        return 0x96D074FD;
    }
    static get [name]() {
        return "emailVerificationApple";
    }
    static get [paramDesc]() {
        return [
            ["token", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.token, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Token */
        Object.defineProperty(this, "token", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.token = params.token;
    }
}
/** The email was verified correctly. */
export class account_EmailVerified_ extends _account_EmailVerified_ {
    get [id]() {
        return 0x2B96CD1B;
    }
    static get [name]() {
        return "account.emailVerified";
    }
    static get [paramDesc]() {
        return [
            ["email", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.email, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** The verified email address. */
        Object.defineProperty(this, "email", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.email = params.email;
    }
}
/** The email was verified correctly, and a login code was just sent to it. */
export class account_EmailVerifiedLogin_ extends _account_EmailVerified_ {
    get [id]() {
        return 0xE1BB0D61;
    }
    static get [name]() {
        return "account.emailVerifiedLogin";
    }
    static get [paramDesc]() {
        return [
            ["email", "string", "string"],
            ["sent_code", _auth_SentCode_, "auth.SentCode"],
        ];
    }
    get [params]() {
        return [
            [this.email, "string", "string"],
            [this.sent_code, _auth_SentCode_, "auth.SentCode"],
        ];
    }
    constructor(params) {
        super();
        /** The verified email address. */
        Object.defineProperty(this, "email", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Info about the sent [login code](https://core.telegram.org/api/auth) */
        Object.defineProperty(this, "sent_code", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.email = params.email;
        this.sent_code = params.sent_code;
    }
}
/** Describes a Telegram Premium subscription option */
export class PremiumSubscriptionOption_ extends _PremiumSubscriptionOption_ {
    get [id]() {
        return 0x5F2D1DF2;
    }
    static get [name]() {
        return "premiumSubscriptionOption";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["current", "true", "flags.1?true"],
            ["can_purchase_upgrade", "true", "flags.2?true"],
            ["transaction", "string", "flags.3?string"],
            ["months", "number", "int"],
            ["currency", "string", "string"],
            ["amount", "bigint", "long"],
            ["bot_url", "string", "string"],
            ["store_product", "string", "flags.0?string"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.current ?? null, "true", "flags.1?true"],
            [this.can_purchase_upgrade ?? null, "true", "flags.2?true"],
            [this.transaction ?? null, "string", "flags.3?string"],
            [this.months, "number", "int"],
            [this.currency, "string", "string"],
            [this.amount, "bigint", "long"],
            [this.bot_url, "string", "string"],
            [this.store_product ?? null, "string", "flags.0?string"],
        ];
    }
    constructor(params) {
        super();
        /** Whether this subscription option is currently in use. */
        Object.defineProperty(this, "current", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this subscription option can be used to upgrade the existing Telegram Premium subscription. When upgrading Telegram Premium subscriptions bought through stores, make sure that the store transaction ID is equal to `transaction`, to avoid upgrading someone else's account, if the client is currently logged into multiple accounts. */
        Object.defineProperty(this, "can_purchase_upgrade", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Identifier of the last in-store transaction for the currently used subscription on the current account. */
        Object.defineProperty(this, "transaction", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Duration of subscription in months */
        Object.defineProperty(this, "months", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code */
        Object.defineProperty(this, "currency", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Total price in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). */
        Object.defineProperty(this, "amount", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Deep link](https://core.telegram.org/api/links) used to initiate payment */
        Object.defineProperty(this, "bot_url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Store product ID, only for official apps */
        Object.defineProperty(this, "store_product", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.current = params.current;
        this.can_purchase_upgrade = params.can_purchase_upgrade;
        this.transaction = params.transaction;
        this.months = params.months;
        this.currency = params.currency;
        this.amount = params.amount;
        this.bot_url = params.bot_url;
        this.store_product = params.store_product;
    }
}
/** Indicates a peer that can be used to send messages */
export class SendAsPeer_ extends _SendAsPeer_ {
    get [id]() {
        return 0xB81C7034;
    }
    static get [name]() {
        return "sendAsPeer";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["premium_required", "true", "flags.0?true"],
            ["peer", _Peer_, "Peer"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.premium_required ?? null, "true", "flags.0?true"],
            [this.peer, _Peer_, "Peer"],
        ];
    }
    constructor(params) {
        super();
        /** Whether a Telegram Premium account is required to send messages as this peer */
        Object.defineProperty(this, "premium_required", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Peer */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.premium_required = params.premium_required;
        this.peer = params.peer;
    }
}
/** Extended media preview */
export class MessageExtendedMediaPreview_ extends _MessageExtendedMedia_ {
    get [id]() {
        return 0xAD628CC8;
    }
    static get [name]() {
        return "messageExtendedMediaPreview";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["w", "number", "flags.0?int"],
            ["h", "number", "flags.0?int"],
            ["thumb", _PhotoSize_, "flags.1?PhotoSize"],
            ["video_duration", "number", "flags.2?int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.w ?? null, "number", "flags.0?int"],
            [this.h ?? null, "number", "flags.0?int"],
            [this.thumb ?? null, _PhotoSize_, "flags.1?PhotoSize"],
            [this.video_duration ?? null, "number", "flags.2?int"],
        ];
    }
    constructor(params) {
        super();
        /** Width */
        Object.defineProperty(this, "w", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Height */
        Object.defineProperty(this, "h", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Thumbnail */
        Object.defineProperty(this, "thumb", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Video duration */
        Object.defineProperty(this, "video_duration", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.w = params?.w;
        this.h = params?.h;
        this.thumb = params?.thumb;
        this.video_duration = params?.video_duration;
    }
}
/** Extended media */
export class MessageExtendedMedia_ extends _MessageExtendedMedia_ {
    get [id]() {
        return 0xEE479C64;
    }
    static get [name]() {
        return "messageExtendedMedia";
    }
    static get [paramDesc]() {
        return [
            ["media", _MessageMedia_, "MessageMedia"],
        ];
    }
    get [params]() {
        return [
            [this.media, _MessageMedia_, "MessageMedia"],
        ];
    }
    constructor(params) {
        super();
        /** Media */
        Object.defineProperty(this, "media", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.media = params.media;
    }
}
/** Keywords for a certain sticker */
export class StickerKeyword_ extends _StickerKeyword_ {
    get [id]() {
        return 0xFCFEB29C;
    }
    static get [name]() {
        return "stickerKeyword";
    }
    static get [paramDesc]() {
        return [
            ["document_id", "bigint", "long"],
            ["keyword", ["string"], "Vector<string>"],
        ];
    }
    get [params]() {
        return [
            [this.document_id, "bigint", "long"],
            [this.keyword, ["string"], "Vector<string>"],
        ];
    }
    constructor(params) {
        super();
        /** Sticker ID */
        Object.defineProperty(this, "document_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Keywords */
        Object.defineProperty(this, "keyword", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.document_id = params.document_id;
        this.keyword = params.keyword;
    }
}
/** Contains information about a username. */
export class Username_ extends _Username_ {
    get [id]() {
        return 0xB4073647;
    }
    static get [name]() {
        return "username";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["editable", "true", "flags.0?true"],
            ["active", "true", "flags.1?true"],
            ["username", "string", "string"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.editable ?? null, "true", "flags.0?true"],
            [this.active ?? null, "true", "flags.1?true"],
            [this.username, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Whether the username is editable, meaning it wasn't bought on [fragment](https://fragment.com). */
        Object.defineProperty(this, "editable", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether the username is active. */
        Object.defineProperty(this, "active", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The username. */
        Object.defineProperty(this, "username", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.editable = params.editable;
        this.active = params.active;
        this.username = params.username;
    }
}
/** Represents a deleted forum topic. */
export class ForumTopicDeleted_ extends _ForumTopic_ {
    get [id]() {
        return 0x023F109B;
    }
    static get [name]() {
        return "forumTopicDeleted";
    }
    static get [paramDesc]() {
        return [
            ["id", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.id, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** The ID of the deleted forum topic. */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
    }
}
/** Represents a [forum topic](https://core.telegram.org/api/forum#forum-topics). */
export class ForumTopic_ extends _ForumTopic_ {
    get [id]() {
        return 0x71701DA9;
    }
    static get [name]() {
        return "forumTopic";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["my", "true", "flags.1?true"],
            ["closed", "true", "flags.2?true"],
            ["pinned", "true", "flags.3?true"],
            ["short", "true", "flags.5?true"],
            ["hidden", "true", "flags.6?true"],
            ["id", "number", "int"],
            ["date", "number", "int"],
            ["title", "string", "string"],
            ["icon_color", "number", "int"],
            ["icon_emoji_id", "bigint", "flags.0?long"],
            ["top_message", "number", "int"],
            ["read_inbox_max_id", "number", "int"],
            ["read_outbox_max_id", "number", "int"],
            ["unread_count", "number", "int"],
            ["unread_mentions_count", "number", "int"],
            ["unread_reactions_count", "number", "int"],
            ["from_id", _Peer_, "Peer"],
            ["notify_settings", _PeerNotifySettings_, "PeerNotifySettings"],
            ["draft", _DraftMessage_, "flags.4?DraftMessage"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.my ?? null, "true", "flags.1?true"],
            [this.closed ?? null, "true", "flags.2?true"],
            [this.pinned ?? null, "true", "flags.3?true"],
            [this.short ?? null, "true", "flags.5?true"],
            [this.hidden ?? null, "true", "flags.6?true"],
            [this.id, "number", "int"],
            [this.date, "number", "int"],
            [this.title, "string", "string"],
            [this.icon_color, "number", "int"],
            [this.icon_emoji_id ?? null, "bigint", "flags.0?long"],
            [this.top_message, "number", "int"],
            [this.read_inbox_max_id, "number", "int"],
            [this.read_outbox_max_id, "number", "int"],
            [this.unread_count, "number", "int"],
            [this.unread_mentions_count, "number", "int"],
            [this.unread_reactions_count, "number", "int"],
            [this.from_id, _Peer_, "Peer"],
            [this.notify_settings, _PeerNotifySettings_, "PeerNotifySettings"],
            [this.draft ?? null, _DraftMessage_, "flags.4?DraftMessage"],
        ];
    }
    constructor(params) {
        super();
        /** Whether the topic was created by the current user */
        Object.defineProperty(this, "my", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether the topic is closed (no messages can be sent to it) */
        Object.defineProperty(this, "closed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether the topic is pinned */
        Object.defineProperty(this, "pinned", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this constructor is a reduced version of the full topic information.
        If set, only the `my`, `closed`, `id`, `date`, `title`, `icon_color`, `icon_emoji_id` and `from_id` parameters will contain valid information.
        Reduced info is usually only returned in topic-related [admin log events »](https://core.telegram.org/api/recent-actions) and in the [messages.channelMessages](https://core.telegram.org/constructor/messages.channelMessages) constructor: if needed, full information can be fetched using [channels.getForumTopicsByID](https://core.telegram.org/method/channels.getForumTopicsByID). */
        Object.defineProperty(this, "short", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether the topic is hidden (only valid for the "General" topic, `id=1`) */
        Object.defineProperty(this, "hidden", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Topic ID](https://core.telegram.org/api/forum#forum-topics) */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Topic creation date */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Topic title */
        Object.defineProperty(this, "title", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If no custom emoji icon is specified, specifies the color of the fallback topic icon (RGB), one of `0x6FB9F0`, `0xFFD67E`, `0xCB86DB`, `0x8EEE98`, `0xFF93B2`, or `0xFB6F5F`. */
        Object.defineProperty(this, "icon_color", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the [custom emoji](https://core.telegram.org/api/custom-emoji) used as topic icon. */
        Object.defineProperty(this, "icon_emoji_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the last message that was sent to this topic */
        Object.defineProperty(this, "top_message", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Position up to which all incoming messages are read. */
        Object.defineProperty(this, "read_inbox_max_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Position up to which all outgoing messages are read. */
        Object.defineProperty(this, "read_outbox_max_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of unread messages */
        Object.defineProperty(this, "unread_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of [unread mentions](https://core.telegram.org/api/mentions) */
        Object.defineProperty(this, "unread_mentions_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of unread reactions to messages you sent */
        Object.defineProperty(this, "unread_reactions_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the peer that created the topic */
        Object.defineProperty(this, "from_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Notification settings */
        Object.defineProperty(this, "notify_settings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Message [draft](https://core.telegram.org/api/drafts) */
        Object.defineProperty(this, "draft", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.my = params.my;
        this.closed = params.closed;
        this.pinned = params.pinned;
        this.short = params.short;
        this.hidden = params.hidden;
        this.id = params.id;
        this.date = params.date;
        this.title = params.title;
        this.icon_color = params.icon_color;
        this.icon_emoji_id = params.icon_emoji_id;
        this.top_message = params.top_message;
        this.read_inbox_max_id = params.read_inbox_max_id;
        this.read_outbox_max_id = params.read_outbox_max_id;
        this.unread_count = params.unread_count;
        this.unread_mentions_count = params.unread_mentions_count;
        this.unread_reactions_count = params.unread_reactions_count;
        this.from_id = params.from_id;
        this.notify_settings = params.notify_settings;
        this.draft = params.draft;
    }
}
/** Contains information about multiple [forum topics](https://core.telegram.org/api/forum#forum-topics) */
export class messages_ForumTopics_ extends _messages_ForumTopics_ {
    get [id]() {
        return 0x367617D3;
    }
    static get [name]() {
        return "messages.forumTopics";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["order_by_create_date", "true", "flags.0?true"],
            ["count", "number", "int"],
            ["topics", [_ForumTopic_], "Vector<ForumTopic>"],
            ["messages", [_Message_], "Vector<Message>"],
            ["chats", [_Chat_], "Vector<Chat>"],
            ["users", [_User_], "Vector<User>"],
            ["pts", "number", "int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.order_by_create_date ?? null, "true", "flags.0?true"],
            [this.count, "number", "int"],
            [this.topics, [_ForumTopic_], "Vector<ForumTopic>"],
            [this.messages, [_Message_], "Vector<Message>"],
            [this.chats, [_Chat_], "Vector<Chat>"],
            [this.users, [_User_], "Vector<User>"],
            [this.pts, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Whether the returned topics are ordered by creation date; if set, pagination by `offset_date` should use [forumTopic](https://core.telegram.org/constructor/forumTopic).`date`; otherwise topics are ordered by the last message date, so paginate by the `date` of the [message](https://core.telegram.org/type/Message) referenced by [forumTopic](https://core.telegram.org/constructor/forumTopic).`top_message`. */
        Object.defineProperty(this, "order_by_create_date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Total number of topics matching query; may be more than the topics contained in `topics`, in which case [pagination](https://core.telegram.org/api/offsets) is required. */
        Object.defineProperty(this, "count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Forum topics */
        Object.defineProperty(this, "topics", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Related messages (contains the messages mentioned by [forumTopic](https://core.telegram.org/constructor/forumTopic).`top_message`). */
        Object.defineProperty(this, "messages", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Related chats */
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Related users */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Event count after generation](https://core.telegram.org/api/updates) */
        Object.defineProperty(this, "pts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.order_by_create_date = params.order_by_create_date;
        this.count = params.count;
        this.topics = params.topics;
        this.messages = params.messages;
        this.chats = params.chats;
        this.users = params.users;
        this.pts = params.pts;
    }
}
/** Contains info about the default value of the Time-To-Live setting, applied to all new chats. */
export class DefaultHistoryTTL_ extends _DefaultHistoryTTL_ {
    get [id]() {
        return 0x43B46B20;
    }
    static get [name]() {
        return "defaultHistoryTTL";
    }
    static get [paramDesc]() {
        return [
            ["period", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.period, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Time-To-Live setting applied to all new chats. */
        Object.defineProperty(this, "period", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.period = params.period;
    }
}
/** Describes a [temporary profile link](https://core.telegram.org/api/links#temporary-profile-links). */
export class ExportedContactToken_ extends _ExportedContactToken_ {
    get [id]() {
        return 0x41BF109B;
    }
    static get [name]() {
        return "exportedContactToken";
    }
    static get [paramDesc]() {
        return [
            ["url", "string", "string"],
            ["expires", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.url, "string", "string"],
            [this.expires, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** The [temporary profile link](https://core.telegram.org/api/links#temporary-profile-links). */
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Its expiration date */
        Object.defineProperty(this, "expires", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.url = params.url;
        this.expires = params.expires;
    }
}
/** Choose a user. */
export class RequestPeerTypeUser_ extends _RequestPeerType_ {
    get [id]() {
        return 0x5F3B8A00;
    }
    static get [name]() {
        return "requestPeerTypeUser";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["bot", "boolean", "flags.0?Bool"],
            ["premium", "boolean", "flags.1?Bool"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.bot ?? null, "boolean", "flags.0?Bool"],
            [this.premium ?? null, "boolean", "flags.1?Bool"],
        ];
    }
    constructor(params) {
        super();
        /** Whether to allow choosing only bots. */
        Object.defineProperty(this, "bot", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether to allow choosing only [Premium](https://core.telegram.org/api/premium) users. */
        Object.defineProperty(this, "premium", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.bot = params?.bot;
        this.premium = params?.premium;
    }
}
/** Choose a chat or supergroup */
export class RequestPeerTypeChat_ extends _RequestPeerType_ {
    get [id]() {
        return 0xC9F06E1B;
    }
    static get [name]() {
        return "requestPeerTypeChat";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["creator", "true", "flags.0?true"],
            ["bot_participant", "true", "flags.5?true"],
            ["has_username", "boolean", "flags.3?Bool"],
            ["forum", "boolean", "flags.4?Bool"],
            ["user_admin_rights", _ChatAdminRights_, "flags.1?ChatAdminRights"],
            ["bot_admin_rights", _ChatAdminRights_, "flags.2?ChatAdminRights"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.creator ?? null, "true", "flags.0?true"],
            [this.bot_participant ?? null, "true", "flags.5?true"],
            [this.has_username ?? null, "boolean", "flags.3?Bool"],
            [this.forum ?? null, "boolean", "flags.4?Bool"],
            [this.user_admin_rights ?? null, _ChatAdminRights_, "flags.1?ChatAdminRights"],
            [this.bot_admin_rights ?? null, _ChatAdminRights_, "flags.2?ChatAdminRights"],
        ];
    }
    constructor(params) {
        super();
        /** Whether to allow only choosing chats or supergroups that were created by the current user. */
        Object.defineProperty(this, "creator", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether to allow only choosing chats or supergroups where the bot is a participant. */
        Object.defineProperty(this, "bot_participant", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If specified, allows only choosing channels with or without a username, according to the value of [Bool](https://core.telegram.org/type/Bool). */
        Object.defineProperty(this, "has_username", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If specified, allows only choosing chats or supergroups that are or aren't [forums](https://core.telegram.org/api/forum), according to the value of [Bool](https://core.telegram.org/type/Bool). */
        Object.defineProperty(this, "forum", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If specified, allows only choosing chats or supergroups where the current user is an admin with at least the specified admin rights. */
        Object.defineProperty(this, "user_admin_rights", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If specified, allows only choosing chats or supergroups where the bot is an admin with at least the specified admin rights. */
        Object.defineProperty(this, "bot_admin_rights", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.creator = params?.creator;
        this.bot_participant = params?.bot_participant;
        this.has_username = params?.has_username;
        this.forum = params?.forum;
        this.user_admin_rights = params?.user_admin_rights;
        this.bot_admin_rights = params?.bot_admin_rights;
    }
}
/** Choose a channel */
export class RequestPeerTypeBroadcast_ extends _RequestPeerType_ {
    get [id]() {
        return 0x339BEF6C;
    }
    static get [name]() {
        return "requestPeerTypeBroadcast";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["creator", "true", "flags.0?true"],
            ["has_username", "boolean", "flags.3?Bool"],
            ["user_admin_rights", _ChatAdminRights_, "flags.1?ChatAdminRights"],
            ["bot_admin_rights", _ChatAdminRights_, "flags.2?ChatAdminRights"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.creator ?? null, "true", "flags.0?true"],
            [this.has_username ?? null, "boolean", "flags.3?Bool"],
            [this.user_admin_rights ?? null, _ChatAdminRights_, "flags.1?ChatAdminRights"],
            [this.bot_admin_rights ?? null, _ChatAdminRights_, "flags.2?ChatAdminRights"],
        ];
    }
    constructor(params) {
        super();
        /** Whether to allow only choosing channels that were created by the current user. */
        Object.defineProperty(this, "creator", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If specified, allows only choosing channels with or without a username, according to the value of [Bool](https://core.telegram.org/type/Bool). */
        Object.defineProperty(this, "has_username", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If specified, allows only choosing channels where the current user is an admin with at least the specified admin rights. */
        Object.defineProperty(this, "user_admin_rights", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If specified, allows only choosing channels where the bot is an admin with at least the specified admin rights. */
        Object.defineProperty(this, "bot_admin_rights", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.creator = params?.creator;
        this.has_username = params?.has_username;
        this.user_admin_rights = params?.user_admin_rights;
        this.bot_admin_rights = params?.bot_admin_rights;
    }
}
/** The list of [custom emojis](https://core.telegram.org/api/custom-emoji) hasn't changed. */
export class EmojiListNotModified_ extends _EmojiList_ {
    get [id]() {
        return 0x481EADFA;
    }
    static get [name]() {
        return "emojiListNotModified";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Represents a list of [custom emojis](https://core.telegram.org/api/custom-emoji). */
export class EmojiList_ extends _EmojiList_ {
    get [id]() {
        return 0x7A1E11D1;
    }
    static get [name]() {
        return "emojiList";
    }
    static get [paramDesc]() {
        return [
            ["hash", "bigint", "long"],
            ["document_id", ["bigint"], "Vector<long>"],
        ];
    }
    get [params]() {
        return [
            [this.hash, "bigint", "long"],
            [this.document_id, ["bigint"], "Vector<long>"],
        ];
    }
    constructor(params) {
        super();
        /** [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation) */
        Object.defineProperty(this, "hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Custom emoji IDs */
        Object.defineProperty(this, "document_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.hash = params.hash;
        this.document_id = params.document_id;
    }
}
/** Represents an [emoji category](https://core.telegram.org/api/custom-emoji#emoji-categories). */
export class EmojiGroup_ extends _EmojiGroup_ {
    get [id]() {
        return 0x7A9ABDA9;
    }
    static get [name]() {
        return "emojiGroup";
    }
    static get [paramDesc]() {
        return [
            ["title", "string", "string"],
            ["icon_emoji_id", "bigint", "long"],
            ["emoticons", ["string"], "Vector<string>"],
        ];
    }
    get [params]() {
        return [
            [this.title, "string", "string"],
            [this.icon_emoji_id, "bigint", "long"],
            [this.emoticons, ["string"], "Vector<string>"],
        ];
    }
    constructor(params) {
        super();
        /** Category name, i.e. "Animals", "Flags", "Faces" and so on... */
        Object.defineProperty(this, "title", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** A single custom emoji used as preview for the category. */
        Object.defineProperty(this, "icon_emoji_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** A list of UTF-8 emojis, matching the category. */
        Object.defineProperty(this, "emoticons", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.title = params.title;
        this.icon_emoji_id = params.icon_emoji_id;
        this.emoticons = params.emoticons;
    }
}
/** The list of [emoji categories](https://core.telegram.org/api/custom-emoji#emoji-categories) hasn't changed. */
export class messages_EmojiGroupsNotModified_ extends _messages_EmojiGroups_ {
    get [id]() {
        return 0x6FB4AD87;
    }
    static get [name]() {
        return "messages.emojiGroupsNotModified";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Represents a list of [emoji categories](https://core.telegram.org/api/custom-emoji#emoji-categories). */
export class messages_EmojiGroups_ extends _messages_EmojiGroups_ {
    get [id]() {
        return 0x881FB94B;
    }
    static get [name]() {
        return "messages.emojiGroups";
    }
    static get [paramDesc]() {
        return [
            ["hash", "number", "int"],
            ["groups", [_EmojiGroup_], "Vector<EmojiGroup>"],
        ];
    }
    get [params]() {
        return [
            [this.hash, "number", "int"],
            [this.groups, [_EmojiGroup_], "Vector<EmojiGroup>"],
        ];
    }
    constructor(params) {
        super();
        /** [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation) */
        Object.defineProperty(this, "hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** A list of [emoji categories](https://core.telegram.org/api/custom-emoji#emoji-categories). */
        Object.defineProperty(this, "groups", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.hash = params.hash;
        this.groups = params.groups;
    }
}
/** Styled text with [message entities](https://core.telegram.org/api/entities) */
export class TextWithEntities_ extends _TextWithEntities_ {
    get [id]() {
        return 0x751F3146;
    }
    static get [name]() {
        return "textWithEntities";
    }
    static get [paramDesc]() {
        return [
            ["text", "string", "string"],
            ["entities", [_MessageEntity_], "Vector<MessageEntity>"],
        ];
    }
    get [params]() {
        return [
            [this.text, "string", "string"],
            [this.entities, [_MessageEntity_], "Vector<MessageEntity>"],
        ];
    }
    constructor(params) {
        super();
        /** Text */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Message entities for styled text](https://core.telegram.org/api/entities) */
        Object.defineProperty(this, "entities", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.text = params.text;
        this.entities = params.entities;
    }
}
/** Translated text with [entities](https://core.telegram.org/api/entities) */
export class messages_TranslateResult_ extends _messages_TranslatedText_ {
    get [id]() {
        return 0x33DB32F8;
    }
    static get [name]() {
        return "messages.translateResult";
    }
    static get [paramDesc]() {
        return [
            ["result", [_TextWithEntities_], "Vector<TextWithEntities>"],
        ];
    }
    get [params]() {
        return [
            [this.result, [_TextWithEntities_], "Vector<TextWithEntities>"],
        ];
    }
    constructor(params) {
        super();
        /** Text+[entities](https://core.telegram.org/api/entities), for each input message. */
        Object.defineProperty(this, "result", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.result = params.result;
    }
}
/** Media autosave settings */
export class AutoSaveSettings_ extends _AutoSaveSettings_ {
    get [id]() {
        return 0xC84834CE;
    }
    static get [name]() {
        return "autoSaveSettings";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["photos", "true", "flags.0?true"],
            ["videos", "true", "flags.1?true"],
            ["video_max_size", "bigint", "flags.2?long"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.photos ?? null, "true", "flags.0?true"],
            [this.videos ?? null, "true", "flags.1?true"],
            [this.video_max_size ?? null, "bigint", "flags.2?long"],
        ];
    }
    constructor(params) {
        super();
        /** Whether photos should be autosaved to the gallery. */
        Object.defineProperty(this, "photos", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether videos should be autosaved to the gallery. */
        Object.defineProperty(this, "videos", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, specifies a size limit for autosavable videos */
        Object.defineProperty(this, "video_max_size", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.photos = params?.photos;
        this.videos = params?.videos;
        this.video_max_size = params?.video_max_size;
    }
}
/** Peer-specific media autosave settings */
export class AutoSaveException_ extends _AutoSaveException_ {
    get [id]() {
        return 0x81602D47;
    }
    static get [name]() {
        return "autoSaveException";
    }
    static get [paramDesc]() {
        return [
            ["peer", _Peer_, "Peer"],
            ["settings", _AutoSaveSettings_, "AutoSaveSettings"],
        ];
    }
    get [params]() {
        return [
            [this.peer, _Peer_, "Peer"],
            [this.settings, _AutoSaveSettings_, "AutoSaveSettings"],
        ];
    }
    constructor(params) {
        super();
        /** The peer */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Media autosave settings */
        Object.defineProperty(this, "settings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.peer = params.peer;
        this.settings = params.settings;
    }
}
/** Contains media autosave settings */
export class account_AutoSaveSettings_ extends _account_AutoSaveSettings_ {
    get [id]() {
        return 0x4C3E069D;
    }
    static get [name]() {
        return "account.autoSaveSettings";
    }
    static get [paramDesc]() {
        return [
            ["users_settings", _AutoSaveSettings_, "AutoSaveSettings"],
            ["chats_settings", _AutoSaveSettings_, "AutoSaveSettings"],
            ["broadcasts_settings", _AutoSaveSettings_, "AutoSaveSettings"],
            ["exceptions", [_AutoSaveException_], "Vector<AutoSaveException>"],
            ["chats", [_Chat_], "Vector<Chat>"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            [this.users_settings, _AutoSaveSettings_, "AutoSaveSettings"],
            [this.chats_settings, _AutoSaveSettings_, "AutoSaveSettings"],
            [this.broadcasts_settings, _AutoSaveSettings_, "AutoSaveSettings"],
            [this.exceptions, [_AutoSaveException_], "Vector<AutoSaveException>"],
            [this.chats, [_Chat_], "Vector<Chat>"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** Default media autosave settings for private chats */
        Object.defineProperty(this, "users_settings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Default media autosave settings for [groups and supergroups](https://core.telegram.org/api/channel) */
        Object.defineProperty(this, "chats_settings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Default media autosave settings for [channels](https://core.telegram.org/api/channel) */
        Object.defineProperty(this, "broadcasts_settings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Peer-specific granular autosave settings */
        Object.defineProperty(this, "exceptions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Chats mentioned in the peer-specific granular autosave settings */
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Users mentioned in the peer-specific granular autosave settings */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.users_settings = params.users_settings;
        this.chats_settings = params.chats_settings;
        this.broadcasts_settings = params.broadcasts_settings;
        this.exceptions = params.exceptions;
        this.chats = params.chats;
        this.users = params.users;
    }
}
/** The client configuration parameters haven't changed */
export class help_AppConfigNotModified_ extends _help_AppConfig_ {
    get [id]() {
        return 0x7CDE641D;
    }
    static get [name]() {
        return "help.appConfigNotModified";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Contains various [client configuration parameters](https://core.telegram.org/api/config#client-configuration) */
export class help_AppConfig_ extends _help_AppConfig_ {
    get [id]() {
        return 0xDD18782E;
    }
    static get [name]() {
        return "help.appConfig";
    }
    static get [paramDesc]() {
        return [
            ["hash", "number", "int"],
            ["config", _JSONValue_, "JSONValue"],
        ];
    }
    get [params]() {
        return [
            [this.hash, "number", "int"],
            [this.config, _JSONValue_, "JSONValue"],
        ];
    }
    constructor(params) {
        super();
        /** [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation) */
        Object.defineProperty(this, "hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Client configuration parameters](https://core.telegram.org/api/config#client-configuration) */
        Object.defineProperty(this, "config", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.hash = params.hash;
        this.config = params.config;
    }
}
/** Used to fetch information about a [direct link Mini App](https://core.telegram.org/api/bots/webapps#direct-link-mini-apps) by its ID */
export class InputBotAppID_ extends _InputBotApp_ {
    get [id]() {
        return 0xA920BD7A;
    }
    static get [name]() {
        return "inputBotAppID";
    }
    static get [paramDesc]() {
        return [
            ["id", "bigint", "long"],
            ["access_hash", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.id, "bigint", "long"],
            [this.access_hash, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** [direct link Mini App](https://core.telegram.org/api/bots/webapps#direct-link-mini-apps) ID. */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Access hash, obtained from the [botApp](https://core.telegram.org/constructor/botApp) constructor. */
        Object.defineProperty(this, "access_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
        this.access_hash = params.access_hash;
    }
}
/** Used to fetch information about a [direct link Mini App](https://core.telegram.org/api/bots/webapps#direct-link-mini-apps) by its short name */
export class InputBotAppShortName_ extends _InputBotApp_ {
    get [id]() {
        return 0x908C0407;
    }
    static get [name]() {
        return "inputBotAppShortName";
    }
    static get [paramDesc]() {
        return [
            ["bot_id", _InputUser_, "InputUser"],
            ["short_name", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.bot_id, _InputUser_, "InputUser"],
            [this.short_name, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** ID of the bot that owns the bot mini app */
        Object.defineProperty(this, "bot_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Short name, obtained from a [Direct Mini App deep link](https://core.telegram.org/api/links#direct-mini-app-links) */
        Object.defineProperty(this, "short_name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.bot_id = params.bot_id;
        this.short_name = params.short_name;
    }
}
/** Bot app info hasn't changed. */
export class BotAppNotModified_ extends _BotApp_ {
    get [id]() {
        return 0x5DA674B7;
    }
    static get [name]() {
        return "botAppNotModified";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Contains information about a [direct link Mini App](https://core.telegram.org/api/bots/webapps#direct-link-mini-apps). */
export class BotApp_ extends _BotApp_ {
    get [id]() {
        return 0x95FCD1D6;
    }
    static get [name]() {
        return "botApp";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["id", "bigint", "long"],
            ["access_hash", "bigint", "long"],
            ["short_name", "string", "string"],
            ["title", "string", "string"],
            ["description", "string", "string"],
            ["photo", _Photo_, "Photo"],
            ["document", _Document_, "flags.0?Document"],
            ["hash", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.id, "bigint", "long"],
            [this.access_hash, "bigint", "long"],
            [this.short_name, "string", "string"],
            [this.title, "string", "string"],
            [this.description, "string", "string"],
            [this.photo, _Photo_, "Photo"],
            [this.document ?? null, _Document_, "flags.0?Document"],
            [this.hash, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** bot mini app ID */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** bot mini app access hash */
        Object.defineProperty(this, "access_hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** bot mini app short name, used to generate [Direct Mini App deep links](https://core.telegram.org/api/links#direct-mini-app-links). */
        Object.defineProperty(this, "short_name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** bot mini app title. */
        Object.defineProperty(this, "title", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** bot mini app description. */
        Object.defineProperty(this, "description", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** bot mini app photo. */
        Object.defineProperty(this, "photo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** bot mini app animation. */
        Object.defineProperty(this, "document", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Hash to pass to [messages.getBotApp](https://core.telegram.org/method/messages.getBotApp), to avoid refetching bot app info if it hasn't changed. */
        Object.defineProperty(this, "hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
        this.access_hash = params.access_hash;
        this.short_name = params.short_name;
        this.title = params.title;
        this.description = params.description;
        this.photo = params.photo;
        this.document = params.document;
        this.hash = params.hash;
    }
}
/** Contains information about a [direct link Mini App](https://core.telegram.org/api/bots/webapps#direct-link-mini-apps) */
export class messages_BotApp_ extends _messages_BotApp_ {
    get [id]() {
        return 0xEB50ADF5;
    }
    static get [name]() {
        return "messages.botApp";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["inactive", "true", "flags.0?true"],
            ["request_write_access", "true", "flags.1?true"],
            ["has_settings", "true", "flags.2?true"],
            ["app", _BotApp_, "BotApp"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.inactive ?? null, "true", "flags.0?true"],
            [this.request_write_access ?? null, "true", "flags.1?true"],
            [this.has_settings ?? null, "true", "flags.2?true"],
            [this.app, _BotApp_, "BotApp"],
        ];
    }
    constructor(params) {
        super();
        /** Whether the web app was never used by the user, and confirmation must be asked from the user before opening it. */
        Object.defineProperty(this, "inactive", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The bot is asking permission to send messages to the user: if the user agrees, set the `write_allowed` flag when invoking [messages.requestAppWebView](https://core.telegram.org/method/messages.requestAppWebView). */
        Object.defineProperty(this, "request_write_access", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Deprecated flag, can be ignored. */
        Object.defineProperty(this, "has_settings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Bot app information */
        Object.defineProperty(this, "app", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.inactive = params.inactive;
        this.request_write_access = params.request_write_access;
        this.has_settings = params.has_settings;
        this.app = params.app;
    }
}
/** Contains the link that must be used to open a [direct link Mini App](https://core.telegram.org/api/bots/webapps#direct-link-mini-apps). */
export class AppWebViewResultUrl_ extends _AppWebViewResult_ {
    get [id]() {
        return 0x3C1B4F0D;
    }
    static get [name]() {
        return "appWebViewResultUrl";
    }
    static get [paramDesc]() {
        return [
            ["url", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.url, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** The URL to open */
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.url = params.url;
    }
}
/** Specifies an [inline mode mini app](https://core.telegram.org/api/bots/webapps#inline-mode-mini-apps) button, shown on top of the inline query results list. */
export class InlineBotWebView_ extends _InlineBotWebView_ {
    get [id]() {
        return 0xB57295D5;
    }
    static get [name]() {
        return "inlineBotWebView";
    }
    static get [paramDesc]() {
        return [
            ["text", "string", "string"],
            ["url", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.text, "string", "string"],
            [this.url, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Text of the button */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Webapp URL */
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.text = params.text;
        this.url = params.url;
    }
}
/** Contains info about when a certain participant has read a message */
export class ReadParticipantDate_ extends _ReadParticipantDate_ {
    get [id]() {
        return 0x4A4FF172;
    }
    static get [name]() {
        return "readParticipantDate";
    }
    static get [paramDesc]() {
        return [
            ["user_id", "bigint", "long"],
            ["date", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.user_id, "bigint", "long"],
            [this.date, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** User ID */
        Object.defineProperty(this, "user_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** When the user read the message */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.user_id = params.user_id;
        this.date = params.date;
    }
}
/** Folder ID */
export class InputChatlistDialogFilter_ extends _InputChatlist_ {
    get [id]() {
        return 0xF3E0DA33;
    }
    static get [name]() {
        return "inputChatlistDialogFilter";
    }
    static get [paramDesc]() {
        return [
            ["filter_id", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.filter_id, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** [Folder](https://core.telegram.org/api/folders) ID */
        Object.defineProperty(this, "filter_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.filter_id = params.filter_id;
    }
}
/** Exported [chat folder deep link »](https://core.telegram.org/api/links#chat-folder-links). */
export class ExportedChatlistInvite_ extends _ExportedChatlistInvite_ {
    get [id]() {
        return 0x0C5181AC;
    }
    static get [name]() {
        return "exportedChatlistInvite";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["title", "string", "string"],
            ["url", "string", "string"],
            ["peers", [_Peer_], "Vector<Peer>"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.title, "string", "string"],
            [this.url, "string", "string"],
            [this.peers, [_Peer_], "Vector<Peer>"],
        ];
    }
    constructor(params) {
        super();
        /** Name of the link */
        Object.defineProperty(this, "title", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The [chat folder deep link »](https://core.telegram.org/api/links#chat-folder-links). */
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Peers to import */
        Object.defineProperty(this, "peers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.title = params.title;
        this.url = params.url;
        this.peers = params.peers;
    }
}
/** Info about an exported [chat folder deep link »](https://core.telegram.org/api/links#chat-folder-links). */
export class chatlists_ExportedChatlistInvite_ extends _chatlists_ExportedChatlistInvite_ {
    get [id]() {
        return 0x10E6E3A6;
    }
    static get [name]() {
        return "chatlists.exportedChatlistInvite";
    }
    static get [paramDesc]() {
        return [
            ["filter", _DialogFilter_, "DialogFilter"],
            ["invite", _ExportedChatlistInvite_, "ExportedChatlistInvite"],
        ];
    }
    get [params]() {
        return [
            [this.filter, _DialogFilter_, "DialogFilter"],
            [this.invite, _ExportedChatlistInvite_, "ExportedChatlistInvite"],
        ];
    }
    constructor(params) {
        super();
        /** Folder ID */
        Object.defineProperty(this, "filter", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The exported [chat folder deep link »](https://core.telegram.org/api/links#chat-folder-links). */
        Object.defineProperty(this, "invite", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.filter = params.filter;
        this.invite = params.invite;
    }
}
/** Info about multiple [chat folder deep links »](https://core.telegram.org/api/links#chat-folder-links). */
export class chatlists_ExportedInvites_ extends _chatlists_ExportedInvites_ {
    get [id]() {
        return 0x10AB6DC7;
    }
    static get [name]() {
        return "chatlists.exportedInvites";
    }
    static get [paramDesc]() {
        return [
            ["invites", [_ExportedChatlistInvite_], "Vector<ExportedChatlistInvite>"],
            ["chats", [_Chat_], "Vector<Chat>"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            [this.invites, [_ExportedChatlistInvite_], "Vector<ExportedChatlistInvite>"],
            [this.chats, [_Chat_], "Vector<Chat>"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** The [chat folder deep links »](https://core.telegram.org/api/links#chat-folder-links). */
        Object.defineProperty(this, "invites", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Related chat information */
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Related user information */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.invites = params.invites;
        this.chats = params.chats;
        this.users = params.users;
    }
}
/** Updated info about a [chat folder deep link »](https://core.telegram.org/api/links#chat-folder-links) we already imported. */
export class chatlists_ChatlistInviteAlready_ extends _chatlists_ChatlistInvite_ {
    get [id]() {
        return 0xFA87F659;
    }
    static get [name]() {
        return "chatlists.chatlistInviteAlready";
    }
    static get [paramDesc]() {
        return [
            ["filter_id", "number", "int"],
            ["missing_peers", [_Peer_], "Vector<Peer>"],
            ["already_peers", [_Peer_], "Vector<Peer>"],
            ["chats", [_Chat_], "Vector<Chat>"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            [this.filter_id, "number", "int"],
            [this.missing_peers, [_Peer_], "Vector<Peer>"],
            [this.already_peers, [_Peer_], "Vector<Peer>"],
            [this.chats, [_Chat_], "Vector<Chat>"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** ID of the imported folder */
        Object.defineProperty(this, "filter_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** New peers to be imported */
        Object.defineProperty(this, "missing_peers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Peers that were already imported */
        Object.defineProperty(this, "already_peers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Related chat information */
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Related user information */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.filter_id = params.filter_id;
        this.missing_peers = params.missing_peers;
        this.already_peers = params.already_peers;
        this.chats = params.chats;
        this.users = params.users;
    }
}
/** Info about a [chat folder deep link »](https://core.telegram.org/api/links#chat-folder-links). */
export class chatlists_ChatlistInvite_ extends _chatlists_ChatlistInvite_ {
    get [id]() {
        return 0x1DCD839D;
    }
    static get [name]() {
        return "chatlists.chatlistInvite";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["title", "string", "string"],
            ["emoticon", "string", "flags.0?string"],
            ["peers", [_Peer_], "Vector<Peer>"],
            ["chats", [_Chat_], "Vector<Chat>"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.title, "string", "string"],
            [this.emoticon ?? null, "string", "flags.0?string"],
            [this.peers, [_Peer_], "Vector<Peer>"],
            [this.chats, [_Chat_], "Vector<Chat>"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** Name of the link */
        Object.defineProperty(this, "title", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Emoji to use as icon for the folder. */
        Object.defineProperty(this, "emoticon", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Supergroups and channels to join */
        Object.defineProperty(this, "peers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Related chat information */
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Related user information */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.title = params.title;
        this.emoticon = params.emoticon;
        this.peers = params.peers;
        this.chats = params.chats;
        this.users = params.users;
    }
}
/** Updated information about a [chat folder deep link »](https://core.telegram.org/api/links#chat-folder-links). */
export class chatlists_ChatlistUpdates_ extends _chatlists_ChatlistUpdates_ {
    get [id]() {
        return 0x93BD878D;
    }
    static get [name]() {
        return "chatlists.chatlistUpdates";
    }
    static get [paramDesc]() {
        return [
            ["missing_peers", [_Peer_], "Vector<Peer>"],
            ["chats", [_Chat_], "Vector<Chat>"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            [this.missing_peers, [_Peer_], "Vector<Peer>"],
            [this.chats, [_Chat_], "Vector<Chat>"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** New peers to join */
        Object.defineProperty(this, "missing_peers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Related chat information */
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Related user information */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.missing_peers = params.missing_peers;
        this.chats = params.chats;
        this.users = params.users;
    }
}
/** Localized information about a bot. */
export class bots_BotInfo_ extends _bots_BotInfo_ {
    get [id]() {
        return 0xE8A775B0;
    }
    static get [name]() {
        return "bots.botInfo";
    }
    static get [paramDesc]() {
        return [
            ["name", "string", "string"],
            ["about", "string", "string"],
            ["description", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.name, "string", "string"],
            [this.about, "string", "string"],
            [this.description, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** Bot name */
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Bot about text */
        Object.defineProperty(this, "about", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Bot description */
        Object.defineProperty(this, "description", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.name = params.name;
        this.about = params.about;
        this.description = params.description;
    }
}
/** How a peer voted in a poll */
export class MessagePeerVote_ extends _MessagePeerVote_ {
    get [id]() {
        return 0xB6CC2D5C;
    }
    static get [name]() {
        return "messagePeerVote";
    }
    static get [paramDesc]() {
        return [
            ["peer", _Peer_, "Peer"],
            ["option", Uint8Array, "bytes"],
            ["date", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.peer, _Peer_, "Peer"],
            [this.option, Uint8Array, "bytes"],
            [this.date, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Peer ID */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The option chosen by the peer */
        Object.defineProperty(this, "option", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** When did the peer cast the vote */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.peer = params.peer;
        this.option = params.option;
        this.date = params.date;
    }
}
/** How a peer voted in a poll (reduced constructor, returned if an `option` was provided to [messages.getPollVotes](https://core.telegram.org/method/messages.getPollVotes)) */
export class MessagePeerVoteInputOption_ extends _MessagePeerVote_ {
    get [id]() {
        return 0x74CDA504;
    }
    static get [name]() {
        return "messagePeerVoteInputOption";
    }
    static get [paramDesc]() {
        return [
            ["peer", _Peer_, "Peer"],
            ["date", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.peer, _Peer_, "Peer"],
            [this.date, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** The peer that voted for the queried `option` */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** When did the peer cast the vote */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.peer = params.peer;
        this.date = params.date;
    }
}
/** How a peer voted in a multiple-choice poll */
export class MessagePeerVoteMultiple_ extends _MessagePeerVote_ {
    get [id]() {
        return 0x4628F6E6;
    }
    static get [name]() {
        return "messagePeerVoteMultiple";
    }
    static get [paramDesc]() {
        return [
            ["peer", _Peer_, "Peer"],
            ["options", [Uint8Array], "Vector<bytes>"],
            ["date", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.peer, _Peer_, "Peer"],
            [this.options, [Uint8Array], "Vector<bytes>"],
            [this.date, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Peer ID */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Options chosen by the peer */
        Object.defineProperty(this, "options", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** When did the peer cast their votes */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.peer = params.peer;
        this.options = params.options;
        this.date = params.date;
    }
}
/** Represents a sponsored website. */
export class SponsoredWebPage_ extends _SponsoredWebPage_ {
    get [id]() {
        return 0x3DB8EC63;
    }
    static get [name]() {
        return "sponsoredWebPage";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["url", "string", "string"],
            ["site_name", "string", "string"],
            ["photo", _Photo_, "flags.0?Photo"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.url, "string", "string"],
            [this.site_name, "string", "string"],
            [this.photo ?? null, _Photo_, "flags.0?Photo"],
        ];
    }
    constructor(params) {
        super();
        /** Web page URL. */
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Website name. */
        Object.defineProperty(this, "site_name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Optional image preview. */
        Object.defineProperty(this, "photo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.url = params.url;
        this.site_name = params.site_name;
        this.photo = params.photo;
    }
}
/** Aggregated view and reaction information of a [story](https://core.telegram.org/api/stories). */
export class StoryViews_ extends _StoryViews_ {
    get [id]() {
        return 0x8D595CD6;
    }
    static get [name]() {
        return "storyViews";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["has_viewers", "true", "flags.1?true"],
            ["views_count", "number", "int"],
            ["forwards_count", "number", "flags.2?int"],
            ["reactions", [_ReactionCount_], "flags.3?Vector<ReactionCount>"],
            ["reactions_count", "number", "flags.4?int"],
            ["recent_viewers", ["bigint"], "flags.0?Vector<long>"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.has_viewers ?? null, "true", "flags.1?true"],
            [this.views_count, "number", "int"],
            [this.forwards_count ?? null, "number", "flags.2?int"],
            [this.reactions ?? null, [_ReactionCount_], "flags.3?Vector<ReactionCount>"],
            [this.reactions_count ?? null, "number", "flags.4?int"],
            [this.recent_viewers ?? null, ["bigint"], "flags.0?Vector<long>"],
        ];
    }
    constructor(params) {
        super();
        /** If set, indicates that the viewers list is currently viewable, and was not yet deleted because the story has expired while the user didn't have a [Premium](https://core.telegram.org/api/premium) account. */
        Object.defineProperty(this, "has_viewers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** View counter of the story */
        Object.defineProperty(this, "views_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Forward counter of the story */
        Object.defineProperty(this, "forwards_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** All reactions sent to this story */
        Object.defineProperty(this, "reactions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of reactions added to the story */
        Object.defineProperty(this, "reactions_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** User IDs of some recent viewers of the story */
        Object.defineProperty(this, "recent_viewers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.has_viewers = params.has_viewers;
        this.views_count = params.views_count;
        this.forwards_count = params.forwards_count;
        this.reactions = params.reactions;
        this.reactions_count = params.reactions_count;
        this.recent_viewers = params.recent_viewers;
    }
}
/** Represents a previously active story, that was deleted */
export class StoryItemDeleted_ extends _StoryItem_ {
    get [id]() {
        return 0x51E6EE4F;
    }
    static get [name]() {
        return "storyItemDeleted";
    }
    static get [paramDesc]() {
        return [
            ["id", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.id, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Story ID */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
    }
}
/** Represents an active story, whose full information was omitted for space and performance reasons; use [stories.getStoriesByID](https://core.telegram.org/method/stories.getStoriesByID) to fetch full info about the skipped story when and if needed. */
export class StoryItemSkipped_ extends _StoryItem_ {
    get [id]() {
        return 0xFFADC913;
    }
    static get [name]() {
        return "storyItemSkipped";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["close_friends", "true", "flags.8?true"],
            ["id", "number", "int"],
            ["date", "number", "int"],
            ["expire_date", "number", "int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.close_friends ?? null, "true", "flags.8?true"],
            [this.id, "number", "int"],
            [this.date, "number", "int"],
            [this.expire_date, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Whether this story can only be viewed by [our close friends, see here »](https://core.telegram.org/api/privacy) for more info */
        Object.defineProperty(this, "close_friends", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Story ID */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** When was the story posted. */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** When does the story expire. */
        Object.defineProperty(this, "expire_date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.close_friends = params.close_friends;
        this.id = params.id;
        this.date = params.date;
        this.expire_date = params.expire_date;
    }
}
/** Represents a [story](https://core.telegram.org/api/stories). */
export class StoryItem_ extends _StoryItem_ {
    get [id]() {
        return 0x79B26A24;
    }
    static get [name]() {
        return "storyItem";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["pinned", "true", "flags.5?true"],
            ["public", "true", "flags.7?true"],
            ["close_friends", "true", "flags.8?true"],
            ["min", "true", "flags.9?true"],
            ["noforwards", "true", "flags.10?true"],
            ["edited", "true", "flags.11?true"],
            ["contacts", "true", "flags.12?true"],
            ["selected_contacts", "true", "flags.13?true"],
            ["out", "true", "flags.16?true"],
            ["id", "number", "int"],
            ["date", "number", "int"],
            ["from_id", _Peer_, "flags.18?Peer"],
            ["fwd_from", _StoryFwdHeader_, "flags.17?StoryFwdHeader"],
            ["expire_date", "number", "int"],
            ["caption", "string", "flags.0?string"],
            ["entities", [_MessageEntity_], "flags.1?Vector<MessageEntity>"],
            ["media", _MessageMedia_, "MessageMedia"],
            ["media_areas", [_MediaArea_], "flags.14?Vector<MediaArea>"],
            ["privacy", [_PrivacyRule_], "flags.2?Vector<PrivacyRule>"],
            ["views", _StoryViews_, "flags.3?StoryViews"],
            ["sent_reaction", _Reaction_, "flags.15?Reaction"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.pinned ?? null, "true", "flags.5?true"],
            [this.public ?? null, "true", "flags.7?true"],
            [this.close_friends ?? null, "true", "flags.8?true"],
            [this.min ?? null, "true", "flags.9?true"],
            [this.noforwards ?? null, "true", "flags.10?true"],
            [this.edited ?? null, "true", "flags.11?true"],
            [this.contacts ?? null, "true", "flags.12?true"],
            [this.selected_contacts ?? null, "true", "flags.13?true"],
            [this.out ?? null, "true", "flags.16?true"],
            [this.id, "number", "int"],
            [this.date, "number", "int"],
            [this.from_id ?? null, _Peer_, "flags.18?Peer"],
            [this.fwd_from ?? null, _StoryFwdHeader_, "flags.17?StoryFwdHeader"],
            [this.expire_date, "number", "int"],
            [this.caption ?? null, "string", "flags.0?string"],
            [this.entities ?? null, [_MessageEntity_], "flags.1?Vector<MessageEntity>"],
            [this.media, _MessageMedia_, "MessageMedia"],
            [this.media_areas ?? null, [_MediaArea_], "flags.14?Vector<MediaArea>"],
            [this.privacy ?? null, [_PrivacyRule_], "flags.2?Vector<PrivacyRule>"],
            [this.views ?? null, _StoryViews_, "flags.3?StoryViews"],
            [this.sent_reaction ?? null, _Reaction_, "flags.15?Reaction"],
        ];
    }
    constructor(params) {
        super();
        /** Whether this story is pinned on the user's profile */
        Object.defineProperty(this, "pinned", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this story is public and can be viewed by everyone */
        Object.defineProperty(this, "public", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this story can only be viewed by [our close friends, see here »](https://core.telegram.org/api/privacy) for more info */
        Object.defineProperty(this, "close_friends", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Full information about this story was omitted for space and performance reasons; use [stories.getStoriesByID](https://core.telegram.org/method/stories.getStoriesByID) to fetch full info about this story when and if needed. */
        Object.defineProperty(this, "min", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this story is [protected](https://telegram.org/blog/protected-content-delete-by-date-and-more) and thus cannot be forwarded; clients should also prevent users from saving attached media (i.e. videos should only be streamed, photos should be kept in RAM, et cetera). */
        Object.defineProperty(this, "noforwards", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Indicates whether the story was edited. */
        Object.defineProperty(this, "edited", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this story can only be viewed by our contacts */
        Object.defineProperty(this, "contacts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this story can only be viewed by a select list of our contacts */
        Object.defineProperty(this, "selected_contacts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** indicates whether we sent this story. */
        Object.defineProperty(this, "out", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the story. */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** When was the story posted. */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "from_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** For [reposted stories »](https://core.telegram.org/api/stories#reposting-stories), contains info about the original story. */
        Object.defineProperty(this, "fwd_from", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** When does the story expire. */
        Object.defineProperty(this, "expire_date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Story caption. */
        Object.defineProperty(this, "caption", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Message entities for styled text](https://core.telegram.org/api/entities) */
        Object.defineProperty(this, "entities", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Story media. */
        Object.defineProperty(this, "media", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** List of media areas, see [here »](https://core.telegram.org/api/stories#media-areas) for more info on media areas. */
        Object.defineProperty(this, "media_areas", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Privacy rules](https://core.telegram.org/api/privacy) indicating who can and can't view this story */
        Object.defineProperty(this, "privacy", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** View date and reaction information */
        Object.defineProperty(this, "views", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The reaction we sent. */
        Object.defineProperty(this, "sent_reaction", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.pinned = params.pinned;
        this.public = params.public;
        this.close_friends = params.close_friends;
        this.min = params.min;
        this.noforwards = params.noforwards;
        this.edited = params.edited;
        this.contacts = params.contacts;
        this.selected_contacts = params.selected_contacts;
        this.out = params.out;
        this.id = params.id;
        this.date = params.date;
        this.from_id = params.from_id;
        this.fwd_from = params.fwd_from;
        this.expire_date = params.expire_date;
        this.caption = params.caption;
        this.entities = params.entities;
        this.media = params.media;
        this.media_areas = params.media_areas;
        this.privacy = params.privacy;
        this.views = params.views;
        this.sent_reaction = params.sent_reaction;
    }
}
/** The list of active (or active and hidden) [stories](https://core.telegram.org/api/stories#watching-stories) has not changed. */
export class stories_AllStoriesNotModified_ extends _stories_AllStories_ {
    get [id]() {
        return 0x1158FE3E;
    }
    static get [name]() {
        return "stories.allStoriesNotModified";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["state", "string", "string"],
            ["stealth_mode", _StoriesStealthMode_, "StoriesStealthMode"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.state, "string", "string"],
            [this.stealth_mode, _StoriesStealthMode_, "StoriesStealthMode"],
        ];
    }
    constructor(params) {
        super();
        /** State to use to ask for updates */
        Object.defineProperty(this, "state", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Current [stealth mode](https://core.telegram.org/api/stories#stealth-mode) information */
        Object.defineProperty(this, "stealth_mode", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.state = params.state;
        this.stealth_mode = params.stealth_mode;
    }
}
/** Full list of active (or active and hidden) [stories](https://core.telegram.org/api/stories#watching-stories). */
export class stories_AllStories_ extends _stories_AllStories_ {
    get [id]() {
        return 0x6EFC5E81;
    }
    static get [name]() {
        return "stories.allStories";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["has_more", "true", "flags.0?true"],
            ["count", "number", "int"],
            ["state", "string", "string"],
            ["peer_stories", [_PeerStories_], "Vector<PeerStories>"],
            ["chats", [_Chat_], "Vector<Chat>"],
            ["users", [_User_], "Vector<User>"],
            ["stealth_mode", _StoriesStealthMode_, "StoriesStealthMode"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.has_more ?? null, "true", "flags.0?true"],
            [this.count, "number", "int"],
            [this.state, "string", "string"],
            [this.peer_stories, [_PeerStories_], "Vector<PeerStories>"],
            [this.chats, [_Chat_], "Vector<Chat>"],
            [this.users, [_User_], "Vector<User>"],
            [this.stealth_mode, _StoriesStealthMode_, "StoriesStealthMode"],
        ];
    }
    constructor(params) {
        super();
        /** Whether more results can be fetched as [described here »](https://core.telegram.org/api/stories#watching-stories). */
        Object.defineProperty(this, "has_more", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Total number of active (or active and hidden) stories */
        Object.defineProperty(this, "count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** State to use for pagination */
        Object.defineProperty(this, "state", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Stories */
        Object.defineProperty(this, "peer_stories", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Mentioned chats */
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Mentioned users */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Current [stealth mode](https://core.telegram.org/api/stories#stealth-mode) information */
        Object.defineProperty(this, "stealth_mode", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.has_more = params.has_more;
        this.count = params.count;
        this.state = params.state;
        this.peer_stories = params.peer_stories;
        this.chats = params.chats;
        this.users = params.users;
        this.stealth_mode = params.stealth_mode;
    }
}
/** List of [stories](https://core.telegram.org/api/stories#pinned-or-archived-stories) */
export class stories_Stories_ extends _stories_Stories_ {
    get [id]() {
        return 0x5DD8C3C8;
    }
    static get [name]() {
        return "stories.stories";
    }
    static get [paramDesc]() {
        return [
            ["count", "number", "int"],
            ["stories", [_StoryItem_], "Vector<StoryItem>"],
            ["chats", [_Chat_], "Vector<Chat>"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            [this.count, "number", "int"],
            [this.stories, [_StoryItem_], "Vector<StoryItem>"],
            [this.chats, [_Chat_], "Vector<Chat>"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** Total number of stories that can be fetched */
        Object.defineProperty(this, "count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Stories */
        Object.defineProperty(this, "stories", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Mentioned chats */
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Mentioned users */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.count = params.count;
        this.stories = params.stories;
        this.chats = params.chats;
        this.users = params.users;
    }
}
/** [Story](https://core.telegram.org/api/stories) view date and reaction information */
export class StoryView_ extends _StoryView_ {
    get [id]() {
        return 0xB0BDEAC5;
    }
    static get [name]() {
        return "storyView";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["blocked", "true", "flags.0?true"],
            ["blocked_my_stories_from", "true", "flags.1?true"],
            ["user_id", "bigint", "long"],
            ["date", "number", "int"],
            ["reaction", _Reaction_, "flags.2?Reaction"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.blocked ?? null, "true", "flags.0?true"],
            [this.blocked_my_stories_from ?? null, "true", "flags.1?true"],
            [this.user_id, "bigint", "long"],
            [this.date, "number", "int"],
            [this.reaction ?? null, _Reaction_, "flags.2?Reaction"],
        ];
    }
    constructor(params) {
        super();
        /** Whether we have [completely blocked](https://core.telegram.org/api/block) this user, including from viewing more of our stories. */
        Object.defineProperty(this, "blocked", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether we have [blocked](https://core.telegram.org/api/block) this user from viewing more of our stories. */
        Object.defineProperty(this, "blocked_my_stories_from", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The user that viewed the story */
        Object.defineProperty(this, "user_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** When did the user view the story */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If present, contains the reaction that the user left on the story */
        Object.defineProperty(this, "reaction", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.blocked = params.blocked;
        this.blocked_my_stories_from = params.blocked_my_stories_from;
        this.user_id = params.user_id;
        this.date = params.date;
        this.reaction = params.reaction;
    }
}
/** A certain peer has forwarded the story as a message to a public chat or channel. */
export class StoryViewPublicForward_ extends _StoryView_ {
    get [id]() {
        return 0x9083670B;
    }
    static get [name]() {
        return "storyViewPublicForward";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["blocked", "true", "flags.0?true"],
            ["blocked_my_stories_from", "true", "flags.1?true"],
            ["message", _Message_, "Message"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.blocked ?? null, "true", "flags.0?true"],
            [this.blocked_my_stories_from ?? null, "true", "flags.1?true"],
            [this.message, _Message_, "Message"],
        ];
    }
    constructor(params) {
        super();
        /** Whether we have [completely blocked](https://core.telegram.org/api/block) this user, including from viewing more of our stories. */
        Object.defineProperty(this, "blocked", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether we have [blocked](https://core.telegram.org/api/block) this user from viewing more of our stories. */
        Object.defineProperty(this, "blocked_my_stories_from", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The message with the forwarded story. */
        Object.defineProperty(this, "message", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.blocked = params.blocked;
        this.blocked_my_stories_from = params.blocked_my_stories_from;
        this.message = params.message;
    }
}
/** A certain peer has reposted the story. */
export class StoryViewPublicRepost_ extends _StoryView_ {
    get [id]() {
        return 0xBD74CF49;
    }
    static get [name]() {
        return "storyViewPublicRepost";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["blocked", "true", "flags.0?true"],
            ["blocked_my_stories_from", "true", "flags.1?true"],
            ["peer_id", _Peer_, "Peer"],
            ["story", _StoryItem_, "StoryItem"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.blocked ?? null, "true", "flags.0?true"],
            [this.blocked_my_stories_from ?? null, "true", "flags.1?true"],
            [this.peer_id, _Peer_, "Peer"],
            [this.story, _StoryItem_, "StoryItem"],
        ];
    }
    constructor(params) {
        super();
        /** Whether we have [completely blocked](https://core.telegram.org/api/block) this user, including from viewing more of our stories. */
        Object.defineProperty(this, "blocked", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether we have [blocked](https://core.telegram.org/api/block) this user from viewing more of our stories. */
        Object.defineProperty(this, "blocked_my_stories_from", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The peer that reposted the story. */
        Object.defineProperty(this, "peer_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The reposted story. */
        Object.defineProperty(this, "story", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.blocked = params.blocked;
        this.blocked_my_stories_from = params.blocked_my_stories_from;
        this.peer_id = params.peer_id;
        this.story = params.story;
    }
}
/** Reaction and view counters for a [story](https://core.telegram.org/api/stories) */
export class stories_StoryViewsList_ extends _stories_StoryViewsList_ {
    get [id]() {
        return 0x59D78FC5;
    }
    static get [name]() {
        return "stories.storyViewsList";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["count", "number", "int"],
            ["views_count", "number", "int"],
            ["forwards_count", "number", "int"],
            ["reactions_count", "number", "int"],
            ["views", [_StoryView_], "Vector<StoryView>"],
            ["chats", [_Chat_], "Vector<Chat>"],
            ["users", [_User_], "Vector<User>"],
            ["next_offset", "string", "flags.0?string"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.count, "number", "int"],
            [this.views_count, "number", "int"],
            [this.forwards_count, "number", "int"],
            [this.reactions_count, "number", "int"],
            [this.views, [_StoryView_], "Vector<StoryView>"],
            [this.chats, [_Chat_], "Vector<Chat>"],
            [this.users, [_User_], "Vector<User>"],
            [this.next_offset ?? null, "string", "flags.0?string"],
        ];
    }
    constructor(params) {
        super();
        /** Total number of results that can be fetched */
        Object.defineProperty(this, "count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Total number of story views */
        Object.defineProperty(this, "views_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Total number of story forwards/reposts */
        Object.defineProperty(this, "forwards_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of reactions that were added to the story */
        Object.defineProperty(this, "reactions_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Story view date and reaction information */
        Object.defineProperty(this, "views", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Mentioned chats */
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Mentioned users */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Offset for pagination */
        Object.defineProperty(this, "next_offset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.count = params.count;
        this.views_count = params.views_count;
        this.forwards_count = params.forwards_count;
        this.reactions_count = params.reactions_count;
        this.views = params.views;
        this.chats = params.chats;
        this.users = params.users;
        this.next_offset = params.next_offset;
    }
}
/** Reaction and view counters for a list of [stories](https://core.telegram.org/api/stories) */
export class stories_StoryViews_ extends _stories_StoryViews_ {
    get [id]() {
        return 0xDE9EED1D;
    }
    static get [name]() {
        return "stories.storyViews";
    }
    static get [paramDesc]() {
        return [
            ["views", [_StoryViews_], "Vector<StoryViews>"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            [this.views, [_StoryViews_], "Vector<StoryViews>"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** View date and reaction information of multiple stories */
        Object.defineProperty(this, "views", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Mentioned users */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.views = params.views;
        this.users = params.users;
    }
}
/** Reply to a message. */
export class InputReplyToMessage_ extends _InputReplyTo_ {
    get [id]() {
        return 0x22C0F6D5;
    }
    static get [name]() {
        return "inputReplyToMessage";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["reply_to_msg_id", "number", "int"],
            ["top_msg_id", "number", "flags.0?int"],
            ["reply_to_peer_id", _InputPeer_, "flags.1?InputPeer"],
            ["quote_text", "string", "flags.2?string"],
            ["quote_entities", [_MessageEntity_], "flags.3?Vector<MessageEntity>"],
            ["quote_offset", "number", "flags.4?int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.reply_to_msg_id, "number", "int"],
            [this.top_msg_id ?? null, "number", "flags.0?int"],
            [this.reply_to_peer_id ?? null, _InputPeer_, "flags.1?InputPeer"],
            [this.quote_text ?? null, "string", "flags.2?string"],
            [this.quote_entities ?? null, [_MessageEntity_], "flags.3?Vector<MessageEntity>"],
            [this.quote_offset ?? null, "number", "flags.4?int"],
        ];
    }
    constructor(params) {
        super();
        /** The message ID to reply to. */
        Object.defineProperty(this, "reply_to_msg_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** This field must contain the topic ID **only** when replying to messages in forum topics different from the "General" topic (i.e. `reply_to_msg_id` is set and `reply_to_msg_id != topicID` and `topicID != 1`).
        If the replied-to message is deleted before the method finishes execution, the value in this field will be used to send the message to the correct topic, instead of the "General" topic. */
        Object.defineProperty(this, "top_msg_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Used to reply to messages sent to another chat (specified here), can only be used for non-`protected` chats and messages. */
        Object.defineProperty(this, "reply_to_peer_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Used to quote-reply to only a certain section (specified here) of the original message. The maximum UTF-8 length for quotes is specified in the [quote\_length\_max](https://core.telegram.org/api/config#quote-length-max) config key. */
        Object.defineProperty(this, "quote_text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Message entities for styled text](https://core.telegram.org/api/entities) from the `quote_text` field. */
        Object.defineProperty(this, "quote_entities", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Offset of the message `quote_text` within the original message (in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length)). */
        Object.defineProperty(this, "quote_offset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.reply_to_msg_id = params.reply_to_msg_id;
        this.top_msg_id = params.top_msg_id;
        this.reply_to_peer_id = params.reply_to_peer_id;
        this.quote_text = params.quote_text;
        this.quote_entities = params.quote_entities;
        this.quote_offset = params.quote_offset;
    }
}
/** Reply to a story. */
export class InputReplyToStory_ extends _InputReplyTo_ {
    get [id]() {
        return 0x5881323A;
    }
    static get [name]() {
        return "inputReplyToStory";
    }
    static get [paramDesc]() {
        return [
            ["peer", _InputPeer_, "InputPeer"],
            ["story_id", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.peer, _InputPeer_, "InputPeer"],
            [this.story_id, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the story to reply to. */
        Object.defineProperty(this, "story_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.peer = params.peer;
        this.story_id = params.story_id;
    }
}
/** Represents a [story deep link](https://core.telegram.org/api/stories#story-links). */
export class ExportedStoryLink_ extends _ExportedStoryLink_ {
    get [id]() {
        return 0x3FC9053B;
    }
    static get [name]() {
        return "exportedStoryLink";
    }
    static get [paramDesc]() {
        return [
            ["link", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.link, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** The [story deep link](https://core.telegram.org/api/stories#story-links). */
        Object.defineProperty(this, "link", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.link = params.link;
    }
}
/** Information about the current [stealth mode](https://core.telegram.org/api/stories#stealth-mode) session. */
export class StoriesStealthMode_ extends _StoriesStealthMode_ {
    get [id]() {
        return 0x712E27FD;
    }
    static get [name]() {
        return "storiesStealthMode";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["active_until_date", "number", "flags.0?int"],
            ["cooldown_until_date", "number", "flags.1?int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.active_until_date ?? null, "number", "flags.0?int"],
            [this.cooldown_until_date ?? null, "number", "flags.1?int"],
        ];
    }
    constructor(params) {
        super();
        /** The date up to which stealth mode will be active. */
        Object.defineProperty(this, "active_until_date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The date starting from which the user will be allowed to re-enable stealth mode again. */
        Object.defineProperty(this, "cooldown_until_date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.active_until_date = params?.active_until_date;
        this.cooldown_until_date = params?.cooldown_until_date;
    }
}
/** Coordinates and size of a clicable rectangular area on top of a story. */
export class MediaAreaCoordinates_ extends _MediaAreaCoordinates_ {
    get [id]() {
        return 0x03D1EA4E;
    }
    static get [name]() {
        return "mediaAreaCoordinates";
    }
    static get [paramDesc]() {
        return [
            ["x", "number", "double"],
            ["y", "number", "double"],
            ["w", "number", "double"],
            ["h", "number", "double"],
            ["rotation", "number", "double"],
        ];
    }
    get [params]() {
        return [
            [this.x, "number", "double"],
            [this.y, "number", "double"],
            [this.w, "number", "double"],
            [this.h, "number", "double"],
            [this.rotation, "number", "double"],
        ];
    }
    constructor(params) {
        super();
        /** The abscissa of the rectangle's center, as a percentage of the media width (0-100). */
        Object.defineProperty(this, "x", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The ordinate of the rectangle's center, as a percentage of the media height (0-100). */
        Object.defineProperty(this, "y", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The width of the rectangle, as a percentage of the media width (0-100). */
        Object.defineProperty(this, "w", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The height of the rectangle, as a percentage of the media height (0-100). */
        Object.defineProperty(this, "h", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Clockwise rotation angle of the rectangle, in degrees (0-360). */
        Object.defineProperty(this, "rotation", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.x = params.x;
        this.y = params.y;
        this.w = params.w;
        this.h = params.h;
        this.rotation = params.rotation;
    }
}
/** Represents a location tag attached to a [story](https://core.telegram.org/api/stories), with additional venue information. */
export class MediaAreaVenue_ extends _MediaArea_ {
    get [id]() {
        return 0xBE82DB9C;
    }
    static get [name]() {
        return "mediaAreaVenue";
    }
    static get [paramDesc]() {
        return [
            ["coordinates", _MediaAreaCoordinates_, "MediaAreaCoordinates"],
            ["geo", _GeoPoint_, "GeoPoint"],
            ["title", "string", "string"],
            ["address", "string", "string"],
            ["provider", "string", "string"],
            ["venue_id", "string", "string"],
            ["venue_type", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.coordinates, _MediaAreaCoordinates_, "MediaAreaCoordinates"],
            [this.geo, _GeoPoint_, "GeoPoint"],
            [this.title, "string", "string"],
            [this.address, "string", "string"],
            [this.provider, "string", "string"],
            [this.venue_id, "string", "string"],
            [this.venue_type, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** The size and location of the media area corresponding to the location sticker on top of the story media. */
        Object.defineProperty(this, "coordinates", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Coordinates of the venue */
        Object.defineProperty(this, "geo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Venue name */
        Object.defineProperty(this, "title", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Address */
        Object.defineProperty(this, "address", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Venue provider: currently only "foursquare" needs to be supported. */
        Object.defineProperty(this, "provider", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Venue ID in the provider's database */
        Object.defineProperty(this, "venue_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Venue type in the provider's database */
        Object.defineProperty(this, "venue_type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.coordinates = params.coordinates;
        this.geo = params.geo;
        this.title = params.title;
        this.address = params.address;
        this.provider = params.provider;
        this.venue_id = params.venue_id;
        this.venue_type = params.venue_type;
    }
}
/** Represents a [location tag](https://core.telegram.org/api/stories#media-areas) attached to a [story](https://core.telegram.org/api/stories), with additional venue information. */
export class InputMediaAreaVenue_ extends _MediaArea_ {
    get [id]() {
        return 0xB282217F;
    }
    static get [name]() {
        return "inputMediaAreaVenue";
    }
    static get [paramDesc]() {
        return [
            ["coordinates", _MediaAreaCoordinates_, "MediaAreaCoordinates"],
            ["query_id", "bigint", "long"],
            ["result_id", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.coordinates, _MediaAreaCoordinates_, "MediaAreaCoordinates"],
            [this.query_id, "bigint", "long"],
            [this.result_id, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        /** The size and location of the media area corresponding to the location sticker on top of the story media. */
        Object.defineProperty(this, "coordinates", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The `query_id` from [messages.botResults](https://core.telegram.org/constructor/messages.botResults), see [here »](https://core.telegram.org/api/stories#media-areas) for more info. */
        Object.defineProperty(this, "query_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The `id` of the chosen result, see [here »](https://core.telegram.org/api/stories#media-areas) for more info. */
        Object.defineProperty(this, "result_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.coordinates = params.coordinates;
        this.query_id = params.query_id;
        this.result_id = params.result_id;
    }
}
/** Represents a geolocation tag attached to a [story](https://core.telegram.org/api/stories). */
export class MediaAreaGeoPoint_ extends _MediaArea_ {
    get [id]() {
        return 0xDF8B3B22;
    }
    static get [name]() {
        return "mediaAreaGeoPoint";
    }
    static get [paramDesc]() {
        return [
            ["coordinates", _MediaAreaCoordinates_, "MediaAreaCoordinates"],
            ["geo", _GeoPoint_, "GeoPoint"],
        ];
    }
    get [params]() {
        return [
            [this.coordinates, _MediaAreaCoordinates_, "MediaAreaCoordinates"],
            [this.geo, _GeoPoint_, "GeoPoint"],
        ];
    }
    constructor(params) {
        super();
        /** The size and position of the media area corresponding to the location sticker on top of the story media. */
        Object.defineProperty(this, "coordinates", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Coordinates of the geolocation tag. */
        Object.defineProperty(this, "geo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.coordinates = params.coordinates;
        this.geo = params.geo;
    }
}
/** Represents a reaction bubble. */
export class MediaAreaSuggestedReaction_ extends _MediaArea_ {
    get [id]() {
        return 0x14455871;
    }
    static get [name]() {
        return "mediaAreaSuggestedReaction";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["dark", "true", "flags.0?true"],
            ["flipped", "true", "flags.1?true"],
            ["coordinates", _MediaAreaCoordinates_, "MediaAreaCoordinates"],
            ["reaction", _Reaction_, "Reaction"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.dark ?? null, "true", "flags.0?true"],
            [this.flipped ?? null, "true", "flags.1?true"],
            [this.coordinates, _MediaAreaCoordinates_, "MediaAreaCoordinates"],
            [this.reaction, _Reaction_, "Reaction"],
        ];
    }
    constructor(params) {
        super();
        /** Whether the reaction bubble has a dark background. */
        Object.defineProperty(this, "dark", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether the reaction bubble is mirrored (see [here »](https://core.telegram.org/api/stories#reactions) for more info). */
        Object.defineProperty(this, "flipped", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The coordinates of the media area corresponding to the reaction button. */
        Object.defineProperty(this, "coordinates", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The reaction that should be sent when this area is clicked. */
        Object.defineProperty(this, "reaction", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.dark = params.dark;
        this.flipped = params.flipped;
        this.coordinates = params.coordinates;
        this.reaction = params.reaction;
    }
}
/** Represents a channel post. */
export class MediaAreaChannelPost_ extends _MediaArea_ {
    get [id]() {
        return 0x770416AF;
    }
    static get [name]() {
        return "mediaAreaChannelPost";
    }
    static get [paramDesc]() {
        return [
            ["coordinates", _MediaAreaCoordinates_, "MediaAreaCoordinates"],
            ["channel_id", "bigint", "long"],
            ["msg_id", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.coordinates, _MediaAreaCoordinates_, "MediaAreaCoordinates"],
            [this.channel_id, "bigint", "long"],
            [this.msg_id, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** The size and location of the media area corresponding to the location sticker on top of the story media. */
        Object.defineProperty(this, "coordinates", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The channel that posted the message */
        Object.defineProperty(this, "channel_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the channel message */
        Object.defineProperty(this, "msg_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.coordinates = params.coordinates;
        this.channel_id = params.channel_id;
        this.msg_id = params.msg_id;
    }
}
/** Represents a channel post */
export class InputMediaAreaChannelPost_ extends _MediaArea_ {
    get [id]() {
        return 0x2271F2BF;
    }
    static get [name]() {
        return "inputMediaAreaChannelPost";
    }
    static get [paramDesc]() {
        return [
            ["coordinates", _MediaAreaCoordinates_, "MediaAreaCoordinates"],
            ["channel", _InputChannel_, "InputChannel"],
            ["msg_id", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.coordinates, _MediaAreaCoordinates_, "MediaAreaCoordinates"],
            [this.channel, _InputChannel_, "InputChannel"],
            [this.msg_id, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** The size and location of the media area corresponding to the location sticker on top of the story media. */
        Object.defineProperty(this, "coordinates", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The channel that posted the message */
        Object.defineProperty(this, "channel", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the channel message */
        Object.defineProperty(this, "msg_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.coordinates = params.coordinates;
        this.channel = params.channel;
        this.msg_id = params.msg_id;
    }
}
/** [Stories](https://core.telegram.org/api/stories) associated to a peer */
export class PeerStories_ extends _PeerStories_ {
    get [id]() {
        return 0x9A35E999;
    }
    static get [name]() {
        return "peerStories";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["peer", _Peer_, "Peer"],
            ["max_read_id", "number", "flags.0?int"],
            ["stories", [_StoryItem_], "Vector<StoryItem>"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.peer, _Peer_, "Peer"],
            [this.max_read_id ?? null, "number", "flags.0?int"],
            [this.stories, [_StoryItem_], "Vector<StoryItem>"],
        ];
    }
    constructor(params) {
        super();
        /** The peer */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, contains the ID of the maximum read story */
        Object.defineProperty(this, "max_read_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Stories */
        Object.defineProperty(this, "stories", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.peer = params.peer;
        this.max_read_id = params.max_read_id;
        this.stories = params.stories;
    }
}
/** [Active story list](https://core.telegram.org/api/stories#watching-stories) of a specific peer. */
export class stories_PeerStories_ extends _stories_PeerStories_ {
    get [id]() {
        return 0xCAE68768;
    }
    static get [name]() {
        return "stories.peerStories";
    }
    static get [paramDesc]() {
        return [
            ["stories", _PeerStories_, "PeerStories"],
            ["chats", [_Chat_], "Vector<Chat>"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            [this.stories, _PeerStories_, "PeerStories"],
            [this.chats, [_Chat_], "Vector<Chat>"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** Stories */
        Object.defineProperty(this, "stories", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Mentioned chats */
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Mentioned users */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.stories = params.stories;
        this.chats = params.chats;
        this.users = params.users;
    }
}
/** Represents an Instant View webpage. */
export class messages_WebPage_ extends _messages_WebPage_ {
    get [id]() {
        return 0xFD5E12BD;
    }
    static get [name]() {
        return "messages.webPage";
    }
    static get [paramDesc]() {
        return [
            ["webpage", _WebPage_, "WebPage"],
            ["chats", [_Chat_], "Vector<Chat>"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            [this.webpage, _WebPage_, "WebPage"],
            [this.chats, [_Chat_], "Vector<Chat>"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** The instant view webpage. */
        Object.defineProperty(this, "webpage", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Chats mentioned in the webpage. */
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Users mentioned in the webpage. */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.webpage = params.webpage;
        this.chats = params.chats;
        this.users = params.users;
    }
}
/** Contains info about a [giveaway/gift](https://core.telegram.org/api/giveaways) option. */
export class PremiumGiftCodeOption_ extends _PremiumGiftCodeOption_ {
    get [id]() {
        return 0x257E962B;
    }
    static get [name]() {
        return "premiumGiftCodeOption";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["users", "number", "int"],
            ["months", "number", "int"],
            ["store_product", "string", "flags.0?string"],
            ["store_quantity", "number", "flags.1?int"],
            ["currency", "string", "string"],
            ["amount", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.users, "number", "int"],
            [this.months, "number", "int"],
            [this.store_product ?? null, "string", "flags.0?string"],
            [this.store_quantity ?? null, "number", "flags.1?int"],
            [this.currency, "string", "string"],
            [this.amount, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        /** Number of users which will be able to activate the gift codes. */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Duration in months of each gifted [Telegram Premium](https://core.telegram.org/api/premium) subscription. */
        Object.defineProperty(this, "months", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Identifier of the store product associated with the option, official apps only. */
        Object.defineProperty(this, "store_product", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of times the store product must be paid */
        Object.defineProperty(this, "store_quantity", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code */
        Object.defineProperty(this, "currency", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Total price in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). */
        Object.defineProperty(this, "amount", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.users = params.users;
        this.months = params.months;
        this.store_product = params.store_product;
        this.store_quantity = params.store_quantity;
        this.currency = params.currency;
        this.amount = params.amount;
    }
}
/** Contains info about a [Telegram Premium giftcode link](https://core.telegram.org/api/links#premium-giftcode-links). */
export class payments_CheckedGiftCode_ extends _payments_CheckedGiftCode_ {
    get [id]() {
        return 0x284A1096;
    }
    static get [name]() {
        return "payments.checkedGiftCode";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["via_giveaway", "true", "flags.2?true"],
            ["from_id", _Peer_, "flags.4?Peer"],
            ["giveaway_msg_id", "number", "flags.3?int"],
            ["to_id", "bigint", "flags.0?long"],
            ["date", "number", "int"],
            ["months", "number", "int"],
            ["used_date", "number", "flags.1?int"],
            ["chats", [_Chat_], "Vector<Chat>"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.via_giveaway ?? null, "true", "flags.2?true"],
            [this.from_id ?? null, _Peer_, "flags.4?Peer"],
            [this.giveaway_msg_id ?? null, "number", "flags.3?int"],
            [this.to_id ?? null, "bigint", "flags.0?long"],
            [this.date, "number", "int"],
            [this.months, "number", "int"],
            [this.used_date ?? null, "number", "flags.1?int"],
            [this.chats, [_Chat_], "Vector<Chat>"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** Whether this giftcode was created by a [giveaway](https://core.telegram.org/api/giveaways). */
        Object.defineProperty(this, "via_giveaway", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The peer that created the gift code. */
        Object.defineProperty(this, "from_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Message ID of the giveaway in the channel specified in `from_id`. */
        Object.defineProperty(this, "giveaway_msg_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The destination user of the gift. */
        Object.defineProperty(this, "to_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Creation date of the gift code. */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Duration in months of the gifted [Telegram Premium](https://core.telegram.org/api/premium) subscription. */
        Object.defineProperty(this, "months", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** When was the giftcode imported, if it was imported. */
        Object.defineProperty(this, "used_date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Mentioned chats */
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Mentioned users */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.via_giveaway = params.via_giveaway;
        this.from_id = params.from_id;
        this.giveaway_msg_id = params.giveaway_msg_id;
        this.to_id = params.to_id;
        this.date = params.date;
        this.months = params.months;
        this.used_date = params.used_date;
        this.chats = params.chats;
        this.users = params.users;
    }
}
/** Contains info about an ongoing [giveaway](https://core.telegram.org/api/giveaways). */
export class payments_GiveawayInfo_ extends _payments_GiveawayInfo_ {
    get [id]() {
        return 0x4367DAA0;
    }
    static get [name]() {
        return "payments.giveawayInfo";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["participating", "true", "flags.0?true"],
            ["preparing_results", "true", "flags.3?true"],
            ["start_date", "number", "int"],
            ["joined_too_early_date", "number", "flags.1?int"],
            ["admin_disallowed_chat_id", "bigint", "flags.2?long"],
            ["disallowed_country", "string", "flags.4?string"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.participating ?? null, "true", "flags.0?true"],
            [this.preparing_results ?? null, "true", "flags.3?true"],
            [this.start_date, "number", "int"],
            [this.joined_too_early_date ?? null, "number", "flags.1?int"],
            [this.admin_disallowed_chat_id ?? null, "bigint", "flags.2?long"],
            [this.disallowed_country ?? null, "string", "flags.4?string"],
        ];
    }
    constructor(params) {
        super();
        /** The current user is participating in the giveaway. */
        Object.defineProperty(this, "participating", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, the giveaway has ended and the results are being prepared. */
        Object.defineProperty(this, "preparing_results", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** When was the giveaway started */
        Object.defineProperty(this, "start_date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The current user can't participate in the giveaway, because they were already a member of the channel when the giveaway started, and the `only_new_subscribers` was set when starting the giveaway. */
        Object.defineProperty(this, "joined_too_early_date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, the current user can't participate in the giveaway, because they are an administrator in one of the channels (ID specified in this flag) that created the giveaway. */
        Object.defineProperty(this, "admin_disallowed_chat_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, the current user can't participate in this giveaway, because their phone number is from the specified disallowed country (specified as a two-letter ISO 3166-1 alpha-2 country code). */
        Object.defineProperty(this, "disallowed_country", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.participating = params.participating;
        this.preparing_results = params.preparing_results;
        this.start_date = params.start_date;
        this.joined_too_early_date = params.joined_too_early_date;
        this.admin_disallowed_chat_id = params.admin_disallowed_chat_id;
        this.disallowed_country = params.disallowed_country;
    }
}
/** A [giveaway](https://core.telegram.org/api/giveaways) has ended. */
export class payments_GiveawayInfoResults_ extends _payments_GiveawayInfo_ {
    get [id]() {
        return 0x00CD5570;
    }
    static get [name]() {
        return "payments.giveawayInfoResults";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["winner", "true", "flags.0?true"],
            ["refunded", "true", "flags.1?true"],
            ["start_date", "number", "int"],
            ["gift_code_slug", "string", "flags.0?string"],
            ["finish_date", "number", "int"],
            ["winners_count", "number", "int"],
            ["activated_count", "number", "int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.winner ?? null, "true", "flags.0?true"],
            [this.refunded ?? null, "true", "flags.1?true"],
            [this.start_date, "number", "int"],
            [this.gift_code_slug ?? null, "string", "flags.0?string"],
            [this.finish_date, "number", "int"],
            [this.winners_count, "number", "int"],
            [this.activated_count, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Whether we're one of the winners of this giveaway. */
        Object.defineProperty(this, "winner", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether the giveaway was canceled and was fully refunded. */
        Object.defineProperty(this, "refunded", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Start date of the giveaway */
        Object.defineProperty(this, "start_date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If we're one of the winners of this giveaway, contains the [Premium gift code](https://core.telegram.org/api/links#premium-giftcode-links), see [here »](https://core.telegram.org/api/giveaways) for more info on the full giveaway flow. */
        Object.defineProperty(this, "gift_code_slug", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** End date of the giveaway. May be bigger than the end date specified in parameters of the giveaway. */
        Object.defineProperty(this, "finish_date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of winners in the giveaway */
        Object.defineProperty(this, "winners_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of winners, which activated their [gift codes](https://core.telegram.org/api/links#premium-giftcode-links). */
        Object.defineProperty(this, "activated_count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.winner = params.winner;
        this.refunded = params.refunded;
        this.start_date = params.start_date;
        this.gift_code_slug = params.gift_code_slug;
        this.finish_date = params.finish_date;
        this.winners_count = params.winners_count;
        this.activated_count = params.activated_count;
    }
}
/** Contains info about a [prepaid giveaway »](https://core.telegram.org/api/giveaways). */
export class PrepaidGiveaway_ extends _PrepaidGiveaway_ {
    get [id]() {
        return 0xB2539D54;
    }
    static get [name]() {
        return "prepaidGiveaway";
    }
    static get [paramDesc]() {
        return [
            ["id", "bigint", "long"],
            ["months", "number", "int"],
            ["quantity", "number", "int"],
            ["date", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.id, "bigint", "long"],
            [this.months, "number", "int"],
            [this.quantity, "number", "int"],
            [this.date, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Prepaid giveaway ID. */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Duration in months of each gifted [Telegram Premium](https://core.telegram.org/api/premium) subscription. */
        Object.defineProperty(this, "months", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of given away [Telegram Premium](https://core.telegram.org/api/premium) subscriptions. */
        Object.defineProperty(this, "quantity", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Payment date. */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
        this.months = params.months;
        this.quantity = params.quantity;
        this.date = params.date;
    }
}
/** Info about one or more [boosts](https://core.telegram.org/api/boost) applied by a specific user. */
export class Boost_ extends _Boost_ {
    get [id]() {
        return 0x2A1C8C71;
    }
    static get [name]() {
        return "boost";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["gift", "true", "flags.1?true"],
            ["giveaway", "true", "flags.2?true"],
            ["unclaimed", "true", "flags.3?true"],
            ["id", "string", "string"],
            ["user_id", "bigint", "flags.0?long"],
            ["giveaway_msg_id", "number", "flags.2?int"],
            ["date", "number", "int"],
            ["expires", "number", "int"],
            ["used_gift_slug", "string", "flags.4?string"],
            ["multiplier", "number", "flags.5?int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.gift ?? null, "true", "flags.1?true"],
            [this.giveaway ?? null, "true", "flags.2?true"],
            [this.unclaimed ?? null, "true", "flags.3?true"],
            [this.id, "string", "string"],
            [this.user_id ?? null, "bigint", "flags.0?long"],
            [this.giveaway_msg_id ?? null, "number", "flags.2?int"],
            [this.date, "number", "int"],
            [this.expires, "number", "int"],
            [this.used_gift_slug ?? null, "string", "flags.4?string"],
            [this.multiplier ?? null, "number", "flags.5?int"],
        ];
    }
    constructor(params) {
        super();
        /** Whether this boost was applied because the channel [directly gifted a subscription to the user](https://core.telegram.org/api/giveaways). */
        Object.defineProperty(this, "gift", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether this boost was applied because the user was chosen in a [giveaway started by the channel](https://core.telegram.org/api/giveaways). */
        Object.defineProperty(this, "giveaway", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, the user hasn't yet invoked [payments.applyGiftCode](https://core.telegram.org/method/payments.applyGiftCode) to claim a subscription gifted [directly or in a giveaway by the channel](https://core.telegram.org/api/giveaways). */
        Object.defineProperty(this, "unclaimed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Unique ID for this set of boosts. */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** ID of the user that applied the boost. */
        Object.defineProperty(this, "user_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The message ID of the [giveaway](https://core.telegram.org/api/giveaways) */
        Object.defineProperty(this, "giveaway_msg_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** When was the boost applied */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** When does the boost expire */
        Object.defineProperty(this, "expires", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The created Telegram Premium gift code, only set if either `gift` or `giveaway` are set AND it is either a gift code for the currently logged in user or if it was already claimed. */
        Object.defineProperty(this, "used_gift_slug", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, this boost counts as `multiplier` boosts, otherwise it counts as a single boost. */
        Object.defineProperty(this, "multiplier", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.gift = params.gift;
        this.giveaway = params.giveaway;
        this.unclaimed = params.unclaimed;
        this.id = params.id;
        this.user_id = params.user_id;
        this.giveaway_msg_id = params.giveaway_msg_id;
        this.date = params.date;
        this.expires = params.expires;
        this.used_gift_slug = params.used_gift_slug;
        this.multiplier = params.multiplier;
    }
}
/** List of [boosts](https://core.telegram.org/api/boost) that were applied to a peer by multiple users. */
export class premium_BoostsList_ extends _premium_BoostsList_ {
    get [id]() {
        return 0x86F8613C;
    }
    static get [name]() {
        return "premium.boostsList";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["count", "number", "int"],
            ["boosts", [_Boost_], "Vector<Boost>"],
            ["next_offset", "string", "flags.0?string"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.count, "number", "int"],
            [this.boosts, [_Boost_], "Vector<Boost>"],
            [this.next_offset ?? null, "string", "flags.0?string"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** Total number of results */
        Object.defineProperty(this, "count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Boosts](https://core.telegram.org/api/boost) */
        Object.defineProperty(this, "boosts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Offset that can be used for [pagination](https://core.telegram.org/api/offsets). */
        Object.defineProperty(this, "next_offset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Mentioned users */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.count = params.count;
        this.boosts = params.boosts;
        this.next_offset = params.next_offset;
        this.users = params.users;
    }
}
/** Contains information about a single [boost slot »](https://core.telegram.org/api/boost). */
export class MyBoost_ extends _MyBoost_ {
    get [id]() {
        return 0xC448415C;
    }
    static get [name]() {
        return "myBoost";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["slot", "number", "int"],
            ["peer", _Peer_, "flags.0?Peer"],
            ["date", "number", "int"],
            ["expires", "number", "int"],
            ["cooldown_until_date", "number", "flags.1?int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.slot, "number", "int"],
            [this.peer ?? null, _Peer_, "flags.0?Peer"],
            [this.date, "number", "int"],
            [this.expires, "number", "int"],
            [this.cooldown_until_date ?? null, "number", "flags.1?int"],
        ];
    }
    constructor(params) {
        super();
        /** [Boost slot ID »](https://core.telegram.org/api/boost) */
        Object.defineProperty(this, "slot", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, indicates this slot is currently occupied, i.e. we are [boosting](https://core.telegram.org/api/boost) this peer.
        Note that we can assign multiple boost slots to the same peer. */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** When (unixtime) we started boosting the `peer`, `0` otherwise. */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Indicates the (unixtime) expiration date of the boost in `peer` (`0` if `peer` is not set). */
        Object.defineProperty(this, "expires", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If `peer` is set, indicates the (unixtime) date after which this boost can be reassigned to another channel. */
        Object.defineProperty(this, "cooldown_until_date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.slot = params.slot;
        this.peer = params.peer;
        this.date = params.date;
        this.expires = params.expires;
        this.cooldown_until_date = params.cooldown_until_date;
    }
}
/** A list of peers we are currently [boosting](https://core.telegram.org/api/boost), and how many [boost slots](https://core.telegram.org/api/boost) we have left. */
export class premium_MyBoosts_ extends _premium_MyBoosts_ {
    get [id]() {
        return 0x9AE228E2;
    }
    static get [name]() {
        return "premium.myBoosts";
    }
    static get [paramDesc]() {
        return [
            ["my_boosts", [_MyBoost_], "Vector<MyBoost>"],
            ["chats", [_Chat_], "Vector<Chat>"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            [this.my_boosts, [_MyBoost_], "Vector<MyBoost>"],
            [this.chats, [_Chat_], "Vector<Chat>"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** Info about boosted peers and remaining boost slots. */
        Object.defineProperty(this, "my_boosts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Referenced chats */
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Referenced users */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.my_boosts = params.my_boosts;
        this.chats = params.chats;
        this.users = params.users;
    }
}
/** Contains info about the current [boost status](https://core.telegram.org/api/boost) of a peer. */
export class premium_BoostsStatus_ extends _premium_BoostsStatus_ {
    get [id]() {
        return 0x4959427A;
    }
    static get [name]() {
        return "premium.boostsStatus";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["my_boost", "true", "flags.2?true"],
            ["level", "number", "int"],
            ["current_level_boosts", "number", "int"],
            ["boosts", "number", "int"],
            ["gift_boosts", "number", "flags.4?int"],
            ["next_level_boosts", "number", "flags.0?int"],
            ["premium_audience", _StatsPercentValue_, "flags.1?StatsPercentValue"],
            ["boost_url", "string", "string"],
            ["prepaid_giveaways", [_PrepaidGiveaway_], "flags.3?Vector<PrepaidGiveaway>"],
            ["my_boost_slots", ["number"], "flags.2?Vector<int>"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.my_boost ?? null, "true", "flags.2?true"],
            [this.level, "number", "int"],
            [this.current_level_boosts, "number", "int"],
            [this.boosts, "number", "int"],
            [this.gift_boosts ?? null, "number", "flags.4?int"],
            [this.next_level_boosts ?? null, "number", "flags.0?int"],
            [this.premium_audience ?? null, _StatsPercentValue_, "flags.1?StatsPercentValue"],
            [this.boost_url, "string", "string"],
            [this.prepaid_giveaways ?? null, [_PrepaidGiveaway_], "flags.3?Vector<PrepaidGiveaway>"],
            [this.my_boost_slots ?? null, ["number"], "flags.2?Vector<int>"],
        ];
    }
    constructor(params) {
        super();
        /** Whether we're currently boosting this channel, `my_boost_slots` will also be set. */
        Object.defineProperty(this, "my_boost", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The current boost level of the channel. */
        Object.defineProperty(this, "level", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The number of boosts acquired so far in the current level. */
        Object.defineProperty(this, "current_level_boosts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Total number of boosts acquired so far. */
        Object.defineProperty(this, "boosts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The number of boosts acquired from created Telegram Premium [gift codes](https://core.telegram.org/api/giveaways) and [giveaways](https://core.telegram.org/api/giveaways); only returned to channel admins. */
        Object.defineProperty(this, "gift_boosts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Total number of boosts needed to reach the next level; if absent, the next level isn't available. */
        Object.defineProperty(this, "next_level_boosts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Only returned to channel admins: contains the approximated number of Premium users subscribed to the channel, related to the total number of subscribers. */
        Object.defineProperty(this, "premium_audience", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** [Boost deep link »](https://core.telegram.org/api/links#boost-links) that can be used to boost the chat. */
        Object.defineProperty(this, "boost_url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** A list of prepaid [giveaways](https://core.telegram.org/api/giveaways) available for the chat; only returned to channel admins. */
        Object.defineProperty(this, "prepaid_giveaways", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Indicates which of our [boost slots](https://core.telegram.org/api/boost) we've assigned to this peer (populated if `my_boost` is set). */
        Object.defineProperty(this, "my_boost_slots", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.my_boost = params.my_boost;
        this.level = params.level;
        this.current_level_boosts = params.current_level_boosts;
        this.boosts = params.boosts;
        this.gift_boosts = params.gift_boosts;
        this.next_level_boosts = params.next_level_boosts;
        this.premium_audience = params.premium_audience;
        this.boost_url = params.boost_url;
        this.prepaid_giveaways = params.prepaid_giveaways;
        this.my_boost_slots = params.my_boost_slots;
    }
}
/** Contains info about the original poster of a reposted story. */
export class StoryFwdHeader_ extends _StoryFwdHeader_ {
    get [id]() {
        return 0xB826E150;
    }
    static get [name]() {
        return "storyFwdHeader";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["modified", "true", "flags.3?true"],
            ["from", _Peer_, "flags.0?Peer"],
            ["from_name", "string", "flags.1?string"],
            ["story_id", "number", "flags.2?int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.modified ?? null, "true", "flags.3?true"],
            [this.from ?? null, _Peer_, "flags.0?Peer"],
            [this.from_name ?? null, "string", "flags.1?string"],
            [this.story_id ?? null, "number", "flags.2?int"],
        ];
    }
    constructor(params) {
        super();
        /** Whether the story media was modified before reposting it (for example by overlaying a round video with a reaction). */
        Object.defineProperty(this, "modified", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Peer that originally posted the story; will be empty for stories forwarded from a user with forwards privacy enabled, in which case `from_name` will be set, instead. */
        Object.defineProperty(this, "from", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Will be set for stories forwarded from a user with forwards privacy enabled, in which case `from` will also be empty. */
        Object.defineProperty(this, "from_name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** , contains the story ID */
        Object.defineProperty(this, "story_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.modified = params?.modified;
        this.from = params?.from;
        this.from_name = params?.from_name;
        this.story_id = params?.story_id;
    }
}
/** Interaction counters for a message. */
export class PostInteractionCountersMessage_ extends _PostInteractionCounters_ {
    get [id]() {
        return 0xE7058E7F;
    }
    static get [name]() {
        return "postInteractionCountersMessage";
    }
    static get [paramDesc]() {
        return [
            ["msg_id", "number", "int"],
            ["views", "number", "int"],
            ["forwards", "number", "int"],
            ["reactions", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.msg_id, "number", "int"],
            [this.views, "number", "int"],
            [this.forwards, "number", "int"],
            [this.reactions, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Message ID */
        Object.defineProperty(this, "msg_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of views */
        Object.defineProperty(this, "views", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of forwards to public channels */
        Object.defineProperty(this, "forwards", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of reactions */
        Object.defineProperty(this, "reactions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.msg_id = params.msg_id;
        this.views = params.views;
        this.forwards = params.forwards;
        this.reactions = params.reactions;
    }
}
/** Interaction counters for a story. */
export class PostInteractionCountersStory_ extends _PostInteractionCounters_ {
    get [id]() {
        return 0x8A480E27;
    }
    static get [name]() {
        return "postInteractionCountersStory";
    }
    static get [paramDesc]() {
        return [
            ["story_id", "number", "int"],
            ["views", "number", "int"],
            ["forwards", "number", "int"],
            ["reactions", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.story_id, "number", "int"],
            [this.views, "number", "int"],
            [this.forwards, "number", "int"],
            [this.reactions, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Story ID */
        Object.defineProperty(this, "story_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of views */
        Object.defineProperty(this, "views", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of forwards and reposts to public chats and channels */
        Object.defineProperty(this, "forwards", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Number of reactions */
        Object.defineProperty(this, "reactions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.story_id = params.story_id;
        this.views = params.views;
        this.forwards = params.forwards;
        this.reactions = params.reactions;
    }
}
/** Contains [statistics](https://core.telegram.org/api/stats) about a [story](https://core.telegram.org/api/stories). */
export class stats_StoryStats_ extends _stats_StoryStats_ {
    get [id]() {
        return 0x50CD067C;
    }
    static get [name]() {
        return "stats.storyStats";
    }
    static get [paramDesc]() {
        return [
            ["views_graph", _StatsGraph_, "StatsGraph"],
            ["reactions_by_emotion_graph", _StatsGraph_, "StatsGraph"],
        ];
    }
    get [params]() {
        return [
            [this.views_graph, _StatsGraph_, "StatsGraph"],
            [this.reactions_by_emotion_graph, _StatsGraph_, "StatsGraph"],
        ];
    }
    constructor(params) {
        super();
        /** A graph containing the number of story views and shares */
        Object.defineProperty(this, "views_graph", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** A bar graph containing the number of story reactions categorized by "emotion" (i.e. Positive, Negative, Other, etc...) */
        Object.defineProperty(this, "reactions_by_emotion_graph", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.views_graph = params.views_graph;
        this.reactions_by_emotion_graph = params.reactions_by_emotion_graph;
    }
}
/** Contains info about a forward of a [story](https://core.telegram.org/api/stories) as a message. */
export class PublicForwardMessage_ extends _PublicForward_ {
    get [id]() {
        return 0x01F2BF4A;
    }
    static get [name]() {
        return "publicForwardMessage";
    }
    static get [paramDesc]() {
        return [
            ["message", _Message_, "Message"],
        ];
    }
    get [params]() {
        return [
            [this.message, _Message_, "Message"],
        ];
    }
    constructor(params) {
        super();
        /** Info about the message with the reposted story. */
        Object.defineProperty(this, "message", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.message = params.message;
    }
}
/** Contains info about a forward of a [story](https://core.telegram.org/api/stories) as a repost by a public channel. */
export class PublicForwardStory_ extends _PublicForward_ {
    get [id]() {
        return 0xEDF3ADD0;
    }
    static get [name]() {
        return "publicForwardStory";
    }
    static get [paramDesc]() {
        return [
            ["peer", _Peer_, "Peer"],
            ["story", _StoryItem_, "StoryItem"],
        ];
    }
    get [params]() {
        return [
            [this.peer, _Peer_, "Peer"],
            [this.story, _StoryItem_, "StoryItem"],
        ];
    }
    constructor(params) {
        super();
        /** The channel that reposted the story. */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The reposted story (may be different from the original story). */
        Object.defineProperty(this, "story", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.peer = params.peer;
        this.story = params.story;
    }
}
/** Contains info about the forwards of a [story](https://core.telegram.org/api/stories) as a message to public chats and reposts by public channels. */
export class stats_PublicForwards_ extends _stats_PublicForwards_ {
    get [id]() {
        return 0x93037E20;
    }
    static get [name]() {
        return "stats.publicForwards";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["count", "number", "int"],
            ["forwards", [_PublicForward_], "Vector<PublicForward>"],
            ["next_offset", "string", "flags.0?string"],
            ["chats", [_Chat_], "Vector<Chat>"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.count, "number", "int"],
            [this.forwards, [_PublicForward_], "Vector<PublicForward>"],
            [this.next_offset ?? null, "string", "flags.0?string"],
            [this.chats, [_Chat_], "Vector<Chat>"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** Total number of results */
        Object.defineProperty(this, "count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Info about the forwards of a story. */
        Object.defineProperty(this, "forwards", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Offset used for [pagination](https://core.telegram.org/api/offsets). */
        Object.defineProperty(this, "next_offset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Mentioned chats */
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Mentioned users */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.count = params.count;
        this.forwards = params.forwards;
        this.next_offset = params.next_offset;
        this.chats = params.chats;
        this.users = params.users;
    }
}
/** Represents a [color palette »](https://core.telegram.org/api/colors). */
export class PeerColor_ extends _PeerColor_ {
    get [id]() {
        return 0xB54B5ACF;
    }
    static get [name]() {
        return "peerColor";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["color", "number", "flags.0?int"],
            ["background_emoji_id", "bigint", "flags.1?long"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.color ?? null, "number", "flags.0?int"],
            [this.background_emoji_id ?? null, "bigint", "flags.1?long"],
        ];
    }
    constructor(params) {
        super();
        /** [Color palette ID, see here »](https://core.telegram.org/api/colors) for more info; if not set, the default palette should be used. */
        Object.defineProperty(this, "color", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Optional [custom emoji ID](https://core.telegram.org/api/custom-emoji) used to generate the pattern. */
        Object.defineProperty(this, "background_emoji_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.color = params?.color;
        this.background_emoji_id = params?.background_emoji_id;
    }
}
/** Represents a [color palette that can be used in message accents »](https://core.telegram.org/api/colors). */
export class help_PeerColorSet_ extends _help_PeerColorSet_ {
    get [id]() {
        return 0x26219A58;
    }
    static get [name]() {
        return "help.peerColorSet";
    }
    static get [paramDesc]() {
        return [
            ["colors", ["number"], "Vector<int>"],
        ];
    }
    get [params]() {
        return [
            [this.colors, ["number"], "Vector<int>"],
        ];
    }
    constructor(params) {
        super();
        /** A list of 1-3 colors in RGB format, describing the accent color. */
        Object.defineProperty(this, "colors", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.colors = params.colors;
    }
}
/** Represents a [color palette that can be used in profile pages »](https://core.telegram.org/api/colors). */
export class help_PeerColorProfileSet_ extends _help_PeerColorSet_ {
    get [id]() {
        return 0x767D61EB;
    }
    static get [name]() {
        return "help.peerColorProfileSet";
    }
    static get [paramDesc]() {
        return [
            ["palette_colors", ["number"], "Vector<int>"],
            ["bg_colors", ["number"], "Vector<int>"],
            ["story_colors", ["number"], "Vector<int>"],
        ];
    }
    get [params]() {
        return [
            [this.palette_colors, ["number"], "Vector<int>"],
            [this.bg_colors, ["number"], "Vector<int>"],
            [this.story_colors, ["number"], "Vector<int>"],
        ];
    }
    constructor(params) {
        super();
        /** A list of 1-2 colors in RGB format, shown in the color palette settings to describe the current palette. */
        Object.defineProperty(this, "palette_colors", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** A list of 1-2 colors in RGB format describing the colors used to generate the actual background used in the profile page. */
        Object.defineProperty(this, "bg_colors", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** A list of 2 colors in RGB format describing the colors of the gradient used for the unread active story indicator around the profile photo. */
        Object.defineProperty(this, "story_colors", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.palette_colors = params.palette_colors;
        this.bg_colors = params.bg_colors;
        this.story_colors = params.story_colors;
    }
}
/** Contains info about a [color palette »](https://core.telegram.org/api/colors). */
export class help_PeerColorOption_ extends _help_PeerColorOption_ {
    get [id]() {
        return 0xADEC6EBE;
    }
    static get [name]() {
        return "help.peerColorOption";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["hidden", "true", "flags.0?true"],
            ["color_id", "number", "int"],
            ["colors", _help_PeerColorSet_, "flags.1?help.PeerColorSet"],
            ["dark_colors", _help_PeerColorSet_, "flags.2?help.PeerColorSet"],
            ["channel_min_level", "number", "flags.3?int"],
            ["group_min_level", "number", "flags.4?int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.hidden ?? null, "true", "flags.0?true"],
            [this.color_id, "number", "int"],
            [this.colors ?? null, _help_PeerColorSet_, "flags.1?help.PeerColorSet"],
            [this.dark_colors ?? null, _help_PeerColorSet_, "flags.2?help.PeerColorSet"],
            [this.channel_min_level ?? null, "number", "flags.3?int"],
            [this.group_min_level ?? null, "number", "flags.4?int"],
        ];
    }
    constructor(params) {
        super();
        /** Whether this palette should not be displayed as an option to the user when choosing a palette to apply to profile pages or message accents. */
        Object.defineProperty(this, "hidden", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Palette ID. */
        Object.defineProperty(this, "color_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Light mode palette.
        Will be empty for IDs `0` to `6` inclusive, in which case a palette containing a single color from the following colors should be used: red, orange, violet, green, cyan, blue, pink for indexes 0 to 6. */
        Object.defineProperty(this, "colors", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Dark mode palette. Optional, defaults to the palette in `colors` (or the autogenerated palette for IDs `0` to `6`) if absent. */
        Object.defineProperty(this, "dark_colors", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Channels can use this palette only after reaching at least the [boost level](https://core.telegram.org/api/boost) specified in this field. */
        Object.defineProperty(this, "channel_min_level", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "group_min_level", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.hidden = params.hidden;
        this.color_id = params.color_id;
        this.colors = params.colors;
        this.dark_colors = params.dark_colors;
        this.channel_min_level = params.channel_min_level;
        this.group_min_level = params.group_min_level;
    }
}
/** The list of color palettes has not changed. */
export class help_PeerColorsNotModified_ extends _help_PeerColors_ {
    get [id]() {
        return 0x2BA1F5CE;
    }
    static get [name]() {
        return "help.peerColorsNotModified";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
/** Contains info about multiple [color palettes »](https://core.telegram.org/api/colors). */
export class help_PeerColors_ extends _help_PeerColors_ {
    get [id]() {
        return 0x00F8ED08;
    }
    static get [name]() {
        return "help.peerColors";
    }
    static get [paramDesc]() {
        return [
            ["hash", "number", "int"],
            ["colors", [_help_PeerColorOption_], "Vector<help.PeerColorOption>"],
        ];
    }
    get [params]() {
        return [
            [this.hash, "number", "int"],
            [this.colors, [_help_PeerColorOption_], "Vector<help.PeerColorOption>"],
        ];
    }
    constructor(params) {
        super();
        /** [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation) */
        Object.defineProperty(this, "hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Usable [color palettes](https://core.telegram.org/api/colors). */
        Object.defineProperty(this, "colors", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.hash = params.hash;
        this.colors = params.colors;
    }
}
/** How a certain peer reacted to a story */
export class StoryReaction_ extends _StoryReaction_ {
    get [id]() {
        return 0x6090D6D5;
    }
    static get [name]() {
        return "storyReaction";
    }
    static get [paramDesc]() {
        return [
            ["peer_id", _Peer_, "Peer"],
            ["date", "number", "int"],
            ["reaction", _Reaction_, "Reaction"],
        ];
    }
    get [params]() {
        return [
            [this.peer_id, _Peer_, "Peer"],
            [this.date, "number", "int"],
            [this.reaction, _Reaction_, "Reaction"],
        ];
    }
    constructor(params) {
        super();
        /** The peer */
        Object.defineProperty(this, "peer_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Reaction date */
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The reaction */
        Object.defineProperty(this, "reaction", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.peer_id = params.peer_id;
        this.date = params.date;
        this.reaction = params.reaction;
    }
}
/** A certain peer has forwarded the story as a message to a public chat or channel. */
export class StoryReactionPublicForward_ extends _StoryReaction_ {
    get [id]() {
        return 0xBBAB2643;
    }
    static get [name]() {
        return "storyReactionPublicForward";
    }
    static get [paramDesc]() {
        return [
            ["message", _Message_, "Message"],
        ];
    }
    get [params]() {
        return [
            [this.message, _Message_, "Message"],
        ];
    }
    constructor(params) {
        super();
        /** The message with the forwarded story. */
        Object.defineProperty(this, "message", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.message = params.message;
    }
}
/** A certain peer has reposted the story. */
export class StoryReactionPublicRepost_ extends _StoryReaction_ {
    get [id]() {
        return 0xCFCD0F13;
    }
    static get [name]() {
        return "storyReactionPublicRepost";
    }
    static get [paramDesc]() {
        return [
            ["peer_id", _Peer_, "Peer"],
            ["story", _StoryItem_, "StoryItem"],
        ];
    }
    get [params]() {
        return [
            [this.peer_id, _Peer_, "Peer"],
            [this.story, _StoryItem_, "StoryItem"],
        ];
    }
    constructor(params) {
        super();
        /** The peer that reposted the story. */
        Object.defineProperty(this, "peer_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The reposted story. */
        Object.defineProperty(this, "story", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.peer_id = params.peer_id;
        this.story = params.story;
    }
}
/** List of peers that reacted to or intercated with a specific [story](https://core.telegram.org/api/stories) */
export class stories_StoryReactionsList_ extends _stories_StoryReactionsList_ {
    get [id]() {
        return 0xAA5F789C;
    }
    static get [name]() {
        return "stories.storyReactionsList";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["count", "number", "int"],
            ["reactions", [_StoryReaction_], "Vector<StoryReaction>"],
            ["chats", [_Chat_], "Vector<Chat>"],
            ["users", [_User_], "Vector<User>"],
            ["next_offset", "string", "flags.0?string"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.count, "number", "int"],
            [this.reactions, [_StoryReaction_], "Vector<StoryReaction>"],
            [this.chats, [_Chat_], "Vector<Chat>"],
            [this.users, [_User_], "Vector<User>"],
            [this.next_offset ?? null, "string", "flags.0?string"],
        ];
    }
    constructor(params) {
        super();
        /** Total number of reactions matching query */
        Object.defineProperty(this, "count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** List of peers that reacted to or interacted with a specific story */
        Object.defineProperty(this, "reactions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Mentioned chats */
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Mentioned users */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** If set, indicates the next offset to use to load more results by invoking [stories.getStoryReactionsList](https://core.telegram.org/method/stories.getStoryReactionsList). */
        Object.defineProperty(this, "next_offset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.count = params.count;
        this.reactions = params.reactions;
        this.chats = params.chats;
        this.users = params.users;
        this.next_offset = params.next_offset;
    }
}
/** Represents a [saved dialog »](https://core.telegram.org/api/saved-messages). */
export class SavedDialog_ extends _SavedDialog_ {
    get [id]() {
        return 0xBD87CB6C;
    }
    static get [name]() {
        return "savedDialog";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["pinned", "true", "flags.2?true"],
            ["peer", _Peer_, "Peer"],
            ["top_message", "number", "int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.pinned ?? null, "true", "flags.2?true"],
            [this.peer, _Peer_, "Peer"],
            [this.top_message, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Is the dialog pinned */
        Object.defineProperty(this, "pinned", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The dialog */
        Object.defineProperty(this, "peer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The latest message ID */
        Object.defineProperty(this, "top_message", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.pinned = params.pinned;
        this.peer = params.peer;
        this.top_message = params.top_message;
    }
}
/** Represents some [saved message dialogs »](https://core.telegram.org/api/saved-messages). */
export class messages_SavedDialogs_ extends _messages_SavedDialogs_ {
    get [id]() {
        return 0xF83AE221;
    }
    static get [name]() {
        return "messages.savedDialogs";
    }
    static get [paramDesc]() {
        return [
            ["dialogs", [_SavedDialog_], "Vector<SavedDialog>"],
            ["messages", [_Message_], "Vector<Message>"],
            ["chats", [_Chat_], "Vector<Chat>"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            [this.dialogs, [_SavedDialog_], "Vector<SavedDialog>"],
            [this.messages, [_Message_], "Vector<Message>"],
            [this.chats, [_Chat_], "Vector<Chat>"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** [Saved message dialogs »](https://core.telegram.org/api/saved-messages). */
        Object.defineProperty(this, "dialogs", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** List of last messages from each saved dialog */
        Object.defineProperty(this, "messages", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Mentioned chats */
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Mentioned users */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.dialogs = params.dialogs;
        this.messages = params.messages;
        this.chats = params.chats;
        this.users = params.users;
    }
}
/** Incomplete list of [saved message dialogs »](https://core.telegram.org/api/saved-messages) with messages and auxiliary data. */
export class messages_SavedDialogsSlice_ extends _messages_SavedDialogs_ {
    get [id]() {
        return 0x44BA9DD9;
    }
    static get [name]() {
        return "messages.savedDialogsSlice";
    }
    static get [paramDesc]() {
        return [
            ["count", "number", "int"],
            ["dialogs", [_SavedDialog_], "Vector<SavedDialog>"],
            ["messages", [_Message_], "Vector<Message>"],
            ["chats", [_Chat_], "Vector<Chat>"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            [this.count, "number", "int"],
            [this.dialogs, [_SavedDialog_], "Vector<SavedDialog>"],
            [this.messages, [_Message_], "Vector<Message>"],
            [this.chats, [_Chat_], "Vector<Chat>"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        /** Total number of saved message dialogs */
        Object.defineProperty(this, "count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** List of saved message dialogs */
        Object.defineProperty(this, "dialogs", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** List of last messages from dialogs */
        Object.defineProperty(this, "messages", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Mentioned chats */
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Mentioned users */
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.count = params.count;
        this.dialogs = params.dialogs;
        this.messages = params.messages;
        this.chats = params.chats;
        this.users = params.users;
    }
}
/** The saved dialogs haven't changed */
export class messages_SavedDialogsNotModified_ extends _messages_SavedDialogs_ {
    get [id]() {
        return 0xC01F6FE8;
    }
    static get [name]() {
        return "messages.savedDialogsNotModified";
    }
    static get [paramDesc]() {
        return [
            ["count", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.count, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        /** Number of [saved dialogs](https://core.telegram.org/api/saved-messages) found server-side by the query */
        Object.defineProperty(this, "count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.count = params.count;
    }
}
export class SavedReactionTag_ extends _SavedReactionTag_ {
    get [id]() {
        return 0xCB6FF828;
    }
    static get [name]() {
        return "savedReactionTag";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["reaction", _Reaction_, "Reaction"],
            ["title", "string", "flags.0?string"],
            ["count", "number", "int"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.reaction, _Reaction_, "Reaction"],
            [this.title ?? null, "string", "flags.0?string"],
            [this.count, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "reaction", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "title", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.reaction = params.reaction;
        this.title = params.title;
        this.count = params.count;
    }
}
export class messages_SavedReactionTagsNotModified_ extends _messages_SavedReactionTags_ {
    get [id]() {
        return 0x889B59EF;
    }
    static get [name]() {
        return "messages.savedReactionTagsNotModified";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
export class messages_SavedReactionTags_ extends _messages_SavedReactionTags_ {
    get [id]() {
        return 0x3259950A;
    }
    static get [name]() {
        return "messages.savedReactionTags";
    }
    static get [paramDesc]() {
        return [
            ["tags", [_SavedReactionTag_], "Vector<SavedReactionTag>"],
            ["hash", "bigint", "long"],
        ];
    }
    get [params]() {
        return [
            [this.tags, [_SavedReactionTag_], "Vector<SavedReactionTag>"],
            [this.hash, "bigint", "long"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "tags", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.tags = params.tags;
        this.hash = params.hash;
    }
}
export class OutboxReadDate_ extends _OutboxReadDate_ {
    get [id]() {
        return 0x3BB842AC;
    }
    static get [name]() {
        return "outboxReadDate";
    }
    static get [paramDesc]() {
        return [
            ["date", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.date, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.date = params.date;
    }
}
export class smsjobs_EligibleToJoin_ extends _smsjobs_EligibilityToJoin_ {
    get [id]() {
        return 0xDC8B44CF;
    }
    static get [name]() {
        return "smsjobs.eligibleToJoin";
    }
    static get [paramDesc]() {
        return [
            ["terms_url", "string", "string"],
            ["monthly_sent_sms", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.terms_url, "string", "string"],
            [this.monthly_sent_sms, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "terms_url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "monthly_sent_sms", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.terms_url = params.terms_url;
        this.monthly_sent_sms = params.monthly_sent_sms;
    }
}
export class smsjobs_Status_ extends _smsjobs_Status_ {
    get [id]() {
        return 0x2AEE9191;
    }
    static get [name]() {
        return "smsjobs.status";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["allow_international", "true", "flags.0?true"],
            ["recent_sent", "number", "int"],
            ["recent_since", "number", "int"],
            ["recent_remains", "number", "int"],
            ["total_sent", "number", "int"],
            ["total_since", "number", "int"],
            ["last_gift_slug", "string", "flags.1?string"],
            ["terms_url", "string", "string"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.allow_international ?? null, "true", "flags.0?true"],
            [this.recent_sent, "number", "int"],
            [this.recent_since, "number", "int"],
            [this.recent_remains, "number", "int"],
            [this.total_sent, "number", "int"],
            [this.total_since, "number", "int"],
            [this.last_gift_slug ?? null, "string", "flags.1?string"],
            [this.terms_url, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "allow_international", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "recent_sent", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "recent_since", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "recent_remains", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "total_sent", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "total_since", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "last_gift_slug", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "terms_url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.allow_international = params.allow_international;
        this.recent_sent = params.recent_sent;
        this.recent_since = params.recent_since;
        this.recent_remains = params.recent_remains;
        this.total_sent = params.total_sent;
        this.total_since = params.total_since;
        this.last_gift_slug = params.last_gift_slug;
        this.terms_url = params.terms_url;
    }
}
export class SmsJob_ extends _SmsJob_ {
    get [id]() {
        return 0xE6A1EEB8;
    }
    static get [name]() {
        return "smsJob";
    }
    static get [paramDesc]() {
        return [
            ["job_id", "string", "string"],
            ["phone_number", "string", "string"],
            ["text", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.job_id, "string", "string"],
            [this.phone_number, "string", "string"],
            [this.text, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "job_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "phone_number", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.job_id = params.job_id;
        this.phone_number = params.phone_number;
        this.text = params.text;
    }
}
export class BusinessWeeklyOpen_ extends _BusinessWeeklyOpen_ {
    get [id]() {
        return 0x120B1AB9;
    }
    static get [name]() {
        return "businessWeeklyOpen";
    }
    static get [paramDesc]() {
        return [
            ["start_minute", "number", "int"],
            ["end_minute", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.start_minute, "number", "int"],
            [this.end_minute, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "start_minute", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "end_minute", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.start_minute = params.start_minute;
        this.end_minute = params.end_minute;
    }
}
export class BusinessWorkHours_ extends _BusinessWorkHours_ {
    get [id]() {
        return 0x8C92B098;
    }
    static get [name]() {
        return "businessWorkHours";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["open_now", "true", "flags.0?true"],
            ["timezone_id", "string", "string"],
            ["weekly_open", [_BusinessWeeklyOpen_], "Vector<BusinessWeeklyOpen>"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.open_now ?? null, "true", "flags.0?true"],
            [this.timezone_id, "string", "string"],
            [this.weekly_open, [_BusinessWeeklyOpen_], "Vector<BusinessWeeklyOpen>"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "open_now", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "timezone_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "weekly_open", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.open_now = params.open_now;
        this.timezone_id = params.timezone_id;
        this.weekly_open = params.weekly_open;
    }
}
export class BusinessLocation_ extends _BusinessLocation_ {
    get [id]() {
        return 0xAC5C1AF7;
    }
    static get [name]() {
        return "businessLocation";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["geo_point", _GeoPoint_, "flags.0?GeoPoint"],
            ["address", "string", "string"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.geo_point ?? null, _GeoPoint_, "flags.0?GeoPoint"],
            [this.address, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "geo_point", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "address", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.geo_point = params.geo_point;
        this.address = params.address;
    }
}
export class InputBusinessRecipients_ extends _InputBusinessRecipients_ {
    get [id]() {
        return 0x6F8B32AA;
    }
    static get [name]() {
        return "inputBusinessRecipients";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["existing_chats", "true", "flags.0?true"],
            ["new_chats", "true", "flags.1?true"],
            ["contacts", "true", "flags.2?true"],
            ["non_contacts", "true", "flags.3?true"],
            ["exclude_selected", "true", "flags.5?true"],
            ["users", [_InputUser_], "flags.4?Vector<InputUser>"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.existing_chats ?? null, "true", "flags.0?true"],
            [this.new_chats ?? null, "true", "flags.1?true"],
            [this.contacts ?? null, "true", "flags.2?true"],
            [this.non_contacts ?? null, "true", "flags.3?true"],
            [this.exclude_selected ?? null, "true", "flags.5?true"],
            [this.users ?? null, [_InputUser_], "flags.4?Vector<InputUser>"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "existing_chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "new_chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "contacts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "non_contacts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "exclude_selected", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.existing_chats = params?.existing_chats;
        this.new_chats = params?.new_chats;
        this.contacts = params?.contacts;
        this.non_contacts = params?.non_contacts;
        this.exclude_selected = params?.exclude_selected;
        this.users = params?.users;
    }
}
export class BusinessRecipients_ extends _BusinessRecipients_ {
    get [id]() {
        return 0x21108FF7;
    }
    static get [name]() {
        return "businessRecipients";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["existing_chats", "true", "flags.0?true"],
            ["new_chats", "true", "flags.1?true"],
            ["contacts", "true", "flags.2?true"],
            ["non_contacts", "true", "flags.3?true"],
            ["exclude_selected", "true", "flags.5?true"],
            ["users", ["bigint"], "flags.4?Vector<long>"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.existing_chats ?? null, "true", "flags.0?true"],
            [this.new_chats ?? null, "true", "flags.1?true"],
            [this.contacts ?? null, "true", "flags.2?true"],
            [this.non_contacts ?? null, "true", "flags.3?true"],
            [this.exclude_selected ?? null, "true", "flags.5?true"],
            [this.users ?? null, ["bigint"], "flags.4?Vector<long>"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "existing_chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "new_chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "contacts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "non_contacts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "exclude_selected", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.existing_chats = params?.existing_chats;
        this.new_chats = params?.new_chats;
        this.contacts = params?.contacts;
        this.non_contacts = params?.non_contacts;
        this.exclude_selected = params?.exclude_selected;
        this.users = params?.users;
    }
}
export class BusinessAwayMessageScheduleAlways_ extends _BusinessAwayMessageSchedule_ {
    get [id]() {
        return 0xC9B9E2B9;
    }
    static get [name]() {
        return "businessAwayMessageScheduleAlways";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
export class BusinessAwayMessageScheduleOutsideWorkHours_ extends _BusinessAwayMessageSchedule_ {
    get [id]() {
        return 0xC3F2F501;
    }
    static get [name]() {
        return "businessAwayMessageScheduleOutsideWorkHours";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
export class BusinessAwayMessageScheduleCustom_ extends _BusinessAwayMessageSchedule_ {
    get [id]() {
        return 0xCC4D9ECC;
    }
    static get [name]() {
        return "businessAwayMessageScheduleCustom";
    }
    static get [paramDesc]() {
        return [
            ["start_date", "number", "int"],
            ["end_date", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.start_date, "number", "int"],
            [this.end_date, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "start_date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "end_date", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.start_date = params.start_date;
        this.end_date = params.end_date;
    }
}
export class InputBusinessGreetingMessage_ extends _InputBusinessGreetingMessage_ {
    get [id]() {
        return 0x0194CB3B;
    }
    static get [name]() {
        return "inputBusinessGreetingMessage";
    }
    static get [paramDesc]() {
        return [
            ["shortcut_id", "number", "int"],
            ["recipients", _InputBusinessRecipients_, "InputBusinessRecipients"],
            ["no_activity_days", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.shortcut_id, "number", "int"],
            [this.recipients, _InputBusinessRecipients_, "InputBusinessRecipients"],
            [this.no_activity_days, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "shortcut_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "recipients", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "no_activity_days", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.shortcut_id = params.shortcut_id;
        this.recipients = params.recipients;
        this.no_activity_days = params.no_activity_days;
    }
}
export class BusinessGreetingMessage_ extends _BusinessGreetingMessage_ {
    get [id]() {
        return 0xE519ABAB;
    }
    static get [name]() {
        return "businessGreetingMessage";
    }
    static get [paramDesc]() {
        return [
            ["shortcut_id", "number", "int"],
            ["recipients", _BusinessRecipients_, "BusinessRecipients"],
            ["no_activity_days", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.shortcut_id, "number", "int"],
            [this.recipients, _BusinessRecipients_, "BusinessRecipients"],
            [this.no_activity_days, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "shortcut_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "recipients", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "no_activity_days", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.shortcut_id = params.shortcut_id;
        this.recipients = params.recipients;
        this.no_activity_days = params.no_activity_days;
    }
}
export class InputBusinessAwayMessage_ extends _InputBusinessAwayMessage_ {
    get [id]() {
        return 0x832175E0;
    }
    static get [name]() {
        return "inputBusinessAwayMessage";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["offline_only", "true", "flags.0?true"],
            ["shortcut_id", "number", "int"],
            ["schedule", _BusinessAwayMessageSchedule_, "BusinessAwayMessageSchedule"],
            ["recipients", _InputBusinessRecipients_, "InputBusinessRecipients"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.offline_only ?? null, "true", "flags.0?true"],
            [this.shortcut_id, "number", "int"],
            [this.schedule, _BusinessAwayMessageSchedule_, "BusinessAwayMessageSchedule"],
            [this.recipients, _InputBusinessRecipients_, "InputBusinessRecipients"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "offline_only", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "shortcut_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "schedule", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "recipients", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.offline_only = params.offline_only;
        this.shortcut_id = params.shortcut_id;
        this.schedule = params.schedule;
        this.recipients = params.recipients;
    }
}
export class BusinessAwayMessage_ extends _BusinessAwayMessage_ {
    get [id]() {
        return 0xEF156A5C;
    }
    static get [name]() {
        return "businessAwayMessage";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["offline_only", "true", "flags.0?true"],
            ["shortcut_id", "number", "int"],
            ["schedule", _BusinessAwayMessageSchedule_, "BusinessAwayMessageSchedule"],
            ["recipients", _BusinessRecipients_, "BusinessRecipients"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.offline_only ?? null, "true", "flags.0?true"],
            [this.shortcut_id, "number", "int"],
            [this.schedule, _BusinessAwayMessageSchedule_, "BusinessAwayMessageSchedule"],
            [this.recipients, _BusinessRecipients_, "BusinessRecipients"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "offline_only", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "shortcut_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "schedule", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "recipients", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.offline_only = params.offline_only;
        this.shortcut_id = params.shortcut_id;
        this.schedule = params.schedule;
        this.recipients = params.recipients;
    }
}
export class Timezone_ extends _Timezone_ {
    get [id]() {
        return 0xFF9289F5;
    }
    static get [name]() {
        return "timezone";
    }
    static get [paramDesc]() {
        return [
            ["id", "string", "string"],
            ["name", "string", "string"],
            ["utc_offset", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.id, "string", "string"],
            [this.name, "string", "string"],
            [this.utc_offset, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "utc_offset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.id = params.id;
        this.name = params.name;
        this.utc_offset = params.utc_offset;
    }
}
export class help_TimezonesListNotModified_ extends _help_TimezonesList_ {
    get [id]() {
        return 0x970708CC;
    }
    static get [name]() {
        return "help.timezonesListNotModified";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
export class help_TimezonesList_ extends _help_TimezonesList_ {
    get [id]() {
        return 0x7B74ED71;
    }
    static get [name]() {
        return "help.timezonesList";
    }
    static get [paramDesc]() {
        return [
            ["timezones", [_Timezone_], "Vector<Timezone>"],
            ["hash", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.timezones, [_Timezone_], "Vector<Timezone>"],
            [this.hash, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "timezones", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.timezones = params.timezones;
        this.hash = params.hash;
    }
}
export class QuickReply_ extends _QuickReply_ {
    get [id]() {
        return 0x0697102B;
    }
    static get [name]() {
        return "quickReply";
    }
    static get [paramDesc]() {
        return [
            ["shortcut_id", "number", "int"],
            ["shortcut", "string", "string"],
            ["top_message", "number", "int"],
            ["count", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.shortcut_id, "number", "int"],
            [this.shortcut, "string", "string"],
            [this.top_message, "number", "int"],
            [this.count, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "shortcut_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "shortcut", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "top_message", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "count", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.shortcut_id = params.shortcut_id;
        this.shortcut = params.shortcut;
        this.top_message = params.top_message;
        this.count = params.count;
    }
}
export class InputQuickReplyShortcut_ extends _InputQuickReplyShortcut_ {
    get [id]() {
        return 0x24596D41;
    }
    static get [name]() {
        return "inputQuickReplyShortcut";
    }
    static get [paramDesc]() {
        return [
            ["shortcut", "string", "string"],
        ];
    }
    get [params]() {
        return [
            [this.shortcut, "string", "string"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "shortcut", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.shortcut = params.shortcut;
    }
}
export class InputQuickReplyShortcutId_ extends _InputQuickReplyShortcut_ {
    get [id]() {
        return 0x01190CF1;
    }
    static get [name]() {
        return "inputQuickReplyShortcutId";
    }
    static get [paramDesc]() {
        return [
            ["shortcut_id", "number", "int"],
        ];
    }
    get [params]() {
        return [
            [this.shortcut_id, "number", "int"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "shortcut_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.shortcut_id = params.shortcut_id;
    }
}
export class messages_QuickReplies_ extends _messages_QuickReplies_ {
    get [id]() {
        return 0xC68D6695;
    }
    static get [name]() {
        return "messages.quickReplies";
    }
    static get [paramDesc]() {
        return [
            ["quick_replies", [_QuickReply_], "Vector<QuickReply>"],
            ["messages", [_Message_], "Vector<Message>"],
            ["chats", [_Chat_], "Vector<Chat>"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            [this.quick_replies, [_QuickReply_], "Vector<QuickReply>"],
            [this.messages, [_Message_], "Vector<Message>"],
            [this.chats, [_Chat_], "Vector<Chat>"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "quick_replies", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "messages", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "chats", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.quick_replies = params.quick_replies;
        this.messages = params.messages;
        this.chats = params.chats;
        this.users = params.users;
    }
}
export class messages_QuickRepliesNotModified_ extends _messages_QuickReplies_ {
    get [id]() {
        return 0x5F91EB5B;
    }
    static get [name]() {
        return "messages.quickRepliesNotModified";
    }
    static get [paramDesc]() {
        return [];
    }
    get [params]() {
        return [];
    }
    constructor() {
        super();
    }
}
export class ConnectedBot_ extends _ConnectedBot_ {
    get [id]() {
        return 0xE7E999E7;
    }
    static get [name]() {
        return "connectedBot";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["can_reply", "true", "flags.0?true"],
            ["bot_id", "bigint", "long"],
            ["recipients", _BusinessRecipients_, "BusinessRecipients"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.can_reply ?? null, "true", "flags.0?true"],
            [this.bot_id, "bigint", "long"],
            [this.recipients, _BusinessRecipients_, "BusinessRecipients"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "can_reply", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "bot_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "recipients", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.can_reply = params.can_reply;
        this.bot_id = params.bot_id;
        this.recipients = params.recipients;
    }
}
export class account_ConnectedBots_ extends _account_ConnectedBots_ {
    get [id]() {
        return 0x17D7F87B;
    }
    static get [name]() {
        return "account.connectedBots";
    }
    static get [paramDesc]() {
        return [
            ["connected_bots", [_ConnectedBot_], "Vector<ConnectedBot>"],
            ["users", [_User_], "Vector<User>"],
        ];
    }
    get [params]() {
        return [
            [this.connected_bots, [_ConnectedBot_], "Vector<ConnectedBot>"],
            [this.users, [_User_], "Vector<User>"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "connected_bots", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "users", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.connected_bots = params.connected_bots;
        this.users = params.users;
    }
}
export class messages_DialogFilters_ extends _messages_DialogFilters_ {
    get [id]() {
        return 0x2AD93719;
    }
    static get [name]() {
        return "messages.dialogFilters";
    }
    static get [paramDesc]() {
        return [
            ["flags", flags, "#"],
            ["tags_enabled", "true", "flags.0?true"],
            ["filters", [_DialogFilter_], "Vector<DialogFilter>"],
        ];
    }
    get [params]() {
        return [
            ["flags", flags, "#"],
            [this.tags_enabled ?? null, "true", "flags.0?true"],
            [this.filters, [_DialogFilter_], "Vector<DialogFilter>"],
        ];
    }
    constructor(params) {
        super();
        Object.defineProperty(this, "tags_enabled", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "filters", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.tags_enabled = params.tags_enabled;
        this.filters = params.filters;
    }
}
export const types = {
    Type: Type_,
    TypeX: TypeX_,
    _ResPQ: _ResPQ_,
    _P_Q_inner_data: _P_Q_inner_data_,
    _Server_DH_Params: _Server_DH_Params_,
    _Server_DH_inner_data: _Server_DH_inner_data_,
    _Client_DH_Inner_Data: _Client_DH_Inner_Data_,
    _Set_client_DH_params_answer: _Set_client_DH_params_answer_,
    _BindAuthKeyInner: _BindAuthKeyInner_,
    _RpcError: _RpcError_,
    _RpcDropAnswer: _RpcDropAnswer_,
    _FutureSalt: _FutureSalt_,
    _FutureSalts: _FutureSalts_,
    _Pong: _Pong_,
    _DestroySessionRes: _DestroySessionRes_,
    _NewSession: _NewSession_,
    _Object: _Object_,
    _MsgsAck: _MsgsAck_,
    _BadMsgNotification: _BadMsgNotification_,
    _MsgResendReq: _MsgResendReq_,
    _MsgsStateReq: _MsgsStateReq_,
    _MsgsStateInfo: _MsgsStateInfo_,
    _MsgsAllInfo: _MsgsAllInfo_,
    _MsgDetailedInfo: _MsgDetailedInfo_,
    _DestroyAuthKeyRes: _DestroyAuthKeyRes_,
    _HttpWait: _HttpWait_,
    _True: _True_,
    _Error: _Error_,
    _Null: _Null_,
    _InputPeer: _InputPeer_,
    _InputUser: _InputUser_,
    _InputContact: _InputContact_,
    _InputFile: _InputFile_,
    _InputMedia: _InputMedia_,
    _InputChatPhoto: _InputChatPhoto_,
    _InputGeoPoint: _InputGeoPoint_,
    _InputPhoto: _InputPhoto_,
    _InputFileLocation: _InputFileLocation_,
    _Peer: _Peer_,
    _storage_FileType: _storage_FileType_,
    _User: _User_,
    _UserProfilePhoto: _UserProfilePhoto_,
    _UserStatus: _UserStatus_,
    _Chat: _Chat_,
    _ChatFull: _ChatFull_,
    _ChatParticipant: _ChatParticipant_,
    _ChatParticipants: _ChatParticipants_,
    _ChatPhoto: _ChatPhoto_,
    _Message: _Message_,
    _MessageMedia: _MessageMedia_,
    _MessageAction: _MessageAction_,
    _Dialog: _Dialog_,
    _Photo: _Photo_,
    _PhotoSize: _PhotoSize_,
    _GeoPoint: _GeoPoint_,
    _auth_SentCode: _auth_SentCode_,
    _auth_Authorization: _auth_Authorization_,
    _auth_ExportedAuthorization: _auth_ExportedAuthorization_,
    _InputNotifyPeer: _InputNotifyPeer_,
    _InputPeerNotifySettings: _InputPeerNotifySettings_,
    _PeerNotifySettings: _PeerNotifySettings_,
    _PeerSettings: _PeerSettings_,
    _WallPaper: _WallPaper_,
    _ReportReason: _ReportReason_,
    _UserFull: _UserFull_,
    _Contact: _Contact_,
    _ImportedContact: _ImportedContact_,
    _ContactStatus: _ContactStatus_,
    _contacts_Contacts: _contacts_Contacts_,
    _contacts_ImportedContacts: _contacts_ImportedContacts_,
    _contacts_Blocked: _contacts_Blocked_,
    _messages_Dialogs: _messages_Dialogs_,
    _messages_Messages: _messages_Messages_,
    _messages_Chats: _messages_Chats_,
    _messages_ChatFull: _messages_ChatFull_,
    _messages_AffectedHistory: _messages_AffectedHistory_,
    _MessagesFilter: _MessagesFilter_,
    _Update: _Update_,
    _updates_State: _updates_State_,
    _updates_Difference: _updates_Difference_,
    _Updates: _Updates_,
    _photos_Photos: _photos_Photos_,
    _photos_Photo: _photos_Photo_,
    _upload_File: _upload_File_,
    _DcOption: _DcOption_,
    _Config: _Config_,
    _NearestDc: _NearestDc_,
    _help_AppUpdate: _help_AppUpdate_,
    _help_InviteText: _help_InviteText_,
    _EncryptedChat: _EncryptedChat_,
    _InputEncryptedChat: _InputEncryptedChat_,
    _EncryptedFile: _EncryptedFile_,
    _InputEncryptedFile: _InputEncryptedFile_,
    _EncryptedMessage: _EncryptedMessage_,
    _messages_DhConfig: _messages_DhConfig_,
    _messages_SentEncryptedMessage: _messages_SentEncryptedMessage_,
    _InputDocument: _InputDocument_,
    _Document: _Document_,
    _help_Support: _help_Support_,
    _NotifyPeer: _NotifyPeer_,
    _SendMessageAction: _SendMessageAction_,
    _contacts_Found: _contacts_Found_,
    _InputPrivacyKey: _InputPrivacyKey_,
    _PrivacyKey: _PrivacyKey_,
    _InputPrivacyRule: _InputPrivacyRule_,
    _PrivacyRule: _PrivacyRule_,
    _account_PrivacyRules: _account_PrivacyRules_,
    _AccountDaysTTL: _AccountDaysTTL_,
    _DocumentAttribute: _DocumentAttribute_,
    _messages_Stickers: _messages_Stickers_,
    _StickerPack: _StickerPack_,
    _messages_AllStickers: _messages_AllStickers_,
    _messages_AffectedMessages: _messages_AffectedMessages_,
    _WebPage: _WebPage_,
    _Authorization: _Authorization_,
    _account_Authorizations: _account_Authorizations_,
    _account_Password: _account_Password_,
    _account_PasswordSettings: _account_PasswordSettings_,
    _account_PasswordInputSettings: _account_PasswordInputSettings_,
    _auth_PasswordRecovery: _auth_PasswordRecovery_,
    _ReceivedNotifyMessage: _ReceivedNotifyMessage_,
    _ExportedChatInvite: _ExportedChatInvite_,
    _ChatInvite: _ChatInvite_,
    _InputStickerSet: _InputStickerSet_,
    _StickerSet: _StickerSet_,
    _messages_StickerSet: _messages_StickerSet_,
    _BotCommand: _BotCommand_,
    _BotInfo: _BotInfo_,
    _KeyboardButton: _KeyboardButton_,
    _KeyboardButtonRow: _KeyboardButtonRow_,
    _ReplyMarkup: _ReplyMarkup_,
    _MessageEntity: _MessageEntity_,
    _InputChannel: _InputChannel_,
    _contacts_ResolvedPeer: _contacts_ResolvedPeer_,
    _MessageRange: _MessageRange_,
    _updates_ChannelDifference: _updates_ChannelDifference_,
    _ChannelMessagesFilter: _ChannelMessagesFilter_,
    _ChannelParticipant: _ChannelParticipant_,
    _ChannelParticipantsFilter: _ChannelParticipantsFilter_,
    _channels_ChannelParticipants: _channels_ChannelParticipants_,
    _channels_ChannelParticipant: _channels_ChannelParticipant_,
    _help_TermsOfService: _help_TermsOfService_,
    _messages_SavedGifs: _messages_SavedGifs_,
    _InputBotInlineMessage: _InputBotInlineMessage_,
    _InputBotInlineResult: _InputBotInlineResult_,
    _BotInlineMessage: _BotInlineMessage_,
    _BotInlineResult: _BotInlineResult_,
    _messages_BotResults: _messages_BotResults_,
    _ExportedMessageLink: _ExportedMessageLink_,
    _MessageFwdHeader: _MessageFwdHeader_,
    _auth_CodeType: _auth_CodeType_,
    _auth_SentCodeType: _auth_SentCodeType_,
    _messages_BotCallbackAnswer: _messages_BotCallbackAnswer_,
    _messages_MessageEditData: _messages_MessageEditData_,
    _InputBotInlineMessageID: _InputBotInlineMessageID_,
    _InlineBotSwitchPM: _InlineBotSwitchPM_,
    _messages_PeerDialogs: _messages_PeerDialogs_,
    _TopPeer: _TopPeer_,
    _TopPeerCategory: _TopPeerCategory_,
    _TopPeerCategoryPeers: _TopPeerCategoryPeers_,
    _contacts_TopPeers: _contacts_TopPeers_,
    _DraftMessage: _DraftMessage_,
    _messages_FeaturedStickers: _messages_FeaturedStickers_,
    _messages_RecentStickers: _messages_RecentStickers_,
    _messages_ArchivedStickers: _messages_ArchivedStickers_,
    _messages_StickerSetInstallResult: _messages_StickerSetInstallResult_,
    _StickerSetCovered: _StickerSetCovered_,
    _MaskCoords: _MaskCoords_,
    _InputStickeredMedia: _InputStickeredMedia_,
    _Game: _Game_,
    _InputGame: _InputGame_,
    _HighScore: _HighScore_,
    _messages_HighScores: _messages_HighScores_,
    _RichText: _RichText_,
    _PageBlock: _PageBlock_,
    _PhoneCallDiscardReason: _PhoneCallDiscardReason_,
    _DataJSON: _DataJSON_,
    _LabeledPrice: _LabeledPrice_,
    _Invoice: _Invoice_,
    _PaymentCharge: _PaymentCharge_,
    _PostAddress: _PostAddress_,
    _PaymentRequestedInfo: _PaymentRequestedInfo_,
    _PaymentSavedCredentials: _PaymentSavedCredentials_,
    _WebDocument: _WebDocument_,
    _InputWebDocument: _InputWebDocument_,
    _InputWebFileLocation: _InputWebFileLocation_,
    _upload_WebFile: _upload_WebFile_,
    _payments_PaymentForm: _payments_PaymentForm_,
    _payments_ValidatedRequestedInfo: _payments_ValidatedRequestedInfo_,
    _payments_PaymentResult: _payments_PaymentResult_,
    _payments_PaymentReceipt: _payments_PaymentReceipt_,
    _payments_SavedInfo: _payments_SavedInfo_,
    _InputPaymentCredentials: _InputPaymentCredentials_,
    _account_TmpPassword: _account_TmpPassword_,
    _ShippingOption: _ShippingOption_,
    _InputStickerSetItem: _InputStickerSetItem_,
    _InputPhoneCall: _InputPhoneCall_,
    _PhoneCall: _PhoneCall_,
    _PhoneConnection: _PhoneConnection_,
    _PhoneCallProtocol: _PhoneCallProtocol_,
    _phone_PhoneCall: _phone_PhoneCall_,
    _upload_CdnFile: _upload_CdnFile_,
    _CdnPublicKey: _CdnPublicKey_,
    _CdnConfig: _CdnConfig_,
    _LangPackString: _LangPackString_,
    _LangPackDifference: _LangPackDifference_,
    _LangPackLanguage: _LangPackLanguage_,
    _ChannelAdminLogEventAction: _ChannelAdminLogEventAction_,
    _ChannelAdminLogEvent: _ChannelAdminLogEvent_,
    _channels_AdminLogResults: _channels_AdminLogResults_,
    _ChannelAdminLogEventsFilter: _ChannelAdminLogEventsFilter_,
    _PopularContact: _PopularContact_,
    _messages_FavedStickers: _messages_FavedStickers_,
    _RecentMeUrl: _RecentMeUrl_,
    _help_RecentMeUrls: _help_RecentMeUrls_,
    _InputSingleMedia: _InputSingleMedia_,
    _WebAuthorization: _WebAuthorization_,
    _account_WebAuthorizations: _account_WebAuthorizations_,
    _InputMessage: _InputMessage_,
    _InputDialogPeer: _InputDialogPeer_,
    _DialogPeer: _DialogPeer_,
    _messages_FoundStickerSets: _messages_FoundStickerSets_,
    _FileHash: _FileHash_,
    _InputClientProxy: _InputClientProxy_,
    _help_TermsOfServiceUpdate: _help_TermsOfServiceUpdate_,
    _InputSecureFile: _InputSecureFile_,
    _SecureFile: _SecureFile_,
    _SecureData: _SecureData_,
    _SecurePlainData: _SecurePlainData_,
    _SecureValueType: _SecureValueType_,
    _SecureValue: _SecureValue_,
    _InputSecureValue: _InputSecureValue_,
    _SecureValueHash: _SecureValueHash_,
    _SecureValueError: _SecureValueError_,
    _SecureCredentialsEncrypted: _SecureCredentialsEncrypted_,
    _account_AuthorizationForm: _account_AuthorizationForm_,
    _account_SentEmailCode: _account_SentEmailCode_,
    _help_DeepLinkInfo: _help_DeepLinkInfo_,
    _SavedContact: _SavedContact_,
    _account_Takeout: _account_Takeout_,
    _PasswordKdfAlgo: _PasswordKdfAlgo_,
    _SecurePasswordKdfAlgo: _SecurePasswordKdfAlgo_,
    _SecureSecretSettings: _SecureSecretSettings_,
    _InputCheckPasswordSRP: _InputCheckPasswordSRP_,
    _SecureRequiredType: _SecureRequiredType_,
    _help_PassportConfig: _help_PassportConfig_,
    _InputAppEvent: _InputAppEvent_,
    _JSONObjectValue: _JSONObjectValue_,
    _JSONValue: _JSONValue_,
    _PageTableCell: _PageTableCell_,
    _PageTableRow: _PageTableRow_,
    _PageCaption: _PageCaption_,
    _PageListItem: _PageListItem_,
    _PageListOrderedItem: _PageListOrderedItem_,
    _PageRelatedArticle: _PageRelatedArticle_,
    _Page: _Page_,
    _help_SupportName: _help_SupportName_,
    _help_UserInfo: _help_UserInfo_,
    _PollAnswer: _PollAnswer_,
    _Poll: _Poll_,
    _PollAnswerVoters: _PollAnswerVoters_,
    _PollResults: _PollResults_,
    _ChatOnlines: _ChatOnlines_,
    _StatsURL: _StatsURL_,
    _ChatAdminRights: _ChatAdminRights_,
    _ChatBannedRights: _ChatBannedRights_,
    _InputWallPaper: _InputWallPaper_,
    _account_WallPapers: _account_WallPapers_,
    _CodeSettings: _CodeSettings_,
    _WallPaperSettings: _WallPaperSettings_,
    _AutoDownloadSettings: _AutoDownloadSettings_,
    _account_AutoDownloadSettings: _account_AutoDownloadSettings_,
    _EmojiKeyword: _EmojiKeyword_,
    _EmojiKeywordsDifference: _EmojiKeywordsDifference_,
    _EmojiURL: _EmojiURL_,
    _EmojiLanguage: _EmojiLanguage_,
    _Folder: _Folder_,
    _InputFolderPeer: _InputFolderPeer_,
    _FolderPeer: _FolderPeer_,
    _messages_SearchCounter: _messages_SearchCounter_,
    _UrlAuthResult: _UrlAuthResult_,
    _ChannelLocation: _ChannelLocation_,
    _PeerLocated: _PeerLocated_,
    _RestrictionReason: _RestrictionReason_,
    _InputTheme: _InputTheme_,
    _Theme: _Theme_,
    _account_Themes: _account_Themes_,
    _auth_LoginToken: _auth_LoginToken_,
    _account_ContentSettings: _account_ContentSettings_,
    _messages_InactiveChats: _messages_InactiveChats_,
    _BaseTheme: _BaseTheme_,
    _InputThemeSettings: _InputThemeSettings_,
    _ThemeSettings: _ThemeSettings_,
    _WebPageAttribute: _WebPageAttribute_,
    _messages_VotesList: _messages_VotesList_,
    _BankCardOpenUrl: _BankCardOpenUrl_,
    _payments_BankCardData: _payments_BankCardData_,
    _DialogFilter: _DialogFilter_,
    _DialogFilterSuggested: _DialogFilterSuggested_,
    _StatsDateRangeDays: _StatsDateRangeDays_,
    _StatsAbsValueAndPrev: _StatsAbsValueAndPrev_,
    _StatsPercentValue: _StatsPercentValue_,
    _StatsGraph: _StatsGraph_,
    _stats_BroadcastStats: _stats_BroadcastStats_,
    _help_PromoData: _help_PromoData_,
    _VideoSize: _VideoSize_,
    _StatsGroupTopPoster: _StatsGroupTopPoster_,
    _StatsGroupTopAdmin: _StatsGroupTopAdmin_,
    _StatsGroupTopInviter: _StatsGroupTopInviter_,
    _stats_MegagroupStats: _stats_MegagroupStats_,
    _GlobalPrivacySettings: _GlobalPrivacySettings_,
    _help_CountryCode: _help_CountryCode_,
    _help_Country: _help_Country_,
    _help_CountriesList: _help_CountriesList_,
    _MessageViews: _MessageViews_,
    _messages_MessageViews: _messages_MessageViews_,
    _messages_DiscussionMessage: _messages_DiscussionMessage_,
    _MessageReplyHeader: _MessageReplyHeader_,
    _MessageReplies: _MessageReplies_,
    _PeerBlocked: _PeerBlocked_,
    _stats_MessageStats: _stats_MessageStats_,
    _GroupCall: _GroupCall_,
    _InputGroupCall: _InputGroupCall_,
    _GroupCallParticipant: _GroupCallParticipant_,
    _phone_GroupCall: _phone_GroupCall_,
    _phone_GroupParticipants: _phone_GroupParticipants_,
    _InlineQueryPeerType: _InlineQueryPeerType_,
    _messages_HistoryImport: _messages_HistoryImport_,
    _messages_HistoryImportParsed: _messages_HistoryImportParsed_,
    _messages_AffectedFoundMessages: _messages_AffectedFoundMessages_,
    _ChatInviteImporter: _ChatInviteImporter_,
    _messages_ExportedChatInvites: _messages_ExportedChatInvites_,
    _messages_ExportedChatInvite: _messages_ExportedChatInvite_,
    _messages_ChatInviteImporters: _messages_ChatInviteImporters_,
    _ChatAdminWithInvites: _ChatAdminWithInvites_,
    _messages_ChatAdminsWithInvites: _messages_ChatAdminsWithInvites_,
    _messages_CheckedHistoryImportPeer: _messages_CheckedHistoryImportPeer_,
    _phone_JoinAsPeers: _phone_JoinAsPeers_,
    _phone_ExportedGroupCallInvite: _phone_ExportedGroupCallInvite_,
    _GroupCallParticipantVideoSourceGroup: _GroupCallParticipantVideoSourceGroup_,
    _GroupCallParticipantVideo: _GroupCallParticipantVideo_,
    _stickers_SuggestedShortName: _stickers_SuggestedShortName_,
    _BotCommandScope: _BotCommandScope_,
    _account_ResetPasswordResult: _account_ResetPasswordResult_,
    _SponsoredMessage: _SponsoredMessage_,
    _messages_SponsoredMessages: _messages_SponsoredMessages_,
    _SearchResultsCalendarPeriod: _SearchResultsCalendarPeriod_,
    _messages_SearchResultsCalendar: _messages_SearchResultsCalendar_,
    _SearchResultsPosition: _SearchResultsPosition_,
    _messages_SearchResultsPositions: _messages_SearchResultsPositions_,
    _channels_SendAsPeers: _channels_SendAsPeers_,
    _users_UserFull: _users_UserFull_,
    _messages_PeerSettings: _messages_PeerSettings_,
    _auth_LoggedOut: _auth_LoggedOut_,
    _ReactionCount: _ReactionCount_,
    _MessageReactions: _MessageReactions_,
    _messages_MessageReactionsList: _messages_MessageReactionsList_,
    _AvailableReaction: _AvailableReaction_,
    _messages_AvailableReactions: _messages_AvailableReactions_,
    _MessagePeerReaction: _MessagePeerReaction_,
    _GroupCallStreamChannel: _GroupCallStreamChannel_,
    _phone_GroupCallStreamChannels: _phone_GroupCallStreamChannels_,
    _phone_GroupCallStreamRtmpUrl: _phone_GroupCallStreamRtmpUrl_,
    _AttachMenuBotIconColor: _AttachMenuBotIconColor_,
    _AttachMenuBotIcon: _AttachMenuBotIcon_,
    _AttachMenuBot: _AttachMenuBot_,
    _AttachMenuBots: _AttachMenuBots_,
    _AttachMenuBotsBot: _AttachMenuBotsBot_,
    _WebViewResult: _WebViewResult_,
    _SimpleWebViewResult: _SimpleWebViewResult_,
    _WebViewMessageSent: _WebViewMessageSent_,
    _BotMenuButton: _BotMenuButton_,
    _account_SavedRingtones: _account_SavedRingtones_,
    _NotificationSound: _NotificationSound_,
    _account_SavedRingtone: _account_SavedRingtone_,
    _AttachMenuPeerType: _AttachMenuPeerType_,
    _InputInvoice: _InputInvoice_,
    _payments_ExportedInvoice: _payments_ExportedInvoice_,
    _messages_TranscribedAudio: _messages_TranscribedAudio_,
    _help_PremiumPromo: _help_PremiumPromo_,
    _InputStorePaymentPurpose: _InputStorePaymentPurpose_,
    _PremiumGiftOption: _PremiumGiftOption_,
    _PaymentFormMethod: _PaymentFormMethod_,
    _EmojiStatus: _EmojiStatus_,
    _account_EmojiStatuses: _account_EmojiStatuses_,
    _Reaction: _Reaction_,
    _ChatReactions: _ChatReactions_,
    _messages_Reactions: _messages_Reactions_,
    _EmailVerifyPurpose: _EmailVerifyPurpose_,
    _EmailVerification: _EmailVerification_,
    _account_EmailVerified: _account_EmailVerified_,
    _PremiumSubscriptionOption: _PremiumSubscriptionOption_,
    _SendAsPeer: _SendAsPeer_,
    _MessageExtendedMedia: _MessageExtendedMedia_,
    _StickerKeyword: _StickerKeyword_,
    _Username: _Username_,
    _ForumTopic: _ForumTopic_,
    _messages_ForumTopics: _messages_ForumTopics_,
    _DefaultHistoryTTL: _DefaultHistoryTTL_,
    _ExportedContactToken: _ExportedContactToken_,
    _RequestPeerType: _RequestPeerType_,
    _EmojiList: _EmojiList_,
    _EmojiGroup: _EmojiGroup_,
    _messages_EmojiGroups: _messages_EmojiGroups_,
    _TextWithEntities: _TextWithEntities_,
    _messages_TranslatedText: _messages_TranslatedText_,
    _AutoSaveSettings: _AutoSaveSettings_,
    _AutoSaveException: _AutoSaveException_,
    _account_AutoSaveSettings: _account_AutoSaveSettings_,
    _help_AppConfig: _help_AppConfig_,
    _InputBotApp: _InputBotApp_,
    _BotApp: _BotApp_,
    _messages_BotApp: _messages_BotApp_,
    _AppWebViewResult: _AppWebViewResult_,
    _InlineBotWebView: _InlineBotWebView_,
    _ReadParticipantDate: _ReadParticipantDate_,
    _InputChatlist: _InputChatlist_,
    _ExportedChatlistInvite: _ExportedChatlistInvite_,
    _chatlists_ExportedChatlistInvite: _chatlists_ExportedChatlistInvite_,
    _chatlists_ExportedInvites: _chatlists_ExportedInvites_,
    _chatlists_ChatlistInvite: _chatlists_ChatlistInvite_,
    _chatlists_ChatlistUpdates: _chatlists_ChatlistUpdates_,
    _bots_BotInfo: _bots_BotInfo_,
    _MessagePeerVote: _MessagePeerVote_,
    _SponsoredWebPage: _SponsoredWebPage_,
    _StoryViews: _StoryViews_,
    _StoryItem: _StoryItem_,
    _stories_AllStories: _stories_AllStories_,
    _stories_Stories: _stories_Stories_,
    _StoryView: _StoryView_,
    _stories_StoryViewsList: _stories_StoryViewsList_,
    _stories_StoryViews: _stories_StoryViews_,
    _InputReplyTo: _InputReplyTo_,
    _ExportedStoryLink: _ExportedStoryLink_,
    _StoriesStealthMode: _StoriesStealthMode_,
    _MediaAreaCoordinates: _MediaAreaCoordinates_,
    _MediaArea: _MediaArea_,
    _PeerStories: _PeerStories_,
    _stories_PeerStories: _stories_PeerStories_,
    _messages_WebPage: _messages_WebPage_,
    _PremiumGiftCodeOption: _PremiumGiftCodeOption_,
    _payments_CheckedGiftCode: _payments_CheckedGiftCode_,
    _payments_GiveawayInfo: _payments_GiveawayInfo_,
    _PrepaidGiveaway: _PrepaidGiveaway_,
    _Boost: _Boost_,
    _premium_BoostsList: _premium_BoostsList_,
    _MyBoost: _MyBoost_,
    _premium_MyBoosts: _premium_MyBoosts_,
    _premium_BoostsStatus: _premium_BoostsStatus_,
    _StoryFwdHeader: _StoryFwdHeader_,
    _PostInteractionCounters: _PostInteractionCounters_,
    _stats_StoryStats: _stats_StoryStats_,
    _PublicForward: _PublicForward_,
    _stats_PublicForwards: _stats_PublicForwards_,
    _PeerColor: _PeerColor_,
    _help_PeerColorSet: _help_PeerColorSet_,
    _help_PeerColorOption: _help_PeerColorOption_,
    _help_PeerColors: _help_PeerColors_,
    _StoryReaction: _StoryReaction_,
    _stories_StoryReactionsList: _stories_StoryReactionsList_,
    _SavedDialog: _SavedDialog_,
    _messages_SavedDialogs: _messages_SavedDialogs_,
    _SavedReactionTag: _SavedReactionTag_,
    _messages_SavedReactionTags: _messages_SavedReactionTags_,
    _OutboxReadDate: _OutboxReadDate_,
    _smsjobs_EligibilityToJoin: _smsjobs_EligibilityToJoin_,
    _smsjobs_Status: _smsjobs_Status_,
    _SmsJob: _SmsJob_,
    _BusinessWeeklyOpen: _BusinessWeeklyOpen_,
    _BusinessWorkHours: _BusinessWorkHours_,
    _BusinessLocation: _BusinessLocation_,
    _InputBusinessRecipients: _InputBusinessRecipients_,
    _BusinessRecipients: _BusinessRecipients_,
    _BusinessAwayMessageSchedule: _BusinessAwayMessageSchedule_,
    _InputBusinessGreetingMessage: _InputBusinessGreetingMessage_,
    _BusinessGreetingMessage: _BusinessGreetingMessage_,
    _InputBusinessAwayMessage: _InputBusinessAwayMessage_,
    _BusinessAwayMessage: _BusinessAwayMessage_,
    _Timezone: _Timezone_,
    _help_TimezonesList: _help_TimezonesList_,
    _QuickReply: _QuickReply_,
    _InputQuickReplyShortcut: _InputQuickReplyShortcut_,
    _messages_QuickReplies: _messages_QuickReplies_,
    _ConnectedBot: _ConnectedBot_,
    _account_ConnectedBots: _account_ConnectedBots_,
    _messages_DialogFilters: _messages_DialogFilters_,
    ResPQ: ResPQ_,
    P_q_inner_data_dc: P_q_inner_data_dc_,
    P_q_inner_data_temp_dc: P_q_inner_data_temp_dc_,
    Server_DH_params_ok: Server_DH_params_ok_,
    Server_DH_inner_data: Server_DH_inner_data_,
    Client_DH_inner_data: Client_DH_inner_data_,
    Dh_gen_ok: Dh_gen_ok_,
    Dh_gen_retry: Dh_gen_retry_,
    Dh_gen_fail: Dh_gen_fail_,
    Bind_auth_key_inner: Bind_auth_key_inner_,
    Rpc_error: Rpc_error_,
    Rpc_answer_unknown: Rpc_answer_unknown_,
    Rpc_answer_dropped_running: Rpc_answer_dropped_running_,
    Rpc_answer_dropped: Rpc_answer_dropped_,
    Future_salt: Future_salt_,
    Future_salts: Future_salts_,
    Pong: Pong_,
    Destroy_session_ok: Destroy_session_ok_,
    Destroy_session_none: Destroy_session_none_,
    New_session_created: New_session_created_,
    Gzip_packed: Gzip_packed_,
    Msgs_ack: Msgs_ack_,
    Bad_msg_notification: Bad_msg_notification_,
    Bad_server_salt: Bad_server_salt_,
    Msg_resend_req: Msg_resend_req_,
    Msgs_state_req: Msgs_state_req_,
    Msgs_state_info: Msgs_state_info_,
    Msgs_all_info: Msgs_all_info_,
    Msg_detailed_info: Msg_detailed_info_,
    Msg_new_detailed_info: Msg_new_detailed_info_,
    Destroy_auth_key_ok: Destroy_auth_key_ok_,
    Destroy_auth_key_none: Destroy_auth_key_none_,
    Destroy_auth_key_fail: Destroy_auth_key_fail_,
    Http_wait: Http_wait_,
    True: True_,
    Error: Error_,
    Null: Null_,
    InputPeerEmpty: InputPeerEmpty_,
    InputPeerSelf: InputPeerSelf_,
    InputPeerChat: InputPeerChat_,
    InputPeerUser: InputPeerUser_,
    InputPeerChannel: InputPeerChannel_,
    InputPeerUserFromMessage: InputPeerUserFromMessage_,
    InputPeerChannelFromMessage: InputPeerChannelFromMessage_,
    InputUserEmpty: InputUserEmpty_,
    InputUserSelf: InputUserSelf_,
    InputUser: InputUser_,
    InputUserFromMessage: InputUserFromMessage_,
    InputPhoneContact: InputPhoneContact_,
    InputFile: InputFile_,
    InputFileBig: InputFileBig_,
    InputMediaEmpty: InputMediaEmpty_,
    InputMediaUploadedPhoto: InputMediaUploadedPhoto_,
    InputMediaPhoto: InputMediaPhoto_,
    InputMediaGeoPoint: InputMediaGeoPoint_,
    InputMediaContact: InputMediaContact_,
    InputMediaUploadedDocument: InputMediaUploadedDocument_,
    InputMediaDocument: InputMediaDocument_,
    InputMediaVenue: InputMediaVenue_,
    InputMediaPhotoExternal: InputMediaPhotoExternal_,
    InputMediaDocumentExternal: InputMediaDocumentExternal_,
    InputMediaGame: InputMediaGame_,
    InputMediaInvoice: InputMediaInvoice_,
    InputMediaGeoLive: InputMediaGeoLive_,
    InputMediaPoll: InputMediaPoll_,
    InputMediaDice: InputMediaDice_,
    InputMediaStory: InputMediaStory_,
    InputMediaWebPage: InputMediaWebPage_,
    InputChatPhotoEmpty: InputChatPhotoEmpty_,
    InputChatUploadedPhoto: InputChatUploadedPhoto_,
    InputChatPhoto: InputChatPhoto_,
    InputGeoPointEmpty: InputGeoPointEmpty_,
    InputGeoPoint: InputGeoPoint_,
    InputPhotoEmpty: InputPhotoEmpty_,
    InputPhoto: InputPhoto_,
    InputFileLocation: InputFileLocation_,
    InputEncryptedFileLocation: InputEncryptedFileLocation_,
    InputDocumentFileLocation: InputDocumentFileLocation_,
    InputSecureFileLocation: InputSecureFileLocation_,
    InputTakeoutFileLocation: InputTakeoutFileLocation_,
    InputPhotoFileLocation: InputPhotoFileLocation_,
    InputPhotoLegacyFileLocation: InputPhotoLegacyFileLocation_,
    InputPeerPhotoFileLocation: InputPeerPhotoFileLocation_,
    InputStickerSetThumb: InputStickerSetThumb_,
    InputGroupCallStream: InputGroupCallStream_,
    PeerUser: PeerUser_,
    PeerChat: PeerChat_,
    PeerChannel: PeerChannel_,
    UserEmpty: UserEmpty_,
    User: User_,
    UserProfilePhotoEmpty: UserProfilePhotoEmpty_,
    UserProfilePhoto: UserProfilePhoto_,
    UserStatusEmpty: UserStatusEmpty_,
    UserStatusOnline: UserStatusOnline_,
    UserStatusOffline: UserStatusOffline_,
    UserStatusRecently: UserStatusRecently_,
    UserStatusLastWeek: UserStatusLastWeek_,
    UserStatusLastMonth: UserStatusLastMonth_,
    ChatEmpty: ChatEmpty_,
    Chat: Chat_,
    ChatForbidden: ChatForbidden_,
    Channel: Channel_,
    ChannelForbidden: ChannelForbidden_,
    ChatFull: ChatFull_,
    ChannelFull: ChannelFull_,
    ChatParticipant: ChatParticipant_,
    ChatParticipantCreator: ChatParticipantCreator_,
    ChatParticipantAdmin: ChatParticipantAdmin_,
    ChatParticipantsForbidden: ChatParticipantsForbidden_,
    ChatParticipants: ChatParticipants_,
    ChatPhotoEmpty: ChatPhotoEmpty_,
    ChatPhoto: ChatPhoto_,
    MessageEmpty: MessageEmpty_,
    Message: Message_,
    MessageService: MessageService_,
    MessageMediaEmpty: MessageMediaEmpty_,
    MessageMediaPhoto: MessageMediaPhoto_,
    MessageMediaGeo: MessageMediaGeo_,
    MessageMediaContact: MessageMediaContact_,
    MessageMediaUnsupported: MessageMediaUnsupported_,
    MessageMediaDocument: MessageMediaDocument_,
    MessageMediaWebPage: MessageMediaWebPage_,
    MessageMediaVenue: MessageMediaVenue_,
    MessageMediaGame: MessageMediaGame_,
    MessageMediaInvoice: MessageMediaInvoice_,
    MessageMediaGeoLive: MessageMediaGeoLive_,
    MessageMediaPoll: MessageMediaPoll_,
    MessageMediaDice: MessageMediaDice_,
    MessageMediaStory: MessageMediaStory_,
    MessageMediaGiveaway: MessageMediaGiveaway_,
    MessageMediaGiveawayResults: MessageMediaGiveawayResults_,
    MessageActionEmpty: MessageActionEmpty_,
    MessageActionChatCreate: MessageActionChatCreate_,
    MessageActionChatEditTitle: MessageActionChatEditTitle_,
    MessageActionChatEditPhoto: MessageActionChatEditPhoto_,
    MessageActionChatDeletePhoto: MessageActionChatDeletePhoto_,
    MessageActionChatAddUser: MessageActionChatAddUser_,
    MessageActionChatDeleteUser: MessageActionChatDeleteUser_,
    MessageActionChatJoinedByLink: MessageActionChatJoinedByLink_,
    MessageActionChannelCreate: MessageActionChannelCreate_,
    MessageActionChatMigrateTo: MessageActionChatMigrateTo_,
    MessageActionChannelMigrateFrom: MessageActionChannelMigrateFrom_,
    MessageActionPinMessage: MessageActionPinMessage_,
    MessageActionHistoryClear: MessageActionHistoryClear_,
    MessageActionGameScore: MessageActionGameScore_,
    MessageActionPaymentSentMe: MessageActionPaymentSentMe_,
    MessageActionPaymentSent: MessageActionPaymentSent_,
    MessageActionPhoneCall: MessageActionPhoneCall_,
    MessageActionScreenshotTaken: MessageActionScreenshotTaken_,
    MessageActionCustomAction: MessageActionCustomAction_,
    MessageActionBotAllowed: MessageActionBotAllowed_,
    MessageActionSecureValuesSentMe: MessageActionSecureValuesSentMe_,
    MessageActionSecureValuesSent: MessageActionSecureValuesSent_,
    MessageActionContactSignUp: MessageActionContactSignUp_,
    MessageActionGeoProximityReached: MessageActionGeoProximityReached_,
    MessageActionGroupCall: MessageActionGroupCall_,
    MessageActionInviteToGroupCall: MessageActionInviteToGroupCall_,
    MessageActionSetMessagesTTL: MessageActionSetMessagesTTL_,
    MessageActionGroupCallScheduled: MessageActionGroupCallScheduled_,
    MessageActionSetChatTheme: MessageActionSetChatTheme_,
    MessageActionChatJoinedByRequest: MessageActionChatJoinedByRequest_,
    MessageActionWebViewDataSentMe: MessageActionWebViewDataSentMe_,
    MessageActionWebViewDataSent: MessageActionWebViewDataSent_,
    MessageActionGiftPremium: MessageActionGiftPremium_,
    MessageActionTopicCreate: MessageActionTopicCreate_,
    MessageActionTopicEdit: MessageActionTopicEdit_,
    MessageActionSuggestProfilePhoto: MessageActionSuggestProfilePhoto_,
    MessageActionRequestedPeer: MessageActionRequestedPeer_,
    MessageActionSetChatWallPaper: MessageActionSetChatWallPaper_,
    MessageActionGiftCode: MessageActionGiftCode_,
    MessageActionGiveawayLaunch: MessageActionGiveawayLaunch_,
    MessageActionGiveawayResults: MessageActionGiveawayResults_,
    MessageActionBoostApply: MessageActionBoostApply_,
    Dialog: Dialog_,
    DialogFolder: DialogFolder_,
    PhotoEmpty: PhotoEmpty_,
    Photo: Photo_,
    PhotoSizeEmpty: PhotoSizeEmpty_,
    PhotoSize: PhotoSize_,
    PhotoCachedSize: PhotoCachedSize_,
    PhotoStrippedSize: PhotoStrippedSize_,
    PhotoSizeProgressive: PhotoSizeProgressive_,
    PhotoPathSize: PhotoPathSize_,
    GeoPointEmpty: GeoPointEmpty_,
    GeoPoint: GeoPoint_,
    InputNotifyPeer: InputNotifyPeer_,
    InputNotifyUsers: InputNotifyUsers_,
    InputNotifyChats: InputNotifyChats_,
    InputNotifyBroadcasts: InputNotifyBroadcasts_,
    InputNotifyForumTopic: InputNotifyForumTopic_,
    InputPeerNotifySettings: InputPeerNotifySettings_,
    PeerNotifySettings: PeerNotifySettings_,
    PeerSettings: PeerSettings_,
    WallPaper: WallPaper_,
    WallPaperNoFile: WallPaperNoFile_,
    InputReportReasonSpam: InputReportReasonSpam_,
    InputReportReasonViolence: InputReportReasonViolence_,
    InputReportReasonPornography: InputReportReasonPornography_,
    InputReportReasonChildAbuse: InputReportReasonChildAbuse_,
    InputReportReasonOther: InputReportReasonOther_,
    InputReportReasonCopyright: InputReportReasonCopyright_,
    InputReportReasonGeoIrrelevant: InputReportReasonGeoIrrelevant_,
    InputReportReasonFake: InputReportReasonFake_,
    InputReportReasonIllegalDrugs: InputReportReasonIllegalDrugs_,
    InputReportReasonPersonalDetails: InputReportReasonPersonalDetails_,
    UserFull: UserFull_,
    Contact: Contact_,
    ImportedContact: ImportedContact_,
    ContactStatus: ContactStatus_,
    InputMessagesFilterEmpty: InputMessagesFilterEmpty_,
    InputMessagesFilterPhotos: InputMessagesFilterPhotos_,
    InputMessagesFilterVideo: InputMessagesFilterVideo_,
    InputMessagesFilterPhotoVideo: InputMessagesFilterPhotoVideo_,
    InputMessagesFilterDocument: InputMessagesFilterDocument_,
    InputMessagesFilterUrl: InputMessagesFilterUrl_,
    InputMessagesFilterGif: InputMessagesFilterGif_,
    InputMessagesFilterVoice: InputMessagesFilterVoice_,
    InputMessagesFilterMusic: InputMessagesFilterMusic_,
    InputMessagesFilterChatPhotos: InputMessagesFilterChatPhotos_,
    InputMessagesFilterPhoneCalls: InputMessagesFilterPhoneCalls_,
    InputMessagesFilterRoundVoice: InputMessagesFilterRoundVoice_,
    InputMessagesFilterRoundVideo: InputMessagesFilterRoundVideo_,
    InputMessagesFilterMyMentions: InputMessagesFilterMyMentions_,
    InputMessagesFilterGeo: InputMessagesFilterGeo_,
    InputMessagesFilterContacts: InputMessagesFilterContacts_,
    InputMessagesFilterPinned: InputMessagesFilterPinned_,
    UpdateNewMessage: UpdateNewMessage_,
    UpdateMessageID: UpdateMessageID_,
    UpdateDeleteMessages: UpdateDeleteMessages_,
    UpdateUserTyping: UpdateUserTyping_,
    UpdateChatUserTyping: UpdateChatUserTyping_,
    UpdateChatParticipants: UpdateChatParticipants_,
    UpdateUserStatus: UpdateUserStatus_,
    UpdateUserName: UpdateUserName_,
    UpdateNewAuthorization: UpdateNewAuthorization_,
    UpdateNewEncryptedMessage: UpdateNewEncryptedMessage_,
    UpdateEncryptedChatTyping: UpdateEncryptedChatTyping_,
    UpdateEncryption: UpdateEncryption_,
    UpdateEncryptedMessagesRead: UpdateEncryptedMessagesRead_,
    UpdateChatParticipantAdd: UpdateChatParticipantAdd_,
    UpdateChatParticipantDelete: UpdateChatParticipantDelete_,
    UpdateDcOptions: UpdateDcOptions_,
    UpdateNotifySettings: UpdateNotifySettings_,
    UpdateServiceNotification: UpdateServiceNotification_,
    UpdatePrivacy: UpdatePrivacy_,
    UpdateUserPhone: UpdateUserPhone_,
    UpdateReadHistoryInbox: UpdateReadHistoryInbox_,
    UpdateReadHistoryOutbox: UpdateReadHistoryOutbox_,
    UpdateWebPage: UpdateWebPage_,
    UpdateReadMessagesContents: UpdateReadMessagesContents_,
    UpdateChannelTooLong: UpdateChannelTooLong_,
    UpdateChannel: UpdateChannel_,
    UpdateNewChannelMessage: UpdateNewChannelMessage_,
    UpdateReadChannelInbox: UpdateReadChannelInbox_,
    UpdateDeleteChannelMessages: UpdateDeleteChannelMessages_,
    UpdateChannelMessageViews: UpdateChannelMessageViews_,
    UpdateChatParticipantAdmin: UpdateChatParticipantAdmin_,
    UpdateNewStickerSet: UpdateNewStickerSet_,
    UpdateStickerSetsOrder: UpdateStickerSetsOrder_,
    UpdateStickerSets: UpdateStickerSets_,
    UpdateSavedGifs: UpdateSavedGifs_,
    UpdateBotInlineQuery: UpdateBotInlineQuery_,
    UpdateBotInlineSend: UpdateBotInlineSend_,
    UpdateEditChannelMessage: UpdateEditChannelMessage_,
    UpdateBotCallbackQuery: UpdateBotCallbackQuery_,
    UpdateEditMessage: UpdateEditMessage_,
    UpdateInlineBotCallbackQuery: UpdateInlineBotCallbackQuery_,
    UpdateReadChannelOutbox: UpdateReadChannelOutbox_,
    UpdateDraftMessage: UpdateDraftMessage_,
    UpdateReadFeaturedStickers: UpdateReadFeaturedStickers_,
    UpdateRecentStickers: UpdateRecentStickers_,
    UpdateConfig: UpdateConfig_,
    UpdatePtsChanged: UpdatePtsChanged_,
    UpdateChannelWebPage: UpdateChannelWebPage_,
    UpdateDialogPinned: UpdateDialogPinned_,
    UpdatePinnedDialogs: UpdatePinnedDialogs_,
    UpdateBotWebhookJSON: UpdateBotWebhookJSON_,
    UpdateBotWebhookJSONQuery: UpdateBotWebhookJSONQuery_,
    UpdateBotShippingQuery: UpdateBotShippingQuery_,
    UpdateBotPrecheckoutQuery: UpdateBotPrecheckoutQuery_,
    UpdatePhoneCall: UpdatePhoneCall_,
    UpdateLangPackTooLong: UpdateLangPackTooLong_,
    UpdateLangPack: UpdateLangPack_,
    UpdateFavedStickers: UpdateFavedStickers_,
    UpdateChannelReadMessagesContents: UpdateChannelReadMessagesContents_,
    UpdateContactsReset: UpdateContactsReset_,
    UpdateChannelAvailableMessages: UpdateChannelAvailableMessages_,
    UpdateDialogUnreadMark: UpdateDialogUnreadMark_,
    UpdateMessagePoll: UpdateMessagePoll_,
    UpdateChatDefaultBannedRights: UpdateChatDefaultBannedRights_,
    UpdateFolderPeers: UpdateFolderPeers_,
    UpdatePeerSettings: UpdatePeerSettings_,
    UpdatePeerLocated: UpdatePeerLocated_,
    UpdateNewScheduledMessage: UpdateNewScheduledMessage_,
    UpdateDeleteScheduledMessages: UpdateDeleteScheduledMessages_,
    UpdateTheme: UpdateTheme_,
    UpdateGeoLiveViewed: UpdateGeoLiveViewed_,
    UpdateLoginToken: UpdateLoginToken_,
    UpdateMessagePollVote: UpdateMessagePollVote_,
    UpdateDialogFilter: UpdateDialogFilter_,
    UpdateDialogFilterOrder: UpdateDialogFilterOrder_,
    UpdateDialogFilters: UpdateDialogFilters_,
    UpdatePhoneCallSignalingData: UpdatePhoneCallSignalingData_,
    UpdateChannelMessageForwards: UpdateChannelMessageForwards_,
    UpdateReadChannelDiscussionInbox: UpdateReadChannelDiscussionInbox_,
    UpdateReadChannelDiscussionOutbox: UpdateReadChannelDiscussionOutbox_,
    UpdatePeerBlocked: UpdatePeerBlocked_,
    UpdateChannelUserTyping: UpdateChannelUserTyping_,
    UpdatePinnedMessages: UpdatePinnedMessages_,
    UpdatePinnedChannelMessages: UpdatePinnedChannelMessages_,
    UpdateChat: UpdateChat_,
    UpdateGroupCallParticipants: UpdateGroupCallParticipants_,
    UpdateGroupCall: UpdateGroupCall_,
    UpdatePeerHistoryTTL: UpdatePeerHistoryTTL_,
    UpdateChatParticipant: UpdateChatParticipant_,
    UpdateChannelParticipant: UpdateChannelParticipant_,
    UpdateBotStopped: UpdateBotStopped_,
    UpdateGroupCallConnection: UpdateGroupCallConnection_,
    UpdateBotCommands: UpdateBotCommands_,
    UpdatePendingJoinRequests: UpdatePendingJoinRequests_,
    UpdateBotChatInviteRequester: UpdateBotChatInviteRequester_,
    UpdateMessageReactions: UpdateMessageReactions_,
    UpdateAttachMenuBots: UpdateAttachMenuBots_,
    UpdateWebViewResultSent: UpdateWebViewResultSent_,
    UpdateBotMenuButton: UpdateBotMenuButton_,
    UpdateSavedRingtones: UpdateSavedRingtones_,
    UpdateTranscribedAudio: UpdateTranscribedAudio_,
    UpdateReadFeaturedEmojiStickers: UpdateReadFeaturedEmojiStickers_,
    UpdateUserEmojiStatus: UpdateUserEmojiStatus_,
    UpdateRecentEmojiStatuses: UpdateRecentEmojiStatuses_,
    UpdateRecentReactions: UpdateRecentReactions_,
    UpdateMoveStickerSetToTop: UpdateMoveStickerSetToTop_,
    UpdateMessageExtendedMedia: UpdateMessageExtendedMedia_,
    UpdateChannelPinnedTopic: UpdateChannelPinnedTopic_,
    UpdateChannelPinnedTopics: UpdateChannelPinnedTopics_,
    UpdateUser: UpdateUser_,
    UpdateAutoSaveSettings: UpdateAutoSaveSettings_,
    UpdateGroupInvitePrivacyForbidden: UpdateGroupInvitePrivacyForbidden_,
    UpdateStory: UpdateStory_,
    UpdateReadStories: UpdateReadStories_,
    UpdateStoryID: UpdateStoryID_,
    UpdateStoriesStealthMode: UpdateStoriesStealthMode_,
    UpdateSentStoryReaction: UpdateSentStoryReaction_,
    UpdateBotChatBoost: UpdateBotChatBoost_,
    UpdateChannelViewForumAsMessages: UpdateChannelViewForumAsMessages_,
    UpdatePeerWallpaper: UpdatePeerWallpaper_,
    UpdateBotMessageReaction: UpdateBotMessageReaction_,
    UpdateBotMessageReactions: UpdateBotMessageReactions_,
    UpdateSavedDialogPinned: UpdateSavedDialogPinned_,
    UpdatePinnedSavedDialogs: UpdatePinnedSavedDialogs_,
    UpdateSavedReactionTags: UpdateSavedReactionTags_,
    UpdateSmsJob: UpdateSmsJob_,
    UpdateQuickReplies: UpdateQuickReplies_,
    UpdateNewQuickReply: UpdateNewQuickReply_,
    UpdateDeleteQuickReply: UpdateDeleteQuickReply_,
    UpdateQuickReplyMessage: UpdateQuickReplyMessage_,
    UpdateDeleteQuickReplyMessages: UpdateDeleteQuickReplyMessages_,
    UpdatesTooLong: UpdatesTooLong_,
    UpdateShortMessage: UpdateShortMessage_,
    UpdateShortChatMessage: UpdateShortChatMessage_,
    UpdateShort: UpdateShort_,
    UpdatesCombined: UpdatesCombined_,
    Updates: Updates_,
    UpdateShortSentMessage: UpdateShortSentMessage_,
    DcOption: DcOption_,
    Config: Config_,
    NearestDc: NearestDc_,
    EncryptedChatEmpty: EncryptedChatEmpty_,
    EncryptedChatWaiting: EncryptedChatWaiting_,
    EncryptedChatRequested: EncryptedChatRequested_,
    EncryptedChat: EncryptedChat_,
    EncryptedChatDiscarded: EncryptedChatDiscarded_,
    InputEncryptedChat: InputEncryptedChat_,
    EncryptedFileEmpty: EncryptedFileEmpty_,
    EncryptedFile: EncryptedFile_,
    InputEncryptedFileEmpty: InputEncryptedFileEmpty_,
    InputEncryptedFileUploaded: InputEncryptedFileUploaded_,
    InputEncryptedFile: InputEncryptedFile_,
    InputEncryptedFileBigUploaded: InputEncryptedFileBigUploaded_,
    EncryptedMessage: EncryptedMessage_,
    EncryptedMessageService: EncryptedMessageService_,
    InputDocumentEmpty: InputDocumentEmpty_,
    InputDocument: InputDocument_,
    DocumentEmpty: DocumentEmpty_,
    Document: Document_,
    NotifyPeer: NotifyPeer_,
    NotifyUsers: NotifyUsers_,
    NotifyChats: NotifyChats_,
    NotifyBroadcasts: NotifyBroadcasts_,
    NotifyForumTopic: NotifyForumTopic_,
    SendMessageTypingAction: SendMessageTypingAction_,
    SendMessageCancelAction: SendMessageCancelAction_,
    SendMessageRecordVideoAction: SendMessageRecordVideoAction_,
    SendMessageUploadVideoAction: SendMessageUploadVideoAction_,
    SendMessageRecordAudioAction: SendMessageRecordAudioAction_,
    SendMessageUploadAudioAction: SendMessageUploadAudioAction_,
    SendMessageUploadPhotoAction: SendMessageUploadPhotoAction_,
    SendMessageUploadDocumentAction: SendMessageUploadDocumentAction_,
    SendMessageGeoLocationAction: SendMessageGeoLocationAction_,
    SendMessageChooseContactAction: SendMessageChooseContactAction_,
    SendMessageGamePlayAction: SendMessageGamePlayAction_,
    SendMessageRecordRoundAction: SendMessageRecordRoundAction_,
    SendMessageUploadRoundAction: SendMessageUploadRoundAction_,
    SpeakingInGroupCallAction: SpeakingInGroupCallAction_,
    SendMessageHistoryImportAction: SendMessageHistoryImportAction_,
    SendMessageChooseStickerAction: SendMessageChooseStickerAction_,
    SendMessageEmojiInteraction: SendMessageEmojiInteraction_,
    SendMessageEmojiInteractionSeen: SendMessageEmojiInteractionSeen_,
    InputPrivacyKeyStatusTimestamp: InputPrivacyKeyStatusTimestamp_,
    InputPrivacyKeyChatInvite: InputPrivacyKeyChatInvite_,
    InputPrivacyKeyPhoneCall: InputPrivacyKeyPhoneCall_,
    InputPrivacyKeyPhoneP2P: InputPrivacyKeyPhoneP2P_,
    InputPrivacyKeyForwards: InputPrivacyKeyForwards_,
    InputPrivacyKeyProfilePhoto: InputPrivacyKeyProfilePhoto_,
    InputPrivacyKeyPhoneNumber: InputPrivacyKeyPhoneNumber_,
    InputPrivacyKeyAddedByPhone: InputPrivacyKeyAddedByPhone_,
    InputPrivacyKeyVoiceMessages: InputPrivacyKeyVoiceMessages_,
    InputPrivacyKeyAbout: InputPrivacyKeyAbout_,
    PrivacyKeyStatusTimestamp: PrivacyKeyStatusTimestamp_,
    PrivacyKeyChatInvite: PrivacyKeyChatInvite_,
    PrivacyKeyPhoneCall: PrivacyKeyPhoneCall_,
    PrivacyKeyPhoneP2P: PrivacyKeyPhoneP2P_,
    PrivacyKeyForwards: PrivacyKeyForwards_,
    PrivacyKeyProfilePhoto: PrivacyKeyProfilePhoto_,
    PrivacyKeyPhoneNumber: PrivacyKeyPhoneNumber_,
    PrivacyKeyAddedByPhone: PrivacyKeyAddedByPhone_,
    PrivacyKeyVoiceMessages: PrivacyKeyVoiceMessages_,
    PrivacyKeyAbout: PrivacyKeyAbout_,
    InputPrivacyValueAllowContacts: InputPrivacyValueAllowContacts_,
    InputPrivacyValueAllowAll: InputPrivacyValueAllowAll_,
    InputPrivacyValueAllowUsers: InputPrivacyValueAllowUsers_,
    InputPrivacyValueDisallowContacts: InputPrivacyValueDisallowContacts_,
    InputPrivacyValueDisallowAll: InputPrivacyValueDisallowAll_,
    InputPrivacyValueDisallowUsers: InputPrivacyValueDisallowUsers_,
    InputPrivacyValueAllowChatParticipants: InputPrivacyValueAllowChatParticipants_,
    InputPrivacyValueDisallowChatParticipants: InputPrivacyValueDisallowChatParticipants_,
    InputPrivacyValueAllowCloseFriends: InputPrivacyValueAllowCloseFriends_,
    PrivacyValueAllowContacts: PrivacyValueAllowContacts_,
    PrivacyValueAllowAll: PrivacyValueAllowAll_,
    PrivacyValueAllowUsers: PrivacyValueAllowUsers_,
    PrivacyValueDisallowContacts: PrivacyValueDisallowContacts_,
    PrivacyValueDisallowAll: PrivacyValueDisallowAll_,
    PrivacyValueDisallowUsers: PrivacyValueDisallowUsers_,
    PrivacyValueAllowChatParticipants: PrivacyValueAllowChatParticipants_,
    PrivacyValueDisallowChatParticipants: PrivacyValueDisallowChatParticipants_,
    PrivacyValueAllowCloseFriends: PrivacyValueAllowCloseFriends_,
    AccountDaysTTL: AccountDaysTTL_,
    DocumentAttributeImageSize: DocumentAttributeImageSize_,
    DocumentAttributeAnimated: DocumentAttributeAnimated_,
    DocumentAttributeSticker: DocumentAttributeSticker_,
    DocumentAttributeVideo: DocumentAttributeVideo_,
    DocumentAttributeAudio: DocumentAttributeAudio_,
    DocumentAttributeFilename: DocumentAttributeFilename_,
    DocumentAttributeHasStickers: DocumentAttributeHasStickers_,
    DocumentAttributeCustomEmoji: DocumentAttributeCustomEmoji_,
    StickerPack: StickerPack_,
    WebPageEmpty: WebPageEmpty_,
    WebPagePending: WebPagePending_,
    WebPage: WebPage_,
    WebPageNotModified: WebPageNotModified_,
    Authorization: Authorization_,
    ReceivedNotifyMessage: ReceivedNotifyMessage_,
    ChatInviteExported: ChatInviteExported_,
    ChatInvitePublicJoinRequests: ChatInvitePublicJoinRequests_,
    ChatInviteAlready: ChatInviteAlready_,
    ChatInvite: ChatInvite_,
    ChatInvitePeek: ChatInvitePeek_,
    InputStickerSetEmpty: InputStickerSetEmpty_,
    InputStickerSetID: InputStickerSetID_,
    InputStickerSetShortName: InputStickerSetShortName_,
    InputStickerSetAnimatedEmoji: InputStickerSetAnimatedEmoji_,
    InputStickerSetDice: InputStickerSetDice_,
    InputStickerSetAnimatedEmojiAnimations: InputStickerSetAnimatedEmojiAnimations_,
    InputStickerSetPremiumGifts: InputStickerSetPremiumGifts_,
    InputStickerSetEmojiGenericAnimations: InputStickerSetEmojiGenericAnimations_,
    InputStickerSetEmojiDefaultStatuses: InputStickerSetEmojiDefaultStatuses_,
    InputStickerSetEmojiDefaultTopicIcons: InputStickerSetEmojiDefaultTopicIcons_,
    InputStickerSetEmojiChannelDefaultStatuses: InputStickerSetEmojiChannelDefaultStatuses_,
    StickerSet: StickerSet_,
    BotCommand: BotCommand_,
    BotInfo: BotInfo_,
    KeyboardButton: KeyboardButton_,
    KeyboardButtonUrl: KeyboardButtonUrl_,
    KeyboardButtonCallback: KeyboardButtonCallback_,
    KeyboardButtonRequestPhone: KeyboardButtonRequestPhone_,
    KeyboardButtonRequestGeoLocation: KeyboardButtonRequestGeoLocation_,
    KeyboardButtonSwitchInline: KeyboardButtonSwitchInline_,
    KeyboardButtonGame: KeyboardButtonGame_,
    KeyboardButtonBuy: KeyboardButtonBuy_,
    KeyboardButtonUrlAuth: KeyboardButtonUrlAuth_,
    InputKeyboardButtonUrlAuth: InputKeyboardButtonUrlAuth_,
    KeyboardButtonRequestPoll: KeyboardButtonRequestPoll_,
    InputKeyboardButtonUserProfile: InputKeyboardButtonUserProfile_,
    KeyboardButtonUserProfile: KeyboardButtonUserProfile_,
    KeyboardButtonWebView: KeyboardButtonWebView_,
    KeyboardButtonSimpleWebView: KeyboardButtonSimpleWebView_,
    KeyboardButtonRequestPeer: KeyboardButtonRequestPeer_,
    KeyboardButtonRow: KeyboardButtonRow_,
    ReplyKeyboardHide: ReplyKeyboardHide_,
    ReplyKeyboardForceReply: ReplyKeyboardForceReply_,
    ReplyKeyboardMarkup: ReplyKeyboardMarkup_,
    ReplyInlineMarkup: ReplyInlineMarkup_,
    MessageEntityUnknown: MessageEntityUnknown_,
    MessageEntityMention: MessageEntityMention_,
    MessageEntityHashtag: MessageEntityHashtag_,
    MessageEntityBotCommand: MessageEntityBotCommand_,
    MessageEntityUrl: MessageEntityUrl_,
    MessageEntityEmail: MessageEntityEmail_,
    MessageEntityBold: MessageEntityBold_,
    MessageEntityItalic: MessageEntityItalic_,
    MessageEntityCode: MessageEntityCode_,
    MessageEntityPre: MessageEntityPre_,
    MessageEntityTextUrl: MessageEntityTextUrl_,
    MessageEntityMentionName: MessageEntityMentionName_,
    InputMessageEntityMentionName: InputMessageEntityMentionName_,
    MessageEntityPhone: MessageEntityPhone_,
    MessageEntityCashtag: MessageEntityCashtag_,
    MessageEntityUnderline: MessageEntityUnderline_,
    MessageEntityStrike: MessageEntityStrike_,
    MessageEntityBankCard: MessageEntityBankCard_,
    MessageEntitySpoiler: MessageEntitySpoiler_,
    MessageEntityCustomEmoji: MessageEntityCustomEmoji_,
    MessageEntityBlockquote: MessageEntityBlockquote_,
    InputChannelEmpty: InputChannelEmpty_,
    InputChannel: InputChannel_,
    InputChannelFromMessage: InputChannelFromMessage_,
    MessageRange: MessageRange_,
    ChannelMessagesFilterEmpty: ChannelMessagesFilterEmpty_,
    ChannelMessagesFilter: ChannelMessagesFilter_,
    ChannelParticipant: ChannelParticipant_,
    ChannelParticipantSelf: ChannelParticipantSelf_,
    ChannelParticipantCreator: ChannelParticipantCreator_,
    ChannelParticipantAdmin: ChannelParticipantAdmin_,
    ChannelParticipantBanned: ChannelParticipantBanned_,
    ChannelParticipantLeft: ChannelParticipantLeft_,
    ChannelParticipantsRecent: ChannelParticipantsRecent_,
    ChannelParticipantsAdmins: ChannelParticipantsAdmins_,
    ChannelParticipantsKicked: ChannelParticipantsKicked_,
    ChannelParticipantsBots: ChannelParticipantsBots_,
    ChannelParticipantsBanned: ChannelParticipantsBanned_,
    ChannelParticipantsSearch: ChannelParticipantsSearch_,
    ChannelParticipantsContacts: ChannelParticipantsContacts_,
    ChannelParticipantsMentions: ChannelParticipantsMentions_,
    InputBotInlineMessageMediaAuto: InputBotInlineMessageMediaAuto_,
    InputBotInlineMessageText: InputBotInlineMessageText_,
    InputBotInlineMessageMediaGeo: InputBotInlineMessageMediaGeo_,
    InputBotInlineMessageMediaVenue: InputBotInlineMessageMediaVenue_,
    InputBotInlineMessageMediaContact: InputBotInlineMessageMediaContact_,
    InputBotInlineMessageGame: InputBotInlineMessageGame_,
    InputBotInlineMessageMediaInvoice: InputBotInlineMessageMediaInvoice_,
    InputBotInlineMessageMediaWebPage: InputBotInlineMessageMediaWebPage_,
    InputBotInlineResult: InputBotInlineResult_,
    InputBotInlineResultPhoto: InputBotInlineResultPhoto_,
    InputBotInlineResultDocument: InputBotInlineResultDocument_,
    InputBotInlineResultGame: InputBotInlineResultGame_,
    BotInlineMessageMediaAuto: BotInlineMessageMediaAuto_,
    BotInlineMessageText: BotInlineMessageText_,
    BotInlineMessageMediaGeo: BotInlineMessageMediaGeo_,
    BotInlineMessageMediaVenue: BotInlineMessageMediaVenue_,
    BotInlineMessageMediaContact: BotInlineMessageMediaContact_,
    BotInlineMessageMediaInvoice: BotInlineMessageMediaInvoice_,
    BotInlineMessageMediaWebPage: BotInlineMessageMediaWebPage_,
    BotInlineResult: BotInlineResult_,
    BotInlineMediaResult: BotInlineMediaResult_,
    ExportedMessageLink: ExportedMessageLink_,
    MessageFwdHeader: MessageFwdHeader_,
    InputBotInlineMessageID: InputBotInlineMessageID_,
    InputBotInlineMessageID64: InputBotInlineMessageID64_,
    InlineBotSwitchPM: InlineBotSwitchPM_,
    TopPeer: TopPeer_,
    TopPeerCategoryBotsPM: TopPeerCategoryBotsPM_,
    TopPeerCategoryBotsInline: TopPeerCategoryBotsInline_,
    TopPeerCategoryCorrespondents: TopPeerCategoryCorrespondents_,
    TopPeerCategoryGroups: TopPeerCategoryGroups_,
    TopPeerCategoryChannels: TopPeerCategoryChannels_,
    TopPeerCategoryPhoneCalls: TopPeerCategoryPhoneCalls_,
    TopPeerCategoryForwardUsers: TopPeerCategoryForwardUsers_,
    TopPeerCategoryForwardChats: TopPeerCategoryForwardChats_,
    TopPeerCategoryPeers: TopPeerCategoryPeers_,
    DraftMessageEmpty: DraftMessageEmpty_,
    DraftMessage: DraftMessage_,
    StickerSetCovered: StickerSetCovered_,
    StickerSetMultiCovered: StickerSetMultiCovered_,
    StickerSetFullCovered: StickerSetFullCovered_,
    StickerSetNoCovered: StickerSetNoCovered_,
    MaskCoords: MaskCoords_,
    InputStickeredMediaPhoto: InputStickeredMediaPhoto_,
    InputStickeredMediaDocument: InputStickeredMediaDocument_,
    Game: Game_,
    InputGameID: InputGameID_,
    InputGameShortName: InputGameShortName_,
    HighScore: HighScore_,
    TextEmpty: TextEmpty_,
    TextPlain: TextPlain_,
    TextBold: TextBold_,
    TextItalic: TextItalic_,
    TextUnderline: TextUnderline_,
    TextStrike: TextStrike_,
    TextFixed: TextFixed_,
    TextUrl: TextUrl_,
    TextEmail: TextEmail_,
    TextConcat: TextConcat_,
    TextSubscript: TextSubscript_,
    TextSuperscript: TextSuperscript_,
    TextMarked: TextMarked_,
    TextPhone: TextPhone_,
    TextImage: TextImage_,
    TextAnchor: TextAnchor_,
    PageBlockUnsupported: PageBlockUnsupported_,
    PageBlockTitle: PageBlockTitle_,
    PageBlockSubtitle: PageBlockSubtitle_,
    PageBlockAuthorDate: PageBlockAuthorDate_,
    PageBlockHeader: PageBlockHeader_,
    PageBlockSubheader: PageBlockSubheader_,
    PageBlockParagraph: PageBlockParagraph_,
    PageBlockPreformatted: PageBlockPreformatted_,
    PageBlockFooter: PageBlockFooter_,
    PageBlockDivider: PageBlockDivider_,
    PageBlockAnchor: PageBlockAnchor_,
    PageBlockList: PageBlockList_,
    PageBlockBlockquote: PageBlockBlockquote_,
    PageBlockPullquote: PageBlockPullquote_,
    PageBlockPhoto: PageBlockPhoto_,
    PageBlockVideo: PageBlockVideo_,
    PageBlockCover: PageBlockCover_,
    PageBlockEmbed: PageBlockEmbed_,
    PageBlockEmbedPost: PageBlockEmbedPost_,
    PageBlockCollage: PageBlockCollage_,
    PageBlockSlideshow: PageBlockSlideshow_,
    PageBlockChannel: PageBlockChannel_,
    PageBlockAudio: PageBlockAudio_,
    PageBlockKicker: PageBlockKicker_,
    PageBlockTable: PageBlockTable_,
    PageBlockOrderedList: PageBlockOrderedList_,
    PageBlockDetails: PageBlockDetails_,
    PageBlockRelatedArticles: PageBlockRelatedArticles_,
    PageBlockMap: PageBlockMap_,
    PhoneCallDiscardReasonMissed: PhoneCallDiscardReasonMissed_,
    PhoneCallDiscardReasonDisconnect: PhoneCallDiscardReasonDisconnect_,
    PhoneCallDiscardReasonHangup: PhoneCallDiscardReasonHangup_,
    PhoneCallDiscardReasonBusy: PhoneCallDiscardReasonBusy_,
    DataJSON: DataJSON_,
    LabeledPrice: LabeledPrice_,
    Invoice: Invoice_,
    PaymentCharge: PaymentCharge_,
    PostAddress: PostAddress_,
    PaymentRequestedInfo: PaymentRequestedInfo_,
    PaymentSavedCredentialsCard: PaymentSavedCredentialsCard_,
    WebDocument: WebDocument_,
    WebDocumentNoProxy: WebDocumentNoProxy_,
    InputWebDocument: InputWebDocument_,
    InputWebFileLocation: InputWebFileLocation_,
    InputWebFileGeoPointLocation: InputWebFileGeoPointLocation_,
    InputWebFileAudioAlbumThumbLocation: InputWebFileAudioAlbumThumbLocation_,
    InputPaymentCredentialsSaved: InputPaymentCredentialsSaved_,
    InputPaymentCredentials: InputPaymentCredentials_,
    InputPaymentCredentialsApplePay: InputPaymentCredentialsApplePay_,
    InputPaymentCredentialsGooglePay: InputPaymentCredentialsGooglePay_,
    ShippingOption: ShippingOption_,
    InputStickerSetItem: InputStickerSetItem_,
    InputPhoneCall: InputPhoneCall_,
    PhoneCallEmpty: PhoneCallEmpty_,
    PhoneCallWaiting: PhoneCallWaiting_,
    PhoneCallRequested: PhoneCallRequested_,
    PhoneCallAccepted: PhoneCallAccepted_,
    PhoneCall: PhoneCall_,
    PhoneCallDiscarded: PhoneCallDiscarded_,
    PhoneConnection: PhoneConnection_,
    PhoneConnectionWebrtc: PhoneConnectionWebrtc_,
    PhoneCallProtocol: PhoneCallProtocol_,
    CdnPublicKey: CdnPublicKey_,
    CdnConfig: CdnConfig_,
    LangPackString: LangPackString_,
    LangPackStringPluralized: LangPackStringPluralized_,
    LangPackStringDeleted: LangPackStringDeleted_,
    LangPackDifference: LangPackDifference_,
    LangPackLanguage: LangPackLanguage_,
    ChannelAdminLogEventActionChangeTitle: ChannelAdminLogEventActionChangeTitle_,
    ChannelAdminLogEventActionChangeAbout: ChannelAdminLogEventActionChangeAbout_,
    ChannelAdminLogEventActionChangeUsername: ChannelAdminLogEventActionChangeUsername_,
    ChannelAdminLogEventActionChangePhoto: ChannelAdminLogEventActionChangePhoto_,
    ChannelAdminLogEventActionToggleInvites: ChannelAdminLogEventActionToggleInvites_,
    ChannelAdminLogEventActionToggleSignatures: ChannelAdminLogEventActionToggleSignatures_,
    ChannelAdminLogEventActionUpdatePinned: ChannelAdminLogEventActionUpdatePinned_,
    ChannelAdminLogEventActionEditMessage: ChannelAdminLogEventActionEditMessage_,
    ChannelAdminLogEventActionDeleteMessage: ChannelAdminLogEventActionDeleteMessage_,
    ChannelAdminLogEventActionParticipantJoin: ChannelAdminLogEventActionParticipantJoin_,
    ChannelAdminLogEventActionParticipantLeave: ChannelAdminLogEventActionParticipantLeave_,
    ChannelAdminLogEventActionParticipantInvite: ChannelAdminLogEventActionParticipantInvite_,
    ChannelAdminLogEventActionParticipantToggleBan: ChannelAdminLogEventActionParticipantToggleBan_,
    ChannelAdminLogEventActionParticipantToggleAdmin: ChannelAdminLogEventActionParticipantToggleAdmin_,
    ChannelAdminLogEventActionChangeStickerSet: ChannelAdminLogEventActionChangeStickerSet_,
    ChannelAdminLogEventActionTogglePreHistoryHidden: ChannelAdminLogEventActionTogglePreHistoryHidden_,
    ChannelAdminLogEventActionDefaultBannedRights: ChannelAdminLogEventActionDefaultBannedRights_,
    ChannelAdminLogEventActionStopPoll: ChannelAdminLogEventActionStopPoll_,
    ChannelAdminLogEventActionChangeLinkedChat: ChannelAdminLogEventActionChangeLinkedChat_,
    ChannelAdminLogEventActionChangeLocation: ChannelAdminLogEventActionChangeLocation_,
    ChannelAdminLogEventActionToggleSlowMode: ChannelAdminLogEventActionToggleSlowMode_,
    ChannelAdminLogEventActionStartGroupCall: ChannelAdminLogEventActionStartGroupCall_,
    ChannelAdminLogEventActionDiscardGroupCall: ChannelAdminLogEventActionDiscardGroupCall_,
    ChannelAdminLogEventActionParticipantMute: ChannelAdminLogEventActionParticipantMute_,
    ChannelAdminLogEventActionParticipantUnmute: ChannelAdminLogEventActionParticipantUnmute_,
    ChannelAdminLogEventActionToggleGroupCallSetting: ChannelAdminLogEventActionToggleGroupCallSetting_,
    ChannelAdminLogEventActionParticipantJoinByInvite: ChannelAdminLogEventActionParticipantJoinByInvite_,
    ChannelAdminLogEventActionExportedInviteDelete: ChannelAdminLogEventActionExportedInviteDelete_,
    ChannelAdminLogEventActionExportedInviteRevoke: ChannelAdminLogEventActionExportedInviteRevoke_,
    ChannelAdminLogEventActionExportedInviteEdit: ChannelAdminLogEventActionExportedInviteEdit_,
    ChannelAdminLogEventActionParticipantVolume: ChannelAdminLogEventActionParticipantVolume_,
    ChannelAdminLogEventActionChangeHistoryTTL: ChannelAdminLogEventActionChangeHistoryTTL_,
    ChannelAdminLogEventActionParticipantJoinByRequest: ChannelAdminLogEventActionParticipantJoinByRequest_,
    ChannelAdminLogEventActionToggleNoForwards: ChannelAdminLogEventActionToggleNoForwards_,
    ChannelAdminLogEventActionSendMessage: ChannelAdminLogEventActionSendMessage_,
    ChannelAdminLogEventActionChangeAvailableReactions: ChannelAdminLogEventActionChangeAvailableReactions_,
    ChannelAdminLogEventActionChangeUsernames: ChannelAdminLogEventActionChangeUsernames_,
    ChannelAdminLogEventActionToggleForum: ChannelAdminLogEventActionToggleForum_,
    ChannelAdminLogEventActionCreateTopic: ChannelAdminLogEventActionCreateTopic_,
    ChannelAdminLogEventActionEditTopic: ChannelAdminLogEventActionEditTopic_,
    ChannelAdminLogEventActionDeleteTopic: ChannelAdminLogEventActionDeleteTopic_,
    ChannelAdminLogEventActionPinTopic: ChannelAdminLogEventActionPinTopic_,
    ChannelAdminLogEventActionToggleAntiSpam: ChannelAdminLogEventActionToggleAntiSpam_,
    ChannelAdminLogEventActionChangePeerColor: ChannelAdminLogEventActionChangePeerColor_,
    ChannelAdminLogEventActionChangeProfilePeerColor: ChannelAdminLogEventActionChangeProfilePeerColor_,
    ChannelAdminLogEventActionChangeWallpaper: ChannelAdminLogEventActionChangeWallpaper_,
    ChannelAdminLogEventActionChangeEmojiStatus: ChannelAdminLogEventActionChangeEmojiStatus_,
    ChannelAdminLogEventActionChangeEmojiStickerSet: ChannelAdminLogEventActionChangeEmojiStickerSet_,
    ChannelAdminLogEvent: ChannelAdminLogEvent_,
    ChannelAdminLogEventsFilter: ChannelAdminLogEventsFilter_,
    PopularContact: PopularContact_,
    RecentMeUrlUnknown: RecentMeUrlUnknown_,
    RecentMeUrlUser: RecentMeUrlUser_,
    RecentMeUrlChat: RecentMeUrlChat_,
    RecentMeUrlChatInvite: RecentMeUrlChatInvite_,
    RecentMeUrlStickerSet: RecentMeUrlStickerSet_,
    InputSingleMedia: InputSingleMedia_,
    WebAuthorization: WebAuthorization_,
    InputMessageID: InputMessageID_,
    InputMessageReplyTo: InputMessageReplyTo_,
    InputMessagePinned: InputMessagePinned_,
    InputMessageCallbackQuery: InputMessageCallbackQuery_,
    InputDialogPeer: InputDialogPeer_,
    InputDialogPeerFolder: InputDialogPeerFolder_,
    DialogPeer: DialogPeer_,
    DialogPeerFolder: DialogPeerFolder_,
    FileHash: FileHash_,
    InputClientProxy: InputClientProxy_,
    InputSecureFileUploaded: InputSecureFileUploaded_,
    InputSecureFile: InputSecureFile_,
    SecureFileEmpty: SecureFileEmpty_,
    SecureFile: SecureFile_,
    SecureData: SecureData_,
    SecurePlainPhone: SecurePlainPhone_,
    SecurePlainEmail: SecurePlainEmail_,
    SecureValueTypePersonalDetails: SecureValueTypePersonalDetails_,
    SecureValueTypePassport: SecureValueTypePassport_,
    SecureValueTypeDriverLicense: SecureValueTypeDriverLicense_,
    SecureValueTypeIdentityCard: SecureValueTypeIdentityCard_,
    SecureValueTypeInternalPassport: SecureValueTypeInternalPassport_,
    SecureValueTypeAddress: SecureValueTypeAddress_,
    SecureValueTypeUtilityBill: SecureValueTypeUtilityBill_,
    SecureValueTypeBankStatement: SecureValueTypeBankStatement_,
    SecureValueTypeRentalAgreement: SecureValueTypeRentalAgreement_,
    SecureValueTypePassportRegistration: SecureValueTypePassportRegistration_,
    SecureValueTypeTemporaryRegistration: SecureValueTypeTemporaryRegistration_,
    SecureValueTypePhone: SecureValueTypePhone_,
    SecureValueTypeEmail: SecureValueTypeEmail_,
    SecureValue: SecureValue_,
    InputSecureValue: InputSecureValue_,
    SecureValueHash: SecureValueHash_,
    SecureValueErrorData: SecureValueErrorData_,
    SecureValueErrorFrontSide: SecureValueErrorFrontSide_,
    SecureValueErrorReverseSide: SecureValueErrorReverseSide_,
    SecureValueErrorSelfie: SecureValueErrorSelfie_,
    SecureValueErrorFile: SecureValueErrorFile_,
    SecureValueErrorFiles: SecureValueErrorFiles_,
    SecureValueError: SecureValueError_,
    SecureValueErrorTranslationFile: SecureValueErrorTranslationFile_,
    SecureValueErrorTranslationFiles: SecureValueErrorTranslationFiles_,
    SecureCredentialsEncrypted: SecureCredentialsEncrypted_,
    SavedPhoneContact: SavedPhoneContact_,
    PasswordKdfAlgoUnknown: PasswordKdfAlgoUnknown_,
    PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow: PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow_,
    SecurePasswordKdfAlgoUnknown: SecurePasswordKdfAlgoUnknown_,
    SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000: SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000_,
    SecurePasswordKdfAlgoSHA512: SecurePasswordKdfAlgoSHA512_,
    SecureSecretSettings: SecureSecretSettings_,
    InputCheckPasswordEmpty: InputCheckPasswordEmpty_,
    InputCheckPasswordSRP: InputCheckPasswordSRP_,
    SecureRequiredType: SecureRequiredType_,
    SecureRequiredTypeOneOf: SecureRequiredTypeOneOf_,
    InputAppEvent: InputAppEvent_,
    JsonObjectValue: JsonObjectValue_,
    JsonNull: JsonNull_,
    JsonBool: JsonBool_,
    JsonNumber: JsonNumber_,
    JsonString: JsonString_,
    JsonArray: JsonArray_,
    JsonObject: JsonObject_,
    PageTableCell: PageTableCell_,
    PageTableRow: PageTableRow_,
    PageCaption: PageCaption_,
    PageListItemText: PageListItemText_,
    PageListItemBlocks: PageListItemBlocks_,
    PageListOrderedItemText: PageListOrderedItemText_,
    PageListOrderedItemBlocks: PageListOrderedItemBlocks_,
    PageRelatedArticle: PageRelatedArticle_,
    Page: Page_,
    PollAnswer: PollAnswer_,
    Poll: Poll_,
    PollAnswerVoters: PollAnswerVoters_,
    PollResults: PollResults_,
    ChatOnlines: ChatOnlines_,
    StatsURL: StatsURL_,
    ChatAdminRights: ChatAdminRights_,
    ChatBannedRights: ChatBannedRights_,
    InputWallPaper: InputWallPaper_,
    InputWallPaperSlug: InputWallPaperSlug_,
    InputWallPaperNoFile: InputWallPaperNoFile_,
    CodeSettings: CodeSettings_,
    WallPaperSettings: WallPaperSettings_,
    AutoDownloadSettings: AutoDownloadSettings_,
    EmojiKeyword: EmojiKeyword_,
    EmojiKeywordDeleted: EmojiKeywordDeleted_,
    EmojiKeywordsDifference: EmojiKeywordsDifference_,
    EmojiURL: EmojiURL_,
    EmojiLanguage: EmojiLanguage_,
    Folder: Folder_,
    InputFolderPeer: InputFolderPeer_,
    FolderPeer: FolderPeer_,
    UrlAuthResultRequest: UrlAuthResultRequest_,
    UrlAuthResultAccepted: UrlAuthResultAccepted_,
    UrlAuthResultDefault: UrlAuthResultDefault_,
    ChannelLocationEmpty: ChannelLocationEmpty_,
    ChannelLocation: ChannelLocation_,
    PeerLocated: PeerLocated_,
    PeerSelfLocated: PeerSelfLocated_,
    RestrictionReason: RestrictionReason_,
    InputTheme: InputTheme_,
    InputThemeSlug: InputThemeSlug_,
    Theme: Theme_,
    BaseThemeClassic: BaseThemeClassic_,
    BaseThemeDay: BaseThemeDay_,
    BaseThemeNight: BaseThemeNight_,
    BaseThemeTinted: BaseThemeTinted_,
    BaseThemeArctic: BaseThemeArctic_,
    InputThemeSettings: InputThemeSettings_,
    ThemeSettings: ThemeSettings_,
    WebPageAttributeTheme: WebPageAttributeTheme_,
    WebPageAttributeStory: WebPageAttributeStory_,
    BankCardOpenUrl: BankCardOpenUrl_,
    DialogFilter: DialogFilter_,
    DialogFilterDefault: DialogFilterDefault_,
    DialogFilterChatlist: DialogFilterChatlist_,
    DialogFilterSuggested: DialogFilterSuggested_,
    StatsDateRangeDays: StatsDateRangeDays_,
    StatsAbsValueAndPrev: StatsAbsValueAndPrev_,
    StatsPercentValue: StatsPercentValue_,
    StatsGraphAsync: StatsGraphAsync_,
    StatsGraphError: StatsGraphError_,
    StatsGraph: StatsGraph_,
    VideoSize: VideoSize_,
    VideoSizeEmojiMarkup: VideoSizeEmojiMarkup_,
    VideoSizeStickerMarkup: VideoSizeStickerMarkup_,
    StatsGroupTopPoster: StatsGroupTopPoster_,
    StatsGroupTopAdmin: StatsGroupTopAdmin_,
    StatsGroupTopInviter: StatsGroupTopInviter_,
    GlobalPrivacySettings: GlobalPrivacySettings_,
    MessageViews: MessageViews_,
    MessageReplyHeader: MessageReplyHeader_,
    MessageReplyStoryHeader: MessageReplyStoryHeader_,
    MessageReplies: MessageReplies_,
    PeerBlocked: PeerBlocked_,
    GroupCallDiscarded: GroupCallDiscarded_,
    GroupCall: GroupCall_,
    InputGroupCall: InputGroupCall_,
    GroupCallParticipant: GroupCallParticipant_,
    InlineQueryPeerTypeSameBotPM: InlineQueryPeerTypeSameBotPM_,
    InlineQueryPeerTypePM: InlineQueryPeerTypePM_,
    InlineQueryPeerTypeChat: InlineQueryPeerTypeChat_,
    InlineQueryPeerTypeMegagroup: InlineQueryPeerTypeMegagroup_,
    InlineQueryPeerTypeBroadcast: InlineQueryPeerTypeBroadcast_,
    InlineQueryPeerTypeBotPM: InlineQueryPeerTypeBotPM_,
    ChatInviteImporter: ChatInviteImporter_,
    ChatAdminWithInvites: ChatAdminWithInvites_,
    GroupCallParticipantVideoSourceGroup: GroupCallParticipantVideoSourceGroup_,
    GroupCallParticipantVideo: GroupCallParticipantVideo_,
    BotCommandScopeDefault: BotCommandScopeDefault_,
    BotCommandScopeUsers: BotCommandScopeUsers_,
    BotCommandScopeChats: BotCommandScopeChats_,
    BotCommandScopeChatAdmins: BotCommandScopeChatAdmins_,
    BotCommandScopePeer: BotCommandScopePeer_,
    BotCommandScopePeerAdmins: BotCommandScopePeerAdmins_,
    BotCommandScopePeerUser: BotCommandScopePeerUser_,
    SponsoredMessage: SponsoredMessage_,
    SearchResultsCalendarPeriod: SearchResultsCalendarPeriod_,
    SearchResultPosition: SearchResultPosition_,
    ReactionCount: ReactionCount_,
    MessageReactions: MessageReactions_,
    AvailableReaction: AvailableReaction_,
    MessagePeerReaction: MessagePeerReaction_,
    GroupCallStreamChannel: GroupCallStreamChannel_,
    AttachMenuBotIconColor: AttachMenuBotIconColor_,
    AttachMenuBotIcon: AttachMenuBotIcon_,
    AttachMenuBot: AttachMenuBot_,
    AttachMenuBotsNotModified: AttachMenuBotsNotModified_,
    AttachMenuBots: AttachMenuBots_,
    AttachMenuBotsBot: AttachMenuBotsBot_,
    WebViewResultUrl: WebViewResultUrl_,
    SimpleWebViewResultUrl: SimpleWebViewResultUrl_,
    WebViewMessageSent: WebViewMessageSent_,
    BotMenuButtonDefault: BotMenuButtonDefault_,
    BotMenuButtonCommands: BotMenuButtonCommands_,
    BotMenuButton: BotMenuButton_,
    NotificationSoundDefault: NotificationSoundDefault_,
    NotificationSoundNone: NotificationSoundNone_,
    NotificationSoundLocal: NotificationSoundLocal_,
    NotificationSoundRingtone: NotificationSoundRingtone_,
    AttachMenuPeerTypeSameBotPM: AttachMenuPeerTypeSameBotPM_,
    AttachMenuPeerTypeBotPM: AttachMenuPeerTypeBotPM_,
    AttachMenuPeerTypePM: AttachMenuPeerTypePM_,
    AttachMenuPeerTypeChat: AttachMenuPeerTypeChat_,
    AttachMenuPeerTypeBroadcast: AttachMenuPeerTypeBroadcast_,
    InputInvoiceMessage: InputInvoiceMessage_,
    InputInvoiceSlug: InputInvoiceSlug_,
    InputInvoicePremiumGiftCode: InputInvoicePremiumGiftCode_,
    InputStorePaymentPremiumSubscription: InputStorePaymentPremiumSubscription_,
    InputStorePaymentGiftPremium: InputStorePaymentGiftPremium_,
    InputStorePaymentPremiumGiftCode: InputStorePaymentPremiumGiftCode_,
    InputStorePaymentPremiumGiveaway: InputStorePaymentPremiumGiveaway_,
    PremiumGiftOption: PremiumGiftOption_,
    PaymentFormMethod: PaymentFormMethod_,
    EmojiStatusEmpty: EmojiStatusEmpty_,
    EmojiStatus: EmojiStatus_,
    EmojiStatusUntil: EmojiStatusUntil_,
    ReactionEmpty: ReactionEmpty_,
    ReactionEmoji: ReactionEmoji_,
    ReactionCustomEmoji: ReactionCustomEmoji_,
    ChatReactionsNone: ChatReactionsNone_,
    ChatReactionsAll: ChatReactionsAll_,
    ChatReactionsSome: ChatReactionsSome_,
    EmailVerifyPurposeLoginSetup: EmailVerifyPurposeLoginSetup_,
    EmailVerifyPurposeLoginChange: EmailVerifyPurposeLoginChange_,
    EmailVerifyPurposePassport: EmailVerifyPurposePassport_,
    EmailVerificationCode: EmailVerificationCode_,
    EmailVerificationGoogle: EmailVerificationGoogle_,
    EmailVerificationApple: EmailVerificationApple_,
    PremiumSubscriptionOption: PremiumSubscriptionOption_,
    SendAsPeer: SendAsPeer_,
    MessageExtendedMediaPreview: MessageExtendedMediaPreview_,
    MessageExtendedMedia: MessageExtendedMedia_,
    StickerKeyword: StickerKeyword_,
    Username: Username_,
    ForumTopicDeleted: ForumTopicDeleted_,
    ForumTopic: ForumTopic_,
    DefaultHistoryTTL: DefaultHistoryTTL_,
    ExportedContactToken: ExportedContactToken_,
    RequestPeerTypeUser: RequestPeerTypeUser_,
    RequestPeerTypeChat: RequestPeerTypeChat_,
    RequestPeerTypeBroadcast: RequestPeerTypeBroadcast_,
    EmojiListNotModified: EmojiListNotModified_,
    EmojiList: EmojiList_,
    EmojiGroup: EmojiGroup_,
    TextWithEntities: TextWithEntities_,
    AutoSaveSettings: AutoSaveSettings_,
    AutoSaveException: AutoSaveException_,
    InputBotAppID: InputBotAppID_,
    InputBotAppShortName: InputBotAppShortName_,
    BotAppNotModified: BotAppNotModified_,
    BotApp: BotApp_,
    AppWebViewResultUrl: AppWebViewResultUrl_,
    InlineBotWebView: InlineBotWebView_,
    ReadParticipantDate: ReadParticipantDate_,
    InputChatlistDialogFilter: InputChatlistDialogFilter_,
    ExportedChatlistInvite: ExportedChatlistInvite_,
    MessagePeerVote: MessagePeerVote_,
    MessagePeerVoteInputOption: MessagePeerVoteInputOption_,
    MessagePeerVoteMultiple: MessagePeerVoteMultiple_,
    SponsoredWebPage: SponsoredWebPage_,
    StoryViews: StoryViews_,
    StoryItemDeleted: StoryItemDeleted_,
    StoryItemSkipped: StoryItemSkipped_,
    StoryItem: StoryItem_,
    StoryView: StoryView_,
    StoryViewPublicForward: StoryViewPublicForward_,
    StoryViewPublicRepost: StoryViewPublicRepost_,
    InputReplyToMessage: InputReplyToMessage_,
    InputReplyToStory: InputReplyToStory_,
    ExportedStoryLink: ExportedStoryLink_,
    StoriesStealthMode: StoriesStealthMode_,
    MediaAreaCoordinates: MediaAreaCoordinates_,
    MediaAreaVenue: MediaAreaVenue_,
    InputMediaAreaVenue: InputMediaAreaVenue_,
    MediaAreaGeoPoint: MediaAreaGeoPoint_,
    MediaAreaSuggestedReaction: MediaAreaSuggestedReaction_,
    MediaAreaChannelPost: MediaAreaChannelPost_,
    InputMediaAreaChannelPost: InputMediaAreaChannelPost_,
    PeerStories: PeerStories_,
    PremiumGiftCodeOption: PremiumGiftCodeOption_,
    PrepaidGiveaway: PrepaidGiveaway_,
    Boost: Boost_,
    MyBoost: MyBoost_,
    StoryFwdHeader: StoryFwdHeader_,
    PostInteractionCountersMessage: PostInteractionCountersMessage_,
    PostInteractionCountersStory: PostInteractionCountersStory_,
    PublicForwardMessage: PublicForwardMessage_,
    PublicForwardStory: PublicForwardStory_,
    PeerColor: PeerColor_,
    StoryReaction: StoryReaction_,
    StoryReactionPublicForward: StoryReactionPublicForward_,
    StoryReactionPublicRepost: StoryReactionPublicRepost_,
    SavedDialog: SavedDialog_,
    SavedReactionTag: SavedReactionTag_,
    OutboxReadDate: OutboxReadDate_,
    SmsJob: SmsJob_,
    BusinessWeeklyOpen: BusinessWeeklyOpen_,
    BusinessWorkHours: BusinessWorkHours_,
    BusinessLocation: BusinessLocation_,
    InputBusinessRecipients: InputBusinessRecipients_,
    BusinessRecipients: BusinessRecipients_,
    BusinessAwayMessageScheduleAlways: BusinessAwayMessageScheduleAlways_,
    BusinessAwayMessageScheduleOutsideWorkHours: BusinessAwayMessageScheduleOutsideWorkHours_,
    BusinessAwayMessageScheduleCustom: BusinessAwayMessageScheduleCustom_,
    InputBusinessGreetingMessage: InputBusinessGreetingMessage_,
    BusinessGreetingMessage: BusinessGreetingMessage_,
    InputBusinessAwayMessage: InputBusinessAwayMessage_,
    BusinessAwayMessage: BusinessAwayMessage_,
    Timezone: Timezone_,
    QuickReply: QuickReply_,
    InputQuickReplyShortcut: InputQuickReplyShortcut_,
    InputQuickReplyShortcutId: InputQuickReplyShortcutId_,
    ConnectedBot: ConnectedBot_,
    storage: {
        FileUnknown: storage_FileUnknown_,
        FilePartial: storage_FilePartial_,
        FileJpeg: storage_FileJpeg_,
        FileGif: storage_FileGif_,
        FilePng: storage_FilePng_,
        FilePdf: storage_FilePdf_,
        FileMp3: storage_FileMp3_,
        FileMov: storage_FileMov_,
        FileMp4: storage_FileMp4_,
        FileWebp: storage_FileWebp_,
    },
    auth: {
        SentCode: auth_SentCode_,
        SentCodeSuccess: auth_SentCodeSuccess_,
        Authorization: auth_Authorization_,
        AuthorizationSignUpRequired: auth_AuthorizationSignUpRequired_,
        ExportedAuthorization: auth_ExportedAuthorization_,
        PasswordRecovery: auth_PasswordRecovery_,
        CodeTypeSms: auth_CodeTypeSms_,
        CodeTypeCall: auth_CodeTypeCall_,
        CodeTypeFlashCall: auth_CodeTypeFlashCall_,
        CodeTypeMissedCall: auth_CodeTypeMissedCall_,
        CodeTypeFragmentSms: auth_CodeTypeFragmentSms_,
        SentCodeTypeApp: auth_SentCodeTypeApp_,
        SentCodeTypeSms: auth_SentCodeTypeSms_,
        SentCodeTypeCall: auth_SentCodeTypeCall_,
        SentCodeTypeFlashCall: auth_SentCodeTypeFlashCall_,
        SentCodeTypeMissedCall: auth_SentCodeTypeMissedCall_,
        SentCodeTypeEmailCode: auth_SentCodeTypeEmailCode_,
        SentCodeTypeSetUpEmailRequired: auth_SentCodeTypeSetUpEmailRequired_,
        SentCodeTypeFragmentSms: auth_SentCodeTypeFragmentSms_,
        SentCodeTypeFirebaseSms: auth_SentCodeTypeFirebaseSms_,
        LoginToken: auth_LoginToken_,
        LoginTokenMigrateTo: auth_LoginTokenMigrateTo_,
        LoginTokenSuccess: auth_LoginTokenSuccess_,
        LoggedOut: auth_LoggedOut_,
    },
    contacts: {
        ContactsNotModified: contacts_ContactsNotModified_,
        Contacts: contacts_Contacts_,
        ImportedContacts: contacts_ImportedContacts_,
        Blocked: contacts_Blocked_,
        BlockedSlice: contacts_BlockedSlice_,
        Found: contacts_Found_,
        ResolvedPeer: contacts_ResolvedPeer_,
        TopPeersNotModified: contacts_TopPeersNotModified_,
        TopPeers: contacts_TopPeers_,
        TopPeersDisabled: contacts_TopPeersDisabled_,
    },
    messages: {
        Dialogs: messages_Dialogs_,
        DialogsSlice: messages_DialogsSlice_,
        DialogsNotModified: messages_DialogsNotModified_,
        Messages: messages_Messages_,
        MessagesSlice: messages_MessagesSlice_,
        ChannelMessages: messages_ChannelMessages_,
        MessagesNotModified: messages_MessagesNotModified_,
        Chats: messages_Chats_,
        ChatsSlice: messages_ChatsSlice_,
        ChatFull: messages_ChatFull_,
        AffectedHistory: messages_AffectedHistory_,
        DhConfigNotModified: messages_DhConfigNotModified_,
        DhConfig: messages_DhConfig_,
        SentEncryptedMessage: messages_SentEncryptedMessage_,
        SentEncryptedFile: messages_SentEncryptedFile_,
        StickersNotModified: messages_StickersNotModified_,
        Stickers: messages_Stickers_,
        AllStickersNotModified: messages_AllStickersNotModified_,
        AllStickers: messages_AllStickers_,
        AffectedMessages: messages_AffectedMessages_,
        StickerSet: messages_StickerSet_,
        StickerSetNotModified: messages_StickerSetNotModified_,
        SavedGifsNotModified: messages_SavedGifsNotModified_,
        SavedGifs: messages_SavedGifs_,
        BotResults: messages_BotResults_,
        BotCallbackAnswer: messages_BotCallbackAnswer_,
        MessageEditData: messages_MessageEditData_,
        PeerDialogs: messages_PeerDialogs_,
        FeaturedStickersNotModified: messages_FeaturedStickersNotModified_,
        FeaturedStickers: messages_FeaturedStickers_,
        RecentStickersNotModified: messages_RecentStickersNotModified_,
        RecentStickers: messages_RecentStickers_,
        ArchivedStickers: messages_ArchivedStickers_,
        StickerSetInstallResultSuccess: messages_StickerSetInstallResultSuccess_,
        StickerSetInstallResultArchive: messages_StickerSetInstallResultArchive_,
        HighScores: messages_HighScores_,
        FavedStickersNotModified: messages_FavedStickersNotModified_,
        FavedStickers: messages_FavedStickers_,
        FoundStickerSetsNotModified: messages_FoundStickerSetsNotModified_,
        FoundStickerSets: messages_FoundStickerSets_,
        SearchCounter: messages_SearchCounter_,
        InactiveChats: messages_InactiveChats_,
        VotesList: messages_VotesList_,
        MessageViews: messages_MessageViews_,
        DiscussionMessage: messages_DiscussionMessage_,
        HistoryImport: messages_HistoryImport_,
        HistoryImportParsed: messages_HistoryImportParsed_,
        AffectedFoundMessages: messages_AffectedFoundMessages_,
        ExportedChatInvites: messages_ExportedChatInvites_,
        ExportedChatInvite: messages_ExportedChatInvite_,
        ExportedChatInviteReplaced: messages_ExportedChatInviteReplaced_,
        ChatInviteImporters: messages_ChatInviteImporters_,
        ChatAdminsWithInvites: messages_ChatAdminsWithInvites_,
        CheckedHistoryImportPeer: messages_CheckedHistoryImportPeer_,
        SponsoredMessages: messages_SponsoredMessages_,
        SponsoredMessagesEmpty: messages_SponsoredMessagesEmpty_,
        SearchResultsCalendar: messages_SearchResultsCalendar_,
        SearchResultsPositions: messages_SearchResultsPositions_,
        PeerSettings: messages_PeerSettings_,
        MessageReactionsList: messages_MessageReactionsList_,
        AvailableReactionsNotModified: messages_AvailableReactionsNotModified_,
        AvailableReactions: messages_AvailableReactions_,
        TranscribedAudio: messages_TranscribedAudio_,
        ReactionsNotModified: messages_ReactionsNotModified_,
        Reactions: messages_Reactions_,
        ForumTopics: messages_ForumTopics_,
        EmojiGroupsNotModified: messages_EmojiGroupsNotModified_,
        EmojiGroups: messages_EmojiGroups_,
        TranslateResult: messages_TranslateResult_,
        BotApp: messages_BotApp_,
        WebPage: messages_WebPage_,
        SavedDialogs: messages_SavedDialogs_,
        SavedDialogsSlice: messages_SavedDialogsSlice_,
        SavedDialogsNotModified: messages_SavedDialogsNotModified_,
        SavedReactionTagsNotModified: messages_SavedReactionTagsNotModified_,
        SavedReactionTags: messages_SavedReactionTags_,
        QuickReplies: messages_QuickReplies_,
        QuickRepliesNotModified: messages_QuickRepliesNotModified_,
        DialogFilters: messages_DialogFilters_,
    },
    updates: {
        State: updates_State_,
        DifferenceEmpty: updates_DifferenceEmpty_,
        Difference: updates_Difference_,
        DifferenceSlice: updates_DifferenceSlice_,
        DifferenceTooLong: updates_DifferenceTooLong_,
        ChannelDifferenceEmpty: updates_ChannelDifferenceEmpty_,
        ChannelDifferenceTooLong: updates_ChannelDifferenceTooLong_,
        ChannelDifference: updates_ChannelDifference_,
    },
    photos: {
        Photos: photos_Photos_,
        PhotosSlice: photos_PhotosSlice_,
        Photo: photos_Photo_,
    },
    upload: {
        File: upload_File_,
        FileCdnRedirect: upload_FileCdnRedirect_,
        WebFile: upload_WebFile_,
        CdnFileReuploadNeeded: upload_CdnFileReuploadNeeded_,
        CdnFile: upload_CdnFile_,
    },
    help: {
        AppUpdate: help_AppUpdate_,
        NoAppUpdate: help_NoAppUpdate_,
        InviteText: help_InviteText_,
        Support: help_Support_,
        TermsOfService: help_TermsOfService_,
        RecentMeUrls: help_RecentMeUrls_,
        TermsOfServiceUpdateEmpty: help_TermsOfServiceUpdateEmpty_,
        TermsOfServiceUpdate: help_TermsOfServiceUpdate_,
        DeepLinkInfoEmpty: help_DeepLinkInfoEmpty_,
        DeepLinkInfo: help_DeepLinkInfo_,
        PassportConfigNotModified: help_PassportConfigNotModified_,
        PassportConfig: help_PassportConfig_,
        SupportName: help_SupportName_,
        UserInfoEmpty: help_UserInfoEmpty_,
        UserInfo: help_UserInfo_,
        PromoDataEmpty: help_PromoDataEmpty_,
        PromoData: help_PromoData_,
        CountryCode: help_CountryCode_,
        Country: help_Country_,
        CountriesListNotModified: help_CountriesListNotModified_,
        CountriesList: help_CountriesList_,
        PremiumPromo: help_PremiumPromo_,
        AppConfigNotModified: help_AppConfigNotModified_,
        AppConfig: help_AppConfig_,
        PeerColorSet: help_PeerColorSet_,
        PeerColorProfileSet: help_PeerColorProfileSet_,
        PeerColorOption: help_PeerColorOption_,
        PeerColorsNotModified: help_PeerColorsNotModified_,
        PeerColors: help_PeerColors_,
        TimezonesListNotModified: help_TimezonesListNotModified_,
        TimezonesList: help_TimezonesList_,
    },
    account: {
        PrivacyRules: account_PrivacyRules_,
        Authorizations: account_Authorizations_,
        Password: account_Password_,
        PasswordSettings: account_PasswordSettings_,
        PasswordInputSettings: account_PasswordInputSettings_,
        TmpPassword: account_TmpPassword_,
        WebAuthorizations: account_WebAuthorizations_,
        AuthorizationForm: account_AuthorizationForm_,
        SentEmailCode: account_SentEmailCode_,
        Takeout: account_Takeout_,
        WallPapersNotModified: account_WallPapersNotModified_,
        WallPapers: account_WallPapers_,
        AutoDownloadSettings: account_AutoDownloadSettings_,
        ThemesNotModified: account_ThemesNotModified_,
        Themes: account_Themes_,
        ContentSettings: account_ContentSettings_,
        ResetPasswordFailedWait: account_ResetPasswordFailedWait_,
        ResetPasswordRequestedWait: account_ResetPasswordRequestedWait_,
        ResetPasswordOk: account_ResetPasswordOk_,
        SavedRingtonesNotModified: account_SavedRingtonesNotModified_,
        SavedRingtones: account_SavedRingtones_,
        SavedRingtone: account_SavedRingtone_,
        SavedRingtoneConverted: account_SavedRingtoneConverted_,
        EmojiStatusesNotModified: account_EmojiStatusesNotModified_,
        EmojiStatuses: account_EmojiStatuses_,
        EmailVerified: account_EmailVerified_,
        EmailVerifiedLogin: account_EmailVerifiedLogin_,
        AutoSaveSettings: account_AutoSaveSettings_,
        ConnectedBots: account_ConnectedBots_,
    },
    channels: {
        ChannelParticipants: channels_ChannelParticipants_,
        ChannelParticipantsNotModified: channels_ChannelParticipantsNotModified_,
        ChannelParticipant: channels_ChannelParticipant_,
        AdminLogResults: channels_AdminLogResults_,
        SendAsPeers: channels_SendAsPeers_,
    },
    payments: {
        PaymentForm: payments_PaymentForm_,
        ValidatedRequestedInfo: payments_ValidatedRequestedInfo_,
        PaymentResult: payments_PaymentResult_,
        PaymentVerificationNeeded: payments_PaymentVerificationNeeded_,
        PaymentReceipt: payments_PaymentReceipt_,
        SavedInfo: payments_SavedInfo_,
        BankCardData: payments_BankCardData_,
        ExportedInvoice: payments_ExportedInvoice_,
        CheckedGiftCode: payments_CheckedGiftCode_,
        GiveawayInfo: payments_GiveawayInfo_,
        GiveawayInfoResults: payments_GiveawayInfoResults_,
    },
    phone: {
        PhoneCall: phone_PhoneCall_,
        GroupCall: phone_GroupCall_,
        GroupParticipants: phone_GroupParticipants_,
        JoinAsPeers: phone_JoinAsPeers_,
        ExportedGroupCallInvite: phone_ExportedGroupCallInvite_,
        GroupCallStreamChannels: phone_GroupCallStreamChannels_,
        GroupCallStreamRtmpUrl: phone_GroupCallStreamRtmpUrl_,
    },
    stats: {
        BroadcastStats: stats_BroadcastStats_,
        MegagroupStats: stats_MegagroupStats_,
        MessageStats: stats_MessageStats_,
        StoryStats: stats_StoryStats_,
        PublicForwards: stats_PublicForwards_,
    },
    stickers: {
        SuggestedShortName: stickers_SuggestedShortName_,
    },
    users: {
        UserFull: users_UserFull_,
    },
    chatlists: {
        ExportedChatlistInvite: chatlists_ExportedChatlistInvite_,
        ExportedInvites: chatlists_ExportedInvites_,
        ChatlistInviteAlready: chatlists_ChatlistInviteAlready_,
        ChatlistInvite: chatlists_ChatlistInvite_,
        ChatlistUpdates: chatlists_ChatlistUpdates_,
    },
    bots: {
        BotInfo: bots_BotInfo_,
    },
    stories: {
        AllStoriesNotModified: stories_AllStoriesNotModified_,
        AllStories: stories_AllStories_,
        Stories: stories_Stories_,
        StoryViewsList: stories_StoryViewsList_,
        StoryViews: stories_StoryViews_,
        PeerStories: stories_PeerStories_,
        StoryReactionsList: stories_StoryReactionsList_,
    },
    premium: {
        BoostsList: premium_BoostsList_,
        MyBoosts: premium_MyBoosts_,
        BoostsStatus: premium_BoostsStatus_,
    },
    smsjobs: {
        EligibleToJoin: smsjobs_EligibleToJoin_,
        Status: smsjobs_Status_,
    },
};
export const map = new Map([
    [0x05162463, ResPQ_],
    [0xA9F55F95, P_q_inner_data_dc_],
    [0x56FDDF88, P_q_inner_data_temp_dc_],
    [0xD0E8075C, Server_DH_params_ok_],
    [0xB5890DBA, Server_DH_inner_data_],
    [0x6643B654, Client_DH_inner_data_],
    [0x3BCBF734, Dh_gen_ok_],
    [0x46DC1FB9, Dh_gen_retry_],
    [0xA69DAE02, Dh_gen_fail_],
    [0x75A3F765, Bind_auth_key_inner_],
    [0x2144CA19, Rpc_error_],
    [0x5E2AD36E, Rpc_answer_unknown_],
    [0xCD78E586, Rpc_answer_dropped_running_],
    [0xA43AD8B7, Rpc_answer_dropped_],
    [0x0949D9DC, Future_salt_],
    [0xAE500895, Future_salts_],
    [0x347773C5, Pong_],
    [0xE22045FC, Destroy_session_ok_],
    [0x62D350C9, Destroy_session_none_],
    [0x9EC20908, New_session_created_],
    [0x3072CFA1, Gzip_packed_],
    [0x62D6B459, Msgs_ack_],
    [0xA7EFF811, Bad_msg_notification_],
    [0xEDAB447B, Bad_server_salt_],
    [0x7D861A08, Msg_resend_req_],
    [0xDA69FB52, Msgs_state_req_],
    [0x04DEB57D, Msgs_state_info_],
    [0x8CC0D131, Msgs_all_info_],
    [0x276D3EC6, Msg_detailed_info_],
    [0x809DB6DF, Msg_new_detailed_info_],
    [0xF660E1D4, Destroy_auth_key_ok_],
    [0x0A9F2259, Destroy_auth_key_none_],
    [0xEA109B13, Destroy_auth_key_fail_],
    [0x9299359F, Http_wait_],
    [0x3FEDD339, True_],
    [0xC4B9F9BB, Error_],
    [0x56730BCC, Null_],
    [0x7F3B18EA, InputPeerEmpty_],
    [0x7DA07EC9, InputPeerSelf_],
    [0x35A95CB9, InputPeerChat_],
    [0xDDE8A54C, InputPeerUser_],
    [0x27BCBBFC, InputPeerChannel_],
    [0xA87B0A1C, InputPeerUserFromMessage_],
    [0xBD2A0840, InputPeerChannelFromMessage_],
    [0xB98886CF, InputUserEmpty_],
    [0xF7C1B13F, InputUserSelf_],
    [0xF21158C6, InputUser_],
    [0x1DA448E2, InputUserFromMessage_],
    [0xF392B7F4, InputPhoneContact_],
    [0xF52FF27F, InputFile_],
    [0xFA4F0BB5, InputFileBig_],
    [0x9664F57F, InputMediaEmpty_],
    [0x1E287D04, InputMediaUploadedPhoto_],
    [0xB3BA0635, InputMediaPhoto_],
    [0xF9C44144, InputMediaGeoPoint_],
    [0xF8AB7DFB, InputMediaContact_],
    [0x5B38C6C1, InputMediaUploadedDocument_],
    [0x33473058, InputMediaDocument_],
    [0xC13D1C11, InputMediaVenue_],
    [0xE5BBFE1A, InputMediaPhotoExternal_],
    [0xFB52DC99, InputMediaDocumentExternal_],
    [0xD33F43F3, InputMediaGame_],
    [0x8EB5A6D5, InputMediaInvoice_],
    [0x971FA843, InputMediaGeoLive_],
    [0x0F94E5F1, InputMediaPoll_],
    [0xE66FBF7B, InputMediaDice_],
    [0x89FDD778, InputMediaStory_],
    [0xC21B8849, InputMediaWebPage_],
    [0x1CA48F57, InputChatPhotoEmpty_],
    [0xBDCDAEC0, InputChatUploadedPhoto_],
    [0x8953AD37, InputChatPhoto_],
    [0xE4C123D6, InputGeoPointEmpty_],
    [0x48222FAF, InputGeoPoint_],
    [0x1CD7BF0D, InputPhotoEmpty_],
    [0x3BB3B94A, InputPhoto_],
    [0xDFDAABE1, InputFileLocation_],
    [0xF5235D55, InputEncryptedFileLocation_],
    [0xBAD07584, InputDocumentFileLocation_],
    [0xCBC7EE28, InputSecureFileLocation_],
    [0x29BE5899, InputTakeoutFileLocation_],
    [0x40181FFE, InputPhotoFileLocation_],
    [0xD83466F3, InputPhotoLegacyFileLocation_],
    [0x37257E99, InputPeerPhotoFileLocation_],
    [0x9D84F3DB, InputStickerSetThumb_],
    [0x0598A92A, InputGroupCallStream_],
    [0x59511722, PeerUser_],
    [0x36C6019A, PeerChat_],
    [0xA2A5371E, PeerChannel_],
    [0xAA963B05, storage_FileUnknown_],
    [0x40BC6F52, storage_FilePartial_],
    [0x007EFE0E, storage_FileJpeg_],
    [0xCAE1AADF, storage_FileGif_],
    [0x0A4F63C0, storage_FilePng_],
    [0xAE1E508D, storage_FilePdf_],
    [0x528A0677, storage_FileMp3_],
    [0x4B09EBBC, storage_FileMov_],
    [0xB3CEA0E4, storage_FileMp4_],
    [0x1081464C, storage_FileWebp_],
    [0xD3BC4B7A, UserEmpty_],
    [0x215C4438, User_],
    [0x4F11BAE1, UserProfilePhotoEmpty_],
    [0x82D1F706, UserProfilePhoto_],
    [0x09D05049, UserStatusEmpty_],
    [0xEDB93949, UserStatusOnline_],
    [0x008C703F, UserStatusOffline_],
    [0x7B197DC8, UserStatusRecently_],
    [0x541A1D1A, UserStatusLastWeek_],
    [0x65899777, UserStatusLastMonth_],
    [0x29562865, ChatEmpty_],
    [0x41CBF256, Chat_],
    [0x6592A1A7, ChatForbidden_],
    [0x0AADFC8F, Channel_],
    [0x17D493D5, ChannelForbidden_],
    [0xC9D31138, ChatFull_],
    [0x44C054A7, ChannelFull_],
    [0xC02D4007, ChatParticipant_],
    [0xE46BCEE4, ChatParticipantCreator_],
    [0xA0933F5B, ChatParticipantAdmin_],
    [0x8763D3E1, ChatParticipantsForbidden_],
    [0x3CBC93F8, ChatParticipants_],
    [0x37C1011C, ChatPhotoEmpty_],
    [0x1C6E1C11, ChatPhoto_],
    [0x90A6CA84, MessageEmpty_],
    [0xA66C7EFC, Message_],
    [0x2B085862, MessageService_],
    [0x3DED6320, MessageMediaEmpty_],
    [0x695150D7, MessageMediaPhoto_],
    [0x56E0D474, MessageMediaGeo_],
    [0x70322949, MessageMediaContact_],
    [0x9F84F49E, MessageMediaUnsupported_],
    [0x4CF4D72D, MessageMediaDocument_],
    [0xDDF10C3B, MessageMediaWebPage_],
    [0x2EC0533F, MessageMediaVenue_],
    [0xFDB19008, MessageMediaGame_],
    [0xF6A548D3, MessageMediaInvoice_],
    [0xB940C666, MessageMediaGeoLive_],
    [0x4BD6E798, MessageMediaPoll_],
    [0x3F7EE58B, MessageMediaDice_],
    [0x68CB6283, MessageMediaStory_],
    [0xDAAD85B0, MessageMediaGiveaway_],
    [0xC6991068, MessageMediaGiveawayResults_],
    [0xB6AEF7B0, MessageActionEmpty_],
    [0xBD47CBAD, MessageActionChatCreate_],
    [0xB5A1CE5A, MessageActionChatEditTitle_],
    [0x7FCB13A8, MessageActionChatEditPhoto_],
    [0x95E3FBEF, MessageActionChatDeletePhoto_],
    [0x15CEFD00, MessageActionChatAddUser_],
    [0xA43F30CC, MessageActionChatDeleteUser_],
    [0x031224C3, MessageActionChatJoinedByLink_],
    [0x95D2AC92, MessageActionChannelCreate_],
    [0xE1037F92, MessageActionChatMigrateTo_],
    [0xEA3948E9, MessageActionChannelMigrateFrom_],
    [0x94BD38ED, MessageActionPinMessage_],
    [0x9FBAB604, MessageActionHistoryClear_],
    [0x92A72876, MessageActionGameScore_],
    [0x8F31B327, MessageActionPaymentSentMe_],
    [0x96163F56, MessageActionPaymentSent_],
    [0x80E11A7F, MessageActionPhoneCall_],
    [0x4792929B, MessageActionScreenshotTaken_],
    [0xFAE69F56, MessageActionCustomAction_],
    [0xC516D679, MessageActionBotAllowed_],
    [0x1B287353, MessageActionSecureValuesSentMe_],
    [0xD95C6154, MessageActionSecureValuesSent_],
    [0xF3F25F76, MessageActionContactSignUp_],
    [0x98E0D697, MessageActionGeoProximityReached_],
    [0x7A0D7F42, MessageActionGroupCall_],
    [0x502F92F7, MessageActionInviteToGroupCall_],
    [0x3C134D7B, MessageActionSetMessagesTTL_],
    [0xB3A07661, MessageActionGroupCallScheduled_],
    [0xAA786345, MessageActionSetChatTheme_],
    [0xEBBCA3CB, MessageActionChatJoinedByRequest_],
    [0x47DD8079, MessageActionWebViewDataSentMe_],
    [0xB4C38CB5, MessageActionWebViewDataSent_],
    [0xC83D6AEC, MessageActionGiftPremium_],
    [0x0D999256, MessageActionTopicCreate_],
    [0xC0944820, MessageActionTopicEdit_],
    [0x57DE635E, MessageActionSuggestProfilePhoto_],
    [0x31518E9B, MessageActionRequestedPeer_],
    [0x5060A3F4, MessageActionSetChatWallPaper_],
    [0x678C2E09, MessageActionGiftCode_],
    [0x332BA9ED, MessageActionGiveawayLaunch_],
    [0x2A9FADC5, MessageActionGiveawayResults_],
    [0xCC02AA6D, MessageActionBoostApply_],
    [0xD58A08C6, Dialog_],
    [0x71BD134C, DialogFolder_],
    [0x2331B22D, PhotoEmpty_],
    [0xFB197A65, Photo_],
    [0x0E17E23C, PhotoSizeEmpty_],
    [0x75C78E60, PhotoSize_],
    [0x021E1AD6, PhotoCachedSize_],
    [0xE0B0BC2E, PhotoStrippedSize_],
    [0xFA3EFB95, PhotoSizeProgressive_],
    [0xD8214D41, PhotoPathSize_],
    [0x1117DD5F, GeoPointEmpty_],
    [0xB2A2F663, GeoPoint_],
    [0x5E002502, auth_SentCode_],
    [0x2390FE44, auth_SentCodeSuccess_],
    [0x2EA2C0D4, auth_Authorization_],
    [0x44747E9A, auth_AuthorizationSignUpRequired_],
    [0xB434E2B8, auth_ExportedAuthorization_],
    [0xB8BC5B0C, InputNotifyPeer_],
    [0x193B4417, InputNotifyUsers_],
    [0x4A95E84E, InputNotifyChats_],
    [0xB1DB7C7E, InputNotifyBroadcasts_],
    [0x5C467992, InputNotifyForumTopic_],
    [0xCACB6AE2, InputPeerNotifySettings_],
    [0x99622C0C, PeerNotifySettings_],
    [0xA518110D, PeerSettings_],
    [0xA437C3ED, WallPaper_],
    [0xE0804116, WallPaperNoFile_],
    [0x58DBCAB8, InputReportReasonSpam_],
    [0x1E22C78D, InputReportReasonViolence_],
    [0x2E59D922, InputReportReasonPornography_],
    [0xADF44EE3, InputReportReasonChildAbuse_],
    [0xC1E4A2B1, InputReportReasonOther_],
    [0x9B89F93A, InputReportReasonCopyright_],
    [0xDBD4FEED, InputReportReasonGeoIrrelevant_],
    [0xF5DDD6E7, InputReportReasonFake_],
    [0x0A8EB2BE, InputReportReasonIllegalDrugs_],
    [0x9EC7863D, InputReportReasonPersonalDetails_],
    [0x22FF3E85, UserFull_],
    [0x145ADE0B, Contact_],
    [0xC13E3C50, ImportedContact_],
    [0x16D9703B, ContactStatus_],
    [0xB74BA9D2, contacts_ContactsNotModified_],
    [0xEAE87E42, contacts_Contacts_],
    [0x77D01C3B, contacts_ImportedContacts_],
    [0x0ADE1591, contacts_Blocked_],
    [0xE1664194, contacts_BlockedSlice_],
    [0x15BA6C40, messages_Dialogs_],
    [0x71E094F3, messages_DialogsSlice_],
    [0xF0E3E596, messages_DialogsNotModified_],
    [0x8C718E87, messages_Messages_],
    [0x3A54685E, messages_MessagesSlice_],
    [0xC776BA4E, messages_ChannelMessages_],
    [0x74535F21, messages_MessagesNotModified_],
    [0x64FF9FD5, messages_Chats_],
    [0x9CD81144, messages_ChatsSlice_],
    [0xE5D7D19C, messages_ChatFull_],
    [0xB45C69D1, messages_AffectedHistory_],
    [0x57E2F66C, InputMessagesFilterEmpty_],
    [0x9609A51C, InputMessagesFilterPhotos_],
    [0x9FC00E65, InputMessagesFilterVideo_],
    [0x56E9F0E4, InputMessagesFilterPhotoVideo_],
    [0x9EDDF188, InputMessagesFilterDocument_],
    [0x7EF0DD87, InputMessagesFilterUrl_],
    [0xFFC86587, InputMessagesFilterGif_],
    [0x50F5C392, InputMessagesFilterVoice_],
    [0x3751B49E, InputMessagesFilterMusic_],
    [0x3A20ECB8, InputMessagesFilterChatPhotos_],
    [0x80C99768, InputMessagesFilterPhoneCalls_],
    [0x7A7C17A4, InputMessagesFilterRoundVoice_],
    [0xB549DA53, InputMessagesFilterRoundVideo_],
    [0xC1F8E69A, InputMessagesFilterMyMentions_],
    [0xE7026D0D, InputMessagesFilterGeo_],
    [0xE062DB83, InputMessagesFilterContacts_],
    [0x1BB00451, InputMessagesFilterPinned_],
    [0x1F2B0AFD, UpdateNewMessage_],
    [0x4E90BFD6, UpdateMessageID_],
    [0xA20DB0E5, UpdateDeleteMessages_],
    [0xC01E857F, UpdateUserTyping_],
    [0x83487AF0, UpdateChatUserTyping_],
    [0x07761198, UpdateChatParticipants_],
    [0xE5BDF8DE, UpdateUserStatus_],
    [0xA7848924, UpdateUserName_],
    [0x8951ABEF, UpdateNewAuthorization_],
    [0x12BCBD9A, UpdateNewEncryptedMessage_],
    [0x1710F156, UpdateEncryptedChatTyping_],
    [0xB4A2E88D, UpdateEncryption_],
    [0x38FE25B7, UpdateEncryptedMessagesRead_],
    [0x3DDA5451, UpdateChatParticipantAdd_],
    [0xE32F3D77, UpdateChatParticipantDelete_],
    [0x8E5E9873, UpdateDcOptions_],
    [0xBEC268EF, UpdateNotifySettings_],
    [0xEBE46819, UpdateServiceNotification_],
    [0xEE3B272A, UpdatePrivacy_],
    [0x05492A13, UpdateUserPhone_],
    [0x9C974FDF, UpdateReadHistoryInbox_],
    [0x2F2F21BF, UpdateReadHistoryOutbox_],
    [0x7F891213, UpdateWebPage_],
    [0xF8227181, UpdateReadMessagesContents_],
    [0x108D941F, UpdateChannelTooLong_],
    [0x635B4C09, UpdateChannel_],
    [0x62BA04D9, UpdateNewChannelMessage_],
    [0x922E6E10, UpdateReadChannelInbox_],
    [0xC32D5B12, UpdateDeleteChannelMessages_],
    [0xF226AC08, UpdateChannelMessageViews_],
    [0xD7CA61A2, UpdateChatParticipantAdmin_],
    [0x688A30AA, UpdateNewStickerSet_],
    [0x0BB2D201, UpdateStickerSetsOrder_],
    [0x31C24808, UpdateStickerSets_],
    [0x9375341E, UpdateSavedGifs_],
    [0x496F379C, UpdateBotInlineQuery_],
    [0x12F12A07, UpdateBotInlineSend_],
    [0x1B3F4DF7, UpdateEditChannelMessage_],
    [0xB9CFC48D, UpdateBotCallbackQuery_],
    [0xE40370A3, UpdateEditMessage_],
    [0x691E9052, UpdateInlineBotCallbackQuery_],
    [0xB75F99A9, UpdateReadChannelOutbox_],
    [0x1B49EC6D, UpdateDraftMessage_],
    [0x571D2742, UpdateReadFeaturedStickers_],
    [0x9A422C20, UpdateRecentStickers_],
    [0xA229DD06, UpdateConfig_],
    [0x3354678F, UpdatePtsChanged_],
    [0x2F2BA99F, UpdateChannelWebPage_],
    [0x6E6FE51C, UpdateDialogPinned_],
    [0xFA0F3CA2, UpdatePinnedDialogs_],
    [0x8317C0C3, UpdateBotWebhookJSON_],
    [0x9B9240A6, UpdateBotWebhookJSONQuery_],
    [0xB5AEFD7D, UpdateBotShippingQuery_],
    [0x8CAA9A96, UpdateBotPrecheckoutQuery_],
    [0xAB0F6B1E, UpdatePhoneCall_],
    [0x46560264, UpdateLangPackTooLong_],
    [0x56022F4D, UpdateLangPack_],
    [0xE511996D, UpdateFavedStickers_],
    [0xEA29055D, UpdateChannelReadMessagesContents_],
    [0x7084A7BE, UpdateContactsReset_],
    [0xB23FC698, UpdateChannelAvailableMessages_],
    [0xE16459C3, UpdateDialogUnreadMark_],
    [0xACA1657B, UpdateMessagePoll_],
    [0x54C01850, UpdateChatDefaultBannedRights_],
    [0x19360DC0, UpdateFolderPeers_],
    [0x6A7E7366, UpdatePeerSettings_],
    [0xB4AFCFB0, UpdatePeerLocated_],
    [0x39A51DFB, UpdateNewScheduledMessage_],
    [0x90866CEE, UpdateDeleteScheduledMessages_],
    [0x8216FBA3, UpdateTheme_],
    [0x871FB939, UpdateGeoLiveViewed_],
    [0x564FE691, UpdateLoginToken_],
    [0x24F40E77, UpdateMessagePollVote_],
    [0x26FFDE7D, UpdateDialogFilter_],
    [0xA5D72105, UpdateDialogFilterOrder_],
    [0x3504914F, UpdateDialogFilters_],
    [0x2661BF09, UpdatePhoneCallSignalingData_],
    [0xD29A27F4, UpdateChannelMessageForwards_],
    [0xD6B19546, UpdateReadChannelDiscussionInbox_],
    [0x695C9E7C, UpdateReadChannelDiscussionOutbox_],
    [0xEBE07752, UpdatePeerBlocked_],
    [0x8C88C923, UpdateChannelUserTyping_],
    [0xED85EAB5, UpdatePinnedMessages_],
    [0x5BB98608, UpdatePinnedChannelMessages_],
    [0xF89A6A4E, UpdateChat_],
    [0xF2EBDB4E, UpdateGroupCallParticipants_],
    [0x14B24500, UpdateGroupCall_],
    [0xBB9BB9A5, UpdatePeerHistoryTTL_],
    [0xD087663A, UpdateChatParticipant_],
    [0x985D3ABB, UpdateChannelParticipant_],
    [0xC4870A49, UpdateBotStopped_],
    [0x0B783982, UpdateGroupCallConnection_],
    [0x4D712F2E, UpdateBotCommands_],
    [0x7063C3DB, UpdatePendingJoinRequests_],
    [0x11DFA986, UpdateBotChatInviteRequester_],
    [0x5E1B3CB8, UpdateMessageReactions_],
    [0x17B7A20B, UpdateAttachMenuBots_],
    [0x1592B79D, UpdateWebViewResultSent_],
    [0x14B85813, UpdateBotMenuButton_],
    [0x74D8BE99, UpdateSavedRingtones_],
    [0x0084CD5A, UpdateTranscribedAudio_],
    [0xFB4C496C, UpdateReadFeaturedEmojiStickers_],
    [0x28373599, UpdateUserEmojiStatus_],
    [0x30F443DB, UpdateRecentEmojiStatuses_],
    [0x6F7863F4, UpdateRecentReactions_],
    [0x86FCCF85, UpdateMoveStickerSetToTop_],
    [0x5A73A98C, UpdateMessageExtendedMedia_],
    [0x192EFBE3, UpdateChannelPinnedTopic_],
    [0xFE198602, UpdateChannelPinnedTopics_],
    [0x20529438, UpdateUser_],
    [0xEC05B097, UpdateAutoSaveSettings_],
    [0xCCF08AD6, UpdateGroupInvitePrivacyForbidden_],
    [0x75B3B798, UpdateStory_],
    [0xF74E932B, UpdateReadStories_],
    [0x1BF335B9, UpdateStoryID_],
    [0x2C084DC1, UpdateStoriesStealthMode_],
    [0x7D627683, UpdateSentStoryReaction_],
    [0x904DD49C, UpdateBotChatBoost_],
    [0x07B68920, UpdateChannelViewForumAsMessages_],
    [0xAE3F101D, UpdatePeerWallpaper_],
    [0xAC21D3CE, UpdateBotMessageReaction_],
    [0x09CB7759, UpdateBotMessageReactions_],
    [0xAEAF9E74, UpdateSavedDialogPinned_],
    [0x686C85A6, UpdatePinnedSavedDialogs_],
    [0x39C67432, UpdateSavedReactionTags_],
    [0xF16269D4, UpdateSmsJob_],
    [0xF9470AB2, UpdateQuickReplies_],
    [0xF53DA717, UpdateNewQuickReply_],
    [0x53E6F1EC, UpdateDeleteQuickReply_],
    [0x3E050D0F, UpdateQuickReplyMessage_],
    [0x566FE7CD, UpdateDeleteQuickReplyMessages_],
    [0xA56C2A3E, updates_State_],
    [0x5D75A138, updates_DifferenceEmpty_],
    [0x00F49CA0, updates_Difference_],
    [0xA8FB1981, updates_DifferenceSlice_],
    [0x4AFE8F6D, updates_DifferenceTooLong_],
    [0xE317AF7E, UpdatesTooLong_],
    [0x313BC7F8, UpdateShortMessage_],
    [0x4D6DEEA5, UpdateShortChatMessage_],
    [0x78D4DEC1, UpdateShort_],
    [0x725B04C3, UpdatesCombined_],
    [0x74AE4240, Updates_],
    [0x9015E101, UpdateShortSentMessage_],
    [0x8DCA6AA5, photos_Photos_],
    [0x15051F54, photos_PhotosSlice_],
    [0x20212CA8, photos_Photo_],
    [0x096A18D5, upload_File_],
    [0xF18CDA44, upload_FileCdnRedirect_],
    [0x18B7A10D, DcOption_],
    [0xCC1A241E, Config_],
    [0x8E1A1775, NearestDc_],
    [0xCCBBCE30, help_AppUpdate_],
    [0xC45A6536, help_NoAppUpdate_],
    [0x18CB9F78, help_InviteText_],
    [0xAB7EC0A0, EncryptedChatEmpty_],
    [0x66B25953, EncryptedChatWaiting_],
    [0x48F1D94C, EncryptedChatRequested_],
    [0x61F0D4C7, EncryptedChat_],
    [0x1E1C7C45, EncryptedChatDiscarded_],
    [0xF141B5E1, InputEncryptedChat_],
    [0xC21F497E, EncryptedFileEmpty_],
    [0xA8008CD8, EncryptedFile_],
    [0x1837C364, InputEncryptedFileEmpty_],
    [0x64BD0306, InputEncryptedFileUploaded_],
    [0x5A17B5E5, InputEncryptedFile_],
    [0x2DC173C8, InputEncryptedFileBigUploaded_],
    [0xED18C118, EncryptedMessage_],
    [0x23734B06, EncryptedMessageService_],
    [0xC0E24635, messages_DhConfigNotModified_],
    [0x2C221EDD, messages_DhConfig_],
    [0x560F8935, messages_SentEncryptedMessage_],
    [0x9493FF32, messages_SentEncryptedFile_],
    [0x72F0EAAE, InputDocumentEmpty_],
    [0x1ABFB575, InputDocument_],
    [0x36F8C871, DocumentEmpty_],
    [0x8FD4C4D8, Document_],
    [0x17C6B5F6, help_Support_],
    [0x9FD40BD8, NotifyPeer_],
    [0xB4C83B4C, NotifyUsers_],
    [0xC007CEC3, NotifyChats_],
    [0xD612E8EF, NotifyBroadcasts_],
    [0x226E6308, NotifyForumTopic_],
    [0x16BF744E, SendMessageTypingAction_],
    [0xFD5EC8F5, SendMessageCancelAction_],
    [0xA187D66F, SendMessageRecordVideoAction_],
    [0xE9763AEC, SendMessageUploadVideoAction_],
    [0xD52F73F7, SendMessageRecordAudioAction_],
    [0xF351D7AB, SendMessageUploadAudioAction_],
    [0xD1D34A26, SendMessageUploadPhotoAction_],
    [0xAA0CD9E4, SendMessageUploadDocumentAction_],
    [0x176F8BA1, SendMessageGeoLocationAction_],
    [0x628CBC6F, SendMessageChooseContactAction_],
    [0xDD6A8F48, SendMessageGamePlayAction_],
    [0x88F27FBC, SendMessageRecordRoundAction_],
    [0x243E1C66, SendMessageUploadRoundAction_],
    [0xD92C2285, SpeakingInGroupCallAction_],
    [0xDBDA9246, SendMessageHistoryImportAction_],
    [0xB05AC6B1, SendMessageChooseStickerAction_],
    [0x25972BCB, SendMessageEmojiInteraction_],
    [0xB665902E, SendMessageEmojiInteractionSeen_],
    [0xB3134D9D, contacts_Found_],
    [0x4F96CB18, InputPrivacyKeyStatusTimestamp_],
    [0xBDFB0426, InputPrivacyKeyChatInvite_],
    [0xFABADC5F, InputPrivacyKeyPhoneCall_],
    [0xDB9E70D2, InputPrivacyKeyPhoneP2P_],
    [0xA4DD4C08, InputPrivacyKeyForwards_],
    [0x5719BACC, InputPrivacyKeyProfilePhoto_],
    [0x0352DAFA, InputPrivacyKeyPhoneNumber_],
    [0xD1219BDD, InputPrivacyKeyAddedByPhone_],
    [0xAEE69D68, InputPrivacyKeyVoiceMessages_],
    [0x3823CC40, InputPrivacyKeyAbout_],
    [0xBC2EAB30, PrivacyKeyStatusTimestamp_],
    [0x500E6DFA, PrivacyKeyChatInvite_],
    [0x3D662B7B, PrivacyKeyPhoneCall_],
    [0x39491CC8, PrivacyKeyPhoneP2P_],
    [0x69EC56A3, PrivacyKeyForwards_],
    [0x96151FED, PrivacyKeyProfilePhoto_],
    [0xD19AE46D, PrivacyKeyPhoneNumber_],
    [0x42FFD42B, PrivacyKeyAddedByPhone_],
    [0x0697F414, PrivacyKeyVoiceMessages_],
    [0xA486B761, PrivacyKeyAbout_],
    [0x0D09E07B, InputPrivacyValueAllowContacts_],
    [0x184B35CE, InputPrivacyValueAllowAll_],
    [0x131CC67F, InputPrivacyValueAllowUsers_],
    [0x0BA52007, InputPrivacyValueDisallowContacts_],
    [0xD66B66C9, InputPrivacyValueDisallowAll_],
    [0x90110467, InputPrivacyValueDisallowUsers_],
    [0x840649CF, InputPrivacyValueAllowChatParticipants_],
    [0xE94F0F86, InputPrivacyValueDisallowChatParticipants_],
    [0x2F453E49, InputPrivacyValueAllowCloseFriends_],
    [0xFFFE1BAC, PrivacyValueAllowContacts_],
    [0x65427B82, PrivacyValueAllowAll_],
    [0xB8905FB2, PrivacyValueAllowUsers_],
    [0xF888FA1A, PrivacyValueDisallowContacts_],
    [0x8B73E763, PrivacyValueDisallowAll_],
    [0xE4621141, PrivacyValueDisallowUsers_],
    [0x6B134E8E, PrivacyValueAllowChatParticipants_],
    [0x41C87565, PrivacyValueDisallowChatParticipants_],
    [0xF7E8D89B, PrivacyValueAllowCloseFriends_],
    [0x50A04E45, account_PrivacyRules_],
    [0xB8D0AFDF, AccountDaysTTL_],
    [0x6C37C15C, DocumentAttributeImageSize_],
    [0x11B58939, DocumentAttributeAnimated_],
    [0x6319D612, DocumentAttributeSticker_],
    [0xD38FF1C2, DocumentAttributeVideo_],
    [0x9852F9C6, DocumentAttributeAudio_],
    [0x15590068, DocumentAttributeFilename_],
    [0x9801D2F7, DocumentAttributeHasStickers_],
    [0xFD149899, DocumentAttributeCustomEmoji_],
    [0xF1749A22, messages_StickersNotModified_],
    [0x30A6EC7E, messages_Stickers_],
    [0x12B299D4, StickerPack_],
    [0xE86602C3, messages_AllStickersNotModified_],
    [0xCDBBCEBB, messages_AllStickers_],
    [0x84D19185, messages_AffectedMessages_],
    [0x211A1788, WebPageEmpty_],
    [0xB0D13E47, WebPagePending_],
    [0xE89C45B2, WebPage_],
    [0x7311CA11, WebPageNotModified_],
    [0xAD01D61D, Authorization_],
    [0x4BFF8EA0, account_Authorizations_],
    [0x957B50FB, account_Password_],
    [0x9A5C33E5, account_PasswordSettings_],
    [0xC23727C9, account_PasswordInputSettings_],
    [0x137948A5, auth_PasswordRecovery_],
    [0xA384B779, ReceivedNotifyMessage_],
    [0x0AB4A819, ChatInviteExported_],
    [0xED107AB7, ChatInvitePublicJoinRequests_],
    [0x5A686D7C, ChatInviteAlready_],
    [0xCDE0EC40, ChatInvite_],
    [0x61695CB0, ChatInvitePeek_],
    [0xFFB62B95, InputStickerSetEmpty_],
    [0x9DE7A269, InputStickerSetID_],
    [0x861CC8A0, InputStickerSetShortName_],
    [0x028703C8, InputStickerSetAnimatedEmoji_],
    [0xE67F520E, InputStickerSetDice_],
    [0x0CDE3739, InputStickerSetAnimatedEmojiAnimations_],
    [0xC88B3B02, InputStickerSetPremiumGifts_],
    [0x04C4D4CE, InputStickerSetEmojiGenericAnimations_],
    [0x29D0F5EE, InputStickerSetEmojiDefaultStatuses_],
    [0x44C1F8E9, InputStickerSetEmojiDefaultTopicIcons_],
    [0x49748553, InputStickerSetEmojiChannelDefaultStatuses_],
    [0x2DD14EDC, StickerSet_],
    [0x6E153F16, messages_StickerSet_],
    [0xD3F924EB, messages_StickerSetNotModified_],
    [0xC27AC8C7, BotCommand_],
    [0x8F300B57, BotInfo_],
    [0xA2FA4880, KeyboardButton_],
    [0x258AFF05, KeyboardButtonUrl_],
    [0x35BBDB6B, KeyboardButtonCallback_],
    [0xB16A6C29, KeyboardButtonRequestPhone_],
    [0xFC796B3F, KeyboardButtonRequestGeoLocation_],
    [0x93B9FBB5, KeyboardButtonSwitchInline_],
    [0x50F41CCF, KeyboardButtonGame_],
    [0xAFD93FBB, KeyboardButtonBuy_],
    [0x10B78D29, KeyboardButtonUrlAuth_],
    [0xD02E7FD4, InputKeyboardButtonUrlAuth_],
    [0xBBC7515D, KeyboardButtonRequestPoll_],
    [0xE988037B, InputKeyboardButtonUserProfile_],
    [0x308660C1, KeyboardButtonUserProfile_],
    [0x13767230, KeyboardButtonWebView_],
    [0xA0C0505C, KeyboardButtonSimpleWebView_],
    [0x53D7BFD8, KeyboardButtonRequestPeer_],
    [0x77608B83, KeyboardButtonRow_],
    [0xA03E5B85, ReplyKeyboardHide_],
    [0x86B40B08, ReplyKeyboardForceReply_],
    [0x85DD99D1, ReplyKeyboardMarkup_],
    [0x48A30254, ReplyInlineMarkup_],
    [0xBB92BA95, MessageEntityUnknown_],
    [0xFA04579D, MessageEntityMention_],
    [0x6F635B0D, MessageEntityHashtag_],
    [0x6CEF8AC7, MessageEntityBotCommand_],
    [0x6ED02538, MessageEntityUrl_],
    [0x64E475C2, MessageEntityEmail_],
    [0xBD610BC9, MessageEntityBold_],
    [0x826F8B60, MessageEntityItalic_],
    [0x28A20571, MessageEntityCode_],
    [0x73924BE0, MessageEntityPre_],
    [0x76A6D327, MessageEntityTextUrl_],
    [0xDC7B1140, MessageEntityMentionName_],
    [0x208E68C9, InputMessageEntityMentionName_],
    [0x9B69E34B, MessageEntityPhone_],
    [0x4C4E743F, MessageEntityCashtag_],
    [0x9C4E7E8B, MessageEntityUnderline_],
    [0xBF0693D4, MessageEntityStrike_],
    [0x761E6AF4, MessageEntityBankCard_],
    [0x32CA960F, MessageEntitySpoiler_],
    [0xC8CF05F8, MessageEntityCustomEmoji_],
    [0x020DF5D0, MessageEntityBlockquote_],
    [0xEE8C1E86, InputChannelEmpty_],
    [0xF35AEC28, InputChannel_],
    [0x5B934F9D, InputChannelFromMessage_],
    [0x7F077AD9, contacts_ResolvedPeer_],
    [0x0AE30253, MessageRange_],
    [0x3E11AFFB, updates_ChannelDifferenceEmpty_],
    [0xA4BCC6FE, updates_ChannelDifferenceTooLong_],
    [0x2064674E, updates_ChannelDifference_],
    [0x94D42EE7, ChannelMessagesFilterEmpty_],
    [0xCD77D957, ChannelMessagesFilter_],
    [0xC00C07C0, ChannelParticipant_],
    [0x35A8BFA7, ChannelParticipantSelf_],
    [0x2FE601D3, ChannelParticipantCreator_],
    [0x34C3BB53, ChannelParticipantAdmin_],
    [0x6DF8014E, ChannelParticipantBanned_],
    [0x1B03F006, ChannelParticipantLeft_],
    [0xDE3F3C79, ChannelParticipantsRecent_],
    [0xB4608969, ChannelParticipantsAdmins_],
    [0xA3B54985, ChannelParticipantsKicked_],
    [0xB0D1865B, ChannelParticipantsBots_],
    [0x1427A5E1, ChannelParticipantsBanned_],
    [0x0656AC4B, ChannelParticipantsSearch_],
    [0xBB6AE88D, ChannelParticipantsContacts_],
    [0xE04B5CEB, ChannelParticipantsMentions_],
    [0x9AB0FEAF, channels_ChannelParticipants_],
    [0xF0173FE9, channels_ChannelParticipantsNotModified_],
    [0xDFB80317, channels_ChannelParticipant_],
    [0x780A0310, help_TermsOfService_],
    [0xE8025CA2, messages_SavedGifsNotModified_],
    [0x84A02A0D, messages_SavedGifs_],
    [0x3380C786, InputBotInlineMessageMediaAuto_],
    [0x3DCD7A87, InputBotInlineMessageText_],
    [0x96929A85, InputBotInlineMessageMediaGeo_],
    [0x417BBF11, InputBotInlineMessageMediaVenue_],
    [0xA6EDBFFD, InputBotInlineMessageMediaContact_],
    [0x4B425864, InputBotInlineMessageGame_],
    [0xD7E78225, InputBotInlineMessageMediaInvoice_],
    [0xBDDCC510, InputBotInlineMessageMediaWebPage_],
    [0x88BF9319, InputBotInlineResult_],
    [0xA8D864A7, InputBotInlineResultPhoto_],
    [0xFFF8FDC4, InputBotInlineResultDocument_],
    [0x4FA417F2, InputBotInlineResultGame_],
    [0x764CF810, BotInlineMessageMediaAuto_],
    [0x8C7F65E2, BotInlineMessageText_],
    [0x051846FD, BotInlineMessageMediaGeo_],
    [0x8A86659C, BotInlineMessageMediaVenue_],
    [0x18D1CDC2, BotInlineMessageMediaContact_],
    [0x354A9B09, BotInlineMessageMediaInvoice_],
    [0x809AD9A6, BotInlineMessageMediaWebPage_],
    [0x11965F3A, BotInlineResult_],
    [0x17DB940B, BotInlineMediaResult_],
    [0xE021F2F6, messages_BotResults_],
    [0x5DAB1AF4, ExportedMessageLink_],
    [0x4E4DF4BB, MessageFwdHeader_],
    [0x72A3158C, auth_CodeTypeSms_],
    [0x741CD3E3, auth_CodeTypeCall_],
    [0x226CCEFB, auth_CodeTypeFlashCall_],
    [0xD61AD6EE, auth_CodeTypeMissedCall_],
    [0x06ED998C, auth_CodeTypeFragmentSms_],
    [0x3DBB5986, auth_SentCodeTypeApp_],
    [0xC000BBA2, auth_SentCodeTypeSms_],
    [0x5353E5A7, auth_SentCodeTypeCall_],
    [0xAB03C6D9, auth_SentCodeTypeFlashCall_],
    [0x82006484, auth_SentCodeTypeMissedCall_],
    [0xF450F59B, auth_SentCodeTypeEmailCode_],
    [0xA5491DEA, auth_SentCodeTypeSetUpEmailRequired_],
    [0xD9565C39, auth_SentCodeTypeFragmentSms_],
    [0xE57B1432, auth_SentCodeTypeFirebaseSms_],
    [0x36585EA4, messages_BotCallbackAnswer_],
    [0x26B5DDE6, messages_MessageEditData_],
    [0x890C3D89, InputBotInlineMessageID_],
    [0xB6D915D7, InputBotInlineMessageID64_],
    [0x3C20629F, InlineBotSwitchPM_],
    [0x3371C354, messages_PeerDialogs_],
    [0xEDCDC05B, TopPeer_],
    [0xAB661B5B, TopPeerCategoryBotsPM_],
    [0x148677E2, TopPeerCategoryBotsInline_],
    [0x0637B7ED, TopPeerCategoryCorrespondents_],
    [0xBD17A14A, TopPeerCategoryGroups_],
    [0x161D9628, TopPeerCategoryChannels_],
    [0x1E76A78C, TopPeerCategoryPhoneCalls_],
    [0xA8406CA9, TopPeerCategoryForwardUsers_],
    [0xFBEEC0F0, TopPeerCategoryForwardChats_],
    [0xFB834291, TopPeerCategoryPeers_],
    [0xDE266EF5, contacts_TopPeersNotModified_],
    [0x70B772A8, contacts_TopPeers_],
    [0xB52C939D, contacts_TopPeersDisabled_],
    [0x1B0C841A, DraftMessageEmpty_],
    [0x3FCCF7EF, DraftMessage_],
    [0xC6DC0C66, messages_FeaturedStickersNotModified_],
    [0xBE382906, messages_FeaturedStickers_],
    [0x0B17F890, messages_RecentStickersNotModified_],
    [0x88D37C56, messages_RecentStickers_],
    [0x4FCBA9C8, messages_ArchivedStickers_],
    [0x38641628, messages_StickerSetInstallResultSuccess_],
    [0x35E410A8, messages_StickerSetInstallResultArchive_],
    [0x6410A5D2, StickerSetCovered_],
    [0x3407E51B, StickerSetMultiCovered_],
    [0x40D13C0E, StickerSetFullCovered_],
    [0x77B15D1C, StickerSetNoCovered_],
    [0xAED6DBB2, MaskCoords_],
    [0x4A992157, InputStickeredMediaPhoto_],
    [0x0438865B, InputStickeredMediaDocument_],
    [0xBDF9653B, Game_],
    [0x032C3E77, InputGameID_],
    [0xC331E80A, InputGameShortName_],
    [0x73A379EB, HighScore_],
    [0x9A3BFD99, messages_HighScores_],
    [0xDC3D824F, TextEmpty_],
    [0x744694E0, TextPlain_],
    [0x6724ABC4, TextBold_],
    [0xD912A59C, TextItalic_],
    [0xC12622C4, TextUnderline_],
    [0x9BF8BB95, TextStrike_],
    [0x6C3F19B9, TextFixed_],
    [0x3C2884C1, TextUrl_],
    [0xDE5A0DD6, TextEmail_],
    [0x7E6260D7, TextConcat_],
    [0xED6A8504, TextSubscript_],
    [0xC7FB5E01, TextSuperscript_],
    [0x034B8621, TextMarked_],
    [0x1CCB966A, TextPhone_],
    [0x081CCF4F, TextImage_],
    [0x35553762, TextAnchor_],
    [0x13567E8A, PageBlockUnsupported_],
    [0x70ABC3FD, PageBlockTitle_],
    [0x8FFA9A1F, PageBlockSubtitle_],
    [0xBAAFE5E0, PageBlockAuthorDate_],
    [0xBFD064EC, PageBlockHeader_],
    [0xF12BB6E1, PageBlockSubheader_],
    [0x467A0766, PageBlockParagraph_],
    [0xC070D93E, PageBlockPreformatted_],
    [0x48870999, PageBlockFooter_],
    [0xDB20B188, PageBlockDivider_],
    [0xCE0D37B0, PageBlockAnchor_],
    [0xE4E88011, PageBlockList_],
    [0x263D7C26, PageBlockBlockquote_],
    [0x4F4456D3, PageBlockPullquote_],
    [0x1759C560, PageBlockPhoto_],
    [0x7C8FE7B6, PageBlockVideo_],
    [0x39F23300, PageBlockCover_],
    [0xA8718DC5, PageBlockEmbed_],
    [0xF259A80B, PageBlockEmbedPost_],
    [0x65A0FA4D, PageBlockCollage_],
    [0x031F9590, PageBlockSlideshow_],
    [0xEF1751B5, PageBlockChannel_],
    [0x804361EA, PageBlockAudio_],
    [0x1E148390, PageBlockKicker_],
    [0xBF4DEA82, PageBlockTable_],
    [0x9A8AE1E1, PageBlockOrderedList_],
    [0x76768BED, PageBlockDetails_],
    [0x16115A96, PageBlockRelatedArticles_],
    [0xA44F3EF6, PageBlockMap_],
    [0x85E42301, PhoneCallDiscardReasonMissed_],
    [0xE095C1A0, PhoneCallDiscardReasonDisconnect_],
    [0x57ADC690, PhoneCallDiscardReasonHangup_],
    [0xFAF7E8C9, PhoneCallDiscardReasonBusy_],
    [0x7D748D04, DataJSON_],
    [0xCB296BF8, LabeledPrice_],
    [0x5DB95A15, Invoice_],
    [0xEA02C27E, PaymentCharge_],
    [0x1E8CAAEB, PostAddress_],
    [0x909C3F94, PaymentRequestedInfo_],
    [0xCDC27A1F, PaymentSavedCredentialsCard_],
    [0x1C570ED1, WebDocument_],
    [0xF9C8BCC6, WebDocumentNoProxy_],
    [0x9BED434D, InputWebDocument_],
    [0xC239D686, InputWebFileLocation_],
    [0x9F2221C9, InputWebFileGeoPointLocation_],
    [0xF46FE924, InputWebFileAudioAlbumThumbLocation_],
    [0x21E753BC, upload_WebFile_],
    [0xA0058751, payments_PaymentForm_],
    [0xD1451883, payments_ValidatedRequestedInfo_],
    [0x4E5F810D, payments_PaymentResult_],
    [0xD8411139, payments_PaymentVerificationNeeded_],
    [0x70C4FE03, payments_PaymentReceipt_],
    [0xFB8FE43C, payments_SavedInfo_],
    [0xC10EB2CF, InputPaymentCredentialsSaved_],
    [0x3417D728, InputPaymentCredentials_],
    [0x0AA1C39F, InputPaymentCredentialsApplePay_],
    [0x8AC32801, InputPaymentCredentialsGooglePay_],
    [0xDB64FD34, account_TmpPassword_],
    [0xB6213CDF, ShippingOption_],
    [0x32DA9E9C, InputStickerSetItem_],
    [0x1E36FDED, InputPhoneCall_],
    [0x5366C915, PhoneCallEmpty_],
    [0xC5226F17, PhoneCallWaiting_],
    [0x14B0ED0C, PhoneCallRequested_],
    [0x3660C311, PhoneCallAccepted_],
    [0x967F7C67, PhoneCall_],
    [0x50CA4DE1, PhoneCallDiscarded_],
    [0x9CC123C7, PhoneConnection_],
    [0x635FE375, PhoneConnectionWebrtc_],
    [0xFC878FC8, PhoneCallProtocol_],
    [0xEC82E140, phone_PhoneCall_],
    [0xEEA8E46E, upload_CdnFileReuploadNeeded_],
    [0xA99FCA4F, upload_CdnFile_],
    [0xC982EABA, CdnPublicKey_],
    [0x5725E40A, CdnConfig_],
    [0xCAD181F6, LangPackString_],
    [0x6C47AC9F, LangPackStringPluralized_],
    [0x2979EEB2, LangPackStringDeleted_],
    [0xF385C1F6, LangPackDifference_],
    [0xEECA5CE3, LangPackLanguage_],
    [0xE6DFB825, ChannelAdminLogEventActionChangeTitle_],
    [0x55188A2E, ChannelAdminLogEventActionChangeAbout_],
    [0x6A4AFC38, ChannelAdminLogEventActionChangeUsername_],
    [0x434BD2AF, ChannelAdminLogEventActionChangePhoto_],
    [0x1B7907AE, ChannelAdminLogEventActionToggleInvites_],
    [0x26AE0971, ChannelAdminLogEventActionToggleSignatures_],
    [0xE9E82C18, ChannelAdminLogEventActionUpdatePinned_],
    [0x709B2405, ChannelAdminLogEventActionEditMessage_],
    [0x42E047BB, ChannelAdminLogEventActionDeleteMessage_],
    [0x183040D3, ChannelAdminLogEventActionParticipantJoin_],
    [0xF89777F2, ChannelAdminLogEventActionParticipantLeave_],
    [0xE31C34D8, ChannelAdminLogEventActionParticipantInvite_],
    [0xE6D83D7E, ChannelAdminLogEventActionParticipantToggleBan_],
    [0xD5676710, ChannelAdminLogEventActionParticipantToggleAdmin_],
    [0xB1C3CAA7, ChannelAdminLogEventActionChangeStickerSet_],
    [0x5F5C95F1, ChannelAdminLogEventActionTogglePreHistoryHidden_],
    [0x2DF5FC0A, ChannelAdminLogEventActionDefaultBannedRights_],
    [0x8F079643, ChannelAdminLogEventActionStopPoll_],
    [0x050C7AC8, ChannelAdminLogEventActionChangeLinkedChat_],
    [0x0E6B76AE, ChannelAdminLogEventActionChangeLocation_],
    [0x53909779, ChannelAdminLogEventActionToggleSlowMode_],
    [0x23209745, ChannelAdminLogEventActionStartGroupCall_],
    [0xDB9F9140, ChannelAdminLogEventActionDiscardGroupCall_],
    [0xF92424D2, ChannelAdminLogEventActionParticipantMute_],
    [0xE64429C0, ChannelAdminLogEventActionParticipantUnmute_],
    [0x56D6A247, ChannelAdminLogEventActionToggleGroupCallSetting_],
    [0xFE9FC158, ChannelAdminLogEventActionParticipantJoinByInvite_],
    [0x5A50FCA4, ChannelAdminLogEventActionExportedInviteDelete_],
    [0x410A134E, ChannelAdminLogEventActionExportedInviteRevoke_],
    [0xE90EBB59, ChannelAdminLogEventActionExportedInviteEdit_],
    [0x3E7F6847, ChannelAdminLogEventActionParticipantVolume_],
    [0x6E941A38, ChannelAdminLogEventActionChangeHistoryTTL_],
    [0xAFB6144A, ChannelAdminLogEventActionParticipantJoinByRequest_],
    [0xCB2AC766, ChannelAdminLogEventActionToggleNoForwards_],
    [0x278F2868, ChannelAdminLogEventActionSendMessage_],
    [0xBE4E0EF8, ChannelAdminLogEventActionChangeAvailableReactions_],
    [0xF04FB3A9, ChannelAdminLogEventActionChangeUsernames_],
    [0x02CC6383, ChannelAdminLogEventActionToggleForum_],
    [0x58707D28, ChannelAdminLogEventActionCreateTopic_],
    [0xF06FE208, ChannelAdminLogEventActionEditTopic_],
    [0xAE168909, ChannelAdminLogEventActionDeleteTopic_],
    [0x5D8D353B, ChannelAdminLogEventActionPinTopic_],
    [0x64F36DFC, ChannelAdminLogEventActionToggleAntiSpam_],
    [0x5796E780, ChannelAdminLogEventActionChangePeerColor_],
    [0x5E477B25, ChannelAdminLogEventActionChangeProfilePeerColor_],
    [0x31BB5D52, ChannelAdminLogEventActionChangeWallpaper_],
    [0x3EA9FEB1, ChannelAdminLogEventActionChangeEmojiStatus_],
    [0x46D840AB, ChannelAdminLogEventActionChangeEmojiStickerSet_],
    [0x1FAD68CD, ChannelAdminLogEvent_],
    [0xED8AF74D, channels_AdminLogResults_],
    [0xEA107AE4, ChannelAdminLogEventsFilter_],
    [0x5CE14175, PopularContact_],
    [0x9E8FA6D3, messages_FavedStickersNotModified_],
    [0x2CB51097, messages_FavedStickers_],
    [0x46E1D13D, RecentMeUrlUnknown_],
    [0xB92C09E2, RecentMeUrlUser_],
    [0xB2DA71D2, RecentMeUrlChat_],
    [0xEB49081D, RecentMeUrlChatInvite_],
    [0xBC0A57DC, RecentMeUrlStickerSet_],
    [0x0E0310D7, help_RecentMeUrls_],
    [0x1CC6E91F, InputSingleMedia_],
    [0xA6F8F452, WebAuthorization_],
    [0xED56C9FC, account_WebAuthorizations_],
    [0xA676A322, InputMessageID_],
    [0xBAD88395, InputMessageReplyTo_],
    [0x86872538, InputMessagePinned_],
    [0xACFA1A7E, InputMessageCallbackQuery_],
    [0xFCAAFEB7, InputDialogPeer_],
    [0x64600527, InputDialogPeerFolder_],
    [0xE56DBF05, DialogPeer_],
    [0x514519E2, DialogPeerFolder_],
    [0x0D54B65D, messages_FoundStickerSetsNotModified_],
    [0x8AF09DD2, messages_FoundStickerSets_],
    [0xF39B035C, FileHash_],
    [0x75588B3F, InputClientProxy_],
    [0xE3309F7F, help_TermsOfServiceUpdateEmpty_],
    [0x28ECF961, help_TermsOfServiceUpdate_],
    [0x3334B0F0, InputSecureFileUploaded_],
    [0x5367E5BE, InputSecureFile_],
    [0x64199744, SecureFileEmpty_],
    [0x7D09C27E, SecureFile_],
    [0x8AEABEC3, SecureData_],
    [0x7D6099DD, SecurePlainPhone_],
    [0x21EC5A5F, SecurePlainEmail_],
    [0x9D2A81E3, SecureValueTypePersonalDetails_],
    [0x3DAC6A00, SecureValueTypePassport_],
    [0x06E425C4, SecureValueTypeDriverLicense_],
    [0xA0D0744B, SecureValueTypeIdentityCard_],
    [0x99A48F23, SecureValueTypeInternalPassport_],
    [0xCBE31E26, SecureValueTypeAddress_],
    [0xFC36954E, SecureValueTypeUtilityBill_],
    [0x89137C0D, SecureValueTypeBankStatement_],
    [0x8B883488, SecureValueTypeRentalAgreement_],
    [0x99E3806A, SecureValueTypePassportRegistration_],
    [0xEA02EC33, SecureValueTypeTemporaryRegistration_],
    [0xB320AADB, SecureValueTypePhone_],
    [0x8E3CA7EE, SecureValueTypeEmail_],
    [0x187FA0CA, SecureValue_],
    [0xDB21D0A7, InputSecureValue_],
    [0xED1ECDB0, SecureValueHash_],
    [0xE8A40BD9, SecureValueErrorData_],
    [0x00BE3DFA, SecureValueErrorFrontSide_],
    [0x868A2AA5, SecureValueErrorReverseSide_],
    [0xE537CED6, SecureValueErrorSelfie_],
    [0x7A700873, SecureValueErrorFile_],
    [0x666220E9, SecureValueErrorFiles_],
    [0x869D758F, SecureValueError_],
    [0xA1144770, SecureValueErrorTranslationFile_],
    [0x34636DD8, SecureValueErrorTranslationFiles_],
    [0x33F0EA47, SecureCredentialsEncrypted_],
    [0xAD2E1CD8, account_AuthorizationForm_],
    [0x811F854F, account_SentEmailCode_],
    [0x66AFA166, help_DeepLinkInfoEmpty_],
    [0x6A4EE832, help_DeepLinkInfo_],
    [0x1142BD56, SavedPhoneContact_],
    [0x4DBA4501, account_Takeout_],
    [0xD45AB096, PasswordKdfAlgoUnknown_],
    [0x3A912D4A, PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow_],
    [0x004A8537, SecurePasswordKdfAlgoUnknown_],
    [0xBBF2DDA0, SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000_],
    [0x86471D92, SecurePasswordKdfAlgoSHA512_],
    [0x1527BCAC, SecureSecretSettings_],
    [0x9880F658, InputCheckPasswordEmpty_],
    [0xD27FF082, InputCheckPasswordSRP_],
    [0x829D99DA, SecureRequiredType_],
    [0x027477B4, SecureRequiredTypeOneOf_],
    [0xBFB9F457, help_PassportConfigNotModified_],
    [0xA098D6AF, help_PassportConfig_],
    [0x1D1B1245, InputAppEvent_],
    [0xC0DE1BD9, JsonObjectValue_],
    [0x3F6D7B68, JsonNull_],
    [0xC7345E6A, JsonBool_],
    [0x2BE0DFA4, JsonNumber_],
    [0xB71E767A, JsonString_],
    [0xF7444763, JsonArray_],
    [0x99C1D49D, JsonObject_],
    [0x34566B6A, PageTableCell_],
    [0xE0C0C5E5, PageTableRow_],
    [0x6F747657, PageCaption_],
    [0xB92FB6CD, PageListItemText_],
    [0x25E073FC, PageListItemBlocks_],
    [0x5E068047, PageListOrderedItemText_],
    [0x98DD8936, PageListOrderedItemBlocks_],
    [0xB390DC08, PageRelatedArticle_],
    [0x98657F0D, Page_],
    [0x8C05F1C9, help_SupportName_],
    [0xF3AE2EED, help_UserInfoEmpty_],
    [0x01EB3758, help_UserInfo_],
    [0x6CA9C2E9, PollAnswer_],
    [0x86E18161, Poll_],
    [0x3B6DDAD2, PollAnswerVoters_],
    [0x7ADF2420, PollResults_],
    [0xF041E250, ChatOnlines_],
    [0x47A971E0, StatsURL_],
    [0x5FB224D5, ChatAdminRights_],
    [0x9F120418, ChatBannedRights_],
    [0xE630B979, InputWallPaper_],
    [0x72091C80, InputWallPaperSlug_],
    [0x967A462E, InputWallPaperNoFile_],
    [0x1C199183, account_WallPapersNotModified_],
    [0xCDC3858C, account_WallPapers_],
    [0xAD253D78, CodeSettings_],
    [0x372EFCD0, WallPaperSettings_],
    [0xBAA57628, AutoDownloadSettings_],
    [0x63CACF26, account_AutoDownloadSettings_],
    [0xD5B3B9F9, EmojiKeyword_],
    [0x236DF622, EmojiKeywordDeleted_],
    [0x5CC761BD, EmojiKeywordsDifference_],
    [0xA575739D, EmojiURL_],
    [0xB3FB5361, EmojiLanguage_],
    [0xFF544E65, Folder_],
    [0xFBD2C296, InputFolderPeer_],
    [0xE9BAA668, FolderPeer_],
    [0xE844EBFF, messages_SearchCounter_],
    [0x92D33A0E, UrlAuthResultRequest_],
    [0x8F8C0E4E, UrlAuthResultAccepted_],
    [0xA9D6DB1F, UrlAuthResultDefault_],
    [0xBFB5AD8B, ChannelLocationEmpty_],
    [0x209B82DB, ChannelLocation_],
    [0xCA461B5D, PeerLocated_],
    [0xF8EC284B, PeerSelfLocated_],
    [0xD072ACB4, RestrictionReason_],
    [0x3C5693E9, InputTheme_],
    [0xF5890DF1, InputThemeSlug_],
    [0xA00E67D6, Theme_],
    [0xF41EB622, account_ThemesNotModified_],
    [0x9A3D8C6D, account_Themes_],
    [0x629F1980, auth_LoginToken_],
    [0x068E9916, auth_LoginTokenMigrateTo_],
    [0x390D5C5E, auth_LoginTokenSuccess_],
    [0x57E28221, account_ContentSettings_],
    [0xA927FEC5, messages_InactiveChats_],
    [0xC3A12462, BaseThemeClassic_],
    [0xFBD81688, BaseThemeDay_],
    [0xB7B31EA8, BaseThemeNight_],
    [0x6D5F77EE, BaseThemeTinted_],
    [0x5B11125A, BaseThemeArctic_],
    [0x8FDE504F, InputThemeSettings_],
    [0xFA58B6D4, ThemeSettings_],
    [0x54B56617, WebPageAttributeTheme_],
    [0x2E94C3E7, WebPageAttributeStory_],
    [0x4899484E, messages_VotesList_],
    [0xF568028A, BankCardOpenUrl_],
    [0x3E24E573, payments_BankCardData_],
    [0x5FB5523B, DialogFilter_],
    [0x363293AE, DialogFilterDefault_],
    [0x9FE28EA4, DialogFilterChatlist_],
    [0x77744D4A, DialogFilterSuggested_],
    [0xB637EDAF, StatsDateRangeDays_],
    [0xCB43ACDE, StatsAbsValueAndPrev_],
    [0xCBCE2FE0, StatsPercentValue_],
    [0x4A27EB2D, StatsGraphAsync_],
    [0xBEDC9822, StatsGraphError_],
    [0x8EA464B6, StatsGraph_],
    [0x396CA5FC, stats_BroadcastStats_],
    [0x98F6AC75, help_PromoDataEmpty_],
    [0x8C39793F, help_PromoData_],
    [0xDE33B094, VideoSize_],
    [0xF85C413C, VideoSizeEmojiMarkup_],
    [0x0DA082FE, VideoSizeStickerMarkup_],
    [0x9D04AF9B, StatsGroupTopPoster_],
    [0xD7584C87, StatsGroupTopAdmin_],
    [0x535F779D, StatsGroupTopInviter_],
    [0xEF7FF916, stats_MegagroupStats_],
    [0x734C4CCB, GlobalPrivacySettings_],
    [0x4203C5EF, help_CountryCode_],
    [0xC3878E23, help_Country_],
    [0x93CC1F32, help_CountriesListNotModified_],
    [0x87D0759E, help_CountriesList_],
    [0x455B853D, MessageViews_],
    [0xB6C4F543, messages_MessageViews_],
    [0xA6341782, messages_DiscussionMessage_],
    [0xAFBC09DB, MessageReplyHeader_],
    [0x0E5AF939, MessageReplyStoryHeader_],
    [0x83D60FC2, MessageReplies_],
    [0xE8FD8014, PeerBlocked_],
    [0x7FE91C14, stats_MessageStats_],
    [0x7780BCB4, GroupCallDiscarded_],
    [0xD597650C, GroupCall_],
    [0xD8AA840F, InputGroupCall_],
    [0xEBA636FE, GroupCallParticipant_],
    [0x9E727AAD, phone_GroupCall_],
    [0xF47751B6, phone_GroupParticipants_],
    [0x3081ED9D, InlineQueryPeerTypeSameBotPM_],
    [0x833C0FAC, InlineQueryPeerTypePM_],
    [0xD766C50A, InlineQueryPeerTypeChat_],
    [0x5EC4BE43, InlineQueryPeerTypeMegagroup_],
    [0x6334EE9A, InlineQueryPeerTypeBroadcast_],
    [0x0E3B2D0C, InlineQueryPeerTypeBotPM_],
    [0x1662AF0B, messages_HistoryImport_],
    [0x5E0FB7B9, messages_HistoryImportParsed_],
    [0xEF8D3E6C, messages_AffectedFoundMessages_],
    [0x8C5ADFD9, ChatInviteImporter_],
    [0xBDC62DCC, messages_ExportedChatInvites_],
    [0x1871BE50, messages_ExportedChatInvite_],
    [0x222600EF, messages_ExportedChatInviteReplaced_],
    [0x81B6B00A, messages_ChatInviteImporters_],
    [0xF2ECEF23, ChatAdminWithInvites_],
    [0xB69B72D7, messages_ChatAdminsWithInvites_],
    [0xA24DE717, messages_CheckedHistoryImportPeer_],
    [0xAFE5623F, phone_JoinAsPeers_],
    [0x204BD158, phone_ExportedGroupCallInvite_],
    [0xDCB118B7, GroupCallParticipantVideoSourceGroup_],
    [0x67753AC8, GroupCallParticipantVideo_],
    [0x85FEA03F, stickers_SuggestedShortName_],
    [0x2F6CB2AB, BotCommandScopeDefault_],
    [0x3C4F04D8, BotCommandScopeUsers_],
    [0x6FE1A881, BotCommandScopeChats_],
    [0xB9AA606A, BotCommandScopeChatAdmins_],
    [0xDB9D897D, BotCommandScopePeer_],
    [0x3FD863D1, BotCommandScopePeerAdmins_],
    [0x0A1321F3, BotCommandScopePeerUser_],
    [0xE3779861, account_ResetPasswordFailedWait_],
    [0xE9EFFC7D, account_ResetPasswordRequestedWait_],
    [0xE926D63E, account_ResetPasswordOk_],
    [0xED5383F7, SponsoredMessage_],
    [0xC9EE1D87, messages_SponsoredMessages_],
    [0x1839490F, messages_SponsoredMessagesEmpty_],
    [0xC9B0539F, SearchResultsCalendarPeriod_],
    [0x147EE23C, messages_SearchResultsCalendar_],
    [0x7F648B67, SearchResultPosition_],
    [0x53B22BAF, messages_SearchResultsPositions_],
    [0xF496B0C6, channels_SendAsPeers_],
    [0x3B6D152E, users_UserFull_],
    [0x6880B94D, messages_PeerSettings_],
    [0xC3A2835F, auth_LoggedOut_],
    [0xA3D1CB80, ReactionCount_],
    [0x4F2B9479, MessageReactions_],
    [0x31BD492D, messages_MessageReactionsList_],
    [0xC077EC01, AvailableReaction_],
    [0x9F071957, messages_AvailableReactionsNotModified_],
    [0x768E3AAD, messages_AvailableReactions_],
    [0x8C79B63C, MessagePeerReaction_],
    [0x80EB48AF, GroupCallStreamChannel_],
    [0xD0E482B2, phone_GroupCallStreamChannels_],
    [0x2DBF3432, phone_GroupCallStreamRtmpUrl_],
    [0x4576F3F0, AttachMenuBotIconColor_],
    [0xB2A7386B, AttachMenuBotIcon_],
    [0xD90D8DFE, AttachMenuBot_],
    [0xF1D88A5C, AttachMenuBotsNotModified_],
    [0x3C4301C0, AttachMenuBots_],
    [0x93BF667F, AttachMenuBotsBot_],
    [0x0C14557C, WebViewResultUrl_],
    [0x882F76BB, SimpleWebViewResultUrl_],
    [0x0C94511C, WebViewMessageSent_],
    [0x7533A588, BotMenuButtonDefault_],
    [0x4258C205, BotMenuButtonCommands_],
    [0xC7B57CE6, BotMenuButton_],
    [0xFBF6E8B1, account_SavedRingtonesNotModified_],
    [0xC1E92CC5, account_SavedRingtones_],
    [0x97E8BEBE, NotificationSoundDefault_],
    [0x6F0C34DF, NotificationSoundNone_],
    [0x830B9AE4, NotificationSoundLocal_],
    [0xFF6C8049, NotificationSoundRingtone_],
    [0xB7263F6D, account_SavedRingtone_],
    [0x1F307EB7, account_SavedRingtoneConverted_],
    [0x7D6BE90E, AttachMenuPeerTypeSameBotPM_],
    [0xC32BFA1A, AttachMenuPeerTypeBotPM_],
    [0xF146D31F, AttachMenuPeerTypePM_],
    [0x0509113F, AttachMenuPeerTypeChat_],
    [0x7BFBDEFC, AttachMenuPeerTypeBroadcast_],
    [0xC5B56859, InputInvoiceMessage_],
    [0xC326CAEF, InputInvoiceSlug_],
    [0x98986C0D, InputInvoicePremiumGiftCode_],
    [0xAED0CBD9, payments_ExportedInvoice_],
    [0xCFB9D957, messages_TranscribedAudio_],
    [0x5334759C, help_PremiumPromo_],
    [0xA6751E66, InputStorePaymentPremiumSubscription_],
    [0x616F7FE8, InputStorePaymentGiftPremium_],
    [0xA3805F3F, InputStorePaymentPremiumGiftCode_],
    [0x160544CA, InputStorePaymentPremiumGiveaway_],
    [0x74C34319, PremiumGiftOption_],
    [0x88F8F21B, PaymentFormMethod_],
    [0x2DE11AAE, EmojiStatusEmpty_],
    [0x929B619D, EmojiStatus_],
    [0xFA30A8C7, EmojiStatusUntil_],
    [0xD08CE645, account_EmojiStatusesNotModified_],
    [0x90C467D1, account_EmojiStatuses_],
    [0x79F5D419, ReactionEmpty_],
    [0x1B2286B8, ReactionEmoji_],
    [0x8935FC73, ReactionCustomEmoji_],
    [0xEAFC32BC, ChatReactionsNone_],
    [0x52928BCA, ChatReactionsAll_],
    [0x661D4037, ChatReactionsSome_],
    [0xB06FDBDF, messages_ReactionsNotModified_],
    [0xEAFDF716, messages_Reactions_],
    [0x4345BE73, EmailVerifyPurposeLoginSetup_],
    [0x527D22EB, EmailVerifyPurposeLoginChange_],
    [0xBBF51685, EmailVerifyPurposePassport_],
    [0x922E55A9, EmailVerificationCode_],
    [0xDB909EC2, EmailVerificationGoogle_],
    [0x96D074FD, EmailVerificationApple_],
    [0x2B96CD1B, account_EmailVerified_],
    [0xE1BB0D61, account_EmailVerifiedLogin_],
    [0x5F2D1DF2, PremiumSubscriptionOption_],
    [0xB81C7034, SendAsPeer_],
    [0xAD628CC8, MessageExtendedMediaPreview_],
    [0xEE479C64, MessageExtendedMedia_],
    [0xFCFEB29C, StickerKeyword_],
    [0xB4073647, Username_],
    [0x023F109B, ForumTopicDeleted_],
    [0x71701DA9, ForumTopic_],
    [0x367617D3, messages_ForumTopics_],
    [0x43B46B20, DefaultHistoryTTL_],
    [0x41BF109B, ExportedContactToken_],
    [0x5F3B8A00, RequestPeerTypeUser_],
    [0xC9F06E1B, RequestPeerTypeChat_],
    [0x339BEF6C, RequestPeerTypeBroadcast_],
    [0x481EADFA, EmojiListNotModified_],
    [0x7A1E11D1, EmojiList_],
    [0x7A9ABDA9, EmojiGroup_],
    [0x6FB4AD87, messages_EmojiGroupsNotModified_],
    [0x881FB94B, messages_EmojiGroups_],
    [0x751F3146, TextWithEntities_],
    [0x33DB32F8, messages_TranslateResult_],
    [0xC84834CE, AutoSaveSettings_],
    [0x81602D47, AutoSaveException_],
    [0x4C3E069D, account_AutoSaveSettings_],
    [0x7CDE641D, help_AppConfigNotModified_],
    [0xDD18782E, help_AppConfig_],
    [0xA920BD7A, InputBotAppID_],
    [0x908C0407, InputBotAppShortName_],
    [0x5DA674B7, BotAppNotModified_],
    [0x95FCD1D6, BotApp_],
    [0xEB50ADF5, messages_BotApp_],
    [0x3C1B4F0D, AppWebViewResultUrl_],
    [0xB57295D5, InlineBotWebView_],
    [0x4A4FF172, ReadParticipantDate_],
    [0xF3E0DA33, InputChatlistDialogFilter_],
    [0x0C5181AC, ExportedChatlistInvite_],
    [0x10E6E3A6, chatlists_ExportedChatlistInvite_],
    [0x10AB6DC7, chatlists_ExportedInvites_],
    [0xFA87F659, chatlists_ChatlistInviteAlready_],
    [0x1DCD839D, chatlists_ChatlistInvite_],
    [0x93BD878D, chatlists_ChatlistUpdates_],
    [0xE8A775B0, bots_BotInfo_],
    [0xB6CC2D5C, MessagePeerVote_],
    [0x74CDA504, MessagePeerVoteInputOption_],
    [0x4628F6E6, MessagePeerVoteMultiple_],
    [0x3DB8EC63, SponsoredWebPage_],
    [0x8D595CD6, StoryViews_],
    [0x51E6EE4F, StoryItemDeleted_],
    [0xFFADC913, StoryItemSkipped_],
    [0x79B26A24, StoryItem_],
    [0x1158FE3E, stories_AllStoriesNotModified_],
    [0x6EFC5E81, stories_AllStories_],
    [0x5DD8C3C8, stories_Stories_],
    [0xB0BDEAC5, StoryView_],
    [0x9083670B, StoryViewPublicForward_],
    [0xBD74CF49, StoryViewPublicRepost_],
    [0x59D78FC5, stories_StoryViewsList_],
    [0xDE9EED1D, stories_StoryViews_],
    [0x22C0F6D5, InputReplyToMessage_],
    [0x5881323A, InputReplyToStory_],
    [0x3FC9053B, ExportedStoryLink_],
    [0x712E27FD, StoriesStealthMode_],
    [0x03D1EA4E, MediaAreaCoordinates_],
    [0xBE82DB9C, MediaAreaVenue_],
    [0xB282217F, InputMediaAreaVenue_],
    [0xDF8B3B22, MediaAreaGeoPoint_],
    [0x14455871, MediaAreaSuggestedReaction_],
    [0x770416AF, MediaAreaChannelPost_],
    [0x2271F2BF, InputMediaAreaChannelPost_],
    [0x9A35E999, PeerStories_],
    [0xCAE68768, stories_PeerStories_],
    [0xFD5E12BD, messages_WebPage_],
    [0x257E962B, PremiumGiftCodeOption_],
    [0x284A1096, payments_CheckedGiftCode_],
    [0x4367DAA0, payments_GiveawayInfo_],
    [0x00CD5570, payments_GiveawayInfoResults_],
    [0xB2539D54, PrepaidGiveaway_],
    [0x2A1C8C71, Boost_],
    [0x86F8613C, premium_BoostsList_],
    [0xC448415C, MyBoost_],
    [0x9AE228E2, premium_MyBoosts_],
    [0x4959427A, premium_BoostsStatus_],
    [0xB826E150, StoryFwdHeader_],
    [0xE7058E7F, PostInteractionCountersMessage_],
    [0x8A480E27, PostInteractionCountersStory_],
    [0x50CD067C, stats_StoryStats_],
    [0x01F2BF4A, PublicForwardMessage_],
    [0xEDF3ADD0, PublicForwardStory_],
    [0x93037E20, stats_PublicForwards_],
    [0xB54B5ACF, PeerColor_],
    [0x26219A58, help_PeerColorSet_],
    [0x767D61EB, help_PeerColorProfileSet_],
    [0xADEC6EBE, help_PeerColorOption_],
    [0x2BA1F5CE, help_PeerColorsNotModified_],
    [0x00F8ED08, help_PeerColors_],
    [0x6090D6D5, StoryReaction_],
    [0xBBAB2643, StoryReactionPublicForward_],
    [0xCFCD0F13, StoryReactionPublicRepost_],
    [0xAA5F789C, stories_StoryReactionsList_],
    [0xBD87CB6C, SavedDialog_],
    [0xF83AE221, messages_SavedDialogs_],
    [0x44BA9DD9, messages_SavedDialogsSlice_],
    [0xC01F6FE8, messages_SavedDialogsNotModified_],
    [0xCB6FF828, SavedReactionTag_],
    [0x889B59EF, messages_SavedReactionTagsNotModified_],
    [0x3259950A, messages_SavedReactionTags_],
    [0x3BB842AC, OutboxReadDate_],
    [0xDC8B44CF, smsjobs_EligibleToJoin_],
    [0x2AEE9191, smsjobs_Status_],
    [0xE6A1EEB8, SmsJob_],
    [0x120B1AB9, BusinessWeeklyOpen_],
    [0x8C92B098, BusinessWorkHours_],
    [0xAC5C1AF7, BusinessLocation_],
    [0x6F8B32AA, InputBusinessRecipients_],
    [0x21108FF7, BusinessRecipients_],
    [0xC9B9E2B9, BusinessAwayMessageScheduleAlways_],
    [0xC3F2F501, BusinessAwayMessageScheduleOutsideWorkHours_],
    [0xCC4D9ECC, BusinessAwayMessageScheduleCustom_],
    [0x0194CB3B, InputBusinessGreetingMessage_],
    [0xE519ABAB, BusinessGreetingMessage_],
    [0x832175E0, InputBusinessAwayMessage_],
    [0xEF156A5C, BusinessAwayMessage_],
    [0xFF9289F5, Timezone_],
    [0x970708CC, help_TimezonesListNotModified_],
    [0x7B74ED71, help_TimezonesList_],
    [0x0697102B, QuickReply_],
    [0x24596D41, InputQuickReplyShortcut_],
    [0x01190CF1, InputQuickReplyShortcutId_],
    [0xC68D6695, messages_QuickReplies_],
    [0x5F91EB5B, messages_QuickRepliesNotModified_],
    [0xE7E999E7, ConnectedBot_],
    [0x17D7F87B, account_ConnectedBots_],
    [0x2AD93719, messages_DialogFilters_],
    // deno-lint-ignore no-explicit-any
]);
